/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:22:45 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 44L;
      longArray0[1] = (-1L);
      longArray0[2] = 4592L;
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertArrayEquals(new long[] {44L, (-1L), 4592L, (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {44L, (-1L), 4592L, (-1L), 0L, 44L, (-1L), 4592L, (-1L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift((Object[]) doubleArray0, 5, 5, (-1748));
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '3');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-59L);
      longArray0[1] = (-59L);
      longArray0[2] = (-59L);
      longArray0[3] = 2320L;
      long[] longArray1 = ArrayUtils.add(longArray0, (-3362L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-59L), (-59L), (-59L), 2320L}, longArray0);
      assertArrayEquals(new long[] {(-59L), (-59L), (-59L), 2320L, (-3362L)}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2320L;
      floatArray1[1] = (float) (-59L);
      floatArray1[2] = (float) (-59L);
      floatArray1[3] = (float) (-59L);
      floatArray1[4] = (float) 1L;
      floatArray1[5] = (float) (-3362L);
      floatArray1[6] = (float) (-59L);
      floatArray1[7] = (float) (-59L);
      floatArray1[8] = (float) 1L;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2320.0F, (-59.0F), (-59.0F), (-59.0F), 1.0F, (-3362.0F), (-59.0F), (-59.0F), 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(longArray1, 0, 0, 0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-59L), (-59L), (-59L), 2320L}, longArray0);
      assertArrayEquals(new long[] {(-59L), (-59L), (-59L), 2320L, (-3362L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-59L);
      objectArray0[1] = (Object) (-3362.0F);
      objectArray0[2] = (Object) (-59.0F);
      objectArray0[3] = (Object) (-59.0F);
      objectArray0[4] = (Object) 2320.0F;
      objectArray0[5] = (Object) (-59.0F);
      objectArray0[6] = (Object) (-59.0F);
      objectArray0[7] = (Object) (-59.0F);
      Double double0 = new Double((-59L));
      assertEquals((-59.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0);
      assertEquals(8, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      intArray0[3] = 2;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2477.052429869);
      doubleArray0[1] = (double) 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-1), (double) (byte) (-1));
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-2477.052429869), 2.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = 682L;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (-414L);
      longArray0[5] = (long) (byte)2;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 2;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2L, 682L, (-1L), 0L, (-414L), 2L, 2L, 2L}, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = ';';
      charArray0[2] = 'M';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'W', ';', 'M'}, charArray0);
      assertArrayEquals(new char[] {'W', ';', 'M'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, false, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray0, booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertEquals(4, booleanArray2.length);
      assertEquals(9, booleanArray0.length);
      assertEquals(13, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, false, true, true}, booleanArray0));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-2505);
      shortArray0[2] = (short) (-2505);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-2505);
      shortArray0[6] = (short)3478;
      shortArray0[7] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)382, (int) (short)2);
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)2, (short) (-2505), (short) (-2505), (short)2, (short)2, (short) (-2505), (short)3478, (short)2, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-69);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1495, 881);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-101), (byte) (-1), (byte)0, (byte) (-128), (byte)89, (byte) (-69)}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte) (-22));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-101), (byte) (-1), (byte)0, (byte) (-128), (byte)89, (byte) (-69)}, byteArray0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray1, (Object) null);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3968;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 3968;
      longArray0[5] = (long) 790;
      longArray0[6] = (long) 3968;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 3968L, 0L, 3968L, 790L, 3968L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 3968L, 0L, 3968L, 790L, 3968L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Character[] characterArray2 = new Character[5];
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray2[0] = character0;
      char char0 = ']';
      Character character1 = Character.valueOf(']');
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      assertNotNull(character1);
      
      characterArray2[1] = character1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) char0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 3968);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {93.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {93.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 790, 0, 3968, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)73;
      shortArray0[2] = (short)4210;
      shortArray0[3] = (short) (-892);
      shortArray0[4] = (short)46;
      shortArray0[5] = (short)2363;
      shortArray0[6] = (short)5054;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-98));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-98), (short)8, (short)73, (short)4210, (short) (-892), (short)46, (short)2363, (short)5054}, shortArray1);
      assertArrayEquals(new short[] {(short)8, (short)73, (short)4210, (short) (-892), (short)46, (short)2363, (short)5054}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-98);
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-98), (byte) (-112), (byte)60, (byte)68, (byte)43}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)46);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-98), (byte) (-112), (byte)60, (byte)68, (byte)43}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-98), (byte) (-112), (byte)60, (byte)68, (byte)43}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte)121);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-98), (byte) (-112), (byte)60, (byte)68, (byte)43}, byteArray0);
      assertArrayEquals(new byte[] {(byte)121, (byte)0, (byte)0, (byte) (-98), (byte) (-112), (byte)60, (byte)68, (byte)43}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) short0, (int) (byte) (-98));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-98);
      doubleArray0[1] = (double) (byte) (-112);
      doubleArray0[2] = (double) (byte)43;
      doubleArray0[3] = 2147.0;
      doubleArray0[4] = (double) (byte) (-112);
      doubleArray0[5] = (double) (byte) (-112);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)43;
      doubleArray0[8] = (double) (byte) (-98);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (byte) (-98), (double) (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -98, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = floatArray0[0];
      Float float1 = new Float((double) 37);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(37.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[3] = float1;
      floatArray0[4] = floatArray0[3];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 1L);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, 37.0F, 37.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((char[]) null, 512, 37);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, 37.0F, 37.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1), 1, (-4341));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)125, (byte)9, (byte)81, (byte)57, (byte)114, (byte)1}, byteArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((byte)1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 40;
      Integer integer1 = new Integer(40);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(40, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)57);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(57, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(40, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2863));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals((-2863), (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-851));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertEquals((-851), (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((byte)1);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (int) 9);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-4849));
      assertEquals("-4849", mutableInt0.toString());
      assertEquals((-4849), (int)mutableInt0.toInteger());
      assertEquals((-4849), (int)mutableInt0.getValue());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals((-4849.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4849.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-4849), mutableInt0.shortValue());
      assertEquals((-4849L), mutableInt0.longValue());
      assertEquals((-4849), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2222);
      boolean boolean0 = ArrayUtils.contains(intArray0, 892);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-2222)}, intArray0);
      
      Double double0 = new Double(206.882248);
      assertEquals(206.882248, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1688);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1688.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 3944.3771722);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'y';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'I');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {']', 'y'}, charArray0);
      assertArrayEquals(new char[] {']', 'y'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-583.91));
      assertEquals((-583.91F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-4849));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-4849.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-583.91F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2177);
      shortArray0[2] = (short)20093;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)9362;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-13950);
      shortArray0[7] = (short)528;
      ArrayUtils.reverse(shortArray0, (int) (short)20093, (int) (short) (-13950));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-2177), (short)20093, (short) (-1), (short)9362, (short) (-1), (short) (-13950), (short)528}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = 'x';
      charArray0[3] = '=';
      charArray0[4] = 'j';
      charArray0[5] = 'a';
      charArray0[6] = '3';
      charArray0[7] = 'q';
      ArrayUtils.swap(charArray0, (-2879), 4, (-1398));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', 'x', '=', 'j', 'a', '3', 'q'}, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-534);
      longArray0[1] = 2147483647L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-534L), 2147483647L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 167.224F;
      floatArray0[1] = (float) (-2147483648L);
      floatArray0[2] = (float) (-2147483648L);
      floatArray0[3] = (float) (-2147483648L);
      floatArray0[4] = (float) (-2147483648L);
      floatArray0[5] = (float) (-2147483648L);
      floatArray0[6] = (float) (-2147483648L);
      floatArray0[7] = (float) (-2147483648L);
      floatArray0[8] = (float) (-2147483648L);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-2147483648L);
      floatArray1[1] = (float) (-2147483648L);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-689);
      ArrayUtils.reverse(longArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-689L)}, longArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-2.14748365E9F));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(9, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {167.224F, (-2.14748365E9F), (-2.14748365E9F), (-2.14748365E9F), (-2.14748365E9F), (-2.14748365E9F), (-2.14748365E9F), (-2.14748365E9F), (-2.14748365E9F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      ArrayUtils.swap(doubleArray0, (-1707), 1, (-3559));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, (-2147483603), (-887), (-1707));
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1194;
      intArray0[3] = (-1707);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1, 1, 1194, (-1707)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      Double[] doubleArray0 = ArrayUtils.insert(1632, (Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long1;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 3098, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3098;
      intArray0[1] = 1632;
      intArray0[2] = 3098;
      intArray0[3] = 3098;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 32);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {3098, 1632, 3098, 3098}, intArray0);
      assertArrayEquals(new int[] {3098, 1632, 3098, 3098}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      floatArray0[3] = 709.7751F;
      floatArray0[4] = 3253.9153F;
      floatArray0[5] = (-455.63F);
      floatArray0[4] = 2790.0F;
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, 1303);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 2790.0F;
      objectArray0[2] = (Object) (-455.63F);
      ArrayUtils.shift(objectArray0, 1303);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-85);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 2, (byte) (-42));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-31), (byte) (-42), (byte) (-118), (byte) (-42), (byte)12, (byte)0, (byte) (-85)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-31), (byte) (-118), (byte) (-42), (byte)12, (byte)0, (byte) (-85)}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-90), 790);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-90);
      floatArray0[1] = (float) (byte) (-90);
      floatArray0[2] = (float) 790;
      floatArray0[3] = (-233.73602F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-233.73602F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-90.0F), (-90.0F), 790.0F, (-233.73602F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-90.0F), (-90.0F), 790.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-90);
      shortArray0[1] = (short) (byte) (-90);
      shortArray0[2] = (short) (byte) (-90);
      shortArray0[3] = (short) (byte) (-90);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-90));
      assertEquals(4, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-90), (short) (-90), (short) (-90), (short) (-90)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      byte byte0 = (byte) (-63);
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      short short0 = (short) (-84);
      Short short1 = new Short((short) (-84));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-84), (short)short1);
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[0];
      short short2 = (short) (-158);
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-158));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte) (-63);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(141, shortArray1, shortArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 141, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1072);
      assertNull(shortArray0);
      
      Character character0 = Character.valueOf('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      Short[] shortArray2 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (short)1072);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[6] = 2941.897244;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)1;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 2941.897244, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[9];
      doubleArray0[4] = (double) (byte) (-116);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte) (-116);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1293, (int) (byte) (-116));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)2, (byte)1, (byte) (-116), (byte)1, (byte) (-116), (byte) (-116)}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-63), (int) (byte) (-63));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1555);
      longArray0[2] = (long) (byte) (-63);
      ArrayUtils.reverse(longArray0, (-351), (-1201));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1555L), (-63L)}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1555);
      intArray0[1] = (int) (byte) (-63);
      intArray0[2] = (-1555);
      ArrayUtils.swap(intArray0, (int) (byte) (-63), (int) (byte) (-63));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1555), (-63), (-1555)}, intArray0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-63), (-1555), (-1555)}, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-63L);
      objectArray0[1] = (Object) (-63L);
      objectArray0[2] = (Object) 1.0;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {(-63.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-63.0), 1.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (int) (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-116), (byte) (-63), (byte) (-63), (byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[9];
      Object[] objectArray0 = new Object[5];
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 2, 2, (double) 2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BRK,";
      stringArray0[1] = "z_0Dc3";
      stringArray0[2] = "W!N%3$39e@zBwY2qz";
      stringArray0[3] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[4] = "Cannot store ";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      ArrayUtils.shift(byteArray0, (-1988));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte) (-88);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, (-88.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      long[] longArray0 = new long[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1L), 48);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, longArray0.length);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      int int0 = ArrayUtils.indexOf(charArray0, 'q');
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      ArrayUtils.shift(booleanArray0, (-1), 2, (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-88);
      intArray0[1] = 1072;
      intArray0[2] = (int) 'q';
      intArray0[3] = (int) 'F';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-88), 1072, 113, 70}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2422.4907F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-817);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-817);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-817.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-817.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {(-817.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-817.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-817);
      intArray0[1] = (-1861);
      intArray0[2] = (-400);
      intArray0[3] = 0;
      intArray0[4] = 242;
      intArray0[5] = 1466;
      intArray0[6] = (-1481);
      int int0 = ArrayUtils.indexOf(intArray0, (-400));
      assertEquals(7, intArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {(-817), (-1861), (-400), 0, 242, 1466, (-1481)}, intArray0);
      
      Float float0 = new Float((-672.19F));
      assertEquals((-672.19F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ArrayUtils.isEquals(float0, float0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 242;
      floatArray0[1] = (float) 242;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1481);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {242.0F, 242.0F, 0.0F, (-1481.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {242.0F, 242.0F, 0.0F, (-1481.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(4, floatArray2.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {242.0F, 242.0F, 0.0F, (-1481.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {242.0F, 242.0F, 0.0F, (-1481.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-2108L);
      longArray0[1] = 209L;
      longArray0[2] = 114L;
      longArray0[3] = (-1521L);
      longArray0[4] = (-758L);
      longArray0[5] = 1826L;
      longArray0[6] = (-478L);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 1107);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1107, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1647);
      shortArray0[2] = (short)0;
      short short0 = (short) (-1911);
      shortArray0[3] = (short) (-1911);
      shortArray0[4] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)738, (-2189));
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1647), (short)0, (short) (-1911), (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'I', (int) (short) (-1647));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 6, 103.502F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-48);
      ArrayUtils.shift(shortArray0, (-356), 72, (-576));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-48)}, shortArray0);
      
      ArrayUtils.swap(intArray0, 15, 0, (int) (short) (-48));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-528), 0}, intArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(72);
      assertEquals(72.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-816.502593534726));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-816.502593534726), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(97.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(97.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(3138.5749);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(3138.5749, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-3308.56690128636));
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((-3308.56690128636), (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-356));
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((-356.0), (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {72.0, (-816.502593534726), 97.0, (-1.0), 3138.5749, (-3308.56690128636), (-356.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 2L;
      longArray0[1] = 1568L;
      longArray0[2] = (long) (-282);
      longArray0[3] = (-1344L);
      longArray0[4] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2L, 1568L, (-282L), (-1344L), 0L}, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-3600);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 70;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, (-3600), 0, 0, 70}, intArray0);
      assertArrayEquals(new int[] {(-3600), 0, 0, 70}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 70;
      floatArray0[2] = (float) 70;
      floatArray0[3] = (float) (-3600);
      floatArray0[4] = (float) 1568L;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (-282L);
      floatArray0[7] = (float) (-3600);
      floatArray0[8] = (float) 1568L;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 8);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 70.0F, 70.0F, (-3600.0F), 1568.0F, 0.0F, (-282.0F), (-3600.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 70.0F, 70.0F, (-3600.0F), 1568.0F, 0.0F, (-282.0F), (-3600.0F), 1568.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[2] = (-2750.7645847171934);
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1355;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1355}, shortArray0);
      
      Boolean boolean0 = new Boolean("java.lang.Character");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      ArrayUtils.swap((int[]) null, (-456), (int) (short)1355, (int) (short)13);
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(220);
      assertEquals(220L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("220", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 69);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3079;
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)436;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)0, (short) (-1), (short)436, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)0, (short) (-1), (short)436, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 495L;
      longArray0[1] = (long) (short)436;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)436;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, 37);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {495L, 436L, 0L, 436L}, longArray1);
      assertArrayEquals(new long[] {495L, 436L, 0L, 436L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      ArrayUtils.shift(byteArray0, (int) (byte)27, (int) (byte)0, 69);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)27, (byte)0, (byte)89, (byte)27, (byte)0, (byte)20}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)27;
      intArray0[2] = (int) (byte)89;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)27;
      intArray0[5] = (int) (byte)89;
      intArray0[7] = (int) (byte)20;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 69, (int) (byte)0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 27, 89, 0, 27, 89, 0, 20}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)27;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1707.804918804929), 2730);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 27.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 27;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 89;
      integerArray0[3] = (Integer) 20;
      integerArray0[4] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(5, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (int)integerArray0[2];
      floatArray0[1] = (float) (byte)20;
      floatArray0[2] = (float) (byte)27;
      floatArray0[3] = (float) 2730;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 2730;
      floatArray0[6] = (float) (byte)20;
      floatArray0[7] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {89.0F, 20.0F, 27.0F, 2730.0F, (-1.0F), 2730.0F, 20.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {89.0F, 20.0F, 27.0F, 2730.0F, (-1.0F), 2730.0F, 20.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1033.0349812932773);
      doubleArray0[2] = (-1538.0);
      doubleArray0[3] = (-270.158913095);
      doubleArray0[4] = (-1.0);
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)457;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)457);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)457}, shortArray0);
      assertArrayEquals(new short[] {(short)457, (short) (-1), (short)457}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift((float[]) null, 2612, 2470, (-363));
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-59);
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1873L));
      assertEquals((-1873L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1873L)}, longArray1);
      assertNotNull(longArray1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte) (-55);
      ArrayUtils.swap((Object[]) longArray0, 2761, 1879);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-59);
      shortArray0[1] = (short) (byte) (-55);
      shortArray0[2] = (short) (byte) (-55);
      shortArray0[3] = (short) (byte) (-59);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (byte) (-55);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals(6, shortArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short) (-59), (short) (-55), (short) (-55), (short) (-59), (short)1, (short) (-55)}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-55);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-55), (double) (short) (-55));
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-55.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.8994145F;
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1.8994145F;
      objectArray0[1] = (Object) 1.8994145F;
      objectArray0[2] = (Object) '7';
      objectArray0[3] = (Object) 1.8994145F;
      objectArray0[4] = (Object) 1.8994145F;
      objectArray0[5] = (Object) '7';
      objectArray0[6] = (Object) 1.8994145F;
      objectArray0[7] = (Object) 1.8994145F;
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(9, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, 0, (-1266));
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '7';
      charArray1[1] = '7';
      charArray1[2] = '7';
      charArray1[3] = '7';
      char[] charArray2 = ArrayUtils.add(charArray1, 0, '7');
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray2.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7'}, charArray2);
      assertArrayEquals(new char[] {'7', '7', '7', '7'}, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      int int0 = 0;
      float float0 = 9.0F;
      float float1 = 1065.6F;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 790;
      floatArray0[1] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(790, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 790, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-35.98711969));
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4706);
      shortArray0[1] = (short)3114;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)237;
      short short0 = (short) (-528);
      shortArray0[4] = (short) (-528);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)14);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4706), (short)3114, (short)0, (short)237, (short) (-528)}, shortArray0);
      assertArrayEquals(new short[] {(short)14, (short) (-4706), (short)3114, (short)0, (short)237, (short) (-528)}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)14;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 2207;
      floatArray0[3] = (float) (short) (-528);
      floatArray0[4] = (float) 2207;
      floatArray0[5] = 9.0F;
      floatArray0[6] = (float) (short)237;
      floatArray0[7] = (float) (short)14;
      floatArray0[8] = 1065.6F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2207, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2207, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (-80L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = 2772L;
      ArrayUtils.swap(longArray0, (-1), (-1), 1928);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-80L), (-1L), (-1L), 2772L}, longArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = '2';
      charArray0[2] = 'f';
      charArray0[3] = 'E';
      charArray0[4] = '@';
      charArray0[5] = ';';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'b', '2', 'f', 'E', '@', ';'}, charArray1);
      assertArrayEquals(new char[] {'b', '2', 'f', 'E', '@', ';'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-91);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-91)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)44;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)44}, shortArray0);
      assertArrayEquals(new short[] {(short)44}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (byte)44, (-2055));
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)91, (int) (byte)44);
      assertEquals(5, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)44, (byte)44, (byte)44}, byteArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-63), (int) (byte) (-63));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1555);
      longArray0[2] = (long) 2;
      ArrayUtils.reverse(longArray0, (-351), (-1201));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1555L), 2L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1555);
      intArray0[1] = (int) (byte) (-63);
      intArray0[2] = (-1555);
      ArrayUtils.swap(intArray0, 4, 4);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1555), (-63), (-1555)}, intArray0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-63), (-1555), (-1555)}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt(4);
      assertEquals((short)4, mutableInt0.shortValue());
      assertEquals(4.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(4, (int)mutableInt0.getValue());
      assertEquals((byte)4, mutableInt0.byteValue());
      assertEquals("4", mutableInt0.toString());
      assertEquals(4, (int)mutableInt0.toInteger());
      assertEquals(4.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(4L, mutableInt0.longValue());
      assertEquals(4, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-63);
      floatArray0[1] = (float) (-1201);
      floatArray0[2] = (float) (-1555);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1201), (-351));
      assertEquals(3, floatArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {(-63.0F), (-1201.0F), (-1555.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      Character character0 = Character.valueOf(',');
      assertEquals(',', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-63);
      ArrayUtils.shift(shortArray0, (int) (short) (-48), 0, (-2619));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-63)}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2619);
      intArray0[1] = (int) (short) (-63);
      intArray0[2] = (int) ',';
      intArray0[3] = (-576);
      ArrayUtils.swap(intArray0, 49, Integer.MAX_VALUE, (-2888));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2619), (-63), 44, (-576)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 52, 44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      MutableInt mutableInt0 = new MutableInt(9);
      assertEquals(9.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(9, mutableInt0.intValue());
      assertEquals(9.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("9", mutableInt0.toString());
      assertEquals(9, (int)mutableInt0.getValue());
      assertEquals(9, (int)mutableInt0.toInteger());
      assertEquals((byte)9, mutableInt0.byteValue());
      assertEquals((short)9, mutableInt0.shortValue());
      assertEquals(9L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(220);
      assertEquals(220L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("220", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 69);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3079;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)3079, (-354));
      assertEquals(6, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)3079, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)3079;
      longArray0[1] = (long) 69;
      longArray0[3] = (long) 9;
      longArray0[4] = (long) 69;
      longArray0[5] = (long) (short) (-215);
      ArrayUtils.reverse(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-215L), 69L, 9L, 0L, 69L, 3079L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      Double double0 = new Double((-762.43895835342));
      assertEquals((-762.43895835342), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)125;
      shortArray0[1] = (short)181;
      shortArray0[2] = (short) (-886);
      shortArray0[3] = (short)181;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)125, (short)181, (short) (-886), (short)181, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)125, (short)181, (short) (-886), (short)181, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (-1412), (int) (short)181);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray2);
      assertSame(longArray2, longArray1);
      assertSame(longArray1, longArray2);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 100.0;
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      long[] longArray2 = ArrayUtils.removeElement((long[]) null, (-1678L));
      assertNull(longArray2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = '+';
      charArray0[4] = 'Y';
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 167.224F;
      floatArray0[1] = (float) (-2147483648L);
      floatArray0[2] = (float) (-2147483648L);
      floatArray0[3] = (float) (-2147483648L);
      floatArray0[4] = (float) (-2147483648L);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '>');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '>';
      longArray0[1] = (long) '7';
      longArray0[2] = (-2147483648L);
      longArray0[3] = (long) '>';
      longArray0[4] = (-2147483648L);
      longArray0[5] = (-900L);
      longArray0[6] = (-2147483648L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-900L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {62L, 55L, (-2147483648L), 62L, (-2147483648L), (-2147483648L)}, longArray1);
      assertArrayEquals(new long[] {62L, 55L, (-2147483648L), 62L, (-2147483648L), (-900L), (-2147483648L)}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1033.0349812932773);
      doubleArray0[2] = (-1538.0);
      doubleArray0[3] = (-270.158913095);
      doubleArray0[4] = (-1.0);
      ArrayUtils.shift(intArray1, (-1412), (-2145300867), 2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '7');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-2145300867);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-2145300867));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 2L}, longArray1);
      assertArrayEquals(new long[] {(-2145300867L), 2L, 2L, 2L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'F', 0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(bitSet0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1373L);
      longArray0[1] = (-378L);
      longArray0[2] = 670L;
      longArray0[3] = 0L;
      longArray0[4] = 1766L;
      longArray0[5] = (-5L);
      longArray0[6] = 44L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1766L);
      assertEquals(7, longArray0.length);
      assertEquals("{4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {(-1373L), (-378L), 670L, 0L, 1766L, (-5L), 44L}, longArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2147483646);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-2147483646)}, intArray0);
      assertArrayEquals(new int[] {(-2147483646)}, intArray1);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (double) 1766L, (-2147483646), 3746.2);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 3156.4949F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3156.4949F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1.0);
      assertNull(doubleArray0);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(booleanArray1, 2, 2, 2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)9;
      shortArray0[1] = (short) (byte)9;
      shortArray0[2] = (short) (byte)9;
      shortArray0[3] = (short) (byte)9;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)9, (int) (short)9);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)9, (short)9}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.', 1258);
      assertEquals(2, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      assertNotNull(bitSet0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-1326.024));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), 1.79F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-982.83F);
      floatArray0[1] = (-982.83F);
      ArrayUtils.shift((char[]) null, (-5065), (-528), (-447));
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(13, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 13;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {13, 13}, intArray0);
      assertArrayEquals(new int[] {13, 13, 13, 13}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 91.0;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = 91.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-2145215976), 1917.67);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {91.0, 13.0, 13.0, 13.0, 13.0, 91.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(6, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1), (long) (-2145215976));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 1688;
      ArrayUtils.swap(doubleArray0, (-1707), (-1995), (int) (byte) (-55));
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-693.0), (-693.0), 1688.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) longArray1, 1688, (-2222), (-3660));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-55);
      shortArray0[1] = (short) (-1639);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-55));
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-55), (short) (-1639)}, shortArray0);
      
      ArrayUtils.shift((Object[]) longArray1, (int) (byte) (-55));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.reverse(longArray0, 1, 2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1688.0, (int) (short) (-1639), (-1005.996719));
      assertEquals(10, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-693.0), (-693.0), 1688.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-910), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(6, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true, true}, booleanArray0));
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (byte)1;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (byte)1;
      floatArray0[5] = (float) (byte)1;
      floatArray0[6] = (float) (byte)1;
      floatArray0[7] = (float) Integer.MAX_VALUE;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 1.0F, (-1.0F), 1.0F, 1.0F, 1.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 1.0F, (-1.0F), 1.0F, 1.0F, 1.0F, 2.14748365E9F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 1.0F, (-1.0F), 1.0F, 1.0F, 1.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, 0, 2853);
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      ArrayUtils.shift(doubleArray0, 2139315143, 2139315143, 353);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3154.4479046, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean2 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)114);
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((byte)114);
      assertEquals((short)114, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertEquals(7, shortArray0.length);
      assertEquals((short)114, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1309);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)1309, (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-902));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-902), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      short short4 = (short)97;
      Short short5 = new Short((short)97);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short4));
      assertEquals((short)97, (short)short5);
      assertNotNull(short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short(short4);
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertEquals((short)97, (short)short6);
      assertNotNull(short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short((short) (-902));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertEquals((short) (-902), (short)short7);
      assertNotNull(short7);
      
      shortArray0[6] = short7;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short4);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)114, (short)114, (short)1309, (short) (-902), (short)97, (short)97, (short) (-902)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      int int0 = 37;
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = floatArray0[0];
      Float float1 = new Float((double) 37);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(37.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[3] = float1;
      floatArray0[4] = floatArray0[3];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 1L);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, 37.0F, 37.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      char char0 = 'Q';
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'Q', 88);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      byte byte0 = (byte) (-113);
      Byte byte1 = new Byte((byte) (-113));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-113), (byte)byte1);
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = floatArray0[0];
      Float float1 = new Float((double) 37);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(37.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[3] = float1;
      floatArray0[4] = floatArray0[3];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 1L);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, 37.0F, 37.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 3156.4949F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3156.4949F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1.0);
      assertNull(doubleArray0);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(booleanArray1, 2, 2, 2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)9;
      shortArray0[1] = (short) (byte)9;
      shortArray0[2] = (short) (byte)9;
      shortArray0[3] = (short) (byte)9;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)9, (int) (short)9);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)9, (short)9}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'e';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.', 1258);
      assertEquals(2, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'I', 'e'}, charArray0);
      assertNotNull(bitSet0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-1326.024));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), 1.79F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      byte byte0 = (byte)9;
      double[] doubleArray0 = null;
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 3156.4949F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3156.4949F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, 1.0);
      assertNull(doubleArray1);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)9;
      shortArray0[1] = (short) (byte)9;
      shortArray0[2] = (short) (byte)9;
      shortArray0[3] = (short) (byte)9;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)9, (int) (short)9);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)9, (short)9}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.', 1258);
      assertEquals(2, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      assertNotNull(bitSet0);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, (-1326.024));
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), 1.79F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-63), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3151;
      shortArray0[1] = (short)27232;
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '\\';
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertArrayEquals(new short[] {(short)3151, (short)27232, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)3151);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(9, shortArray0.length);
      assertEquals(18, shortArray1.length);
      assertEquals(9, int0);
      assertArrayEquals(new short[] {(short)3151, (short)27232, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray1 = new boolean[0];
      ArrayUtils.shift(booleanArray1, 3931, 1849, 3);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Short[] shortArray2 = new Short[9];
      shortArray2[0] = (Short) (short)27232;
      shortArray2[1] = (Short) (short)27232;
      shortArray2[2] = (Short) (short)3151;
      shortArray2[3] = (Short) (short)3151;
      shortArray2[4] = (Short) (short)27232;
      shortArray2[5] = (Short) (short)3151;
      shortArray2[6] = (Short) (short)27232;
      shortArray2[7] = (Short) (short)27232;
      shortArray2[8] = (Short) (short)27232;
      Short[] shortArray3 = ArrayUtils.toArray(shortArray2);
      assertEquals(9, shortArray3.length);
      assertEquals(9, shortArray2.length);
      assertNotNull(shortArray3);
      assertSame(shortArray3, shortArray2);
      assertSame(shortArray2, shortArray3);
      
      boolean[] booleanArray2 = ArrayUtils.add((boolean[]) null, false);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, (int) (short)3151);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      int int0 = (-1005);
      Integer[] integerArray0 = ArrayUtils.subarray((Integer[]) null, (-1005), (-1005));
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte) (-122);
      int[] intArray0 = new int[8];
      intArray0[0] = (-4095);
      intArray0[1] = (int) (byte) (-59);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (-1005);
      intArray0[4] = (int) (byte) (-49);
      intArray0[5] = (int) (byte) (-18);
      int int1 = Integer.MAX_VALUE;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      ArrayUtils.shift(byteArray0, (int) (byte)27, (int) (byte)0, 69);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)27, (byte)0, (byte)89, (byte)0, (byte)0, (byte)20}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)89;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)89;
      intArray0[7] = (int) (byte)20;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 69, (int) (byte)0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 89, 0, 0, 89, 0, 20}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)27;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1707.804918804929), 2730);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 27.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'h';
      charArray0[2] = '_';
      charArray0[3] = 'O';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'O');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'f', 'h', '_', 'O'}, charArray0);
      assertArrayEquals(new char[] {'f', 'h', '_'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = '!';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (-924));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'!', '!', '!', '!', '!', '!'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '!', 2149);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'!', '!', '!', '!', '!', '!'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-2028);
      shortArray0[2] = (short)2385;
      shortArray0[3] = (short)1496;
      shortArray0[4] = (short)1169;
      shortArray0[5] = (short)1496;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)5, (short) (-2028), (short)2385, (short)1496, (short)1169, (short)1496}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 3636;
      floatArray0[2] = (float) 3636;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 3636.0F, 3636.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3636, (-1639));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 790, 0, 3968, 3636, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2;
      floatArray1[1] = (float) 3968;
      floatArray1[2] = (float) 790;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (float) 790;
      floatArray1[5] = (float) 790;
      floatArray1[6] = (float) 0;
      floatArray1[7] = (float) 2;
      floatArray1[8] = (-2222.0F);
      int int0 = ArrayUtils.indexOf(floatArray1, 3968.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {2.0F, 3968.0F, 790.0F, 0.0F, 790.0F, 790.0F, 0.0F, 2.0F, (-2222.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Double double0 = new Double((-762.43895835342));
      assertEquals((-762.43895835342), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)125;
      shortArray0[2] = (short) (-886);
      shortArray0[3] = (short) (-2822);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)125, (short) (-886), (short) (-2822), (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)125, (short) (-886), (short) (-2822), (short)0, (short)0}, shortArray0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)8);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)8, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-94));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-94), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)6);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)6, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short)536;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)536, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)536, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '}';
      charArray0[0] = '}';
      char char1 = 'v';
      charArray0[1] = 'v';
      char[] charArray1 = ArrayUtils.add(charArray0, '}');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'}', 'v'}, charArray0);
      assertArrayEquals(new char[] {'}', 'v', '}'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double double0 = 2100.671;
      Float float0 = new Float(2100.671);
      assertEquals(2100.671F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = (-397);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'b', (-397));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(2, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'}', 'v'}, charArray0);
      assertNotNull(bitSet0);
      assertNotSame(charArray0, charArray1);
      
      // Undeclared exception!
      try { 
        bitSet0.previousSetBit((-397));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < -1: -397
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = '$';
      charArray0[2] = '<';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {',', '$', '<'}, charArray0);
      assertArrayEquals(new char[] {',', '$', '<', ',', '$', '<'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)68;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)69, (byte) (-48), (byte) (-63), (byte) (-1), (byte) (-1), (byte) (-18), (byte)68}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)68;
      intArray0[1] = (int) (byte)68;
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-18);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean[] booleanArray0 = new boolean[8];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-236);
      floatArray0[1] = (float) (-236);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-236.0F);
      doubleArray0[1] = (double) (-236.0F);
      doubleArray0[2] = (double) (byte) (-5);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-236.0), 1377, 0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-236.0), (-236.0), (-5.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      ArrayUtils.swap(booleanArray1, 17, 3096, (-236));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray0, 2147);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      
      Boolean[] booleanArray3 = new Boolean[0];
      Boolean[] booleanArray4 = ArrayUtils.nullToEmpty(booleanArray3);
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertEquals(0, booleanArray4.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray4);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray3, booleanArray4);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-1);
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("4'mAQWxN9g|&u");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf((String) null);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      ArrayUtils.shift(charArray0, (-479), (-479), (-677));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'R', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[18];
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '{';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'c', '{'}, charArray0);
      assertArrayEquals(new char[] {'c', '{', 'c', '{'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-33);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)3;
      ArrayUtils.shift(byteArray0, (int) (byte) (-8), 1126, (-2133));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)68, (byte)3, (byte)0, (byte)104, (byte) (-33), (byte)0, (byte)2}, byteArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((byte)104);
      assertEquals(104, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)2);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(2, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-4438));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-4438), (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1865));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals((-1865), (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1491);
      intArray0[1] = (-2157);
      intArray0[2] = (-1491);
      intArray0[3] = (-1491);
      int int0 = ArrayUtils.indexOf(intArray0, (-1491), (-2157));
      assertEquals(4, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1491), (-2157), (-1491), (-1491)}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1491);
      floatArray0[1] = (float) (-2157);
      floatArray0[2] = (float) (-1491);
      floatArray0[3] = (float) (-1491);
      floatArray0[4] = (float) (-2157);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1491.0F), (-2157.0F), (-1491.0F), (-1491.0F), (-2157.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-234));
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 2}, intArray0);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-234);
      longArray0[4] = (long) int0;
      longArray0[5] = (long) int0;
      longArray0[6] = (long) int0;
      longArray0[7] = (long) int0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertArrayEquals(new long[] {2L, 2L, 2L, (-234L), 2L, 2L, 2L, 2L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift((Object[]) integerArray0, 5, Integer.MAX_VALUE, int0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.7556038);
      doubleArray0[2] = 0.0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = '.';
      charArray0[4] = '.';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Q', 0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'Q', '.', '.'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) 'Q';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertArrayEquals(new char[] {'Q', '\u0000', 'Q', '.', '.'}, charArray0);
      assertNotNull(characterArray0);
      
      Byte byte0 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) characterArray0, (Object) byte0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Byte
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '{';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'c', '{'}, charArray0);
      assertArrayEquals(new char[] {'c', '{', 'c', '{'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'c', '{'}, charArray0);
      assertArrayEquals(new char[] {'c', '{', 'c', '{'}, charArray1);
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '{';
      objectArray0[1] = (Object) '{';
      objectArray0[2] = (Object) 'c';
      Object[] objectArray1 = ArrayUtils.add(objectArray0, (Object) null);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(3, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.7556037622919062);
      doubleArray0[2] = 0.0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = '.';
      charArray0[4] = '.';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Q', 0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'Q', '\u0000', 'Q', '.', '.'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) 'Q';
      long[] longArray0 = new long[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertArrayEquals(new char[] {'Q', '\u0000', 'Q', '.', '.'}, charArray0);
      assertNotNull(characterArray0);
      
      Byte byte0 = new Byte((byte) (-113));
      assertEquals((byte) (-113), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) characterArray0, (Object) byte0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Byte
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-48));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-48)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-48);
      doubleArray0[1] = (-2182.7159099205);
      doubleArray0[2] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-48.0), (-2182.7159099205), (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-48), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Float float0 = new Float(943.936485);
      assertEquals(943.93646F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-2900), (-1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-48);
      shortArray0[1] = (short) (byte) (-48);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "java.lang.Boolean");
      assertEquals(5, stringArray0.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(stringArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) floatArray0[0]);
      assertEquals(5, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 98;
      floatArray0[1] = (float) 1688;
      floatArray0[2] = (float) (-2222);
      floatArray0[3] = (float) 98;
      ArrayUtils.swap(floatArray0, 98, 98, 1688);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {98.0F, 1688.0F, (-2222.0F), 98.0F}, floatArray0, 0.01F);
      
      Short short0 = new Short((short)4041);
      assertEquals((short)4041, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)4041);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)4041, (short)short1);
      assertNotNull(short1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'C';
      charArray0[2] = 'l';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'C';
      charArray1[1] = 'R';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'R', 'C', 'l'}, charArray0);
      assertArrayEquals(new char[] {'C', 'R'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte byte2 = ArrayUtils.get(byteArray0, 2223, byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals(1, byteArray0.length);
      assertEquals((byte) (-25), (byte)byte2);
      assertNotNull(byte2);
      
      Short short2 = new Short((short)8192);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)8192, (short)short2);
      assertNotNull(short2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte2, (int) (short) (-801));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals(1, byteArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 120;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {120, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {120, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3869L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte) (-44));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[14];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-44);
      Character character0 = Character.valueOf(' ');
      assertEquals(' ', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(2108.9);
      assertEquals(2108.9, (double)double0, 0.01);
      assertNotNull(double0);
      
      Character[] characterArray0 = ArrayUtils.removeElement((Character[]) null, (Object) double0);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\"');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertArrayEquals(new char[] {'='}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3192.4688394);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3192.4688394, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3192.4688394, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3192.4688394, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)61;
      Byte byte1 = new Byte((byte)61);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)61);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)61, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)61);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)61, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte)61, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertEquals((byte)61, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = ArrayUtils.get(byteArray0, (-1334), byte6);
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertEquals(6, byteArray0.length);
      assertEquals((byte)61, (byte)byte7);
      assertNotNull(byte7);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) byte7, (int) byte0);
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertEquals(6, byteArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte)61;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      byteArray1[5] = byte0;
      byteArray1[6] = byte0;
      int[] intArray0 = new int[0];
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(7, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61}, byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      Byte byte2 = new Byte((byte)65);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)65, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = ArrayUtils.get(byteArray0, (int) byte0, byte2);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals(7, byteArray0.length);
      assertEquals((byte)65, (byte)byte3);
      assertNotNull(byte3);
      
      Short short0 = new Short((short)1199);
      assertEquals((short)1199, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) short0, (int) byte0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-63), (byte) (-63), (byte) (-63), (byte) (-63), (byte) (-63), (byte) (-63)}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-63);
      shortArray0[1] = (short) (-1725);
      shortArray0[2] = (short) (byte) (-63);
      shortArray0[3] = (short) (byte) (-63);
      shortArray0[4] = (short) (byte) (-63);
      shortArray0[5] = (short) (byte) (-63);
      shortArray0[6] = (short) (byte) (-63);
      shortArray0[7] = (short) (-1725);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3968, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1225.3728351407));
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'C';
      charArray0[2] = '!';
      charArray0[3] = '9';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3660), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3660, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = 1261.0119939200156;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), 0.0, (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[4];
      ArrayUtils.reverse(longArray0, (-693), (-689));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-689);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-689));
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-689.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Character[]) null, 1);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 7, (-689), (double) (-689));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-63.0), 0.0, (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.swap((char[]) null, (-2849), 7, 5);
      ArrayUtils.shift((float[]) null, (-1995));
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(220);
      assertEquals(220L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("220", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 69);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[3] = (float) 220;
      floatArray0[4] = (float) (short)436;
      floatArray0[5] = (float) (short)436;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 220.0F, 436.0F, 436.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)65;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 220;
      doubleArray0[3] = (double) 220.0F;
      doubleArray0[4] = (-3924.991);
      doubleArray0[5] = (double) 220.0F;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 1.5, 220.0, 220.0, (-3924.991), 220.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {65.0, 1.5, 220.0, 220.0, (-3924.991), 220.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)436;
      longArray0[1] = (long) 69;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)436;
      longArray0[4] = (-3195L);
      longArray0[5] = (long) (short)436;
      longArray0[6] = (long) (short)436;
      longArray0[7] = (-1394L);
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertArrayEquals(new long[] {436L, 69L, 0L, 436L, (-3195L), 436L, 436L, (-1394L), 0L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '=';
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((-2146142091));
      assertEquals((-2146142091), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-2146142091));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-2146142091), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-2146142091));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-2146142091), (int)integer3);
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer2;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer4 = new Integer((-2146142091));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertEquals((-2146142091), (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      integerArray0[4] = integer2;
      integerArray0[5] = integer2;
      integerArray0[6] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[6]);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new int[] {(-2146142091), (-2146142091), (-2146142091), (-2146142091), (-2146142091), (-2146142091), Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M'}, charArray0);
      assertNotNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Double double0 = new Double((-528.0F));
      assertEquals((-528.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean2 = ArrayUtils.isSameType(boolean1, double0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1472L);
      longArray0[2] = (-381L);
      longArray0[3] = (-2253L);
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1472L));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray1.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertTrue(boolean2);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) (byte)3;
      intArray0[4] = (int) (byte)3;
      intArray0[5] = (int) (byte)3;
      intArray0[6] = (int) (byte)3;
      intArray0[7] = (int) (byte)3;
      intArray0[8] = (int) (byte)3;
      boolean boolean3 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(9, intArray0.length);
      assertTrue(boolean3);
      assertArrayEquals(new int[] {3, 3, 3, 3, 3, 3, 3, 3, 3}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 100, 448);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 448;
      longArray0[2] = (long) 448;
      longArray0[3] = (long) 100;
      longArray0[4] = (long) 448;
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)22;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-62));
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)74, (byte)99, (byte)113, (byte) (-1), (byte)22}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {100L, 448L, 448L, 100L, 448L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      byte byte0 = (byte) (-63);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (-2182.7159099205);
      doubleArray0[2] = (double) (byte) (-63);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-63.0), (-2182.7159099205), (-63.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-63), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short short0 = (short)1;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3163;
      shortArray0[1] = (short)27232;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)3163;
      longArray0[1] = (long) (short)1;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-3968), (int) (short)1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {3163L, 1L}, longArray0);
      assertArrayEquals(new long[] {3163L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-63.0), (-2182.7159099205), (-63.0)}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) 3163L);
      assertEquals(3163.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(145.25508152222892);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(145.25508F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (short)27232);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(27232.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(495.7F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(495.7F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {3163.0F, 145.25508F, 27232.0F, 495.7F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert((int) 1, (Integer[]) null, integerArray0);
      assertEquals(0, integerArray0.length);
      assertNull(integerArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertArrayEquals(new float[] {3163.0F, 145.25508F, 27232.0F, 495.7F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3163.0F, 145.25508F, 27232.0F, 495.7F, 3163.0F, 145.25508F, 27232.0F, 495.7F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray2, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) 1L);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(143.22902F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(143.22902F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 143.22902F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Vc";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(stringArray0, comparator0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BRK,";
      stringArray0[1] = "z_0Dc3";
      stringArray0[2] = "W!N%3$39e@zBwY2qz";
      stringArray0[3] = "W!N%3$39e@zBwY2qz";
      stringArray0[4] = "Cannot store ";
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1525);
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1525.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1525.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1525.0), 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Long long0 = new Long((-302L));
      assertEquals((-302L), (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte)48;
      intArray0[2] = 1;
      intArray0[3] = (-1525);
      intArray0[4] = (-1525);
      intArray0[5] = (int) (byte)48;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3017;
      intArray1[1] = (-1468);
      intArray1[2] = 1;
      intArray1[3] = (-1525);
      intArray1[4] = 1;
      intArray1[5] = (-1525);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {3017, (-1468), 1, (-1525), 1, (-1525)}, intArray1);
      assertArrayEquals(new int[] {1, 48, 1, (-1525), (-1525), 48}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      Integer integer0 = new Integer(2543);
      assertEquals(2543, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2543);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2543, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2543);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(2543, (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Integer[] integerArray0 = new Integer[4];
      int int0 = Integer.MAX_VALUE;
      char char0 = '.';
      char char1 = 'J';
      char[] charArray0 = null;
      int int1 = ArrayUtils.lastIndexOf((char[]) null, '?', 46);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-1472.0F);
      floatArray0[2] = (float) '.';
      floatArray0[3] = (float) '.';
      boolean boolean0 = ArrayUtils.contains((char[]) null, '?');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1472L);
      longArray0[2] = (-381L);
      longArray0[3] = (-2253L);
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (-1472L));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray2.length);
      assertArrayEquals(new long[] {0L, (-1472L), (-381L), (-2253L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1472L), 0L, (-1472L), (-381L), (-2253L), 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1, "f(04u8[z`a$+d");
      assertEquals(0, longArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2253L);
      floatArray0[1] = (float) (-1472L);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) (byte)3;
      intArray0[4] = (int) (byte)3;
      intArray0[5] = (int) (byte)3;
      intArray0[6] = 1979;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-867), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3, 3, 3, 3, 3, 3, 1979}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      char[] charArray1 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[6];
      longArray0[0] = 419L;
      longArray0[1] = (long) (byte)100;
      longArray0[2] = (long) (byte)90;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)100;
      longArray0[5] = (long) (byte)100;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)90);
      assertEquals(6, longArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new long[] {419L, 100L, 90L, 2L, 100L, 100L}, longArray0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'u';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '_', 340);
      assertFalse(int1 == int0);
      assertEquals(17, charArray0.length);
      assertEquals((-1), int1);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long[] longArray1 = new Long[0];
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      ArrayUtils.shift((Object[]) booleanArray1, 1136, (-1), 2);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1878L));
      assertEquals((-1878L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1878L)}, longArray1);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 70.91597F;
      floatArray0[1] = (float) (long)longArray0[0];
      floatArray0[2] = 70.0F;
      floatArray0[3] = (float) (byte) (-55);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-55), 2277);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {70.91597F, (-1878.0F), 70.0F, (-55.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1263));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1263);
      doubleArray0[1] = (double) 70.91597F;
      doubleArray0[2] = (double) (-1878L);
      doubleArray0[3] = (double) 70.91597F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1263.0), 70.91596984863281, (-1878.0), 70.91596984863281}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1263.0), 70.91596984863281, (-1878.0), 70.91596984863281}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      Integer integer0 = Integer.getInteger("iaLMy", (-1800));
      assertEquals((-1800), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-4674L), (-1800));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (-1), (double) (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'X';
      intArray0[2] = (int) 'X';
      intArray0[3] = (-1);
      intArray0[4] = (-1800);
      intArray0[5] = (int) 'X';
      intArray0[6] = 65536;
      intArray0[7] = (int) 'X';
      ArrayUtils.shift(intArray0, (-3140), (-2145300867), 88);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), 88, 88, (-1), (-1800), 88, 65536, 88}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1, "java.lang.Boolean");
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, stringArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2222);
      floatArray0[1] = (float) (byte) (-55);
      floatArray0[2] = (float) (-2222);
      floatArray0[3] = (float) (-693);
      floatArray0[4] = (float) (byte) (-55);
      floatArray0[5] = (float) (-693);
      floatArray0[6] = (float) (byte) (-55);
      floatArray0[7] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-930.0F));
      assertEquals(8, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {(-2222.0F), (-55.0F), (-2222.0F), (-693.0F), (-55.0F), (-693.0F), (-55.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1225.3728351407));
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-210.247095));
      assertEquals((-1), int0);
      
      Double[] doubleArray1 = ArrayUtils.removeElements((Double[]) null, (Double[]) null);
      assertNull(doubleArray1);
      
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)99;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)15, (int) (byte)15);
      assertEquals(2, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)63, (byte)99}, byteArray0);
      assertNotNull(bitSet0);
      
      bitSet0.set(4, (int) (byte)99, true);
      assertEquals(2, byteArray0.length);
      assertEquals(99, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(128, bitSet0.size());
      assertEquals(95, bitSet0.cardinality());
      assertEquals("{4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)63, (byte)99}, byteArray0);
      
      Long long0 = new Long((byte)99);
      assertEquals(99L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-59);
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1873L));
      assertEquals((-1873L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1873L)}, longArray1);
      assertNotNull(longArray1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte) (-55);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-59), (byte) (-55), (byte) (-55)}, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 70.91597F;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1948.003, 6);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) (byte) (-55));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 70.91597F;
      doubleArray0[1] = (double) 306;
      int int1 = ArrayUtils.indexOf(doubleArray0, 3.0);
      assertTrue(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {70.91596984863281, 306.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-2690);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-139));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-2690), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-139), (short)0, (short)0, (short) (-2690), (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) '=';
      longArray0[2] = (long) '=';
      longArray0[3] = (long) (-24);
      longArray0[4] = (long) (short) (-2690);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) '=';
      longArray0[7] = 1337L;
      longArray0[8] = (long) (short)0;
      int int0 = ArrayUtils.indexOf(longArray0, 61L, 7);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 61L, 61L, (-24L), (-2690L), 0L, 61L, 1337L, 0L}, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) '=';
      floatArray0[3] = (float) (-24);
      floatArray0[4] = (float) (short) (-2690);
      floatArray0[5] = (float) (-2690L);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1029.7379F, 8192);
      assertTrue(int1 == int0);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 61.0F, (-24.0F), (-2690.0F), (-2690.0F)}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.remove(longArray0, 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 61L, 61L, (-24L), (-2690L), 0L, 61L, 1337L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 61L, (-24L), (-2690L), 0L, 61L, 1337L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-2690.0F);
      objectArray0[1] = (Object) (-2690.0F);
      objectArray0[2] = (Object) 0.0F;
      Integer integer0 = new Integer((short) (-2690));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((-2690), (int)integer0);
      assertNotNull(integer0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-528.0);
      doubleArray0[1] = (-531.36677);
      doubleArray0[2] = (-602.103);
      doubleArray0[3] = 1768.74;
      doubleArray0[4] = 2710.884440791183;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 4272.698998203179);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-528.0), (-531.36677), (-602.103), 1768.74, 2710.884440791183}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)121;
      ArrayUtils.swap(byteArray0, 1, (-2120640102), (-29));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-29), (byte)13, (byte)70, (byte) (-10), (byte)45, (byte)121}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      char char0 = 'S';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)97;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) 'b');
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)10}, byteArray0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[3] = (Character) 'S';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)97;
      doubleArray0[1] = (double) 'S';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1677.74, (int) char0, 97.0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {97.0, 83.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'b';
      charArray0[2] = 'S';
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray1.length);
      assertArrayEquals(new char[] {'S', 'b', 'S'}, charArray0);
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'S';
      intArray0[1] = (-2367);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {83, (-2367)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("3U23");
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 575;
      floatArray0[1] = (float) 575;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 'A';
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 'A';
      floatArray0[6] = (float) 1L;
      floatArray0[7] = (float) 575;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 575.0F, 575);
      assertEquals(8, floatArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new float[] {575.0F, 575.0F, 1.0F, 65.0F, 1.0F, 65.0F, 1.0F, 575.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-528);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      ArrayUtils.reverse((boolean[]) null, 13, 208);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 0;
      ArrayUtils.swap(longArray0, 100, 0, 448);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {100L, 0L}, longArray0);
      
      int[] intArray1 = ArrayUtils.add((int[]) null, (-61));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-61)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)653;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)8;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)653, (short) (-1), (short)8}, shortArray1);
      assertArrayEquals(new short[] {(short)653, (short) (-1), (short)8}, shortArray0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3636;
      floatArray0[1] = (float) 3968;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {3636.0F, 3968.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 790;
      int int0 = ArrayUtils.lastIndexOf(floatArray2, 790.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(1, floatArray2.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {790.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-2822);
      int int0 = ArrayUtils.indexOf(doubleArray0, 42.186578233);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-2822.0)}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-2822.0);
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-2822.0);
      Double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)99, (int) (short) (-1));
      assertEquals(2, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)15, (byte)15}, byteArray0);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 1L;
      longArray0[0] = 1L;
      long long1 = (-1L);
      longArray0[1] = (-1L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray1 = new Long[5];
      longArray1[0] = (Long) 1L;
      longArray1[1] = (Long) (-1L);
      longArray1[2] = (Long) (-1L);
      longArray1[3] = (Long) 1L;
      longArray1[4] = (Long) 1L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, long1);
      assertFalse(long1 == long0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertArrayEquals(new long[] {1L, (-1L), (-1L), 1L, 1L}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertEquals(5, longArray1.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) long0);
      assertFalse(long0 == long1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (byte)3);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1155.006);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1155.006F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) long0);
      assertFalse(long0 == long1);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-122.4));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-122.4F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) (byte)3);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals(3.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(220);
      assertEquals(220L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("220", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 69);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3079;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)65;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)436;
      shortArray0[5] = (short)65;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1), (short)436, (short)65}, shortArray0);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1), (short)436, (short)65}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(0, intArray0.length);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1), (short)436, (short)65}, shortArray0);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1), (short)436, (short)65}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 495L;
      longArray0[1] = (long) (short)436;
      longArray0[2] = (long) (short)65;
      longArray0[3] = (long) (short)436;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)65, 37);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {495L, 436L, 65L, 436L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '%';
      ArrayUtils.reverse(charArray0, (-1520), (int) (short)436);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'%', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (byte)44;
      longArray0[2] = (long) 18;
      longArray0[3] = (long) (byte)44;
      longArray0[4] = 74L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {0L, 44L, 18L, 44L, 74L}, longArray0);
      assertArrayEquals(new long[] {0L, 44L, 18L, 44L, 74L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'N';
      charArray0[2] = 'f';
      charArray0[3] = 'R';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'6', 'N', 'f', 'R'}, charArray0);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, 44L);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(6, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {44L, 0L, 44L, 18L, 44L, 74L}, longArray2);
      assertArrayEquals(new long[] {0L, 44L, 18L, 44L, 74L}, longArray0);
      assertArrayEquals(new long[] {0L, 44L, 18L, 44L, 74L}, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)44;
      objectArray0[2] = (Object) long0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "f(04u8[z`a$+d");
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 3281.843F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {Float.NaN, 1.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.contains(longArray1, 1L);
      assertFalse(longArray0.equals((Object)longArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray1.equals((Object)longArray2));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {0L, 44L, 18L, 44L, 74L}, longArray0);
      assertArrayEquals(new long[] {0L, 44L, 18L, 44L, 74L}, longArray1);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)44;
      doubleArray0[1] = (double) (byte)44;
      doubleArray0[2] = (double) 44L;
      doubleArray0[3] = 2886.0;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = 1058.929983848;
      doubleArray0[6] = (double) '6';
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 6);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {44.0, 44.0, 44.0, 2886.0, 1.0, 1058.929983848}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {44.0, 44.0, 44.0, 2886.0, 1.0, 1058.929983848, 54.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {0.0F, (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      Long long0 = new Long(14);
      assertEquals(14L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) (-528.0F);
      objectArray0[2] = (Object) (byte)14;
      ArrayUtils.shift(objectArray0, (-528), (-116), 2687);
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 14;
      longArray0[1] = 1L;
      longArray0[2] = (long) (-528);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {14L, 1L, (-528L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)11);
      assertEquals(21, byteArray0.length);
      assertEquals(2, int0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)11;
      intArray0[2] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {11, 0, 2}, intArray0);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)11;
      floatArray0[1] = (float) (byte)11;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {11.0F, 11.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 11.0F, 11.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int1 = ArrayUtils.indexOf(longArray1, (long) (byte)11);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(0, longArray1.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 3020);
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)36);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte)20);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)36;
      boolean boolean2 = ArrayUtils.contains((byte[]) null, (byte) (-84));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (float) (-1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)20, 3331);
      assertEquals(3, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)36, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)20;
      intArray0[1] = (int) (short)36;
      intArray0[2] = 3020;
      intArray0[3] = 3331;
      intArray0[4] = (-1);
      intArray0[5] = 3331;
      intArray0[6] = 3020;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3331, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\"');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertArrayEquals(new char[] {'='}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3192.4688394);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3192.4688394, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3192.4688394, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3192.4688394, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3192.4688394, 3192.4688394, 3192.4688394}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)61;
      Byte byte1 = new Byte((byte)61);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)61);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)61);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)61, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertEquals((byte)61, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = ArrayUtils.get(byteArray0, (-1334), byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertEquals(6, byteArray0.length);
      assertEquals((byte)61, (byte)byte7);
      assertNotNull(byte7);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) byte7, (int) byte0);
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertEquals(6, byteArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) byte0, (int) byte0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-19);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-19), Integer.MAX_VALUE);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-19)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-19)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2950;
      shortArray0[1] = (short)2837;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)18688;
      shortArray0[4] = (short) (-1024);
      shortArray0[5] = (short)1727;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2950, (short)2837, (short)3, (short)18688, (short) (-1024), (short)1727}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1982), 88);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 1916, (int) (byte)2);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = 419L;
      longArray0[1] = (long) (byte)100;
      longArray0[2] = (long) (byte)115;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)100;
      longArray0[5] = (long) (byte)100;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)115);
      assertEquals(6, longArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new long[] {419L, 100L, 115L, 2L, 100L, 100L}, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'u';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '_', 340);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {' ', ' ', 'u'}, charArray0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      Long[] longArray1 = new Long[0];
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      ArrayUtils.reverse((double[]) null, (int) (byte)100, 121);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'i';
      charArray0[2] = '}';
      charArray0[3] = '.';
      charArray0[4] = 'I';
      charArray0[5] = '=';
      charArray0[6] = 'h';
      charArray0[7] = 'q';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '.', (int) (byte)1);
      assertEquals(8, charArray0.length);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new char[] {'z', 'i', '}', '.', 'I', '=', 'h', 'q'}, charArray0);
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-1029L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(9);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom1.nextInt(3907);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'h';
      longArray0[1] = (long) 3907;
      longArray0[2] = (long) (byte)1;
      longArray0[3] = (long) 'I';
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {104L, 3907L, 1L, 73L}, longArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, objectArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (-693));
      assertFalse(int1 == int0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 64.5;
      doubleArray0[1] = 3968.0;
      doubleArray0[2] = 3968.0;
      doubleArray0[3] = 2594.0;
      doubleArray0[4] = 64.5;
      doubleArray0[5] = 64.5;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 64.5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {64.5, 3968.0, 3968.0, 2594.0, 64.5, 64.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3968.0, 3968.0, 2594.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, 2594.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {64.5, 3968.0, 3968.0, 2594.0, 64.5, 64.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {64.5, 3968.0, 3968.0, 64.5, 64.5}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("Comparator should not be null.");
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("Comparator should not be null.");
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean1);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("Comparator should not be null.");
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(true);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      Integer integer0 = new Integer((-23));
      assertEquals((-23), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-23), (-23)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      int int0 = 46;
      Integer integer0 = new Integer(46);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(46, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(46);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(46, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(46);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(46, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(46, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(4986);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(4986, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer2));
      assertEquals(46, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer2));
      assertEquals(46, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals((-1), (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 4986);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {46, 46, 46, 46, 4986, 46, 46, (-1)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3478;
      shortArray0[1] = (short) (-2505);
      shortArray0[2] = (short) (-2505);
      shortArray0[3] = (short)3478;
      shortArray0[4] = (short)3478;
      shortArray0[5] = (short) (-2505);
      shortArray0[6] = (short)3478;
      shortArray0[7] = (short)3478;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)382, (int) (short)3478);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)3478, (short) (-2505), (short) (-2505), (short)3478, (short)3478, (short) (-2505), (short)3478, (short)3478}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)36;
      shortArray0[2] = (short)36;
      shortArray0[3] = (short)36;
      shortArray0[4] = (short)36;
      shortArray0[5] = (short)36;
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (short)36);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 36.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse(shortArray0, 1354, 1354);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)36, (short)0, (short)36, (short)36, (short)36, (short)36}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = '9';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'o', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      intArray0[2] = (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      Float float0 = new Float((float) (-528));
      assertEquals((-528.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = float0;
      floatArray1[1] = float0;
      floatArray1[2] = float1;
      floatArray1[3] = (Float) (-528.0F);
      floatArray1[4] = float0;
      floatArray1[5] = (Float) 0.0F;
      floatArray1[6] = float0;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      Integer[] integerArray0 = ArrayUtils.insert(8, (Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      ArrayUtils.reverse(floatArray0, (-528), 21);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-528.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = 86.5F;
      floatArray0[2] = (float) (byte)44;
      floatArray0[3] = (float) (byte)44;
      floatArray0[4] = 940.53076F;
      floatArray0[5] = (float) (byte)44;
      floatArray0[6] = 1939.2312F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1539.9237F, 101);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1.0F, 86.5F, 44.0F, 44.0F, 940.53076F, 44.0F, 1939.2312F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)44;
      intArray0[2] = (int) (byte)44;
      intArray0[3] = (int) (byte)44;
      intArray0[4] = 1833;
      intArray0[5] = (-1);
      intArray0[6] = (int) (byte)44;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), 44, 44, 44, 1833, (-1), 44}, intArray0);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 100, 448);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) 448;
      longArray0[2] = (long) 448;
      longArray0[3] = (long) 100;
      longArray0[4] = (long) 100;
      longArray0[5] = (long) 100;
      ArrayUtils.swap(longArray0, 448, 5250, 2);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {100L, 448L, 448L, 100L, 100L, 100L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(220);
      assertEquals(220L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("220", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 69);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3079;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)65;
      shortArray0[3] = (short) (-1158);
      shortArray0[4] = (short)436;
      shortArray0[5] = (short)65;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1158), (short)436, (short)65}, shortArray0);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1158), (short)436, (short)65}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, intArray0.length);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1158), (short)436, (short)65}, shortArray0);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1158), (short)436, (short)65}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 495L;
      longArray0[1] = (long) (short)436;
      longArray0[2] = (long) (short)65;
      longArray0[3] = (long) (short)436;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)65, 37);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {495L, 436L, 65L, 436L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)126, (-560));
      assertEquals(4, byteArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)7, (byte)126, (byte) (-68), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray1, (Object) null);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3968;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 3968;
      longArray0[5] = (long) 790;
      longArray0[6] = (long) 3968;
      longArray0[7] = (long) 3968;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 3968L, 0L, 3968L, 790L, 3968L, 3968L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 3968L, 0L, 3968L, 790L, 3968L, 3968L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      Character[] characterArray2 = new Character[5];
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray2[0] = character0;
      Character character1 = Character.valueOf(']');
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      assertNotNull(character1);
      
      characterArray2[1] = character1;
      Character character2 = Character.valueOf('`');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('`', (char)character2);
      assertNotNull(character2);
      
      characterArray2[2] = character2;
      Character character3 = Character.valueOf('<');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('<', (char)character3);
      assertNotNull(character3);
      
      characterArray2[3] = character3;
      Character character4 = new Character('=');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertEquals('=', (char)character4);
      assertNotNull(character4);
      
      characterArray2[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray2);
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertEquals(5, characterArray2.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'o', ']', '`', '<', '='}, charArray0);
      assertNotNull(charArray0);
      assertNotSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 790, 0, 3968, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3968;
      doubleArray0[4] = (double) (char)character4;
      doubleArray0[5] = (double) '=';
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, 0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3968.0, 61.0, 61.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray1, (Object) null);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3968;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 3968;
      longArray0[5] = (long) 790;
      longArray0[6] = (long) 3968;
      longArray0[7] = (long) 3968;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 3968L, 0L, 3968L, 790L, 3968L, 3968L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 3968L, 0L, 3968L, 790L, 3968L, 3968L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      Character[] characterArray2 = new Character[5];
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray2[0] = character0;
      Character character1 = Character.valueOf(']');
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      assertNotNull(character1);
      
      characterArray2[1] = character1;
      char char0 = '`';
      Character character2 = Character.valueOf('`');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('`', (char)character2);
      assertNotNull(character2);
      
      characterArray2[2] = character2;
      characterArray2[3] = (Character) char0;
      Character character3 = new Character('=');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('=', (char)character3);
      assertNotNull(character3);
      
      characterArray2[4] = character3;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3968;
      doubleArray0[4] = (double) (char)character3;
      doubleArray0[5] = (double) '=';
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, 0);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3968.0, 61.0, 61.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      Double double0 = new Double((-762.43895835342));
      assertEquals((-762.43895835342), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (byte) (-60);
      doubleArray1[1] = (double) 1029;
      doubleArray1[2] = (double) (byte) (-60);
      doubleArray1[3] = (-762.43895835342);
      doubleArray1[4] = (double) (byte) (-60);
      doubleArray1[5] = (double) 1029;
      doubleArray1[6] = (double) 1029;
      doubleArray1[7] = 620.622;
      int int0 = ArrayUtils.indexOf(doubleArray1, (-4080.13377), 59);
      assertEquals(8, doubleArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-60.0), 1029.0, (-60.0), (-762.43895835342), (-60.0), 1029.0, 1029.0, 620.622}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (int) (byte) (-60), 835);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-3), 1863);
      assertTrue(int1 == int0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte) (-60);
      intArray0[3] = (int) (byte) (-60);
      intArray0[4] = 835;
      intArray0[5] = 835;
      intArray0[6] = (int) (byte) (-60);
      intArray0[7] = 59;
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 835, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-8);
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray3, byteArray0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      assertSame(byteArray0, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)44;
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)44;
      intArray0[1] = (int) (byte)44;
      intArray0[2] = (-44);
      intArray0[3] = (int) (byte)44;
      intArray0[4] = (int) (byte)44;
      intArray0[5] = (int) (byte)44;
      intArray0[6] = 1;
      intArray0[7] = (int) (byte)44;
      intArray0[8] = (-634);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-2502));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {44, 44, (-44), 44, 44, 44, 1, 44, (-634)}, intArray1);
      assertArrayEquals(new int[] {44, 44, (-44), 44, 44, 44, 1, 44, (-634)}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      intArray0[2] = (-528);
      floatArray0[3] = (float) (-528);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, (-528), 0, 0, (-528), 0}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-528);
      doubleArray0[1] = (double) (-528.0F);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 214.89009455, 2146570760, 0.0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-528.0), (-528.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, 3248);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte) (-118);
      intArray0[2] = 3248;
      intArray0[3] = (int) (byte) (-118);
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (-2552);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1, (-118), 3248, (-118), 1, 1, (-2552)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 285.2068483652799;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 326.0;
      doubleArray0[3] = (-1447.814800172);
      doubleArray0[4] = (-1580.6926100063);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 285.2068483652799);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {285.2068483652799, (-1.0), 326.0, (-1447.814800172), (-1580.6926100063)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3540);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1283;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short) (-4013);
      shortArray0[6] = (short) (-1765);
      shortArray0[7] = (short)1243;
      shortArray0[8] = (short)2;
      ArrayUtils.reverse(shortArray0, (int) (short)2, 627);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3540), (short)2, (short)2, (short)1243, (short) (-1765), (short) (-4013), (short)3, (short)1283, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      int int0 = ArrayUtils.indexOf(floatArray0, Float.NaN, 1011);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = 'K';
      charArray0[2] = 'T';
      charArray0[3] = '~';
      charArray0[4] = 'W';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'W', '~', 'T', 'K', ' '}, charArray0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 1011, (-139));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertEquals(0, longArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      long[] longArray2 = ArrayUtils.add((long[]) null, (-1678L));
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {(-1678L)}, longArray2);
      assertNotNull(longArray2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      int int0 = 666;
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = integer0;
      integerArray0[1] = (Integer) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(doubleArray0, (-1677), 4, 2173);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-33);
      ArrayUtils.shift(byteArray0, (-1938), 1301, (-1526));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-33)}, byteArray0);
      
      Integer integer0 = new Integer((byte) (-21));
      assertEquals((-21), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2173);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2173, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((byte) (-33));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-33), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(4);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(4, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(1269);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(1269, (int)integer4);
      assertNotNull(integer4);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer4;
      objectArray0[1] = (Object) integer3;
      objectArray0[2] = (Object) integer3;
      objectArray0[3] = (Object) integer3;
      objectArray0[4] = (Object) integer4;
      ArrayUtils.shift(objectArray0, 886);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-2301), (int) (byte) (-21));
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '8';
      charArray0[2] = 'Y';
      charArray0[3] = 'B';
      charArray0[4] = 'l';
      charArray0[5] = '=';
      charArray0[6] = '|';
      charArray0[7] = 'l';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'8', 'Y', 'B', 'l', '=', '|', 'l', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[1] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      longArray0[4] = (long) (byte) (-63);
      longArray0[5] = (long) (byte) (-63);
      longArray0[7] = (long) (byte) (-63);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), (-63L), (-63L), 0L, (-63L)}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-63L);
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray2.length);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), (-63L), (-63L), 0L, (-63L)}, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 50, (-530));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-63.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.reverse(longArray0, (-3348), 926);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-63L), (-63L), (-63L), (-63L), (-63L), (-63L)}, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 926;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte) (-63);
      intArray0[4] = 50;
      intArray0[5] = (-530);
      ArrayUtils.swap(intArray0, (-382), 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {926, 0, 0, (-63), 50, (-530)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-63L), (double) (-63L));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-63.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-63);
      shortArray0[1] = (short) (byte) (-63);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-63), (short) (-63)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-63), (short) (-63), (short) (-63), (short) (-63)}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[20];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(20, doubleArray0.length);
      
      Float float0 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2479L);
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = 1.0;
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('n');
      assertEquals('n', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('n');
      assertTrue(character1.equals((Object)character0));
      assertEquals('n', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('\"');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('\"', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(']');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals(']', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char char0 = 'a';
      Character character4 = Character.valueOf('a');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertEquals('a', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(5, characterArray0.length);
      assertEquals(10, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = char0;
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = (char) character2;
      charArray0[5] = ']';
      charArray0[6] = (char) character2;
      charArray0[7] = '2';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\"', 'a', ']', ']', '\"', ']', '\"', '2'}, charArray1);
      assertArrayEquals(new char[] {'\"', 'a', ']', ']', '\"', ']', '\"', '2'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[2] = '{';
      ArrayUtils.reverse(charArray0, 49, (-5));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'R', '\u0000', '{'}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)42;
      shortArray0[3] = (short) (-35);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)13107);
      assertEquals(4, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)42, (short)0, (short)0, (short) (-35)}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-35);
      doubleArray0[1] = (double) (short)13107;
      doubleArray0[2] = (double) (short) (-35);
      doubleArray0[3] = (double) (short)42;
      doubleArray0[4] = (-902.60648498511);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 49;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 49);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new double[] {(-35.0), 13107.0, (-35.0), 42.0, (-902.60648498511), 1.0, 49.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-98);
      MutableInt mutableInt0 = new MutableInt((Number) (byte)68);
      assertEquals((byte)68, mutableInt0.byteValue());
      assertEquals(68.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(68, (int)mutableInt0.getValue());
      assertEquals(68, (int)mutableInt0.toInteger());
      assertEquals((short)68, mutableInt0.shortValue());
      assertEquals("68", mutableInt0.toString());
      assertEquals(68L, mutableInt0.longValue());
      assertEquals(68, mutableInt0.intValue());
      assertEquals(68.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      mutableInt0.add(1328);
      assertEquals((byte)116, mutableInt0.byteValue());
      assertEquals(1396, (int)mutableInt0.toInteger());
      assertEquals((short)1396, mutableInt0.shortValue());
      assertEquals(1396, (int)mutableInt0.getValue());
      assertEquals(1396.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1396L, mutableInt0.longValue());
      assertEquals(1396, mutableInt0.intValue());
      assertEquals("1396", mutableInt0.toString());
      assertEquals(1396.0, mutableInt0.doubleValue(), 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mutableInt0;
      byteArray0[2] = (byte)43;
      objectArray0[2] = (Object) (byte)43;
      objectArray0[3] = (Object) (byte)68;
      objectArray0[4] = (Object) (byte)68;
      objectArray0[5] = (Object) (byte) (-112);
      objectArray0[6] = (Object) (byte)68;
      objectArray0[3] = (Object) (byte)43;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-230));
      assertEquals(8, objectArray0.length);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 46L;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = 3864.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {46.0, 1.0, (-1.0), 1.0, 1.0, 3864.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 1947, (int) (short)1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3154.4479046;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-333), 0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-1535));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 3154.4479046, (-1.0), 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-3);
      Byte byte1 = new Byte((byte) (-3));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-3), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-3), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)69;
      Byte byte4 = new Byte((byte)69);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)69, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertFalse(byte3 == byte0);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)69, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-3), (byte)69, (byte)69}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = 1261.0119939200156;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[4];
      ArrayUtils.shift((Object[]) null, 7);
      ArrayUtils.reverse(longArray0, (-693), (-689));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-689);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-689));
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-689.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(doubleArray0, (-689), (-1707), (-1707));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-689.0F);
      objectArray0[2] = (Object) (-689.0F);
      objectArray0[3] = (Object) (-63.0);
      objectArray0[4] = (Object) 1261.0119939200156;
      objectArray0[5] = (Object) (-63.0);
      objectArray0[6] = (Object) (-63.0);
      ArrayUtils.swap(objectArray0, (-689), (int) (byte) (-63), Integer.MAX_VALUE);
      assertEquals(7, objectArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 37;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = (-693);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {37, Integer.MAX_VALUE, 0, 1, (-693), 0, 0, 2}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = ArrayUtils.get((Byte[]) null, 4074, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Short short0 = new Short((byte)65);
      assertEquals((short)65, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) short0, (-1));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 349, 349, (-1));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2511.7F;
      floatArray0[1] = (float) 349;
      floatArray0[2] = (float) 349;
      floatArray0[3] = (float) (-1);
      ArrayUtils.shift(floatArray0, 504, (-1), 1177);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2511.7F, 349.0F, 349.0F, (-1.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1177;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1177L, (-1L), (-1L)}, longArray0);
      assertNotNull(longArray1);
      
      Integer integer0 = new Integer(229);
      assertEquals(229, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer0);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2030);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-672), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      Byte byte1 = Byte.valueOf((byte)102);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)102, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) 1, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)1, (-3139));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      floatArray0[2] = 709.7751F;
      floatArray0[4] = 3253.9153F;
      floatArray0[5] = (-455.63F);
      floatArray0[6] = (-843.29F);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, (-3199.304F), 709.7751F, 0.0F, 3253.9153F, (-455.63F), (-843.29F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'W';
      charArray0[2] = '|';
      charArray0[3] = 'K';
      charArray0[4] = ' ';
      charArray0[5] = '~';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'~', ' ', 'K', '|', 'W', '|'}, charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "K,";
      stringArray0[1] = "z_0Dc3";
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((boolean[]) null, 2, 2, 18670);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-67), (-1013), (-253));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1828), 18670);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1828);
      doubleArray0[1] = (double) (-253);
      doubleArray0[2] = (double) (short) (-1828);
      ArrayUtils.swap(doubleArray0, 18, 18, 3356);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1828.0), (-253.0), (-1828.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 98;
      floatArray0[1] = (float) 1688;
      floatArray0[2] = (float) (-2222);
      floatArray0[3] = (float) 98;
      ArrayUtils.swap(floatArray0, 98, 98, 1688);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {98.0F, 1688.0F, (-2222.0F), 98.0F}, floatArray0, 0.01F);
      
      Short short0 = new Short((short)4041);
      assertEquals((short)4041, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)4041);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)4041, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-801));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-801), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-801));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-801), (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)8192);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)8192, (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short)4041);
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)4041, (short)short5);
      assertNotNull(short5);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)4041);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)4041}, shortArray1);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 885.48573407;
      doubleArray0[1] = (double) (short)8192;
      doubleArray0[2] = (double) (-2222);
      doubleArray0[3] = (double) 98.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 98.0F);
      assertEquals(19, doubleArray0.length);
      assertEquals(4, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{3}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 145);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      assertNull(object0);
      
      objectArray0[0] = null;
      BitSet bitSet1 = (BitSet)ArrayUtils.get(objectArray0, 145, (Object) bitSet0);
      assertEquals(9, objectArray0.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      assertNotNull(bitSet1);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-5), (byte) (-5)}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-5);
      longArray0[1] = (long) (byte) (-5);
      longArray0[2] = (long) (byte) (-5);
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte)2;
      longArray0[6] = (long) (byte) (-5);
      longArray0[7] = (long) 145;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-5));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-5L), (-5L), (-5L), 2L, 2L, 2L, (-5L), 145L}, longArray0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 145L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-63)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-5), (byte) (-5)}, byteArray0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) long1;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) long0;
      ArrayUtils.shift(objectArray0, (-116), 3488, (-116));
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-116);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-116L)}, longArray0);
      assertArrayEquals(new long[] {(-116L)}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-67), (int) (byte)11);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-59), (byte)106, (byte)122, (byte)62, (byte)2, (byte)11, (byte)0}, byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-55);
      Long long0 = new Long(191L);
      assertEquals(191L, (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-748), (Object) long0);
      assertEquals(6, objectArray0.length);
      assertEquals(191L, object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)11;
      BitSet bitSet0 = new BitSet((byte)122);
      assertEquals(128, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = bitSet0.toByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(128, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(128, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNull(object1);
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte) (-59);
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)11;
      floatArray0[2] = (float) (byte)11;
      floatArray0[3] = (float) (byte) (-59);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (byte)0);
      assertTrue(int1 == int0);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-1.0F), 11.0F, 11.0F, (-59.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2950;
      shortArray0[1] = (short)2837;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)18688;
      shortArray0[4] = (short) (-1024);
      shortArray0[5] = (short)1727;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2950, (short)2837, (short)3, (short)18688, (short) (-1024), (short)1727}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 42.0;
      doubleArray0[1] = (double) (short)1727;
      doubleArray0[2] = (double) (short) (-1024);
      doubleArray0[3] = (double) (short)2950;
      doubleArray0[4] = (double) (short)1727;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1327.407811366);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {42.0, 1727.0, (-1024.0), 2950.0, 1727.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.removeElements((Double[]) null, (Double[]) null);
      assertNull(doubleArray1);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      Double double0 = new Double((-762.43895835342));
      assertEquals((-762.43895835342), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)125;
      shortArray0[1] = (short)181;
      shortArray0[2] = (short) (-886);
      shortArray0[3] = (short) (-2822);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray2, 42.0);
      assertEquals(1, doubleArray2.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.0}, doubleArray2, 0.01);
      
      Double[] doubleArray3 = new Double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (Double) 2.0;
      doubleArray3[1] = double0;
      doubleArray3[2] = (Double) 2.0;
      doubleArray3[3] = (Double) 2.0;
      doubleArray3[4] = double0;
      doubleArray3[5] = double0;
      Double[] doubleArray4 = ArrayUtils.removeElements(doubleArray1, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 3154.4479046;
      doubleArray1[1] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      Byte byte0 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)15;
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2533.66F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2533.66F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) doubleArray1[0]);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(2, doubleArray1.length);
      assertEquals(3154.448F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-356.0));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-356.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      intArray0[2] = (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      ArrayUtils.swap(floatArray0, (-748), 2, (int) (byte)0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      ArrayUtils.shift(doubleArray0, (int) (byte)0, 120, 2146465641);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1, class0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      Short short0 = new Short((short) (-631));
      assertEquals((short) (-631), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray2, (Object) short0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean0);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      String[] stringArray0 = new String[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(stringArray0, (-2300));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, (Character[]) null);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, int0);
      
      int int1 = mutableInt0.getAndAdd(0);
      assertTrue(int1 == int0);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, int1);
      
      int int2 = mutableInt0.decrementAndGet();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, int2);
      
      int int3 = mutableInt0.addAndGet(1);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, int3);
      
      int int4 = mutableInt0.addAndGet(0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, int4);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "");
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("2", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      int int5 = mutableInt0.addAndGet(0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, int5);
      
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      int int6 = mutableInt0.getAndIncrement();
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertEquals(3.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3, (int)mutableInt0.getValue());
      assertEquals((short)3, mutableInt0.shortValue());
      assertEquals(3L, mutableInt0.longValue());
      assertEquals("3", mutableInt0.toString());
      assertEquals(3, mutableInt0.intValue());
      assertEquals(3.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3, (int)mutableInt0.toInteger());
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals(2, int6);
      
      longArray0[4] = (long) 0;
      mutableInt0.setValue(2);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1654L;
      longArray1[1] = (long) 1;
      longArray1[2] = (long) 1;
      longArray1[3] = (long) 2;
      long[] longArray2 = ArrayUtils.insert(2, longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(4, longArray1.length);
      assertEquals(9, longArray2.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1654L, 1L, 1L, 2L}, longArray1);
      assertArrayEquals(new long[] {0L, 1L, 1654L, 1L, 1L, 2L, 2L, 2L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 1L, 2L, 2L, 0L}, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BRK,";
      stringArray0[1] = "z_0Dc3";
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((boolean[]) null, 2, 2, 18688);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'a', 3846);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 18688;
      doubleArray0[1] = (double) 2;
      doubleArray0[3] = (double) 18688;
      doubleArray0[4] = (double) (-67);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {18688.0, 2.0, 0.0, 18688.0, (-67.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      ArrayUtils.shift(doubleArray0, 4305);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = '\"';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '\"';
      characterArray0[1] = (Character) '8';
      characterArray0[2] = (Character) '\"';
      characterArray0[3] = (Character) '\"';
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 1136);
      assertEquals(4, characterArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 2057, 465.078635593);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, (-2147035040), 97, 667);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'8', '\"', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (char)characterArray0[2];
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1.0F;
      ArrayUtils.shift(floatArray0, (int) characterArray0[1]);
      assertEquals(4, characterArray0.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 34.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 456, 456);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 456;
      floatArray0[1] = (float) (byte) (-118);
      floatArray0[2] = (float) 456;
      floatArray0[3] = (float) (byte) (-63);
      int int0 = ArrayUtils.indexOf(floatArray0, 456.0F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {456.0F, (-118.0F), 456.0F, (-63.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Character[]) null, (int)  (-118));
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray1, (double) 456.0F, 13, (double) (-63.0F));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-63.0), (-63.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.swap((char[]) null, 3125, 3527, (-2147035040));
      ArrayUtils.shift(floatArray0, (-526));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {456.0F, (-63.0F), 456.0F, (-118.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (-2182.7159099205);
      doubleArray0[2] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-63.0), (-2182.7159099205), (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-63), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[5] = (short)3151;
      shortArray0[1] = (short)27232;
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3771), 2149);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\\', '\\'}, charArray0);
      assertArrayEquals(new char[] {'\\', '\\'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[22];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)27232;
      floatArray0[3] = (float) (short)27232;
      floatArray0[4] = (float) (-3771);
      floatArray0[5] = (float) (byte) (-63);
      floatArray0[6] = (float) (short)3151;
      ArrayUtils.shift(floatArray0, 12, 2203, (-236));
      assertEquals(22, floatArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (int) (byte) (-63), 12);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      byte byte0 = (byte) (-63);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[3] = (double) (byte) (-63);
      doubleArray0[4] = (double) (byte) (-63);
      doubleArray0[5] = (double) (byte) (-63);
      doubleArray0[6] = (double) (byte) (-63);
      doubleArray0[7] = (double) (byte) (-63);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0), (-63.0), 0.0, (-63.0), (-63.0), (-63.0), (-63.0), (-63.0)}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-63));
      assertNotNull(mockRandom0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte1 = new Byte((byte) (-63));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-63), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-63), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = Byte.valueOf((byte)0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-62));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-62), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-13));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte) (-13), (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-63), (byte)0, (byte) (-62), (byte) (-13)}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)57;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-25);
      shortArray0[3] = (short)49;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-25);
      floatArray0[1] = (float) (short) (-1);
      int int0 = ArrayUtils.indexOf(floatArray0, (-843.29F), (-1515));
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-25.0F), (-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '|';
      charArray0[2] = '|';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'|', '|', ' '}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ' ';
      intArray0[1] = (-1515);
      intArray0[2] = (-1515);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)57, (int) (short)57);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {32, (-1515), (-1515)}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (int) (short) (-1));
      assertFalse(int1 == int0);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[2] = (-2750.7645847171934);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3179.8638F;
      floatArray0[1] = (-944.3F);
      floatArray0[2] = (-987.2885F);
      floatArray0[3] = 3634.34F;
      floatArray0[4] = (-1610.5253F);
      floatArray0[5] = (-987.2885F);
      floatArray0[6] = 666.77F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {666.77F, (-987.2885F), (-1610.5253F), 3634.34F, (-987.2885F), (-944.3F), 3179.8638F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1121.21F);
      assertEquals(7, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {666.77F, (-987.2885F), (-1610.5253F), 3634.34F, (-987.2885F), (-944.3F), 3179.8638F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-1.766711509120914), (-2750.7645847171934)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = Integer.MAX_VALUE;
      intArray1[1] = (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, 35, Integer.MAX_VALUE);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(2, intArray1.length);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-1)}, intArray1);
      assertNotNull(bitSet1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(bitSet1, bitSet0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-987.2885F);
      objectArray0[1] = (Object) 666.77F;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1247, 1247);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short) (-20);
      ArrayUtils.shift(shortArray0, (-6));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short) (-20)}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)221);
      assertEquals(3, shortArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short) (-20)}, shortArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2061));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short) (-20)}, shortArray0);
      assertArrayEquals(new short[] {(short)221, (short) (-20)}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Long long0 = new Long((-681L));
      assertEquals((-681L), (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-2351), 50);
      assertNull(floatArray0);
      
      ArrayUtils.shift((char[]) null, (int) (short) (-2061));
      long[] longArray0 = new long[3];
      longArray0[1] = (-1982L);
      longArray0[2] = (-1982L);
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1982L), (-1982L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1247, 1247);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short) (-20);
      Float float0 = new Float(2572.96979449508);
      assertEquals(2572.9697F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(435.6605);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(435.6605F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.1);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.subarray((float[]) null, (int) (short) (-2061), (int) (short) (-2061));
      assertNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Double double0 = new Double((-1707.804918804929));
      assertEquals((-1707.804918804929), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = (double) 1029;
      int int0 = ArrayUtils.indexOf(doubleArray0, 4058.440798891417, 1029);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {48.0, 48.0, 1029.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)43;
      shortArray0[1] = (short) (-3838);
      ArrayUtils.swap(shortArray0, 1635, 0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)43, (short) (-3838)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-55);
      shortArray0[1] = (short) (byte) (-55);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertEquals(2, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short) (-55), (short) (-55)}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-464.653534), (int) (short) (-55));
      assertEquals(10, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-693.0), (-693.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, 0, (-2168));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-55), (short) (-55)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("8");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)90;
      shortArray0[1] = (short)338;
      shortArray0[2] = (short)90;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)128);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)90, (short)338, (short)90}, shortArray0);
      assertArrayEquals(new short[] {(short)90, (short)338, (short)90}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)128;
      doubleArray0[1] = (double) (short)90;
      doubleArray0[2] = (double) (short)90;
      doubleArray0[3] = (double) (short)90;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {128.0, 90.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {128.0, 90.0, 90.0, 90.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)90;
      ArrayUtils.swap(intArray0, (int) (short)338, (int) (short)90, (int) (short)90);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {90}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift((Object[]) null, (-2146253392));
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      ArrayUtils.reverse(charArray0, 16, 49);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'y', 'y', 'y', 'y', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-35);
      shortArray0[1] = (short)42;
      shortArray0[2] = (short) (-677);
      shortArray0[3] = (short)13107;
      shortArray0[4] = (short) (-35);
      shortArray0[5] = (short) (-35);
      shortArray0[6] = (short)13107;
      shortArray0[7] = (short)13107;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)13107);
      assertEquals(8, shortArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{3, 6, 7}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-35), (short)42, (short) (-677), (short)13107, (short) (-35), (short) (-35), (short)13107, (short)13107}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, false, (int) (short)13107);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift((Object[]) null, 160, (-1), (-116));
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 574L;
      longArray0[2] = 1L;
      longArray0[3] = (-2367L);
      longArray0[4] = (-2528L);
      longArray0[5] = 1450L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 115L, 88);
      assertEquals(6, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {0L, 574L, 1L, (-2367L), (-2528L), 1450L}, longArray0);
      assertNotNull(bitSet0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("java.lang.Boolean");
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("java.lang.Boolean");
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      Boolean boolean7 = Boolean.valueOf("wk#*?5j@_L=%q{ZYC");
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7);
      assertNotNull(boolean7);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 574L, 1L, (-2367L), (-2528L), 1450L}, longArray0);
      assertArrayEquals(new long[] {0L, 574L, 1L, (-2367L), (-2528L), 1450L, 1L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2496));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-2496), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-16);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-1), (byte) (-68), (byte) (-66), (byte)10, (byte)12, (byte) (-16)}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 's';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-66);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-68), (int) (byte) (-68));
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-66.0), 0.0}, doubleArray0, 0.01);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((String) null);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean((String) null);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((String) null);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-48);
      shortArray0[1] = (short) (byte) (-48);
      shortArray0[2] = (short) (byte)104;
      shortArray0[3] = (short) (byte) (-48);
      shortArray0[4] = (short) (byte) (-48);
      shortArray0[5] = (short) (byte) (-48);
      shortArray0[6] = (short) (byte) (-48);
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-48), (short) (-48), (short) (-48), (short) (-48), (short)104, (short) (-48), (short) (-48)}, shortArray0);
      
      Byte byte0 = Byte.valueOf((byte)64);
      assertEquals((byte)64, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-5));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-5), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)126);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)126, (byte)byte2);
      assertNotNull(byte2);
      
      try { 
        Byte.valueOf("java.lang.Character", (int) (byte)126);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 126 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(doubleArray0, (-1677), 4, 2173);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-33);
      ArrayUtils.shift(byteArray0, (-1938), 1301, (-1526));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-33)}, byteArray0);
      
      Integer integer0 = new Integer(669);
      assertEquals(669, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte) (-21));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-21), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2173);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2173, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((byte) (-33));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-33), (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(4, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(1269);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(1269, (int)integer5);
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {2173, 2173}, intArray0);
      assertNotNull(intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-21);
      shortArray0[1] = (short) (byte) (-21);
      shortArray0[2] = (short) (byte) (-33);
      shortArray0[3] = (short) (byte) (-33);
      shortArray0[4] = (short) (byte) (-21);
      shortArray0[5] = (short) (byte) (-21);
      shortArray0[6] = (short) (byte) (-21);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-267));
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-21), (short) (-21), (short) (-33), (short) (-33), (short) (-21), (short) (-21), (short) (-21)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      ArrayUtils.swap(floatArray0, (-5225), 1, 1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 70;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.0, 14.0, 70.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1974.6483F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1974.6483F), 0.0F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (double) 14);
      assertNull(doubleArray1);
      
      ArrayUtils.swap(floatArray0, 579, 3);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("3U23");
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(575);
      assertEquals(575, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)8;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 1L);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'A';
      intArray0[1] = (int) (byte)8;
      intArray0[2] = (int) (byte)8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = 'N';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) 'N';
      floatArray0[2] = 70.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2277);
      assertEquals(3, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {78.0F, 78.0F, 70.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(15, charArray0.length);
      assertEquals(15, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-452.093373197955);
      doubleArray0[2] = (-452.093373197955);
      doubleArray0[3] = 927.11;
      doubleArray0[4] = (-452.093373197955);
      doubleArray0[5] = 547.0;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-8);
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray3, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 70;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {70}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 2, (Object) null);
      assertEquals(6, objectArray0.length);
      assertNull(object1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      objectArray0[1] = null;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "hM!;@TZDh6K#^Ako=";
      stringArray0[1] = "', is neither of type Map.Entry nor an Array";
      stringArray0[2] = "`79EAj";
      stringArray0[3] = "hM!;@TZDh6K#^Ako=";
      stringArray0[4] = "hM!;@TZDh6K#^Ako=";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 321, 18688);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-44));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {0, 2, 2, 2, 2, 0, 2, 2}, intArray0);
      
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-44);
      byteArray2[1] = (byte) (-44);
      byteArray2[2] = (byte) (-44);
      byteArray2[3] = (byte) (-44);
      byteArray2[4] = (byte) (-44);
      byteArray2[5] = (byte) (-44);
      byteArray2[6] = (byte) (-44);
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(7, byteArray2.length);
      assertEquals(7, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44), (byte) (-44), (byte) (-44), (byte) (-44), (byte) (-44), (byte) (-44)}, byteArray2);
      assertNotNull(byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[0] = (long) (byte) (-63);
      Integer integer0 = new Integer(221);
      assertEquals(221, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(221);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(221, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-54));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-54), (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer0;
      integerArray0[5] = integer2;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(9, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 4023.21F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Long long0 = new Long((-2474L));
      assertEquals((-2474L), (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) integerArray0[4], (int) integerArray0[3]);
      assertEquals(1, intArray0.length);
      assertEquals(9, integerArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {54}, intArray0);
      assertNotNull(bitSet0);
      assertSame(integerArray0, integerArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '=';
      doubleArray0[1] = 900.23921047123;
      doubleArray0[2] = 900.23921047123;
      doubleArray0[3] = 900.23921047123;
      doubleArray0[4] = (double) '=';
      doubleArray0[5] = (double) '=';
      doubleArray0[6] = 900.23921047123;
      doubleArray0[7] = (double) '=';
      doubleArray0[8] = 900.23921047123;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 900.23921047123);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {61.0, 900.23921047123, 900.23921047123, 900.23921047123, 61.0, 61.0, 900.23921047123, 61.0, 900.23921047123}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {900.23921047123, 61.0, 900.23921047123, 900.23921047123, 900.23921047123, 61.0, 61.0, 900.23921047123, 61.0, 900.23921047123}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)24210;
      shortArray0[1] = (short) (-1257);
      shortArray0[2] = (short)4223;
      shortArray0[3] = (short) (-478);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)24210);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)24210, (short) (-1257), (short)4223, (short) (-478)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = 'N';
      charArray0[1] = 'V';
      charArray0[2] = 'H';
      charArray0[3] = 'E';
      charArray0[4] = 'Z';
      charArray0[5] = '\\';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(15, charArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'N';
      doubleArray0[1] = (double) 'H';
      doubleArray0[2] = (double) '\\';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1948.003, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {78.0, 72.0, 92.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 306);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertTrue(int1 == int0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {78.0, 72.0, 92.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(3, characterArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("`HdCs<mHf,p ");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, (char) character0);
      assertEquals(1, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean boolean4 = ArrayUtils.get(booleanArray0, (-528));
      assertEquals(0, booleanArray0.length);
      assertNull(boolean4);
      
      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.7556037622919062);
      doubleArray0[2] = 0.0;
      int int0 = 512;
      ArrayUtils.swap((char[]) null, 512, 512);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 512;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 512, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1247, 1247);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short) (-20);
      ArrayUtils.shift(shortArray0, (-6));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short) (-20)}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)221);
      assertEquals(3, shortArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short) (-20)}, shortArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2061));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short) (-20)}, shortArray0);
      assertArrayEquals(new short[] {(short)221, (short) (-20)}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Long[] longArray0 = new Long[0];
      Long long0 = new Long((-722L));
      assertEquals((-722L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray1 = ArrayUtils.addFirst(longArray0, long0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)221;
      intArray0[2] = (int) (short) (-20);
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short) (-20);
      intArray0[5] = (int) (short) (-2061);
      intArray0[6] = (int) (short) (-20);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1, 221, (-20), 1, (-20), (-2061), (-20)}, intArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      Integer integer0 = Integer.getInteger("iaLMy", (-1800));
      assertEquals((-1800), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-4674L), (-1800));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1029.7379F, 36);
      assertTrue(int1 == int0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[0] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-63L), 0L, (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-63);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {(-63)}, intArray0);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-63L);
      floatArray0[2] = (float) (-63L);
      Long[] longArray2 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray2.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)83);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-63)}, intArray1);
      assertArrayEquals(new int[] {(-63)}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2166.96F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {0.0F, (-63.0F), (-63.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      Double double0 = new Double(281.3540888284422);
      assertEquals(281.3540888284422, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3335);
      assertEquals(3335, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1431655764);
      doubleArray0[1] = (-926.9566947397195);
      doubleArray0[2] = (double) 3335;
      doubleArray0[3] = (double) (-1431655764);
      doubleArray0[4] = (double) (int)integerArray0[0];
      doubleArray0[5] = (double) (int)integerArray0[0];
      doubleArray0[6] = (-926.9566947397195);
      doubleArray0[7] = (-926.9566947397195);
      doubleArray0[8] = (double) (-1431655764);
      int int0 = ArrayUtils.indexOf(doubleArray0, 83.0, 3335, 1.0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.431655764E9), (-926.9566947397195), 3335.0, (-1.431655764E9), 3335.0, 3335.0, (-926.9566947397195), (-926.9566947397195), (-1.431655764E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1766);
      assertEquals(18, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap((char[]) null, 3568, (int) (byte)1);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(18, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-48));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-48)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-48);
      doubleArray0[1] = (-2182.7159099205);
      doubleArray0[2] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-48.0), (-2182.7159099205), (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-48), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Float float0 = new Float(943.936485);
      assertEquals(943.93646F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-258.9F));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {943.93646F, 943.93646F, 943.93646F, 943.93646F, 943.93646F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((char[]) null, 79, (int) (short)27232);
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) floatArray0[0];
      floatArray2[1] = (float) floatArray0[3];
      floatArray2[2] = (float) floatArray0[4];
      floatArray2[3] = (-1.0F);
      floatArray2[4] = (float) 79;
      floatArray2[5] = (float) 79;
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertEquals(6, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertArrayEquals(new float[] {943.93646F, 943.93646F, 943.93646F, (-1.0F), 79.0F, 79.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-48);
      longArray0[1] = 1L;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {(-48L), 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = (double) (byte) (-63);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) (byte) (-63);
      doubleArray0[6] = (double) (byte) (-63);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-63);
      shortArray0[1] = (short) (byte) (-63);
      shortArray0[2] = (short)382;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-63), 1164);
      assertEquals(3, shortArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-63), (short) (-63), (short)382}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)1109;
      shortArray0[2] = (short)8067;
      shortArray0[3] = (short) (-20);
      shortArray0[4] = (short) (-1311);
      shortArray0[5] = (short)340;
      shortArray0[6] = (short)3211;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)340);
      assertEquals(7, shortArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new short[] {(short)2, (short)1109, (short)8067, (short) (-20), (short) (-1311), (short)340, (short)3211}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-117));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -117, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      Float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, floatArray0[3]);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) (float)floatArray0[1];
      doubleArray0[4] = (double) (float)floatArray0[0];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Long long0 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      Long[] longArray1 = ArrayUtils.addFirst(longArray0, longArray0[3]);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 879;
      intArray0[1] = 1953;
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {879, 1953, 0}, intArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.1, 1.5, 0.0, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.1, 1.5, 0.0, 1.5, 0.0, 0.1, 1.5, 0.0, 1.5}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray2 = new float[8];
      floatArray2[0] = (float) 879;
      floatArray2[1] = (float) (long)longArray0[3];
      floatArray2[2] = (float) (long)longArray0[5];
      floatArray2[3] = (float) floatArray0[1];
      floatArray2[4] = (float) 0;
      floatArray2[5] = 722.14F;
      floatArray2[6] = (float) floatArray0[1];
      floatArray2[7] = (float) 1953;
      float[] floatArray3 = ArrayUtils.subarray(floatArray2, 0, 879);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertEquals(8, floatArray3.length);
      assertEquals(8, floatArray2.length);
      assertArrayEquals(new float[] {879.0F, 2.14748365E9F, 2.14748365E9F, 1.5F, 0.0F, 722.14F, 1.5F, 1953.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {879.0F, 2.14748365E9F, 2.14748365E9F, 1.5F, 0.0F, 722.14F, 1.5F, 1953.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(3, characterArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("`HdCs<mHf,p ");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, (char) character0);
      assertEquals(1, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      boolean boolean4 = ArrayUtils.contains((Object[]) characterArray0, (Object) boolean1);
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals(3, characterArray0.length);
      assertFalse(boolean4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`HdCs<mHf,p ";
      stringArray0[1] = "`HdCs<mHf,p ";
      stringArray0[5] = "`HdCs<mHf,p ";
      stringArray0[3] = "`HdCs<mHf,p ";
      stringArray0[4] = "Yw*~'SNOZ_~3s[.3aDD";
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '1';
      long[] longArray1 = ArrayUtils.add(longArray0, (-197L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {49L}, longArray0);
      assertArrayEquals(new long[] {49L, (-197L)}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), (-528));
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      ArrayUtils.swap(floatArray0, (-748), 2, (int) (byte)0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      ArrayUtils.shift(doubleArray0, (int) (byte)0, 120, 1008);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1, class0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      Short short0 = new Short((short) (-631));
      assertEquals((short) (-631), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray2, (Object) short0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean0);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      String[] stringArray0 = new String[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(stringArray0, (-2300));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)97, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 't');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) 'b');
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[3] = (Character) 'S';
      characterArray0[4] = (Character) 'b';
      characterArray0[5] = (Character) 'b';
      characterArray0[7] = (Character) 'S';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-59));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.reverse(intArray0, Integer.MAX_VALUE, 2802);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 3020);
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)36);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte)9);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)36;
      ArrayUtils.swap(intArray0, (int) (byte)36, (-1), 4);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {36}, intArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray3, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-282);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-282), (-222.19674196022));
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-282.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'J');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = 1654L;
      longArray0[2] = (long) (byte)9;
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) 9L);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)9, (byte) (-96));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1949.2132786081);
      doubleArray0[1] = (-452.093373197955);
      doubleArray0[2] = 11.101;
      doubleArray0[3] = 927.11;
      doubleArray0[4] = 11.101;
      doubleArray0[5] = 927.11;
      doubleArray0[6] = (-2598.79947823151);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1949.2132786081), 1072);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-1949.2132786081), (-452.093373197955), 11.101, 927.11, 11.101, 927.11, (-2598.79947823151)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(114.0F);
      assertEquals(114.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(48.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(48.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1072;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1072);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1072, 1072}, intArray1);
      assertArrayEquals(new int[] {1072}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1072;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1072L}, longArray0);
      
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1072, 1072}, intArray2);
      assertArrayEquals(new int[] {1072}, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      
      short[] shortArray0 = new short[15];
      shortArray0[1] = (short)912;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-897));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(15, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) long0);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertArrayEquals(new double[] {(-1949.2132786081), (-452.093373197955), 11.101, 927.11, 11.101, 927.11, (-2598.79947823151)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1072L}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      short short0 = (short)53;
      Short short1 = new Short((short)53);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)53, (short)short1);
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)512);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)512, (short)short2);
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)512);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)512, (short)short3);
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) shortArray0[1]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(shortArray0, shortArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) shortArray0[2], (-1));
      assertEquals(3, shortArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertSame(shortArray0, shortArray1);
      
      long[] longArray1 = new long[7];
      longArray1[0] = (long) (short)512;
      longArray1[1] = (long) (short)shortArray0[1];
      longArray1[2] = (long) (short)shortArray0[1];
      longArray1[3] = (long) short0;
      longArray1[4] = (long) (short)512;
      longArray1[5] = (long) (short)shortArray0[2];
      longArray1[6] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, (-1726));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1726, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-3222L);
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2450L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-3222L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3222L), 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2776);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-2776)}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short) (-2776);
      floatArray0[2] = (float) (short) (-2776);
      floatArray0[3] = (float) (-3222L);
      floatArray0[4] = (float) (-3222L);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 0L);
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, (-2776.0F), (-2776.0F), (-3222.0F), (-3222.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-2776.0F), (-2776.0F), (-3222.0F), (-3222.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2776.0F);
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = '@';
      charArray0[2] = 'X';
      charArray0[3] = 'g';
      charArray0[4] = 'V';
      charArray0[5] = 'L';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'D', '@', 'X', 'g', 'V', 'L'}, charArray0);
      assertArrayEquals(new char[] {'D', '@', 'X', 'g', 'V', 'L'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-98);
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)20);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-677);
      intArray0[1] = (int) (short)20;
      intArray0[2] = (int) (byte)60;
      intArray0[3] = (int) (short)20;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-677), 20, 60, 20}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = '{';
      ArrayUtils.reverse(charArray0, 49, 16);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'R', 'R', '{'}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)42;
      shortArray0[1] = (short)13107;
      MutableInt mutableInt0 = new MutableInt((Number) (short)13107);
      assertEquals(13107.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("13107", mutableInt0.toString());
      assertEquals(13107.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)13107, mutableInt0.shortValue());
      assertEquals(13107, mutableInt0.intValue());
      assertEquals((byte)51, mutableInt0.byteValue());
      assertEquals(13107L, mutableInt0.longValue());
      assertEquals(13107, (int)mutableInt0.getValue());
      assertEquals(13107, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      mutableInt0.add((int) (short)42);
      assertEquals(13149L, mutableInt0.longValue());
      assertEquals("13149", mutableInt0.toString());
      assertEquals(13149, mutableInt0.intValue());
      assertEquals((byte)93, mutableInt0.byteValue());
      assertEquals(13149, (int)mutableInt0.getValue());
      assertEquals(13149.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(13149, (int)mutableInt0.toInteger());
      assertEquals((short)13149, mutableInt0.shortValue());
      assertEquals(13149.0, mutableInt0.doubleValue(), 0.01);
      
      Object[] objectArray0 = new Object[0];
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0, 1277);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 134.15139858);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {134.15139858}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-1137));
      assertEquals((short) (-1137), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertEquals(6, shortArray0.length);
      assertEquals((short) (-1137), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals(6, shortArray0.length);
      assertEquals((short) (-1137), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1619));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-1619), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[1]);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertEquals(6, shortArray0.length);
      assertEquals((short) (-1137), (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1619));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertEquals((short) (-1619), (short)short5);
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(300).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean0 = ArrayUtils.isSorted(shortArray0, comparator0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = Integer.getInteger("Vr?0AWT ]", (-1034));
      assertEquals((-1034), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, (-1800));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'X';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', 'X'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[4] = (double) (byte) (-63);
      doubleArray0[5] = (double) (byte) (-63);
      doubleArray0[6] = (double) (byte) (-63);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1766;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte) (-63), 715827883);
      assertEquals(1, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {1766L}, longArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte) (-63));
      assertNull(floatArray0);
      
      ArrayUtils.swap((Object[]) null, 3027, 715827883, 3027);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-63);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)8);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-63), (short) (-1), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-63), (short) (-1), (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (-80));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1766L}, longArray1);
      assertArrayEquals(new long[] {1766L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      Float float0 = new Float(914.1482F);
      assertEquals(914.1482F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(914, mutableInt0.intValue());
      assertEquals("914", mutableInt0.toString());
      assertEquals(914.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(914L, mutableInt0.longValue());
      assertEquals((short)914, mutableInt0.shortValue());
      assertEquals(914, (int)mutableInt0.getValue());
      assertEquals((byte) (-110), mutableInt0.byteValue());
      assertEquals(914.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(914, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(914, mutableInt0.intValue());
      assertEquals("914", mutableInt0.toString());
      assertEquals(914.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(914L, mutableInt0.longValue());
      assertEquals((short)914, mutableInt0.shortValue());
      assertEquals(914, (int)mutableInt0.getValue());
      assertEquals((byte) (-110), mutableInt0.byteValue());
      assertEquals(914.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(914, (int)mutableInt0.toInteger());
      assertEquals((short)914, mutableInt1.shortValue());
      assertEquals(914, (int)mutableInt1.getValue());
      assertEquals(914L, mutableInt1.longValue());
      assertEquals("914", mutableInt1.toString());
      assertEquals(914.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(914, mutableInt1.intValue());
      assertEquals(914, (int)mutableInt1.toInteger());
      assertEquals((byte) (-110), mutableInt1.byteValue());
      assertEquals(914.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mutableInt1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 5, 5);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-922);
      doubleArray0[1] = (double) (-922);
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 914.1482F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 914.1482F);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {(-922.0), (-922.0), 5.0, 914.148193359375}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-922);
      floatArray0[1] = 914.1482F;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 5;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 5.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-922.0F), 914.1482F, 3.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-922.0F), 914.1482F, 3.0F, 5.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'a';
      charArray0[2] = 'q';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'D', 'a', 'q'}, charArray0);
      assertArrayEquals(new char[] {'D', 'a', 'q', 'D', 'a', 'q'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 3020);
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)36);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte)20);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)36;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (byte)20;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1277, (int) (short)0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)36, (short)0, (short)20}, shortArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      byte byte0 = (byte)111;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)42;
      longArray0[1] = (long) (byte)111;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-1269), (int) (byte)111, (-1520));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1269);
      doubleArray0[1] = (double) 42L;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1269.0), 42.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1269.0), 42.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int int0 = (-2538);
      ArrayUtils.shift(longArray0, (-2538), 102, (-1));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {111L, 0L, 42L}, longArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(100);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      String string0 = "I55\"Vn|1wMq;Vsz=I";
      try { 
        Integer.valueOf("Ls`Yv'eRv-tJ#3", 1256);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1256 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(3, characterArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("`HdCs<mHf,p ");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.shift((int[]) null, (-1515));
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (char)character0;
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = 900.23921047123;
      doubleArray0[3] = 1057.83;
      doubleArray0[4] = (double) 'q';
      doubleArray0[5] = (double) 'q';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1515));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1515.0), 113.0, 113.0, 900.23921047123, 1057.83, 113.0, 113.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {113.0, 113.0, 900.23921047123, 1057.83, 113.0, 113.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1166);
      boolean boolean3 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean3);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1166)}, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = (char) character0;
      charArray0[1] = (char) character0;
      char[] charArray1 = ArrayUtils.addFirst(charArray0, (char) character0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'q', 'q'}, charArray0);
      assertArrayEquals(new char[] {'q', 'q', 'q'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)904);
      assertTrue(int1 == int0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1166)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (-282);
      floatArray0[2] = (float) (-282);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2983), (int) (short)0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-282.0F), (-282.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = '#';
      charArray0[4] = '#';
      ArrayUtils.shift(charArray0, 70);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'W', 'W', 'W', '#', '#'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '#';
      longArray0[1] = (-1982L);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) '#';
      longArray0[5] = (long) 'W';
      longArray0[6] = (long) (short)0;
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 87L, 35L, 0L, 0L, (-1982L), 35L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      Long long0 = new Long((short)1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short)1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
      assertNotNull(longArray1);
      
      Float float0 = new Float(1295.8F);
      assertEquals(1295.8F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) longArray0[1]);
      assertEquals(2, longArray0.length);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2479L);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap(booleanArray1, (-922), (-922), 6);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-253), (-2603), 340);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.shift(booleanArray0, 340, (-922), (-2603));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 3}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray1, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 162.8F;
      floatArray0[2] = (float) (-5225);
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) (-5225);
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) (-5225);
      floatArray0[8] = 4305.0F;
      ArrayUtils.swap(floatArray0, 1, 2335, (-1481));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 162.8F, (-5225.0F), 1.0F, 1.0F, (-5225.0F), 1.0F, (-5225.0F), 4305.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 162.8F, (-5225.0F), 1.0F, 1.0F, (-5225.0F), 1.0F, (-5225.0F), 4305.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 162.8F, (-5225.0F), 1.0F, 1.0F, (-5225.0F), 1.0F, (-5225.0F), 4305.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-939.121089651661));
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 101;
      intArray0[2] = 4299;
      intArray0[3] = (-5225);
      intArray0[4] = 1;
      intArray0[5] = 2335;
      intArray0[6] = 1;
      intArray0[7] = 2367;
      ArrayUtils.shift(intArray0, 1830, 1, 101);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1, 101, 4299, (-5225), 1, 2335, 1, 2367}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3154.4479046;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-333), 0);
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-333);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-333);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {7.0F, 7.0F, 0.0F, (-333.0F), 0.0F, (-333.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 5519L;
      longArray0[1] = 2134L;
      longArray0[2] = 791L;
      longArray0[3] = 1991L;
      ArrayUtils.swap(longArray0, (-55), (-2048), (-2048));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {5519L, 2134L, 791L, 1991L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)97;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)106, (byte)114, (byte)97}, byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)114, (byte)97, (byte)106, (byte)114, (byte)97}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-982.83F);
      floatArray0[1] = (-982.83F);
      floatArray0[2] = (float) (-528);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-982.83F), (-982.83F), (-528.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-528);
      longArray0[1] = (long) (-528);
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.swap((Object[]) null, (-715827883), (-528));
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (-2182.7159099205);
      doubleArray0[2] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-63.0), (-2182.7159099205), (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-63), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3151;
      shortArray0[1] = (short)27232;
      shortArray0[2] = (short) (-2940);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (byte) (-63);
      shortArray0[6] = (short)11;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1;
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)3151, (short)27232, (short) (-2940), (short)1, (short)1, (short) (-63), (short)11, (short)1, (short)1}, shortArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)1;
      objectArray0[1] = (Object) (-63.0);
      objectArray0[2] = (Object) (short) (-2940);
      objectArray0[3] = (Object) (short)1;
      ArrayUtils.swap(objectArray0, 4, (int) (short)1);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int[] intArray0 = new int[8];
      Character[] characterArray0 = new Character[3];
      char char0 = 'o';
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('o');
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'o', 'o', 'o'}, charArray0);
      assertNotNull(charArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-576), (-576), (-2558));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-791), (int) char0, 15);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 15);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-576);
      longArray0[1] = 1L;
      longArray0[2] = (long) char0;
      longArray0[3] = (long) (-2558);
      longArray0[4] = (long) (-2558);
      longArray0[5] = (long) '9';
      longArray0[6] = (long) 15;
      longArray0[7] = (long) (-2558);
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {(-576L), 1L, 111L, (-2558L), (-2558L), 57L, 15L, (-2558L)}, longArray0);
      assertArrayEquals(new long[] {(-576L), 1L, 111L, (-2558L), (-2558L), 57L, 15L, (-2558L), 1L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(220);
      assertEquals(220L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("220", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 620);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1), 83);
      assertNull(charArray0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '?', 0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 153.95190541766;
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 620;
      doubleArray0[5] = (double) 83;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2420.0;
      doubleArray0[8] = (double) Integer.MAX_VALUE;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 153.95190541766, 80.0, (-1.0), 620.0, 83.0, 0.0, 2420.0, 2.147483647E9}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      ArrayUtils.reverse(longArray0, (-4976), (-4976));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 1L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '?';
      charArray0[2] = 'P';
      charArray0[3] = '}';
      charArray0[4] = '\\';
      charArray0[5] = 'P';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, Integer.MAX_VALUE);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'P', '?', 'P', '}', '\\', 'P'}, charArray1);
      assertArrayEquals(new char[] {'P', '?', 'P', '}', '\\', 'P'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int int0 = ArrayUtils.indexOf(charArray0, '}', 0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(6, charArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'P', '?', 'P', '}', '\\', 'P'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'P';
      doubleArray0[2] = (double) 1L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {80.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = (int) 'P';
      intArray0[3] = (int) 'P';
      intArray0[4] = 0;
      intArray0[5] = (int) '\\';
      intArray0[6] = (int) 'P';
      intArray0[7] = 3;
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 80, 80, 0, 92, 80, 3}, intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 80, 80, 0, 92, 80, 3}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)68;
      ArrayUtils.reverse(byteArray0, (-3738), 837);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)68, (byte)43}, byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-2222), (-2144462321), (int) (byte)10);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '2');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertNotNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-528), 0, 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-528), 0, 0}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((boolean[]) null, (-528), (-528), 2217);
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-528), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -528, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals("{0, 1, 4, 5, 7}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1922);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-121));
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1922)}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'A';
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) (-1), (int) (short) (-1922));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(6, longArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new long[] {65L, 65L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = (double) (short) (-1922);
      doubleArray0[3] = (double) 'A';
      doubleArray0[4] = (double) (-121);
      doubleArray0[5] = (double) (short) (-1922);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 65L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 48.0, (-1922.0), 65.0, (-121.0), (-1922.0), (-1.0), 65.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 4;
      intArray0[2] = 8;
      int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE, 8);
      assertEquals(3, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 4, 8}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = (double) Integer.MAX_VALUE;
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 2.147483647E9}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4.0, 2.147483647E9, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-1078), 95, 95);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = 't';
      charArray0[2] = 'F';
      charArray0[3] = 'I';
      charArray0[4] = '>';
      charArray0[5] = '-';
      charArray0[6] = 'E';
      charArray0[7] = '@';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'I');
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'b', 't', 'F', 'I', '>', '-', 'E', '@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[3] = (-1L);
      longArray0[3] = (-2479L);
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-2014), (-2014), 2483);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'S';
      charArray0[2] = '(';
      boolean boolean0 = ArrayUtils.contains(charArray0, '(');
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'A', 'S', '('}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '(';
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {40L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[9];
      longArray0[0] = 120L;
      longArray0[1] = (-3097L);
      longArray0[2] = 0L;
      longArray0[3] = 308L;
      longArray0[4] = (-3410L);
      longArray0[5] = 556L;
      longArray0[6] = (-2940L);
      longArray0[7] = 48L;
      longArray0[8] = 0L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {120L, (-3097L), 0L, 308L, (-3410L), 556L, (-2940L), 48L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 556L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1256), (-1256));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {556.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-455.63F);
      floatArray0[3] = (-792.0F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = 1316.4929F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, Float.NaN, (-455.63F), (-792.0F), Float.NaN, 1316.4929F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, Float.NaN, (-455.63F), (-792.0F), Float.NaN, 1316.4929F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1061);
      intArray0[1] = (int) (short) (-1061);
      intArray0[2] = (int) (short) (-1061);
      intArray0[3] = (int) (short) (-1061);
      intArray0[4] = (int) (short) (-1061);
      intArray0[5] = (int) (short) (-1061);
      int int0 = ArrayUtils.indexOf(intArray0, 315, (-1061));
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1061), (-1061), (-1061), (-1061), (-1061), (-1061)}, intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1061);
      floatArray0[2] = (float) (-1061);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1061);
      floatArray0[5] = (float) (-1061);
      floatArray0[6] = (float) (short) (-1061);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 315);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1061.0F), (-1061.0F), (-1.0F), (-1061.0F), (-1061.0F), (-1061.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      
      boolean boolean2 = ArrayUtils.contains((double[]) null, (double) (-1061), (double) (-1061));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 315;
      longArray0[1] = (long) (-1061);
      longArray0[2] = (long) (-1061);
      longArray0[3] = (long) (short) (-1061);
      longArray0[4] = (long) (-1061);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1061);
      longArray0[7] = (long) (-1061);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {315L, (-1061L), (-1061L), (-1061L), (-1061L), (-1L), (-1061L), (-1061L)}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1766);
      assertEquals(18, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      ArrayUtils.swap(booleanArray1, (int) (short)1, 1, 678);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(booleanArray1, (int) (short)1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1055L);
      assertNotNull(doubleStream0);
      
      byte[] byteArray0 = new byte[0];
      Boolean boolean0 = new Boolean("\u0005f[Q.qx6U<8E");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(547);
      assertEquals(547, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3429);
      longArray0[1] = (-1L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2777), (-3232));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-3429L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-3429L);
      doubleArray0[2] = (double) (-3429L);
      doubleArray0[3] = (double) (-3232);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) (-2777);
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (-3232);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-3429.0), (-3429.0), (-3232.0), (-1.0), (-2777.0), (-1.0), (-3232.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = (-3429);
      intArray0[1] = (-1078);
      intArray0[2] = (-3232);
      intArray0[3] = (-3429);
      intArray0[4] = (-3429);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1078, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 70.0F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 50;
      intArray0[2] = 50;
      int int0 = ArrayUtils.indexOf(intArray0, 34, 4);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 50, 50}, intArray0);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[2] = (-2750.7645847171934);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3179.8638F;
      floatArray0[1] = (-944.3F);
      floatArray0[2] = (-987.2885F);
      floatArray0[3] = 3634.34F;
      floatArray0[4] = (-1610.5253F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 666.77F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {666.77F, 0.0F, (-1610.5253F), 3634.34F, (-987.2885F), (-944.3F), 3179.8638F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1121.21F);
      assertEquals(7, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {666.77F, 0.0F, (-1610.5253F), 3634.34F, (-987.2885F), (-944.3F), 3179.8638F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 50;
      int int0 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE, 4);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 50}, intArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {666.77F, 0.0F, (-1610.5253F), 3634.34F, (-987.2885F), (-944.3F), 3179.8638F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1426.446693), (-1));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '*';
      charArray0[2] = '?';
      charArray0[3] = 'X';
      charArray0[4] = 'I';
      charArray0[5] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertEquals(6, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = ArrayUtils.get(booleanArray0, 457);
      assertEquals(1, booleanArray0.length);
      assertNull(boolean2);
      
      boolean[] booleanArray1 = new boolean[0];
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 457, 457);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '1';
      intArray0[1] = (int) 'I';
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), 73, 49}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'M', 321);
      assertEquals(1, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom(321);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1967L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      int int0 = mockRandom0.nextInt((-2874));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(mockRandom0.equals((Object)mockRandom2));
      assertEquals(0, int0);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(mockRandom0, mockRandom2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'M';
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {77L}, longArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom2));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, objectArray0.length);
      assertNotSame(mockRandom1, mockRandom2);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[6] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-63);
      floatArray0[1] = (float) (-693);
      floatArray0[2] = (-2536.8083F);
      floatArray0[3] = (float) (byte) (-63);
      floatArray0[4] = (float) (-693);
      floatArray0[5] = (float) (-693);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-63.0F), (-693.0F), (-2536.8083F), (-63.0F), (-693.0F), (-693.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (-2536.8083F);
      doubleArray0[2] = (double) (-693);
      ArrayUtils.swap(doubleArray0, (-693), (-2659));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-63.0), (-2536.808349609375), (-693.0)}, doubleArray0, 0.01);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(boolean1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap(booleanArray1, (-922), 6, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2245.689735);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1921.717F);
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-1921.717F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-607), 1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1);
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'f', 9);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-1029L));
      assertNotNull(mockRandom0);
      
      int int0 = 908;
      int int1 = (-2831);
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) 908, 150L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Float float0 = new Float((-1467.7709F));
      assertEquals((-1467.7709F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      Float float1 = new Float((double) (-1467.7709F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1467.7709F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[5] = float1;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1055.2227F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-1467.7709F), (-1467.7709F), (-1467.7709F), (-1467.7709F), (-1467.7709F), (-1467.7709F), (-1467.7709F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((char[]) null, 512, 256);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {(-1467.7709F), (-1467.7709F), (-1467.7709F), (-1467.7709F), (-1467.7709F), (-1467.7709F), (-1467.7709F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = 1261.0119939200156;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.shift((Object[]) null, 7);
      ArrayUtils.reverse(longArray0, (-693), (-689));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-689);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-689));
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-689.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(doubleArray0, (-689), (-1707), (-1707));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Byte[] byteArray2 = new Byte[1];
      Byte byte0 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertEquals(1, byteArray3.length);
      assertEquals(1, byteArray2.length);
      assertNotNull(byteArray3);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1491), 2470);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-5427.0F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((short) (-2496));
      assertEquals((short) (-2496), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1405.8827465233105);
      doubleArray0[1] = (double) (byte) (-16);
      doubleArray0[2] = (double) (byte)12;
      doubleArray0[3] = (double) (-1491);
      doubleArray0[4] = (double) (short)shortArray0[1];
      doubleArray0[5] = (double) (-5427.0F);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1788.4019), (int) (byte)12);
      assertTrue(int1 == int0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1405.8827465233105), (-16.0), 12.0, (-1491.0), (-2496.0), (-5427.0)}, doubleArray0, 0.01);
      
      Byte[] byteArray1 = new Byte[9];
      byte byte0 = (byte)36;
      Byte byte1 = new Byte((byte)36);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)36, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray1[0] = byte1;
      Byte byte2 = Byte.valueOf((byte)69);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)69, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray1[1] = byte2;
      Byte byte3 = new Byte((byte)98);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)98, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray1[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertEquals((byte)36, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray1[3] = byte4;
      byte byte5 = (byte) (-4);
      Byte byte6 = new Byte((byte) (-4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertEquals((byte) (-4), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray1[4] = byte6;
      Byte byte7 = new Byte(byte5);
      assertFalse(byte5 == byte0);
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte) (-4), (byte)byte7);
      assertNotNull(byte7);
      
      byteArray1[5] = byte7;
      Byte byte8 = new Byte((byte)73);
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      assertEquals((byte)73, (byte)byte8);
      assertNotNull(byte8);
      
      byteArray1[6] = byte8;
      Byte byte9 = new Byte((byte) (-80));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte6));
      assertEquals((byte) (-80), (byte)byte9);
      assertNotNull(byte9);
      
      byteArray1[7] = byte9;
      Byte byte10 = new Byte((byte)98);
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte1));
      assertEquals((byte)98, (byte)byte10);
      assertNotNull(byte10);
      
      byteArray1[8] = byte10;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertNotNull(byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 70;
      ArrayUtils.swap(floatArray0, 0, (int) (short)0, 321);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {70.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((double[]) null, 70, (int) (byte)3, (-3575));
      Double[] doubleArray0 = new Double[0];
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-63.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {70.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {70.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Object[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-20), (-20), 911);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)79;
      byteArray0[1] = (byte)82;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)7, (int) (byte)120);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)47, (byte)82, (byte) (-93), (byte) (-44), (byte)120, (byte)79, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)1, 3248);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-118));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte) (-118)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte) (-118)}, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      Byte byte1 = Byte.valueOf((byte)102);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)102, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) 1, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)1;
      Byte byte1 = Byte.valueOf((byte) (-119));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-119), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) 1, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2182.7159099205);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-2182.7159099205), 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-63), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3163;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)3163;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-3968), (int) (short)1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {3163L, 0L}, longArray0);
      assertArrayEquals(new long[] {3163L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.subarray((boolean[]) null, (int) (short)3163, 0);
      assertNull(booleanArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte) (-63);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, (-63)}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, (-63)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-3575);
      shortArray0[2] = (short)6;
      shortArray0[3] = (short) (-2248);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2844), (int) (short) (-2248));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)7, (short) (-3575), (short)6, (short) (-2248), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (short)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-2844), (int) (short) (-3575));
      assertEquals(3, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {(-1L), 7L, 0L}, longArray0);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (short)7, (-1583));
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-656.112626203));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short)7;
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) (short)7;
      objectArray0[4] = (Object) 7L;
      ArrayUtils.reverse(objectArray0, 3393, 1);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (-1), 8192, (-1583));
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-65);
      floatArray0[1] = (float) (byte) (-65);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (-5740.067F);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) 1L;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-1));
      assertEquals(6, floatArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {(-65.0F), (-65.0F), (-1.0F), (-5740.067F), (-1.0F), 1.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Character[]) null, (-2849));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-65.0F);
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.0, (int) (byte) (-65), (double) (-5740.067F));
      assertFalse(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1.0), (-65.0)}, doubleArray0, 0.01);
      
      ArrayUtils.swap((char[]) null, (-1), (-1), (int) (byte) (-65));
      ArrayUtils.shift(floatArray0, (-706));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-65.0F), (-65.0F), (-1.0F), (-5740.067F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = 1261.0119939200156;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), 0.0, (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-689);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-689));
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-689.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Character[]) null, 1);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 7, (-689), (double) (-689));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-63.0), 0.0, (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.swap((char[]) null, (-2849), 7, 5);
      ArrayUtils.shift((float[]) null, (-1995));
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-55);
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 1688;
      doubleArray0[4] = (double) 1688;
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Character[]) null, (-2849));
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-528.1353699), (-351), (-127.977256303));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-55.0), (-693.0), (-693.0), 1688.0, 1688.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      ArrayUtils.swap(charArray0, 57, (-534), 2958);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      
      ArrayUtils.shift((float[]) null, 32);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Long long0 = new Long(46);
      assertEquals(46L, (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.shift((Object[]) null, (-3914), 46, 2124);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 46;
      floatArray0[1] = (float) 46;
      floatArray0[2] = (float) 46;
      floatArray0[3] = (float) 46;
      floatArray0[4] = (float) (-3914);
      floatArray0[5] = (float) 2124;
      floatArray0[6] = (float) (-3914);
      floatArray0[7] = (float) 46;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {46.0F, 46.0F, 46.0F, 46.0F, (-3914.0F), 2124.0F, (-3914.0F), 46.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray1.length);
      assertEquals(4, classArray0.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Short[] shortArray0 = new Short[6];
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 'U';
      charArray0[2] = 'P';
      charArray0[3] = 'd';
      charArray0[4] = '0';
      charArray0[5] = 'u';
      charArray0[6] = 'v';
      charArray0[7] = '+';
      charArray0[8] = '~';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'K', 1);
      assertEquals(9, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'K', 'U', 'P', 'd', '0', 'u', 'v', '+', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      char char0 = 'S';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)97;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) 'b');
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)10}, byteArray0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[3] = (Character) 'S';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)97;
      doubleArray0[1] = (double) 'S';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1677.74, (int) char0, 97.0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {97.0, 83.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap(booleanArray0, 2617, 678, 2617);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.shift(booleanArray1, (int) (byte)10);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = 'o';
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-68.0), (int) char0, 1532.9);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) char0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) char0, (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = ArrayUtils.indexOf(intArray0, (-1491), (-1491));
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Short[] shortArray0 = new Short[1];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 892.34318427252;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) Float.NaN;
      doubleArray0[3] = (double) (short)175;
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = 1.5;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {892.34318427252, (-1.0), Double.NaN, 175.0, Double.NaN, 1.5}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert(171, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)27232;
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)27232}, shortArray1);
      assertArrayEquals(new short[] {(short)27232, (short)27232}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)1081);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertTrue(int1 == int0);
      assertEquals(1, shortArray1.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)27232}, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      
      ArrayUtils.shift((boolean[]) null, 27, (-1491), (-1491));
      Short[] shortArray3 = ArrayUtils.toArray(shortArray0);
      assertEquals(1, shortArray3.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray3);
      assertSame(shortArray3, shortArray0);
      assertSame(shortArray0, shortArray3);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '\\';
      charArray0[3] = '<';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'}', '}', '\\', '<'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = new char[6];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '}';
      charArray2[1] = '<';
      charArray2[2] = '<';
      charArray2[3] = '}';
      charArray2[4] = '<';
      charArray2[5] = '<';
      int int0 = ArrayUtils.indexOf(charArray2, 'n', 2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(6, charArray2.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'}', '<', '<', '}', '<', '<'}, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) '}';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 125.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 125.0, 1, 43.0);
      assertFalse(int1 == int0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int1);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 125.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)879;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short)2151;
      shortArray0[4] = (short)36;
      shortArray0[5] = (short)22887;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)879, (short)6, (short)52, (short)2151, (short)36, (short)22887}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MutableInt mutableInt0 = new MutableInt((-4849));
      assertEquals((-4849), (int)mutableInt0.toInteger());
      assertEquals((-4849), (int)mutableInt0.getValue());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals((-4849.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-4849", mutableInt0.toString());
      assertEquals((-4849L), mutableInt0.longValue());
      assertEquals((-4849.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-4849), mutableInt0.shortValue());
      assertEquals((-4849), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, (String) null);
      assertEquals((-4849), (int)mutableInt0.toInteger());
      assertEquals((-4849), (int)mutableInt0.getValue());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals((-4849.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-4849", mutableInt0.toString());
      assertEquals((-4849L), mutableInt0.longValue());
      assertEquals((-4849.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-4849), mutableInt0.shortValue());
      assertEquals((-4849), mutableInt0.intValue());
      assertEquals("-4849", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2222);
      boolean boolean0 = ArrayUtils.contains(intArray0, 892);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-2222)}, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 69, (-113));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-113);
      longArray0[1] = (long) (-113);
      longArray0[2] = (long) (-113);
      longArray0[3] = (long) (-113);
      longArray0[4] = (long) (-113);
      longArray0[5] = (-670L);
      longArray0[6] = (long) (-113);
      longArray0[7] = (long) (-113);
      longArray0[8] = (long) (-113);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-113), (-373));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-113L), (-113L), (-113L), (-113L), (-113L), (-670L), (-113L), (-113L), (-113L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 575;
      longArray0[3] = (long) 575;
      longArray0[4] = (long) 575;
      longArray0[5] = (long) 575;
      ArrayUtils.shift(longArray0, (int) (short)0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 575L, 575L, 575L, 575L}, longArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 575, 128);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 575L, 575L, 575L, 575L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'A';
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 128;
      doubleArray0[5] = (double) 575L;
      doubleArray0[6] = (double) 575L;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {65.0, 0.0, 0.0, 0.0, 128.0, 575.0, 575.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'A';
      intArray0[1] = 65536;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3156, 2);
      assertEquals(2, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {65, 65536}, intArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = ArrayUtils.insert((int) (byte)89, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 6, 'E');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[4];
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-1), 1964);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 1964);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)97;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte) (-1), (byte[]) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)97, (byte) (-65), (byte) (-1), (byte) (-65), (byte)97}, byteArray0);
      assertNull(byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-65);
      shortArray0[1] = (short) (-2667);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-65);
      shortArray0[4] = (short) (byte)97;
      shortArray0[5] = (short) (byte) (-65);
      shortArray0[6] = (short) (byte) (-65);
      shortArray0[7] = (short) (byte)97;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-2394));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-65), (short) (-2667), (short) (-1), (short) (-65), (short)97, (short) (-65), (short) (-65), (short)97}, shortArray1);
      assertArrayEquals(new short[] {(short) (-65), (short) (-2667), (short) (-1), (short) (-65), (short)97, (short) (-65), (short) (-65), (short)97}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = 97;
      intArray0[3] = 4305;
      intArray0[4] = 1674;
      intArray0[6] = 2;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 4305;
      floatArray0[2] = (float) 1674;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 97;
      floatArray0[6] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {4305.0F, 0.0F, 1674.0F, 1.0F, 2.0F, 97.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 1029.7379F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {4305.0F, 0.0F, 1674.0F, 1.0F, 2.0F, 97.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 97;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 2;
      ArrayUtils.shift(longArray0, 2);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 2L, 1L, 97L, 1L}, longArray0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2, 2);
      assertNull(doubleArray0);
      
      Float float0 = new Float((-1889.0));
      assertEquals((-1889.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ArrayUtils.toString((Object) float0, "HKmh0fY hx}rW");
      assertEquals("-1889.0", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) 0L);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 134.15139858);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {134.15139858}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-1137));
      assertEquals((short) (-1137), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertEquals(6, shortArray0.length);
      assertEquals((short) (-1137), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals(6, shortArray0.length);
      assertEquals((short) (-1137), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1619));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-1619), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[1]);
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertEquals(6, shortArray0.length);
      assertEquals((short) (-1137), (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1619));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertEquals((short) (-1619), (short)short5);
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean0 = ArrayUtils.isSorted(shortArray0, comparator0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = Integer.getInteger("Vr?0AWT ]", (-1034));
      assertEquals((-1034), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, (-1800));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'X';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', 'X'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-5));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "}r&\\G.2{6y";
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-607), 1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1);
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'f', 9);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-1029L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shuffle((Object[]) stringArray0, (Random) mockRandom0);
      assertEquals(2, stringArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character character0 = new Character('a');
      assertEquals('a', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) character0);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertEquals(2, stringArray0.length);
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      
      ArrayUtils.swap((float[]) null, (-1998), (-573));
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Float float0 = new Float((-1467.7709F));
      assertEquals((-1467.7709F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)43;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)8, (byte) (-77), (byte)8, (byte)8, (byte)8, (byte)43, (byte)43}, byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-77);
      longArray0[1] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1729L), (int) (byte) (-77));
      assertEquals(2, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {(-77L), 1L}, longArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-77), (int) (byte) (-77), (int) (byte)43);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)8, (byte) (-77), (byte)8, (byte)8, (byte)8, (byte)43, (byte)43}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      String string0 = "s]dO}/dZ+zfF.:";
      Boolean boolean4 = new Boolean("s]dO}/dZ+zfF.:");
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      ArrayUtils.reverse(charArray0, 126, 49);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-677);
      shortArray0[1] = (short)843;
      shortArray0[2] = (short) (-35);
      shortArray0[3] = (short) (-677);
      shortArray0[4] = (short) (-677);
      shortArray0[5] = (short) (-677);
      shortArray0[6] = (short) (-2604);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)4210);
      assertEquals(7, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short) (-677), (short)843, (short) (-35), (short) (-677), (short) (-677), (short) (-677), (short) (-2604)}, shortArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)1109;
      shortArray0[2] = (short)8067;
      shortArray0[3] = (short) (-20);
      shortArray0[4] = (short) (-1311);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-95);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-95)}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1109;
      int int0 = ArrayUtils.indexOf(doubleArray0, 620.622, 1029);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1109.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-20), (int) (short) (-1311));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)1109, (short)8067, (short) (-20), (short) (-1311), (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      floatArray0[2] = 709.7751F;
      floatArray0[4] = 3253.9153F;
      floatArray0[5] = (-455.63F);
      floatArray0[6] = (-843.29F);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, (-3199.304F), 709.7751F, 0.0F, 3253.9153F, (-455.63F), (-843.29F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) 709.7751F;
      floatArray1[1] = (Float) 709.7751F;
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = 'z';
      charArray0[2] = 'y';
      charArray0[3] = 'j';
      ArrayUtils.shift(charArray0, 0, (-1422), (-1422));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'=', 'z', 'y', 'j'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)231;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short) (-2064);
      ArrayUtils.swap(shortArray0, (-754), (-1569), (int) (short)231);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)231, (short)7, (short) (-2064)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      ArrayUtils.shift(floatArray0, (-1555), (-2982), (-1555));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)16;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)116, (byte)0, (byte) (-56), (byte)110, (byte) (-6), (byte)0, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)116, (byte)0, (byte) (-56), (byte)110, (byte) (-6), (byte)0, (byte)16}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-56);
      doubleArray0[1] = (double) (-1555);
      doubleArray0[2] = (double) (byte)116;
      doubleArray0[3] = (double) (byte)110;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-6), 0, (-1538.9));
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-56.0), (-1555.0), 116.0, 110.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-63);
      floatArray0[1] = (float) (byte) (-63);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-63.0F), (-63.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-63);
      longArray0[1] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte) (-63);
      ArrayUtils.shift(longArray0, (int) (byte) (-63), (int) (byte) (-63), (-218));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), 0L, (-63L)}, longArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-63L);
      objectArray0[1] = (Object) (-63.0F);
      objectArray0[2] = (Object) (-63.0F);
      objectArray0[3] = (Object) (-63L);
      objectArray0[4] = (Object) (-63.0F);
      objectArray0[5] = (Object) (-63L);
      objectArray0[6] = (Object) (-63L);
      objectArray0[7] = (Object) (-63L);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(8, objectArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 3, 5, 6, 7}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '~');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertArrayEquals(new char[] {'a'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 'a';
      objectArray0[1] = (Object) 'a';
      objectArray0[2] = (Object) 'a';
      objectArray0[3] = (Object) 'a';
      objectArray0[4] = (Object) 'a';
      objectArray0[5] = (Object) 'a';
      objectArray0[6] = (Object) 'a';
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[4]);
      assertEquals(7, objectArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) 'a';
      longArray0[2] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L);
      assertEquals(3, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {(-1L), 97L, 0L}, longArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1L), 97L, 0L}, longArray0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'a';
      characterArray0[1] = (Character) 'a';
      characterArray0[2] = (Character) 'a';
      characterArray0[3] = (Character) 'a';
      characterArray0[4] = (Character) 'a';
      characterArray0[5] = (Character) 'a';
      characterArray0[6] = (Character) 'a';
      characterArray0[7] = (Character) 'a';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '0');
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray2.length);
      assertArrayEquals(new char[] {'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'}, charArray2);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (char)characterArray0[4];
      intArray0[1] = (int) (char)characterArray0[5];
      intArray0[2] = (int) (char)characterArray0[4];
      intArray0[3] = (int) (char)characterArray0[7];
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-326));
      assertFalse(int1 == int0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {97, 97, 97, 97}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 37;
      intArray0[1] = (-1037);
      intArray0[2] = 1884;
      intArray0[3] = 65536;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 37, (-1037));
      assertEquals(4, intArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {37, (-1037), 1884, 65536}, intArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)89;
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)51, (byte)10, (byte) (-3), (byte) (-51), (byte) (-126), (byte) (-57), (byte)17, (byte)89}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (-282);
      ArrayUtils.swap(floatArray0, (-5225), 1, 1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-282.0F), 1.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-282.0F);
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 70;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-282.0), 1.0, 14.0, 70.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1974.6483F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1974.6483F), (-282.0F), 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-282.0F), 1.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (double) 14);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1949.2132786081);
      doubleArray0[1] = (-452.093373197955);
      doubleArray0[2] = 11.101;
      doubleArray0[3] = 927.11;
      doubleArray0[4] = 11.101;
      doubleArray0[5] = 547.0;
      doubleArray0[6] = (-2598.79947823151);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1949.2132786081), 1072);
      assertEquals(7, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-1949.2132786081), (-452.093373197955), 11.101, 927.11, 11.101, 547.0, (-2598.79947823151)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Float float0 = new Float(114.0F);
      assertEquals(114.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1072;
      doubleArray1[1] = 11.101;
      doubleArray1[2] = (double) 1072;
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 1.5, (double) 1072);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1072.0, 11.101, 1072.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1231, 1231);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short)13;
      ArrayUtils.shift(shortArray0, (-6));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short)13}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)221);
      assertEquals(3, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short)13}, shortArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2061));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short)13}, shortArray0);
      assertArrayEquals(new short[] {(short)221, (short)13}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Long[] longArray0 = new Long[0];
      Long long0 = new Long((-722L));
      assertEquals((-722L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray1 = ArrayUtils.addFirst(longArray0, long0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)221;
      intArray0[2] = (int) (short)13;
      intArray0[3] = (int) (short)1;
      intArray0[4] = (int) (short)13;
      intArray0[5] = (int) (short) (-2061);
      intArray0[6] = (int) (short)13;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1, 221, 13, 1, 13, (-2061), 13}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, 0, 2853);
      Character[] characterArray0 = new Character[9];
      char char0 = 'i';
      Character character0 = Character.valueOf('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      ArrayUtils.shift(doubleArray0, 2139315143, 2139315143, 353);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3154.4479046, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      ArrayUtils.swap((byte[]) null, 2853, (int) char0, 0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, int1);
      
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int2 = mutableInt0.addAndGet(0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, int2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-59L);
      floatArray0[1] = (float) (-59L);
      floatArray0[2] = (float) 1021L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 1021L;
      floatArray0[6] = (float) 1;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-59.0F), (-59.0F), 1021.0F, 0.0F, 0.0F, 1021.0F, 1.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(longArray0, 0, 1060, 0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      ArrayUtils.shift(charArray0, (int) (short) (-1));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'C', 'C', 'C'}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 108;
      intArray0[2] = (int) 'C';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2147293020);
      floatArray0[1] = (float) (-2147293020);
      floatArray0[2] = (float) Integer.MIN_VALUE;
      floatArray0[3] = (-3256.3247F);
      floatArray0[4] = (float) (-2147293020);
      floatArray0[5] = (float) Integer.MIN_VALUE;
      floatArray0[6] = (float) Integer.MIN_VALUE;
      floatArray0[7] = (float) (-2147293020);
      floatArray0[8] = (float) (-2147293020);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 696, 1552);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-2.14729306E9F), (-2.14729306E9F), (-2.14748365E9F), (-3256.3247F), (-2.14729306E9F), (-2.14748365E9F), (-2.14748365E9F), (-2.14729306E9F), (-2.14729306E9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = '#';
      charArray0[7] = 'E';
      ArrayUtils.shift(charArray0, (-268));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'#', '#', '#', 'E', '#', '#', '#', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1949.2132786081);
      doubleArray0[1] = (-452.093373197955);
      doubleArray0[2] = 11.101;
      doubleArray0[3] = 927.11;
      doubleArray0[4] = 11.101;
      doubleArray0[5] = 547.0;
      doubleArray0[6] = (-2598.79947823151);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1949.2132786081), 1072);
      assertEquals(7, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-1949.2132786081), (-452.093373197955), 11.101, 927.11, 11.101, 547.0, (-2598.79947823151)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(114.0F);
      assertEquals(114.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(48.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(48.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      long[] longArray0 = ArrayUtils.add((long[]) null, (-1L));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(longArray0);
      
      float[] floatArray1 = new float[1];
      floatArray1[0] = 114.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertEquals(1, floatArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {114.0F}, floatArray1, 0.01F);
      
      ArrayUtils.shift(longArray0, 102, (-1838), 0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) long0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(2, floatArray0.length);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3809L);
      longArray0[1] = 1225L;
      longArray0[2] = 2320L;
      longArray0[3] = 1L;
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 1225L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1225.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(687.0503764);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(687.05035F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 1225.0F, 687.05035F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 955;
      intArray0[1] = 1571;
      intArray0[2] = 2088;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1571);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1571, 955, 1571, 2088}, intArray1);
      assertArrayEquals(new int[] {955, 1571, 2088}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-3809L), 1225L, 2320L, 1L, 0L}, longArray0);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(4, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1571, 955, 1571, 2088}, intArray1);
      assertArrayEquals(new int[] {1571, 955, 1571, 2088, 1571, 955, 1571, 2088}, intArray2);
      assertArrayEquals(new int[] {955, 1571, 2088}, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)912;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)827);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)912}, shortArray0);
      assertArrayEquals(new short[] {(short)912, (short)827}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-35);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-80));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-35)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0, class0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(objectArray0);
      assertSame(booleanArray0, objectArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      ArrayUtils.shift(doubleArray0, 2);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)1;
      boolean boolean4 = ArrayUtils.contains(byteArray0, (byte)96);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean4);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)76, (byte)55, (byte)122, (byte)107, (byte)96, (byte)10, (byte)1, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift((Object[]) null, 15);
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'y', 3);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-2147483648L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertNotNull(mockRandom2);
      
      int int0 = mockRandom2.nextInt((-55));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom2, mockRandom1);
      assertNotSame(mockRandom2, mockRandom0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-63L), 0L, (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (-63L));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-557.0));
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-63);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short) (byte) (-63);
      shortArray0[3] = (short) (byte) (-63);
      shortArray0[4] = (short) (byte) (-63);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4977), (int) (byte) (-63));
      assertTrue(int1 == int0);
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-63), (short)7, (short) (-63), (short) (-63), (short) (-63)}, shortArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short) (-63);
      Object object0 = ArrayUtils.get(objectArray0, 108);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (short)7;
      objectArray0[3] = (Object) (short) (-63);
      objectArray0[4] = (Object) (short) (-63);
      int int2 = ArrayUtils.indexOf(objectArray0, objectArray0[3], (int) (byte) (-63));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, objectArray0.length);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1491), 2470);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-5427.0F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-1125.25594306522), (double) (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1491), 2470);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-5427.0F));
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean2 = ArrayUtils.contains((double[]) null, (-1125.25594306522), (double) (-1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[2] = '{';
      ArrayUtils.reverse(charArray0, 49, (-5));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'R', '\u0000', '{'}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)42;
      shortArray0[3] = (short) (-35);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)13107);
      assertEquals(4, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)42, (short)0, (short)0, (short) (-35)}, shortArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-5);
      intArray0[1] = (int) (short)42;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-5), 42, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1949.2132786081);
      doubleArray0[1] = (-452.093373197955);
      doubleArray0[2] = 11.101;
      doubleArray0[3] = 927.11;
      doubleArray0[4] = (-2210.197822701745);
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)44;
      ArrayUtils.swap(byteArray0, (int) (byte) (-9), (int) (byte) (-17), (int) (byte)44);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)44, (byte)44, (byte)44, (byte)44, (byte)44, (byte) (-9), (byte)2, (byte)44}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-1949.2132786081), (-452.093373197955), 11.101, 927.11, (-2210.197822701745), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1949.2132786081), (-452.093373197955), 11.101, 927.11, (-2210.197822701745), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2143972965);
      intArray0[1] = (int) (byte)44;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)44;
      intArray0[4] = (int) (byte)44;
      intArray0[5] = 495;
      intArray0[6] = (int) (byte)44;
      intArray0[7] = (int) (byte)44;
      intArray0[8] = (int) (byte)44;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2143972965), 44, 2, 44, 44, 495, 44, 44, 44}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-55);
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 1688;
      doubleArray0[4] = (double) 1688;
      doubleArray0[5] = (double) (byte) (-55);
      Long[] longArray2 = new Long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      Long long0 = new Long((byte) (-55));
      assertEquals((-55L), (long)long0);
      assertNotNull(long0);
      
      longArray2[0] = long0;
      Long long1 = new Long((byte) (-55));
      assertTrue(long1.equals((Object)long0));
      assertEquals((-55L), (long)long1);
      assertNotNull(long1);
      
      longArray2[1] = long1;
      ArrayUtils.swap(byteArray0, 6, (int) (byte)44, 7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-55.0), (-693.0), (-693.0), 1688.0, 1688.0, (-55.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-55.0), (-693.0), (-693.0), 1688.0, 1688.0, (-55.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1073);
      assertEquals((short)1073, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short) (byte)44);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)44, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte) (-55));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-55), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)2632);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)2632, (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1073, (short)44, (short) (-55), (short)2632}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      ArrayUtils.shift((int[]) null, (-677));
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 900.23921047123);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {900.23921047123, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(4, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[1] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 4, 4}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2690));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2690), (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      int int1 = ArrayUtils.indexOf(longArray0, 0L, 2);
      assertFalse(int1 == int0);
      assertEquals(3, longArray0.length);
      assertEquals(2, int1);
      assertArrayEquals(new long[] {4L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 4L;
      floatArray0[2] = 1290.5272F;
      floatArray0[3] = 86.5F;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) 4;
      floatArray0[6] = (float) 4;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, 1029.7379F, 2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new float[] {0.0F, 4.0F, 1290.5272F, 86.5F, 0.0F, 4.0F, 4.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      ArrayUtils.swap(byteArray0, 4, 4, (int) (byte)44);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)44, (byte)44, (byte)44, (byte)44}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-1), (int) (byte)44, 3);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals("{0, 1, 4, 5, 7}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      longArray0[2] = (long) '0';
      longArray0[3] = (long) '0';
      longArray0[4] = (long) '0';
      objectArray0[0] = (Object) 'A';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray1);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray2.length);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray2);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      
      ArrayUtils.swap((float[]) null, 55, (-573));
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[0] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      ArrayUtils.reverse(byteArray0, 0, (int) (byte)10);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)97;
      intArray0[1] = (-576);
      intArray0[2] = (int) 'M';
      ArrayUtils.swap(intArray0, (-576), 1527, (-576));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {97, (-576), 77}, intArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('`');
      assertEquals('`', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'M');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertNotNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-55);
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 1688;
      doubleArray0[4] = (double) 1688;
      doubleArray0[5] = (double) (byte) (-55);
      Long[] longArray2 = new Long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      Long long0 = new Long((byte) (-55));
      assertEquals((-55L), (long)long0);
      assertNotNull(long0);
      
      longArray2[0] = long0;
      Long long1 = new Long((byte) (-55));
      assertTrue(long1.equals((Object)long0));
      assertEquals((-55L), (long)long1);
      assertNotNull(long1);
      
      longArray2[1] = long1;
      Long long2 = new Long(2200L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(2200L, (long)long2);
      assertNotNull(long2);
      
      longArray2[2] = long2;
      Long long3 = new Long(828L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals(828L, (long)long3);
      assertNotNull(long3);
      
      longArray2[3] = long3;
      Long long4 = new Long((long) longArray2[3]);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(5, longArray2.length);
      assertEquals(828L, (long)long4);
      assertNotNull(long4);
      
      longArray2[4] = long4;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertEquals(5, longArray3.length);
      assertEquals(5, longArray2.length);
      assertArrayEquals(new long[] {(-55L), (-55L), 2200L, 828L, 828L}, longArray3);
      assertNotNull(longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray2, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-55.0), (-693.0), (-693.0), 1688.0, 1688.0, (-55.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BRK,";
      stringArray0[1] = "z_0Dc3";
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((boolean[]) null, 2, 2, 18688);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-67), (-1013), (-253));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((boolean[]) null, 2, (-331), 1790);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-1013), 1568, (-249));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'H';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1948.003;
      doubleArray0[3] = (double) (byte)49;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1382.0), (int) (short)0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {72.0, 0.0, 1948.003, 49.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 306);
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (short)0);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {72.0, 0.0, 1948.003, 49.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      char[] charArray0 = new char[3];
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) '\u0000';
      doubleArray0[5] = (double) 'C';
      doubleArray0[7] = (double) '\u0000';
      doubleArray0[8] = (double) 'C';
      long[] longArray0 = new long[5];
      ArrayUtils.swap(longArray0, 5, (-2144961201), 2658);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap(booleanArray0, (-922), (-922), (-922));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) false;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '0';
      intArray0[1] = (-922);
      intArray0[2] = (-922);
      intArray0[3] = (int) '0';
      intArray0[4] = (int) '0';
      intArray0[5] = (-922);
      intArray0[6] = (-922);
      intArray0[7] = (-922);
      intArray0[8] = (int) '0';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'b';
      charArray0[2] = 'w';
      charArray0[3] = '{';
      charArray0[4] = 'W';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      int int0 = ArrayUtils.indexOf(charArray0, '{');
      assertEquals(7, charArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'2', 'b', 'w', '{', 'W', 'l', 'l'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 3);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, (-1525));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Long long0 = new Long((-1525));
      assertEquals((-1525L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[11];
      longArray0[0] = long0;
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1231, 1231);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short)13;
      ArrayUtils.shift(shortArray0, (-6));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short)13}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)221);
      assertEquals(3, shortArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short)13}, shortArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2061));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short)13}, shortArray0);
      assertArrayEquals(new short[] {(short)221, (short)13}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[0] = (short)0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-722);
      longArray0[4] = (-533L);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short) (-2690);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1259L, (-722));
      assertEquals(8, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {0L, 0L, 0L, (-722L), (-533L), 0L, 0L, (-2690L)}, longArray0);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(7, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      ArrayUtils.reverse(longArray0, (-4976), (-4976));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 1L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '8';
      charArray0[2] = 'Z';
      charArray0[3] = '}';
      charArray0[4] = '\\';
      charArray0[5] = 'Z';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, Integer.MAX_VALUE);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'P', '8', 'Z', '}', '\\', 'Z'}, charArray1);
      assertArrayEquals(new char[] {'P', '8', 'Z', '}', '\\', 'Z'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int int0 = ArrayUtils.indexOf(charArray0, '}', 0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(6, charArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'P', '8', 'Z', '}', '\\', 'Z'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = (double) 'Z';
      doubleArray0[2] = (double) 1L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {90.0, 90.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse(charArray1, 108, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'P', '8', 'Z', '}', '\\', 'Z'}, charArray1);
      assertArrayEquals(new char[] {'P', '8', 'Z', '}', '\\', 'Z'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-55);
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 1688;
      doubleArray0[4] = (double) 1688;
      doubleArray0[5] = (double) (byte) (-55);
      Long[] longArray2 = new Long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      Long long0 = new Long((byte) (-55));
      assertEquals((-55L), (long)long0);
      assertNotNull(long0);
      
      longArray2[0] = long0;
      Long long1 = new Long((byte) (-55));
      assertTrue(long1.equals((Object)long0));
      assertEquals((-55L), (long)long1);
      assertNotNull(long1);
      
      longArray2[1] = long1;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-55);
      intArray0[1] = (-693);
      intArray0[2] = 194;
      intArray0[3] = (-693);
      intArray0[4] = 1134;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-143), 1688);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-55), (-693), 194, (-693), 1134}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)57;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-25);
      shortArray0[3] = (short)49;
      shortArray0[4] = (short)3478;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)7;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2505), (int) (short) (-25));
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)57, (short) (-1), (short) (-25), (short)49, (short)3478, (short)2, (short)7}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2987), 892);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-2505);
      shortArray0[2] = (short) (-2505);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-2505);
      shortArray0[6] = (short)3478;
      shortArray0[7] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)382, (int) (short)2);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)2, (short) (-2505), (short) (-2505), (short)2, (short)2, (short) (-2505), (short)3478, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      ArrayUtils.reverse(longArray0, (-4976), (-4976));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 1L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-4976);
      intArray0[2] = 0;
      intArray0[1] = 0;
      intArray0[4] = 0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1747;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)1747}, shortArray0);
      assertArrayEquals(new short[] {(short)1747, (short)1747}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<Ym;q)";
      stringArray0[1] = "E<0gdvz!";
      stringArray0[2] = "byte";
      String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-43.0);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-43.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-43.0);
      objectArray0[1] = (Object) (-43.0);
      objectArray0[2] = (Object) (-43.0);
      objectArray0[3] = (Object) (-43.0);
      objectArray0[4] = (Object) (-43.0);
      objectArray0[5] = (Object) (-43.0);
      ArrayUtils.swap(objectArray0, 1892, 1892, 1311);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-2147483648L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1269.2F);
      assertEquals(1269.2F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2877.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-2877.0F), 1269.2F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((Object[]) floatArray0, (-80), (-2143961449), (-677));
      assertEquals(2, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2877.0F), 1269.2F}, floatArray1, 0.01F);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 781L);
      assertNull(longArray0);
      
      Short[] shortArray2 = new Short[0];
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertNotNull(shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-2877.0F), 1269.2F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '{';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'c', '{'}, charArray0);
      assertArrayEquals(new char[] {'c', '{', 'c', '{'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (-282));
      assertNull(longArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 134.15139858);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {134.15139858}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      Long long0 = new Long(2230L);
      assertEquals(2230L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(828L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(828L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long((-2097L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-2097L), (long)long2);
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[18];
      Long long3 = new Long(2200L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals(2200L, (long)long3);
      assertNotNull(long3);
      
      longArray0[0] = long3;
      longArray0[1] = long0;
      longArray0[2] = long0;
      Long long4 = new Long(115L);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertEquals(115L, (long)long4);
      assertNotNull(long4);
      
      longArray0[3] = long4;
      longArray0[4] = long2;
      longArray0[5] = long0;
      longArray0[7] = long1;
      longArray0[8] = long1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      long[] longArray2 = ArrayUtils.add((long[]) null, (-1678L));
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {(-1678L)}, longArray2);
      assertNotNull(longArray2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = ' ';
      charArray0[2] = '~';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = '~';
      charArray0[6] = 'K';
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'K', '~', 'K', 'K', '~', ' ', '~'}, charArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 1688, (-1844));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '|';
      charArray0[2] = 'W';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'W', '|', '~'}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1009);
      intArray0[1] = (int) '|';
      intArray0[2] = (int) '|';
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 12);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-1009), 124, 124}, intArray0);
      assertArrayEquals(new int[] {(-1009), 124, 124}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-98);
      MutableInt mutableInt0 = new MutableInt((Number) (byte)68);
      assertEquals(68.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("68", mutableInt0.toString());
      assertEquals(68L, mutableInt0.longValue());
      assertEquals(68, (int)mutableInt0.toInteger());
      assertEquals((byte)68, mutableInt0.byteValue());
      assertEquals(68.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(68, (int)mutableInt0.getValue());
      assertEquals((short)68, mutableInt0.shortValue());
      assertEquals(68, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.addAndGet(2465);
      assertEquals(2533.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2533, mutableInt0.shortValue());
      assertEquals(2533L, mutableInt0.longValue());
      assertEquals("2533", mutableInt0.toString());
      assertEquals(2533, (int)mutableInt0.toInteger());
      assertEquals(2533, mutableInt0.intValue());
      assertEquals(2533, (int)mutableInt0.getValue());
      assertEquals(2533.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-27), mutableInt0.byteValue());
      assertEquals(2533, int0);
      
      mutableInt0.add(1328);
      assertEquals((short)3861, mutableInt0.shortValue());
      assertEquals(3861.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3861, (int)mutableInt0.getValue());
      assertEquals(3861L, mutableInt0.longValue());
      assertEquals(3861, mutableInt0.intValue());
      assertEquals(3861, (int)mutableInt0.toInteger());
      assertEquals("3861", mutableInt0.toString());
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals(3861.0F, mutableInt0.floatValue(), 0.01F);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mutableInt0;
      objectArray0[1] = (Object) (byte)60;
      objectArray0[2] = (Object) (byte)43;
      objectArray0[3] = (Object) (byte)68;
      objectArray0[4] = (Object) (byte)68;
      objectArray0[5] = (Object) (byte) (-98);
      objectArray0[6] = (Object) (byte) (-112);
      objectArray0[7] = (Object) (byte)43;
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null, (-233));
      assertFalse(int1 == int0);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int2 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte)68);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'I');
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)13);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      
      ArrayUtils.shift(doubleArray1, (int) (byte)13, 50, 50);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)13, (-2070));
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("s]dO}/dZ+zfF.:");
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0, 3);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-77);
      boolean boolean5 = ArrayUtils.isSorted(byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)8, (byte)43, (byte) (-77)}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-77);
      shortArray0[1] = (short) (byte)43;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)8;
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)43;
      shortArray0[6] = (short) (byte) (-77);
      shortArray0[7] = (short) (byte) (-1);
      ArrayUtils.reverse(shortArray0, 2, 615);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-77), (short)43, (short) (-1), (short) (-77), (short)43, (short) (-1), (short)8, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      float[] floatArray0 = new float[20];
      floatArray0[0] = (float) 790;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 3636;
      floatArray0[3] = (float) 3636;
      floatArray0[4] = (float) 3968;
      floatArray0[5] = 8.0F;
      floatArray0[6] = 8.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3968, Length: 20
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2877L;
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 2);
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {2877L, (-1L)}, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = ':';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = ':';
      charArray0[5] = '1';
      charArray0[6] = 'X';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'X', ':', 'X', 'X', ':', '1', 'X'}, charArray0);
      assertArrayEquals(new char[] {'X', ':', 'X', 'X', ':', '1', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-6205);
      shortArray0[1] = (short) (-6205);
      shortArray0[2] = (short) (-1996);
      long[] longArray0 = new long[6];
      longArray0[0] = (-3162L);
      longArray0[1] = (long) (short) (-6205);
      longArray0[2] = (long) (short) (-1996);
      longArray0[3] = (long) (short) (-6205);
      longArray0[4] = (long) (short) (-1996);
      longArray0[5] = (long) (short) (-1996);
      ArrayUtils.shift(longArray0, 870);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-3162L), (-6205L), (-1996L), (-6205L), (-1996L), (-1996L)}, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'k';
      charArray0[2] = 'T';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'F', 'k', 'T'}, charArray1);
      assertArrayEquals(new char[] {'F', 'k', 'T'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Byte[] byteArray0 = new Byte[4];
      try { 
        Byte.valueOf("java.lang.Character", 2255);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2255 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '0');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character[] characterArray0 = new Character[3];
      char char0 = 'p';
      Character character0 = Character.valueOf('p');
      assertEquals('p', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('p', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('B');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('B', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertEquals(3, characterArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1472L);
      longArray0[2] = (-381L);
      longArray0[3] = 0L;
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1472L));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 37L;
      longArray0[1] = (-1472L);
      longArray0[2] = (-381L);
      longArray0[3] = (-2253L);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1472L));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(booleanArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean3);
      
      MockRandom mockRandom0 = new MockRandom(1398L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[0];
      MockRandom mockRandom1 = new MockRandom((-31L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(mockRandom1, mockRandom0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (-2147069794));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-6));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-6)}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 2, (Object) null);
      assertEquals(6, objectArray0.length);
      assertNull(object1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('+');
      assertFalse(character1.equals((Object)character0));
      assertEquals('+', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('!');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('!', (char)character2);
      assertNotNull(character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '4');
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 'o';
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) '!';
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.0, 2.0, 111.0, 2.0, 33.0, 2.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MockRandom mockRandom0 = new MockRandom(2);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) (-2222));
      assertEquals((-2222.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      Float float1 = new Float(2440.07938954244);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2440.0793F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[2] = float1;
      Float float2 = new Float((double) (-2222));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2222.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[3] = float2;
      Float float3 = new Float(0.7);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.7F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[4] = float3;
      Float float4 = new Float((float) (byte) (-55));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-55.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1688;
      intArray0[1] = 15;
      intArray0[2] = (int) (byte) (-55);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 97, (-925));
      assertEquals(3, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {1688, 15, (-55)}, intArray0);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-55));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1688, 15, (-55)}, intArray0);
      assertArrayEquals(new int[] {1688, 15}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray2 = new float[7];
      floatArray2[0] = (float) floatArray0[2];
      floatArray2[1] = (float) (-2222);
      floatArray2[2] = (float) (byte) (-55);
      floatArray2[3] = (float) 15;
      floatArray2[4] = (float) (-2222);
      floatArray2[5] = (float) floatArray0[4];
      floatArray2[6] = (float) floatArray0[2];
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray2, 15.0F, 15);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(7, floatArray2.length);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new float[] {2440.0793F, (-2222.0F), (-55.0F), 15.0F, (-2222.0F), 0.7F, 2440.0793F}, floatArray2, 0.01F);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      long[] longArray0 = new long[2];
      longArray0[0] = 258L;
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {258L, 1L}, longArray0);
      assertArrayEquals(new long[] {258L, 1L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[9];
      char char0 = '(';
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('(');
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertEquals('(', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('(');
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('(', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character2);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertEquals('(', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character2);
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('(', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('b');
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertEquals('b', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('b');
      assertFalse(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertEquals('b', (char)character6);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('\'');
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character5));
      assertEquals('\'', (char)character7);
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character('f');
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character6));
      assertEquals('f', (char)character8);
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', 'b', 'b', '\'', 'f'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 95;
      intArray0[1] = (int) (char)character7;
      intArray0[2] = (int) char0;
      intArray0[3] = (int) (char)character8;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {95, 39, 40, 102}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_CHAR_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals(0, longArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-2065L));
      assertEquals((-2065L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(343L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(343L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 3156.4949F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3156.4949F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 2013265920, 2013265920, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, (-2981), (-2222));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Character character0 = Character.valueOf('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-55), objectArray0[1]);
      assertEquals(3, objectArray0.length);
      assertEquals('8', object0);
      assertNotNull(object0);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-55);
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 1688;
      doubleArray0[4] = (double) 1688;
      doubleArray0[5] = (double) (byte) (-55);
      Long long0 = new Long((byte) (-55));
      assertEquals((-55L), (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-2146629481));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      Integer integer0 = new Integer(2543);
      assertEquals(2543, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2543);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2543, (int)integer1);
      assertNotNull(integer1);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 4305);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(doubleArray0, 1004);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 4, 5, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      longArray0[3] = (long) '0';
      objectArray0[0] = (Object) 'A';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {65L, 65L, 0L, 48L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {65L, 65L, 0L, 48L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '0';
      Long long0 = new Long(48L);
      assertEquals(48L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-417L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-417L), (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long((-282L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-282L), (long)long2);
      assertNotNull(long2);
      
      Long long3 = new Long(65L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(65L, (long)long3);
      assertNotNull(long3);
      
      Long[] longArray2 = new Long[0];
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotNull(longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-63), (int) (byte) (-63));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1555);
      longArray0[2] = (long) 2;
      ArrayUtils.reverse(longArray0, (-351), (-1201));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1555L), 2L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1555);
      intArray0[1] = (int) (byte) (-63);
      intArray0[2] = (-1555);
      ArrayUtils.swap(intArray0, 4, 4);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1555), (-63), (-1555)}, intArray0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-63), (-1555), (-1555)}, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 2L;
      objectArray0[1] = (Object) 2L;
      objectArray0[2] = (Object) 1.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(longArray0, 1, (-1), (-1555));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1555L), 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 34;
      intArray0[1] = 50;
      int int0 = ArrayUtils.indexOf(intArray0, (-1995), (-2157));
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {34, 50}, intArray0);
      
      float[] floatArray0 = new float[7];
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2146109535, 34);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {34, 50}, intArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-1703));
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 574L;
      longArray0[2] = 1L;
      longArray0[3] = (-2367L);
      longArray0[4] = (-2528L);
      longArray0[5] = 1450L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 115L, 88);
      assertEquals(6, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {0L, 574L, 1L, (-2367L), (-2528L), 1450L}, longArray0);
      assertNotNull(bitSet0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("java.lang.Boolean");
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((boolean) boolean0);
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-528));
      assertEquals((short) (-528), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-528));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-528), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals(7, shortArray0.length);
      assertEquals((short) (-528), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1800));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-1800), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[3]);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertEquals(7, shortArray0.length);
      assertEquals((short) (-1800), (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[4]);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertEquals(7, shortArray0.length);
      assertEquals((short) (-1800), (short)short5);
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)2919);
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)2919, (short)short6);
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-528), (short) (-528), (short) (-528), (short) (-1800), (short) (-1800), (short) (-1800), (short)2919}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("java.lang.Boolean");
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean4;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Short short0 = new Short((short) (-528));
      assertEquals((short) (-528), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-495));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-495), (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-495));
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-495), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-495));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertEquals((short) (-495), (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)478);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)478, (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short)478);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertEquals((short)478, (short)short5);
      assertNotNull(short5);
      
      Short short6 = new Short((short)6001);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertEquals((short)6001, (short)short6);
      assertNotNull(short6);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short2;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-495), (short) (-528)}, shortArray1);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)478;
      intArray0[1] = 14;
      intArray0[2] = (int) (short)478;
      intArray0[3] = (int) (short) (-528);
      intArray0[4] = (int) (short)478;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-528), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -528, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 1931, (int) (byte)2);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = 419L;
      longArray0[1] = (long) (byte)100;
      longArray0[2] = (long) (byte)115;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)100;
      longArray0[5] = (long) (byte)100;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)115);
      assertEquals(6, longArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new long[] {419L, 100L, 115L, 2L, 100L, 100L}, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'u';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '_', 340);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {' ', ' ', 'u'}, charArray0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Integer integer0 = new Integer(120);
      assertEquals(120, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      Double double0 = new Double(3147.61);
      assertEquals(3147.61, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), (-1));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) double0;
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-306.77444F));
      assertEquals(0, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte)13;
      doubleArray0[2] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3066), (-5373));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {13.0, 13.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {13.0, 13.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)37;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)37}, shortArray0);
      assertArrayEquals(new short[] {(short)37}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {13.0, 13.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      Character character0 = new Character('_');
      assertEquals('_', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('_');
      assertTrue(character1.equals((Object)character0));
      assertEquals('_', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '_');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[1];
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1375), (-1375));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Long long0 = new Long((-806));
      assertEquals((-806L), (long)long0);
      assertNotNull(long0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)9;
      floatArray0[1] = (float) (byte)9;
      floatArray0[2] = (float) (byte)9;
      floatArray0[3] = (float) (byte)9;
      floatArray0[4] = (float) (byte)9;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(5, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {9.0F, 9.0F, 9.0F, 9.0F, 9.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 1, (-718));
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 70;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)46);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(0, byteArray1.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(bitSet0);
      assertNotSame(byteArray1, byteArray2);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-718);
      floatArray0[1] = (float) 70L;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (-2403.0044F);
      floatArray0[4] = (float) 1;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) 1;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-718.0F), 70.0F, 1.0F, (-2403.0044F), 1.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray1, (-718), (-3695));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Double double0 = new Double((-762.43895835342));
      assertEquals((-762.43895835342), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[2] = double0;
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 134.15139858);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {134.15139858}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-982.83F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), 184);
      assertEquals(1, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {(-982.83F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)2;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)112, 49);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(9, byteArray0.length);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new byte[] {(byte)22, (byte)13, (byte) (-65), (byte)0, (byte)0, (byte)0, (byte)22, (byte)13, (byte)2}, byteArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-982.83F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-982.83F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)13, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '0');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '0';
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = (double) '0';
      doubleArray0[3] = (double) '0';
      doubleArray0[4] = (double) '0';
      doubleArray0[5] = (double) '0';
      doubleArray0[6] = (double) '0';
      int int0 = (-146);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-146));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -146, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-67), (int) (byte)11);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte)106, (byte)122, (byte)62, (byte)2, (byte)11, (byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertEquals('o', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'o');
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'o', 'o', 'o'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)106;
      intArray0[3] = (int) (byte)106;
      intArray0[4] = (int) (byte) (-55);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {111, 2, 106, 106, (-55)}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1922), (int) (byte)11);
      assertTrue(int1 == int0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), (-528));
      assertEquals(4, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-528.0F), 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      ArrayUtils.swap(floatArray0, (-748), 2, (int) (byte)0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-528.0F), 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      ArrayUtils.shift(doubleArray0, (int) (byte)0, 120, 1008);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1, class0);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1902.6F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-528.0F), 0.0F, 0.0F, (-528.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-528.0F), 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 4, 5, 7}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      longArray0[3] = (long) '0';
      longArray0[4] = (long) '0';
      objectArray0[0] = (Object) 'A';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {65L, 65L, 0L, 48L, 48L, 0L}, longArray1);
      assertArrayEquals(new long[] {65L, 65L, 0L, 48L, 48L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '0';
      intArray0[1] = (int) 'A';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 340);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {48, 65}, intArray0);
      assertArrayEquals(new int[] {48, 65}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      Integer integer0 = new Integer((-1452));
      assertEquals((-1452), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("}r&\\G.2{6y");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = true;
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("}r&\\G.2{6y");
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5);
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(false);
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      Boolean boolean7 = Boolean.valueOf((String) null);
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7);
      assertNotNull(boolean7);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean6;
      booleanArray0[1] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[5];
      intArray0[0] = (-1452);
      intArray0[1] = (-1452);
      intArray0[2] = (-1452);
      intArray0[3] = (-1452);
      intArray0[4] = (-1452);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 4312.2202812, 62);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Float float0 = new Float((-602.0));
      assertEquals((-602.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2533.66F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2533.66F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(9.10622686858293);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(9.106227F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-602.0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-602.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 160);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertNull(object0);
      
      objectArray0[0] = null;
      BitSet bitSet1 = (BitSet)ArrayUtils.get(objectArray0, 160, (Object) bitSet0);
      assertEquals(9, objectArray0.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertNotNull(bitSet1);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      
      objectArray0[1] = (Object) bitSet1;
      Object object1 = ArrayUtils.get(objectArray0, (-1900), (Object) null);
      assertEquals(9, objectArray0.length);
      assertNull(object1);
      
      objectArray0[2] = null;
      BitSet bitSet2 = (BitSet)ArrayUtils.get(objectArray0, 1, (Object) bitSet0);
      assertEquals(9, objectArray0.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertNotNull(bitSet2);
      assertSame(bitSet0, bitSet2);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet2, bitSet0);
      assertSame(bitSet2, bitSet1);
      
      objectArray0[3] = (Object) bitSet2;
      Object object2 = ArrayUtils.removeAll(object0, bitSet0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertNull(object2);
      assertSame(bitSet0, bitSet2);
      assertSame(bitSet0, bitSet1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 160;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = 97;
      intArray0[3] = 4305;
      intArray0[4] = 1674;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = (-2427);
      int int0 = ArrayUtils.indexOf(intArray0, 1);
      assertEquals(8, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, (-1), 97, 4305, 1674, 2, 2, (-2427)}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 43.0;
      ArrayUtils.shift(doubleArray0, (-352));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 43.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2479L);
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1L));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-1L);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, 53, 53, 70);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, (-1.0), 1.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short)536;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)536, (short)0}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-682);
      shortArray0[1] = (short)2847;
      shortArray0[2] = (short) (-455);
      shortArray0[3] = (short) (-1013);
      shortArray0[4] = (short)1279;
      shortArray0[5] = (short) (-541);
      shortArray0[6] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-682), (short)2847, (short) (-455), (short) (-1013), (short)1279, (short) (-541), (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(339.222134);
      assertEquals(339.222134, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2867.93087));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2867.93087), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short) (-1));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(339.222134);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(339.222134, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((short)1279);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(1279.0, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((short) (-541));
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((-541.0), (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1305.4861837603517);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals(1305.4861837603517, (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-219.67744624));
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((-219.67744624), (double)double7, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals(0.0, (double)double8, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-63);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-63);
      shortArray0[1] = (short)53;
      shortArray0[2] = (short) (byte) (-63);
      shortArray0[3] = (short) (byte) (-63);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (-1725);
      shortArray0[6] = (short) (byte) (-63);
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('4');
      assertEquals('4', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(';');
      assertFalse(character1.equals((Object)character0));
      assertEquals(';', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('4');
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('4', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'a');
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'4', ';', '4'}, charArray0);
      assertNotNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'4', ';', '4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.add((int[]) null, (int) (byte) (-1));
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-2147483648L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1269.2F);
      assertEquals(1269.2F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2877.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-2877.0F), 1269.2F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(shortArray0, (-677));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(666);
      assertEquals(666, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {666}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.shift((double[]) null, (int) (short) (-1), (-677), (-677));
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-21);
      ArrayUtils.shift(byteArray0, (-2619), 1126, (-2133));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)68, (byte) (-21), (byte) (-48), (byte)104, (byte) (-33), (byte)2, (byte)2}, byteArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((byte)104);
      assertEquals(104, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)2);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2619));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-2619), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(2, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(907);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(907, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1865));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-1865), (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertArrayEquals(new int[] {104, 2, (-2619), 2, 907, (-1865)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      int int0 = ArrayUtils.indexOf(charArray0, 'R', (-3771));
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-32);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-42), (int) (byte)3);
      assertEquals(4, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte)3, (byte) (-32)}, byteArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = (double) (byte) (-63);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) (byte) (-63);
      doubleArray0[6] = (double) (byte) (-63);
      doubleArray0[7] = (double) (byte) (-63);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), (-63.0), 1.5, (-63.0), (-63.0), (-63.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (-63.0));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2130.764));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-31);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte)100;
      shortArray0[2] = (short) (byte) (-31);
      ArrayUtils.shift(shortArray0, 54, (-3316), (-1517));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)100, (short) (-31)}, shortArray0);
      
      ArrayUtils.shift((byte[]) null, (int) (byte)2);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)100;
      longArray0[1] = (long) (byte)115;
      longArray0[2] = (long) (byte)100;
      longArray0[3] = (long) (-1517);
      longArray0[4] = (long) (byte)100;
      longArray0[5] = (long) (byte) (-31);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 100L);
      assertEquals(6, longArray0.length);
      assertEquals("{0, 2, 4}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {100L, 115L, 100L, (-1517L), 100L, (-31L)}, longArray0);
      assertNotNull(bitSet0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'a');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.swap((long[]) null, (int) (short)0, 0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'A';
      charArray0[4] = '=';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'B';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1177.2797F);
      floatArray0[1] = (float) 'A';
      floatArray0[2] = (float) (-3169);
      floatArray0[3] = (float) 'B';
      floatArray0[4] = (float) 'A';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), (-528));
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      ArrayUtils.swap(floatArray0, (-748), 2, (int) (byte)0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      ArrayUtils.shift(doubleArray0, (int) (byte)0, 120, 1008);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1, class0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1902.6F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1231, 1231);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short)13;
      ArrayUtils.reverse((float[]) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-2061);
      floatArray0[1] = 1121.21F;
      floatArray0[2] = (-1610.5253F);
      floatArray0[3] = (float) (short)13;
      floatArray0[4] = 1121.21F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1029.7379F);
      assertEquals(5, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {(-2061.0F), 1121.21F, (-1610.5253F), 13.0F, 1121.21F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 1231, 12);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3179.8638F;
      floatArray0[1] = (-944.3F);
      floatArray0[2] = (-987.2885F);
      floatArray0[3] = 3634.34F;
      floatArray0[4] = (-1610.5253F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 666.77F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {666.77F, 0.0F, (-1610.5253F), 3634.34F, (-987.2885F), (-944.3F), 3179.8638F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1121.21F);
      assertEquals(7, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {666.77F, 0.0F, (-1610.5253F), 3634.34F, (-987.2885F), (-944.3F), 3179.8638F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1766);
      assertEquals(18, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Float float0 = new Float((double) (short)1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (short)2);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(2804.4832F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2804.4832F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[5];
      Float float3 = new Float((-1.0));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[0] = float3;
      floatArray0[1] = float1;
      floatArray0[2] = float2;
      floatArray0[3] = float2;
      floatArray0[4] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1269.2F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 2.0F, 2804.4832F, 2804.4832F, 2.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = 'B';
      charArray0[2] = '!';
      ArrayUtils.swap(charArray0, 1, (int) (short)1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {']', 'B', '!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1, 1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1061);
      shortArray0[1] = (short) (-1061);
      shortArray0[2] = (short) (-1061);
      ArrayUtils.swap(shortArray0, 2, (int) (short) (-1061), 231);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1061), (short) (-1061), (short) (-1061)}, shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      ArrayUtils.swap(charArray0, 0, (-1837));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 575;
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[2] = '';
      charArray0[3] = '';
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'A';
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 3);
      assertEquals(1, characterArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2332.83944126303), 3, (-926.9566947397195));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {575.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, 575, 3, 2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'A', '\u0000', '', ''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2906.1316603844457;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 216;
      doubleArray0[4] = (double) 216;
      doubleArray0[5] = (double) (-1.0F);
      ArrayUtils.swap(doubleArray0, 216, 1903);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2906.1316603844457, (-1.0), (-1.0), 216.0, 216.0, (-1.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1903;
      intArray0[1] = 1903;
      intArray0[2] = 1903;
      intArray0[3] = 1;
      intArray0[4] = 1903;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2825, (-11));
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1903, 1903, 1903, 1, 1903}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      ArrayUtils.swap(charArray0, 2825, 2123622718);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'@', 'z', 'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3968;
      doubleArray0[1] = (double) 3968;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2057, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {3968.0, 3968.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {3968.0, 3968.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3968.0, 3968.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Long long0 = new Long((-1525));
      assertEquals((-1525L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 790, 0, 3968, 3636, 0, 0, 0}, intArray0);
      
      Character[] characterArray2 = ArrayUtils.addAll(characterArray1, characterArray0);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray2.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray2);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray0, characterArray2);
      assertNotSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      assertNotSame(characterArray1, characterArray2);
      assertNotSame(characterArray1, characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 102, (-3559));
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 790, 0, 3968, 3636, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Float float0 = new Float((float) (byte) (-63));
      assertEquals((-63.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      Float float1 = new Float((float) (byte) (-63));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-63.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(21.98472390102357);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(21.984724F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      floatArray0[3] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1435.7F));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-63.0F), (-63.0F), 21.984724F, (-63.0F), (-1435.7F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3478;
      shortArray0[1] = (short)3478;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)37, (-2367));
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)3478, (short)3478, (short)2, (short)2}, shortArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)112;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)63, (int) (byte)112);
      assertTrue(int1 == int0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)5, (byte)57, (byte) (-38), (byte)63, (byte)4, (byte)112}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-21);
      ArrayUtils.shift(byteArray0, (-2619), 1126, (-2133));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)68, (byte) (-21), (byte) (-33), (byte)93, (byte) (-33), (byte)2, (byte)113}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)68;
      longArray0[1] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte) (-33));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {68L, 2L, (-33L)}, longArray1);
      assertArrayEquals(new long[] {68L, 2L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1766);
      assertEquals(18, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)1, (int) (short)1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[2] = (double) 1L;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (-677);
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) (short)1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, 1.0, (-677.0), 1.0, 1.0}, doubleArray0, 0.01);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-677);
      longArray1[1] = (long) 1766;
      longArray1[2] = (long) (short)1;
      longArray1[3] = (long) (short)1;
      longArray1[4] = (long) 1766;
      longArray1[5] = (long) (short)1;
      longArray1[6] = (long) 46;
      longArray1[7] = (long) 46;
      longArray1[8] = (long) 7;
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray2.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {(-677L), 1766L, 1L, 1L, 1766L, 1L, 46L, 46L, 7L}, longArray2);
      assertArrayEquals(new long[] {(-677L), 1766L, 1L, 1L, 1766L, 1L, 46L, 46L, 7L}, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-153));
      assertEquals(9, booleanArray0.length);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)9);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(doubleArray0, (-1677), 4, 2173);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-33);
      ArrayUtils.shift(byteArray0, (-1938), 1301, (-1526));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-33)}, byteArray0);
      
      Integer integer0 = new Integer((byte) (-21));
      assertEquals((-21), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2173);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2173, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((byte) (-33));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-33), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(4, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(1269);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(1269, (int)integer4);
      assertNotNull(integer4);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {2173, 2173}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      ArrayUtils.swap(floatArray0, (-748), 14, (int) (byte)0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-528.0F);
      doubleArray0[1] = (double) (byte)14;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-528.0), 14.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (float) (byte)14);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {14.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), (-528));
      assertEquals(4, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      ArrayUtils.swap(floatArray0, (-748), 2, (int) (byte)0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-528.0F);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 2;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-528.0), 0.0, 2.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (float) (byte)13);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {13.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "}r&\\G.2{6y";
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[5] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-607), 1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1);
      assertEquals(3, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'f', 9);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-1029L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      ArrayUtils.shuffle((Object[]) stringArray0, (Random) mockRandom0);
      assertEquals(2, stringArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) "}r&\\G.2{6y", 0);
      assertTrue(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "}r&\\G.2{6y";
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-607), 1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1);
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'f', 9);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-1029L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shuffle((Object[]) stringArray0, (Random) mockRandom0);
      assertEquals(2, stringArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) "}r&\\G.2{6y", 0);
      assertTrue(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3154.4479046;
      doubleArray1[1] = (-1.0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'y', (-333));
      assertEquals(1, charArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-1525L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1525L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom1.nextInt(1859);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(2, objectArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '=';
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-708), booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap(booleanArray1, 349, (-180), (-708));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      char[] charArray0 = new char[7];
      charArray0[3] = 'D';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'D', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) '\u0000');
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (double) (byte)42;
      ArrayUtils.shift((char[]) null, 1781, (int) (byte)42, (-479));
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      Double double0 = new Double(Float.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      Integer integer0 = new Integer((-1452));
      assertEquals((-1452), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("}r&\\G.2{6y");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("}r&\\G.2{6y");
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      Boolean boolean6 = Boolean.valueOf((String) null);
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean5;
      booleanArray0[1] = boolean4;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-722);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-1452));
      assertEquals(1, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {(-722L)}, longArray0);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 'd';
      charArray0[2] = 'z';
      charArray0[3] = '_';
      charArray0[4] = 'Y';
      charArray0[5] = 'p';
      charArray0[6] = 'k';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'z');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'X', 'd', 'z', '_', 'Y', 'p', 'k'}, charArray0);
      assertArrayEquals(new char[] {'X', 'd', '_', 'Y', 'p', 'k'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-515);
      shortArray0[2] = (short)2183;
      shortArray0[3] = (short)615;
      shortArray0[4] = (short) (-446);
      shortArray0[5] = (short)1035;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short)615);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)615, (short) (-515), (short)2183, (short)615, (short) (-446), (short)1035}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-515), (short)2183, (short)615, (short) (-446), (short)1035}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      char char0 = 'b';
      char char1 = 'S';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)97;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (int) 'b');
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)10}, byteArray0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[3] = (Character) 'S';
      characterArray0[4] = (Character) 'b';
      characterArray0[5] = (Character) 'b';
      characterArray0[7] = (Character) 'S';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) 'S';
      ArrayUtils.swap(intArray0, (-576), (-2136), (int) (byte)0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {10, 0, 83}, intArray0);
      
      Character[] characterArray1 = new Character[0];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray1, char0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(char0 == char1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertNotSame(characterArray1, characterArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = char0;
      charArray1[1] = char1;
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'b', 'S'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)8);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)10, (byte)8}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 529;
      intArray0[1] = (-722);
      intArray0[2] = (int) (byte) (-55);
      intArray0[3] = 529;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 529, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
      charArray0[7] = '7';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '7');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', '7', '7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', '7'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', '7', '7'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (-78.67858);
      doubleArray0[3] = (double) '7';
      doubleArray0[4] = (double) '7';
      doubleArray0[5] = (double) '7';
      doubleArray0[6] = (double) '7';
      doubleArray0[7] = (double) '7';
      doubleArray0[8] = (double) '7';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, 529);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1688, (-722));
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 529;
      intArray0[1] = (-722);
      intArray0[2] = (int) (byte) (-55);
      intArray0[3] = 529;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 529, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
      
      ArrayUtils.swap((byte[]) null, 8, 0, (-2136));
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      double[] doubleArray0 = new double[8];
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[2] = '';
      charArray0[3] = '';
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'A';
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 3);
      assertEquals(1, characterArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'A';
      ArrayUtils.swap(floatArray0, (-2082), 1, (-2082));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {65.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-5225));
      assertTrue(boolean1 == boolean0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (-1892.3F);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (-944.3F);
      floatArray0[6] = (float) 8;
      floatArray0[7] = (float) 8;
      ArrayUtils.swap(floatArray0, 2, 2147026733, 1901);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {8.0F, 2.0F, (-1892.3F), 2.0F, 2.0F, (-944.3F), 8.0F, 8.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Float float0 = new Float(914.1482F);
      assertEquals(914.1482F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(914L, mutableInt0.longValue());
      assertEquals(914, mutableInt0.intValue());
      assertEquals("914", mutableInt0.toString());
      assertEquals(914, (int)mutableInt0.getValue());
      assertEquals((short)914, mutableInt0.shortValue());
      assertEquals(914.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(914, (int)mutableInt0.toInteger());
      assertEquals((byte) (-110), mutableInt0.byteValue());
      assertEquals(914.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(914L, mutableInt0.longValue());
      assertEquals(914, mutableInt0.intValue());
      assertEquals("914", mutableInt0.toString());
      assertEquals(914, (int)mutableInt0.getValue());
      assertEquals((short)914, mutableInt0.shortValue());
      assertEquals(914.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(914, (int)mutableInt0.toInteger());
      assertEquals((byte) (-110), mutableInt0.byteValue());
      assertEquals(914.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-110), mutableInt1.byteValue());
      assertEquals((short)914, mutableInt1.shortValue());
      assertEquals(914, mutableInt1.intValue());
      assertEquals(914.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(914L, mutableInt1.longValue());
      assertEquals(914.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(914, (int)mutableInt1.toInteger());
      assertEquals(914, (int)mutableInt1.getValue());
      assertEquals("914", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '~';
      Float float1 = new Float(1269.2F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1269.2F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 0.0F);
      assertNull(floatArray0);
      
      ArrayUtils.swap((Object[]) null, (-80), (-2143961449), (-80));
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-154));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1766;
      longArray0[1] = (long) (byte)43;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (byte)43;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 43L, 994);
      assertEquals(4, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {1766L, 43L, 0L, 43L}, longArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Float float0 = new Float((double) 994);
      assertEquals(994.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 1766);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1766.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(2176.348F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2176.348F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-2767.8640285405827));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-2767.864F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 1766L;
      doubleArray0[2] = (double) 994;
      doubleArray0[3] = (-2384.70249882779);
      doubleArray0[4] = (double) 43L;
      doubleArray0[5] = (double) 43L;
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 0.0, 2285.238);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {2.0, 1766.0, 994.0, (-2384.70249882779), 43.0, 43.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) long0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) long0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = 3480;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, 3480);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3480, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), (-528));
      assertEquals(4, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      int[] intArray1 = ArrayUtils.insert((int) (byte)0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      assertArrayEquals(new int[] {(-528), 0, (-528), 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)13;
      shortArray0[4] = (short) (byte)3;
      shortArray0[5] = (short) (byte)13;
      shortArray0[6] = (short) (-75);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)3, (short)0, (short)13, (short)3, (short)13, (short) (-75)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Float[] floatArray1 = new Float[9];
      Float float0 = new Float((double) (byte)13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      floatArray1[2] = (Float) (-528.0F);
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray1[3] = float1;
      floatArray1[4] = (Float) 0.0F;
      floatArray1[5] = (Float) 0.0F;
      Float float2 = new Float((float) (-528));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-528.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray1[6] = float2;
      floatArray1[7] = (Float) 0.0F;
      floatArray1[8] = (Float) (-528.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 0.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {13.0F, 0.0F, (-528.0F), 0.0F, 0.0F, 0.0F, (-528.0F), 0.0F, (-528.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1766);
      assertEquals(18, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Float float0 = new Float((double) (short)1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (short)2);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(2804.4832F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2804.4832F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[5];
      Float float3 = new Float((-1.0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[0] = float3;
      floatArray0[1] = float1;
      floatArray0[2] = float2;
      floatArray0[3] = float2;
      floatArray0[4] = float1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (float)floatArray0[4];
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1664.74), (double) 1L);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), (-528));
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      int[] intArray1 = ArrayUtils.insert((int) (byte)0, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      assertArrayEquals(new int[] {(-528), 0, (-528), 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)13;
      shortArray0[4] = (short) (byte)3;
      shortArray0[5] = (short) (byte)13;
      shortArray0[6] = (short) (-75);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)3, (short)0, (short)13, (short)3, (short)13, (short) (-75)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Float[] floatArray1 = new Float[9];
      Float float0 = new Float((double) (byte)13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      floatArray1[1] = (Float) (-528.0F);
      floatArray1[2] = (Float) (-528.0F);
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray1[3] = float1;
      floatArray1[4] = (Float) (-528.0F);
      floatArray1[5] = (Float) (-528.0F);
      Float float2 = new Float((float) (-528));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-528.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray1[6] = float2;
      floatArray1[7] = (Float) (-528.0F);
      floatArray1[8] = (Float) (-528.0F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 0.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {13.0F, (-528.0F), (-528.0F), 0.0F, (-528.0F), (-528.0F), (-528.0F), (-528.0F), (-528.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-65);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-57));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-65)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-65)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '?';
      charArray0[2] = 'P';
      charArray0[3] = '<';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) (byte) (-57), 'e');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -57, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1231, 1231);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short)0;
      ArrayUtils.shift(shortArray0, (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2061), (short)0, (short)221}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2061));
      assertEquals(3, shortArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new short[] {(short) (-2061), (short)0, (short)221}, shortArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2061));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2061), (short)0, (short)221}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)221}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1), (int) (short)18688);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((short[]) null, (short) (-1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 134.15139858);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {134.15139858}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)44;
      ArrayUtils.swap(byteArray0, 5, Integer.MAX_VALUE, (int) (byte) (-5));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-5), (byte)53, (byte)44}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)9;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-8), (byte)2, (byte)22, (byte) (-108), (byte)0, (byte) (-83), (byte)9}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-178);
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      try { 
        Byte.valueOf("The String must not be empty", 2089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2089 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      int[] intArray0 = new int[8];
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2496));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-2496), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-16);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-95), (byte) (-1), (byte) (-68), (byte) (-66), (byte)10, (byte)12, (byte) (-16)}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 's';
      charArray0[2] = ']';
      charArray0[3] = 's';
      charArray0[4] = '\'';
      charArray0[5] = 'G';
      charArray0[6] = 'Z';
      ArrayUtils.shift(charArray0, (-4781), (-3070), 102);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'!', 's', ']', 's', '\'', 'G', 'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1247, 1247);
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = (-2659);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2536.8083F);
      ArrayUtils.swap(doubleArray0, 1247, 1247);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2536.808349609375)}, doubleArray0, 0.01);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Float float0 = new Float((double) (-2659));
      assertEquals((-2659.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-23));
      assertEquals(1, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-902.60648498511);
      doubleArray0[1] = (double) (short) (-23);
      doubleArray0[4] = (double) (short) (-35);
      doubleArray0[5] = (double) (short) (-35);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (double) (short) (-23);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-23.0), (int) (short)3);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-902.60648498511), (-23.0), 0.0, 0.0, (-35.0), (-35.0), 0.1, (-23.0)}, doubleArray0, 0.01);
      
      ArrayUtils.swap(shortArray0, 0, 0, (int) (short) (-23));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-23);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short) (-23));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-23.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 0.0;
      doubleArray0[7] = (-1.0);
      doubleArray0[3] = 1.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 8;
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      ArrayUtils.shuffle(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double(0.7);
      assertEquals(0.7, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 1.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 1.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.7, 1.0, 0.0, 0.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '7';
      floatArray0[1] = 829.5243F;
      floatArray0[2] = (float) 8;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {55.0F, 829.5243F, 8.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(doubleArray2, 8, 90);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.7, 1.0, 0.0, 0.0, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-37));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-37);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 884, (-693));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-37.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-693);
      longArray0[1] = (long) (byte) (-37);
      longArray0[2] = (long) (-351);
      longArray0[3] = (long) (-351);
      longArray0[4] = (long) (-693);
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-693);
      longArray0[7] = (long) 2;
      longArray0[8] = (long) (-351);
      ArrayUtils.reverse(longArray0, (-693), 9);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-351L), 2L, (-693L), 0L, (-693L), (-351L), (-351L), (-37L), (-693L)}, longArray0);
      
      ArrayUtils.swap((int[]) null, Integer.MIN_VALUE, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[1] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-63);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {(-63)}, intArray0);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-63L);
      floatArray0[2] = (float) (-63L);
      floatArray0[3] = (float) 'Z';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 127.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-63.0F), (-63.0F), 90.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {127.0F, 0.0F, (-63.0F), (-63.0F), 90.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      booleanArray2[6] = true;
      booleanArray2[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -63, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3051);
      intArray0[1] = 128;
      intArray0[2] = 1;
      intArray0[3] = 1494;
      intArray0[4] = (-3902);
      intArray0[5] = (-1018);
      intArray0[6] = 3474;
      intArray0[7] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3474, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = 9L;
      longArray0[2] = (long) (byte)9;
      longArray0[3] = (long) (byte)9;
      longArray0[4] = 1654L;
      longArray0[5] = (long) (byte)9;
      longArray0[6] = (long) (byte)9;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-55L));
      assertFalse(boolean1 == boolean0);
      assertEquals(8, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {9L, 9L, 9L, 9L, 1654L, 9L, 9L, 0L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)66);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-63.0);
      objectArray0[1] = (Object) (-63.0);
      objectArray0[2] = (Object) (-63.0);
      objectArray0[3] = (Object) (-63.0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (-63.0);
      objectArray0[6] = (Object) (-63.0);
      objectArray0[7] = (Object) (-63.0);
      objectArray0[8] = (Object) (-63.0);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2], (int) (byte) (-63));
      assertEquals(9, objectArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-98);
      MutableInt mutableInt0 = new MutableInt((Number) (byte)68);
      assertEquals("68", mutableInt0.toString());
      assertEquals((short)68, mutableInt0.shortValue());
      assertEquals(68, (int)mutableInt0.getValue());
      assertEquals((byte)68, mutableInt0.byteValue());
      assertEquals(68.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(68.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(68, (int)mutableInt0.toInteger());
      assertEquals(68, mutableInt0.intValue());
      assertEquals(68L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.add(1328);
      assertEquals((short)1396, mutableInt0.shortValue());
      assertEquals(1396.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1396, (int)mutableInt0.getValue());
      assertEquals((byte)116, mutableInt0.byteValue());
      assertEquals(1396, (int)mutableInt0.toInteger());
      assertEquals("1396", mutableInt0.toString());
      assertEquals(1396, mutableInt0.intValue());
      assertEquals(1396.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1396L, mutableInt0.longValue());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mutableInt0;
      objectArray0[1] = (Object) (byte)60;
      objectArray0[2] = (Object) (byte)43;
      objectArray0[3] = (Object) (byte)68;
      objectArray0[4] = (Object) (byte)68;
      objectArray0[5] = (Object) (byte) (-98);
      objectArray0[6] = (Object) (byte) (-112);
      objectArray0[7] = (Object) (byte)43;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-233));
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, objectArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-2147483648L));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 7);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.clone((int[]) null);
      assertNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 7.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {7.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.0, 7.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-455));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      ArrayUtils.swap(byteArray0, 5, 3180, (int) (byte)44);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(13, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 13;
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {13, 13}, intArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {13, 13}, intArray0);
      assertArrayEquals(new int[] {13, 13, 13, 13}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Double double0 = new Double(91.0);
      assertEquals(91.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ArrayUtils.isSameType(double0, double0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 276.887570131;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = 91.0;
      doubleArray0[3] = (double) 13;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1177;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)104;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)1177, (short)1, (short)104}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.5);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 134.15139858);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {134.15139858}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 134.15139858;
      doubleArray1[1] = 134.15139858;
      doubleArray1[2] = 134.15139858;
      doubleArray1[3] = 134.15139858;
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = ArrayUtils.removeElements((double[]) null, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {134.15139858, 134.15139858, 134.15139858, 134.15139858, 0.0}, doubleArray1, 0.01);
      assertNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-693);
      ArrayUtils.swap(doubleArray0, (-1707), (-693), (-1995));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-693.0)}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, (-3660), (-693), 1726);
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-1639));
      assertFalse(boolean0);
      
      ArrayUtils.shift((Object[]) null, (-2109135725));
      ArrayUtils.reverse((long[]) null, (-1113), (-1283));
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((int[]) null);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1639);
      floatArray0[1] = (float) (-693);
      floatArray0[2] = (float) (short) (-1639);
      floatArray0[3] = (float) (-3660);
      floatArray0[4] = (float) (-1995);
      floatArray0[5] = (float) (-1707);
      floatArray0[6] = (float) (-1283);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1639.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-693.0F), (-3660.0F), (-1995.0F), (-1707.0F), (-1283.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1639.0F), (-693.0F), (-1639.0F), (-3660.0F), (-1995.0F), (-1707.0F), (-1283.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      int[] intArray0 = new int[1];
      intArray0[0] = (-822);
      ArrayUtils.reverse(intArray0, (-822), (-822));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-822)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2804.4832F;
      floatArray0[2] = 2804.4832F;
      floatArray0[3] = 48.0F;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-65), (int) (byte) (-65));
      assertEquals(5, byteArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-65), (byte) (-65), (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-65));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 2804.4832F, 2804.4832F, 48.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2804.4832F, 2804.4832F, 48.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2102744404), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2102744404, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), (-528));
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '{';
      charArray0[2] = ']';
      charArray0[3] = '}';
      charArray0[4] = 'U';
      charArray0[5] = 'J';
      charArray0[6] = 'H';
      charArray0[7] = 'u';
      charArray0[8] = '\\';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'J';
      charArray1[1] = 'H';
      charArray1[2] = 'u';
      charArray1[3] = ' ';
      charArray1[4] = 'U';
      charArray1[5] = ' ';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray0.length);
      assertEquals(4, charArray2.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {' ', '{', ']', '}', 'U', 'J', 'H', 'u', '\\'}, charArray0);
      assertArrayEquals(new char[] {'{', ']', '}', '\\'}, charArray2);
      assertArrayEquals(new char[] {'J', 'H', 'u', ' ', 'U', ' '}, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ArrayUtils.reverse(byteArray0, (int) (byte)97, (int) (byte)10);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)97;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)97;
      intArray0[3] = (int) '`';
      intArray0[4] = (int) 'b';
      ArrayUtils.swap(intArray0, (-2136), (-273), (-1535));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {97, 0, 97, 96, 98}, intArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ';');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[0] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (byte)4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '{';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'c', '{'}, charArray0);
      assertArrayEquals(new char[] {'c', '{', 'c', '{'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (-282));
      assertNull(longArray0);
      
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertEquals("'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      long[] longArray0 = new long[9];
      longArray0[1] = (-730L);
      longArray0[4] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(9, longArray0.length);
      assertEquals(7, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3, 5, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertArrayEquals(new long[] {0L, (-730L), 0L, 0L, 1L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.shift((int[]) null, 7);
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[1] = (double) (-730L);
      doubleArray0[2] = (double) (byte)115;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 1L);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {100.0, (-730.0), 115.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 100.0, (-730.0), 115.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte)115);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Integer integer0 = new Integer((-3236));
      assertEquals((-3236), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("-3236", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst((long[]) null, (long) 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {2L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, 100L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {100L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertEquals(9, objectArray0.length);
      assertNull(object2);
      
      objectArray0[2] = null;
      Object object3 = ArrayUtils.get(objectArray0, 2, object1);
      assertEquals(9, objectArray0.length);
      assertNull(object3);
      
      objectArray0[3] = null;
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)101;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)73);
      assertEquals(7, byteArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new byte[] {(byte) (-48), (byte)73, (byte)2, (byte) (-66), (byte) (-49), (byte) (-37), (byte)101}, byteArray0);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "gXBKc.=p|8`S0";
      stringArray0[2] = "";
      stringArray0[3] = "hM!;@TZDh6K#^Ako=";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3869L);
      longArray0[1] = (-2418L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte) (-44));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-44);
      shortArray0[3] = (short) (byte) (-44);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (byte) (-44);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(12, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-44), (short) (-44), (short)0, (short) (-44), (short)1, (short) (-44)}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-44);
      doubleArray0[1] = (double) (short) (-44);
      doubleArray0[2] = (double) (short) (-44);
      doubleArray0[3] = (double) (short) (-44);
      doubleArray0[4] = (double) (short) (-44);
      doubleArray0[5] = (double) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-44), (double) (short)0);
      assertEquals(6, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-44.0), (-44.0), (-44.0), (-44.0), (-44.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-3869L), (-2418L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, (-3869L), (-2418L), 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      Integer integer0 = Integer.getInteger("iaLMy", (-1800));
      assertEquals((-1800), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-4674L), (-1800));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-4674L), (double) (-1800));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[0] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2147293020), Integer.MIN_VALUE);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      ArrayUtils.shift(charArray0, (int) (short)1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[0] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2147293020), Integer.MIN_VALUE);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      ArrayUtils.shift(charArray0, 1004);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'#'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (-2690L);
      longArray0[3] = 3727L;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) '#';
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-2147293020), 384L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147293020, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(13, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      int int0 = 13;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(13, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 13;
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {13, 13}, intArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {13, 13}, intArray0);
      assertArrayEquals(new int[] {13, 13, 13, 13}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Double double0 = new Double(91.0);
      assertEquals(91.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = ArrayUtils.isSameType(double0, double0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 276.887570131;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = 91.0;
      doubleArray0[3] = (double) 13;
      doubleArray0[4] = 91.0;
      doubleArray0[5] = (double) 13;
      doubleArray0[6] = (double) 13;
      doubleArray0[7] = (double) 13;
      doubleArray0[8] = (double) 13;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 13.0, 13, 1677.74);
      assertFalse(int1 == int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, int1);
      assertArrayEquals(new double[] {276.887570131, 13.0, 91.0, 13.0, 91.0, 13.0, 13.0, 13.0, 13.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 8, (long) 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'F';
      charArray0[2] = '&';
      charArray0[3] = 'K';
      charArray0[4] = '3';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 106, 106);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'A', 'F', '&', 'K', '3'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      AbstractMap.SimpleEntry<Integer, Character>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Character>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 3);
      Integer integer0 = new Integer(106);
      assertEquals(106, (int)integer0);
      assertNotNull(integer0);
      
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleEntry<Integer, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Character>(integer0, character0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, Character> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Character>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Integer, Character> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, Character>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Integer, Character> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Integer, Character>(integer0, character0);
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Integer, Character>[] abstractMap_SimpleEntryArray1 = ArrayUtils.clone(abstractMap_SimpleEntryArray0);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertEquals(3, abstractMap_SimpleEntryArray1.length);
      assertEquals(3, abstractMap_SimpleEntryArray0.length);
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "hM!;@TZDh6K#^Ako=";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "hM!;@TZDh6K#^Ako=";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 1071);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      byte byte0 = (byte) (-44);
      Byte[] byteArray0 = new Byte[1];
      int int0 = 2145169294;
      try { 
        Byte.valueOf("hM!;@TZDh6K#^Ako=", 2145169294);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2145169294 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = '0';
      charArray0[2] = 'W';
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, Integer.MAX_VALUE, (-1968526676));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-23));
      assertEquals(1, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-902.60648498511);
      doubleArray0[0] = (double) (short) (-23);
      doubleArray0[4] = (double) (short) (-35);
      doubleArray0[5] = (double) (short) (-35);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (double) (short) (-23);
      ArrayUtils.swap(shortArray0, (int) (short)3, (int) (short)3, (int) (short) (-23));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)3}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      Double double0 = new Double(3147.605);
      assertEquals(3147.605, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(Integer.MAX_VALUE, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1077;
      shortArray0[1] = (short)21845;
      shortArray0[2] = (short)832;
      shortArray0[3] = (short)1136;
      shortArray0[4] = (short) (-1061);
      ArrayUtils.swap(shortArray0, 12, 1792, 3647);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1077, (short)21845, (short)832, (short)1136, (short) (-1061)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1.0);
      doubleArray0[4] = (-265.619);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, 98, 98, (int) (byte)0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[2] = short0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1677);
      ArrayUtils.shift(doubleArray1, (int) shortArray0[2], 2173, 4);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, shortArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1677.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      short[] shortArray1 = new short[7];
      shortArray1[0] = (short) (byte)0;
      shortArray1[1] = (short) shortArray0[2];
      shortArray1[2] = (short) (byte)0;
      shortArray1[3] = (short) shortArray0[2];
      shortArray1[4] = (short) (byte)0;
      shortArray1[5] = (short) shortArray0[2];
      shortArray1[6] = (short) (byte)0;
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, Integer.MAX_VALUE, 98);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(7, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3154.4479046;
      doubleArray1[2] = (-1.0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-333), 0);
      ArrayUtils.swap((long[]) null, (-1627), 0);
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('r', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('o');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('%');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('%', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(',');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertEquals(',', (char)character4);
      assertNotNull(character4);
      
      Character character5 = Character.valueOf('o');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertEquals('o', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(']');
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertEquals(']', (char)character6);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('%');
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character2));
      assertEquals('%', (char)character7);
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character(',');
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character1));
      assertTrue(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertEquals(',', (char)character8);
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3154.4479046;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-333), 0);
      ArrayUtils.swap((long[]) null, (-1627), 0);
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('r', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('o');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('%');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('%', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(',');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertEquals(',', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('o');
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character2));
      assertEquals('o', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(']');
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertEquals(']', (char)character6);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('W');
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character1));
      assertEquals('W', (char)character7);
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character(',');
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character5));
      assertEquals(',', (char)character8);
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = 1261.0119939200156;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-19), 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 128, 377);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.shift((Object[]) null, (-1133));
      ArrayUtils.reverse((long[]) null, (-16), (-162));
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1.0);
      doubleArray0[4] = (-265.619);
      doubleArray0[5] = (double) (byte)0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-55);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (-3097L);
      longArray0[4] = (long) (byte) (-55);
      longArray0[5] = 1L;
      longArray0[6] = (long) (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, (-55L), 0L, (-3097L), (-55L), 1L, (-55L)}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 1938);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, (-265.619), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-265.619), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 2);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, (-55L), 0L, (-3097L), (-55L), 1L, (-55L)}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-80));
      assertEquals(6, byteArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)15, (byte) (-55), (byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1061);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 18688, 1916);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      
      Long long0 = new Long((-1346L));
      assertEquals((-1346L), (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1061), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 8;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(22, doubleArray0.length);
      assertEquals(23, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-196);
      shortArray0[1] = (short) (-1788);
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)1792;
      shortArray0[4] = (short)6;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1077);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-196), (short) (-1788), (short)18688, (short)1792, (short)6}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      short short0 = (short) (-20);
      int int0 = (-6);
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-20);
      shortArray0[2] = (short)107;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-20), (short)107, (short)0, (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(5, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)0, (short) (-20), (short)107, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1231, 1231);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short)0;
      ArrayUtils.shift(shortArray0, (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2061), (short)0, (short)221}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2061));
      assertEquals(3, shortArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short) (-2061), (short)0, (short)221}, shortArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)11;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)101, (int) (byte)59);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)71, (byte) (-41), (byte)52, (byte)43, (byte)29, (byte) (-16), (byte)59, (byte)11}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      ArrayUtils.shift((short[]) null, (-607));
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)1910);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)10;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-607);
      doubleArray0[3] = (double) (-2367);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {10.0, 0.0, (-607.0), (-2367.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10.0, 0.0, (-607.0), (-2367.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      Integer integer0 = new Integer((-1470));
      assertEquals((-1470), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("}r&\\G.2{6y");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = true;
      Boolean boolean3 = new Boolean(true);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("}r&\\G.2{6y");
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(false);
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      Boolean boolean7 = Boolean.valueOf((String) null);
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7);
      assertNotNull(boolean7);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean6;
      booleanArray0[1] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1470);
      intArray0[1] = (-1470);
      intArray0[2] = (-1470);
      intArray0[3] = (-1470);
      intArray0[4] = (-1470);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-897);
      shortArray0[1] = (short)912;
      shortArray0[2] = (short)912;
      shortArray0[3] = (short)1615;
      shortArray0[4] = (short) (-897);
      shortArray0[5] = (short) (-897);
      shortArray0[6] = (short)912;
      shortArray0[7] = (short) (-897);
      shortArray0[8] = (short) (-897);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1615);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-897), (short)912, (short)912, (short)1615, (short) (-897), (short) (-897), (short)912, (short) (-897), (short) (-897)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-897), (short)912, (short)912, (short)1615, (short) (-897), (short) (-897), (short)912, (short) (-897), (short) (-897), (short)1615}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift(shortArray0, 4530);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)912, (short) (-897), (short) (-897), (short) (-897), (short)912, (short)912, (short)1615, (short) (-897), (short) (-897)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-67), (int) (byte)11);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-59), (byte)106, (byte)122, (byte)62, (byte)2, (byte)11, (byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertEquals('o', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'o');
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'o', 'o', 'o'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)106;
      intArray0[3] = (int) (byte)106;
      intArray0[4] = (int) (byte) (-59);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {111, 2, 106, 106, (-59)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, (-25));
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (-25);
      intArray0[2] = (-25);
      Character[] characterArray0 = new Character[3];
      char char0 = 'o';
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('o');
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('o', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'o', 'o', 'o'}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(intArray0, (-791), (int) char0, 15);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-25), (-25), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 2633, 1688, 2633);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 98;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {98.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1931L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3360.965894377717);
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[2] = '';
      charArray0[3] = 'i';
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'A';
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 3);
      assertEquals(1, characterArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2332.83944126303), 3, (-926.9566947397195));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-3360.965894377717), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (-677);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-677.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (short)1, 113);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, (-1525));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) 1.0;
      objectArray0[3] = (Object) 1.0;
      objectArray0[4] = (Object) 1.0;
      objectArray0[5] = (Object) 1.0;
      objectArray0[6] = (Object) 1.0;
      objectArray0[7] = (Object) 1.0;
      objectArray0[8] = (Object) 1.0;
      ArrayUtils.swap(objectArray0, 2409, 1);
      assertEquals(9, objectArray0.length);
      
      double[] doubleArray3 = ArrayUtils.removeAllOccurrences(doubleArray2, 2293.153);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      
      ArrayUtils.swap(doubleArray1, (-1525), (-1525), (-1525));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = 829.5243F;
      floatArray0[2] = 829.5243F;
      floatArray0[3] = 829.5243F;
      floatArray0[4] = 829.5243F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 829.5243F, 829.5243F, 829.5243F, 829.5243F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(doubleArray0, 90, 216);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, 0, 2853);
      Character[] characterArray0 = new Character[9];
      char char0 = 'i';
      Character character0 = Character.valueOf('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('i');
      assertEquals('i', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertEquals('i', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('I');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertEquals('I', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('g');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertEquals('g', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertEquals('i', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('k');
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character4));
      assertEquals('k', (char)character6);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('j');
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character1));
      assertEquals('j', (char)character7);
      assertNotNull(character7);
      
      characterArray0[7] = character3;
      Character character8 = Character.valueOf('6');
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)char0));
      assertEquals('6', (char)character8);
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, 0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, characterArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap(doubleArray0, 81, (-1));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3154.4479046, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1064);
      shortArray1[1] = (short) (-1064);
      shortArray1[2] = (short)2330;
      shortArray1[3] = (short) (-1064);
      shortArray1[4] = (short)2330;
      shortArray1[5] = (short)2330;
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short)1992);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-1064), (short) (-1064), (short)2330, (short) (-1064), (short)2330, (short)2330}, shortArray1);
      assertArrayEquals(new short[] {(short)1992, (short) (-1064), (short) (-1064), (short)2330, (short) (-1064), (short)2330, (short)2330}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 17L, (int) (short)2330);
      assertEquals((-1), int0);
      
      Double double0 = new Double((short)2330);
      assertEquals(2330.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.shift(shortArray0, 2145994408, (-2144995254), (-845));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.shift((byte[]) null, 3098);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short) (-1064);
      objectArray0[1] = (Object) (short) (-1064);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(4, objectArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)62;
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = '<';
      charArray0[2] = ']';
      charArray0[3] = 'x';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'D', '<', ']', 'x'}, charArray0);
      assertArrayEquals(new char[] {'D', '<', ']', 'x', 'D', '<', ']', 'x'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Long[] longArray1 = new Long[5];
      Long long0 = new Long((-2253L));
      assertEquals((-2253L), (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      
      longArray1[1] = long1;
      Long long2 = new Long(1688);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(1688L, (long)long2);
      assertNotNull(long2);
      
      longArray1[2] = long2;
      Long long3 = new Long((byte)106);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertEquals(106L, (long)long3);
      assertNotNull(long3);
      
      longArray1[3] = long3;
      Long long4 = new Long(501L);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertEquals(501L, (long)long4);
      assertNotNull(long4);
      
      longArray1[4] = long4;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) longArray1[4]);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-2253L), (-1L), 1688L, 106L, 501L}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 1L;
      longArray0[0] = 1L;
      long long1 = (-1L);
      longArray0[1] = (-1L);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray1 = new Long[5];
      longArray1[0] = (Long) 1L;
      longArray1[1] = (Long) (-1L);
      longArray1[2] = (Long) (-1L);
      longArray1[3] = (Long) 1L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, long1);
      assertFalse(long1 == long0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertArrayEquals(new long[] {1L, (-1L), (-1L), 1L, (-1L)}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertEquals(5, longArray1.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) long0);
      assertFalse(long0 == long1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (byte)0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)112, 224);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(bitSet0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object object0 = ArrayUtils.removeAll((Object) longArray1[4], bitSet0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(5, longArray1.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNull(object0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      char char0 = 'q';
      Character character0 = new Character('q');
      assertTrue(character0.equals((Object)char0));
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.1;
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[4] = (double) (float)floatArray0[0];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.5;
      doubleArray2[1] = (double) (float)floatArray0[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 0.0, (double) floatArray0[0]);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new double[] {1.5, 1.5}, doubleArray2, 0.01);
      assertNotNull(bitSet0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) floatArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "gXBKc.=p|8`S0";
      stringArray0[2] = "";
      stringArray0[3] = "hM!;@TZDh6K#^Ako=";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3869L);
      longArray0[1] = (-2418L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte) (-44));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-44);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (byte) (-44);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (byte) (-44);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(12, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-44), (short) (-44), (short)1, (short) (-44), (short)1, (short) (-44)}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1485.4737046011);
      doubleArray0[1] = (double) (short) (-44);
      doubleArray0[2] = (double) (short) (-44);
      doubleArray0[3] = (double) (short) (-44);
      doubleArray0[4] = (double) (short) (-44);
      doubleArray0[5] = (double) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-44), (double) (short)1);
      assertEquals(6, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{1, 2, 3, 4}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-1485.4737046011), (-44.0), (-44.0), (-44.0), (-44.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      longArray0[2] = (long) '0';
      longArray0[3] = (long) '0';
      longArray0[4] = (long) '0';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray0);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray0);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Double[] doubleArray0 = new Double[0];
      Double double0 = new Double(65L);
      assertEquals(65.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1426.446693), (-1));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '*';
      charArray0[2] = '?';
      charArray0[3] = 'X';
      charArray0[4] = 'I';
      charArray0[5] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertEquals(6, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, 1407, 1407);
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) '~';
      characterArray0[1] = (Character) '?';
      characterArray0[2] = (Character) '*';
      Character character0 = Character.valueOf('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      characterArray0[3] = character0;
      characterArray0[4] = (Character) '~';
      characterArray0[5] = (Character) '~';
      characterArray0[6] = (Character) '?';
      characterArray0[7] = (Character) '~';
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (-295));
      assertFalse(boolean1 == boolean0);
      assertEquals(8, characterArray0.length);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean2 = Boolean.valueOf(false);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = Boolean.valueOf("Minimum abbreviation width is %d");
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = new Boolean(false);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = new Boolean("Minimum abbreviation width is %d");
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7);
      assertNotNull(boolean7);
      
      booleanArray0[5] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean4);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean4.equals((Object)boolean5));
      assertTrue(boolean4.equals((Object)boolean6));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean7));
      assertTrue(boolean4.equals((Object)boolean1));
      assertEquals(1, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      charArray0[1] = '0';
      objectArray0[1] = (Object) '0';
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[4] = (Object) '0';
      objectArray0[5] = (Object) '0';
      objectArray0[6] = (Object) '0';
      objectArray0[7] = (Object) '0';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      longArray0[2] = (long) '0';
      longArray0[3] = (long) '0';
      longArray0[4] = (long) '0';
      objectArray0[0] = (Object) 'A';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray1);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, int1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1136);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-1688), 0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1688);
      intArray0[1] = 1136;
      intArray0[2] = 1136;
      int[] intArray1 = ArrayUtils.add(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-1688), 1136, 1136}, intArray0);
      assertArrayEquals(new int[] {(-1688), 1136, 1136, 1}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-89));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)2, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)2, (byte)2, (byte)0, (byte)0, (byte)0, (byte) (-89)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)115;
      intArray0[1] = (int) (byte)100;
      intArray0[2] = (int) (byte)115;
      intArray0[3] = (int) (byte)115;
      intArray0[4] = (int) (byte) (-118);
      intArray0[5] = (int) (byte)100;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertArrayEquals(new int[] {115, 100, 115, 115, (-118), 100}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)2, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)2, (byte)2, (byte)0, (byte)0, (byte)0, (byte) (-89)}, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)120;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)43, (byte)68, (byte)60, (byte) (-112), (byte) (-98), (byte) (-3), (byte)120}, byteArray0);
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)43, (byte)68, (byte)60, (byte) (-112), (byte) (-98), (byte) (-3), (byte)120}, byteArray0);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2015, (int) (byte)120);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)43;
      longArray0[1] = (long) (byte)68;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {43L, 68L}, longArray0);
      assertArrayEquals(new long[] {43L, 68L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((byte)43);
      assertEquals(43.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte) (-3));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)43);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(43.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((byte)43);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(43.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1533.666160491458);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(1533.666160491458, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[1]);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-3.0), (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[2]);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(43.0, (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((byte)68);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals(68.0, (double)double7, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((-1.0));
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertEquals((-1.0), (double)double8, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int)  (-98), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -98, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (-1.0);
      doubleArray0[4] = (-265.619);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, 98, 98, (int) (byte)0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[2] = short0;
      Short short1 = new Short((short)8192);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)8192, (short)short1);
      assertNotNull(short1);
      
      shortArray0[3] = short1;
      Short short2 = new Short((short)8192);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)8192, (short)short2);
      assertNotNull(short2);
      
      shortArray0[4] = short2;
      Short short3 = new Short((short)8192);
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short)8192, (short)short3);
      assertNotNull(short3);
      
      shortArray0[5] = short3;
      Short short4 = new Short((short) (-5483));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-5483), (short)short4);
      assertNotNull(short4);
      
      shortArray0[6] = short4;
      Short short5 = new Short((short)1248);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertEquals((short)1248, (short)short5);
      assertNotNull(short5);
      
      shortArray0[7] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)8192);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)8192, (short)8192, (short)0, (short)8192, (short)8192, (short)8192, (short) (-5483), (short)1248}, shortArray1);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (short)8192);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, (-265.619), 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)shortArray0[6];
      longArray0[1] = (long) (short)shortArray0[6];
      longArray0[2] = (long) 98;
      longArray0[3] = (long) (short)1248;
      longArray0[4] = (long) (short)shortArray0[3];
      longArray0[5] = (long) (short)shortArray0[5];
      longArray0[6] = (long) 98;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-793));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -793, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2886, 2886);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2886;
      longArray0[1] = (long) 2886;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      ArrayUtils.shift(longArray0, 46);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 2886L, 2886L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2886L;
      doubleArray0[2] = (-28.405320779770914);
      doubleArray0[3] = (double) 0L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2886, 1.0);
      assertFalse(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {0.0, 2886.0, (-28.405320779770914), 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 2886L, 2886L}, longArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, 2020.8115, 322);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {0.0, 2886.0, (-28.405320779770914), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1949.2132786081);
      doubleArray0[1] = (-452.093373197955);
      doubleArray0[2] = 11.101;
      doubleArray0[3] = 927.11;
      doubleArray0[4] = (-2210.197822701745);
      doubleArray0[5] = 547.0;
      doubleArray0[6] = (-2598.79947823151);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1949.2132786081), 1072);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-1949.2132786081), (-452.093373197955), 11.101, 927.11, (-2210.197822701745), 547.0, (-2598.79947823151)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(114.0F);
      assertEquals(114.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(48.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(48.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {114.0F, 48.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1072;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1072);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray1.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1072, 1072}, intArray1);
      assertArrayEquals(new int[] {1072}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1072;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1072L}, longArray0);
      
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray2.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1072, 1072}, intArray2);
      assertArrayEquals(new int[] {1072}, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)827;
      shortArray0[1] = (short)912;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-897));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)827, (short)912}, shortArray0);
      assertArrayEquals(new short[] {(short)827, (short)912, (short) (-897)}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2750.7645847171934);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2750.7645847171934)}, doubleArray0, 0.01);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'P';
      charArray0[2] = '@';
      charArray0[3] = 'C';
      charArray0[4] = 'f';
      charArray0[5] = '&';
      charArray0[6] = 'R';
      charArray0[7] = '`';
      ArrayUtils.shift(charArray0, 1428, (-2536), 1428);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'D', 'P', '@', 'C', 'f', '&', 'R', '`'}, charArray0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) '@';
      characterArray0[1] = (Character) '`';
      Character character0 = Character.valueOf('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      characterArray0[2] = character0;
      characterArray0[3] = (Character) '&';
      characterArray0[4] = (Character) 'R';
      characterArray0[5] = (Character) 'f';
      characterArray0[6] = (Character) '`';
      characterArray0[7] = (Character) 'C';
      characterArray0[8] = (Character) 'f';
      Double double1 = new Double(1428);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1428.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(9, characterArray0.length);
      assertEquals(9, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 685);
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 685);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1064);
      shortArray1[1] = (short) (-1064);
      shortArray1[2] = (short)2330;
      shortArray1[3] = (short) (-1064);
      shortArray1[4] = (short)2330;
      shortArray1[5] = (short)2330;
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short)1992);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-1064), (short) (-1064), (short)2330, (short) (-1064), (short)2330, (short)2330}, shortArray1);
      assertArrayEquals(new short[] {(short)1992, (short) (-1064), (short) (-1064), (short)2330, (short) (-1064), (short)2330, (short)2330}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 17L, (int) (short)2330);
      assertEquals((-1), int0);
      
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.shift(shortArray0, 2145994408, (-2144995254), (-845));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      
      ArrayUtils.shift((byte[]) null, 3098);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short) (-1064);
      objectArray0[1] = (Object) (short) (-1064);
      objectArray0[2] = (Object) (short)2330;
      objectArray0[3] = (Object) (short)2330;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1064', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1247, 1247);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short) (-20);
      ArrayUtils.shift(shortArray0, (-6));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short) (-20)}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)221);
      assertEquals(3, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new short[] {(short)221, (short) (-2061), (short) (-20)}, shortArray0);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short) (-2061);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-2061', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)62;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte) (-55);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)106, byteArray1, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 106, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = '0';
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 4, 5, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int0 = 1514;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1514, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1514, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[4] = null;
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 4, 5, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      longArray0[2] = (long) '0';
      longArray0[3] = (long) '0';
      longArray0[4] = (long) '0';
      objectArray0[0] = (Object) 'A';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray1);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, int1);
      
      int int2 = mutableInt0.addAndGet(0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, int2);
      
      int int3 = mutableInt0.addAndGet(0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, int3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)21, (byte) (-30), (byte)67, (byte) (-19), (byte)0, (byte)19, (byte)0, (byte) (-58)}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)21;
      doubleArray0[2] = (double) (-1677);
      ArrayUtils.shift(doubleArray0, 643, (-1677), (int) (byte)67);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 21.0, (-1677.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)21, (byte) (-30), (byte)67, (byte) (-19), (byte)0, (byte)19, (byte)0, (byte) (-58)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)21, (byte) (-30), (byte)67, (byte) (-19), (byte)0, (byte)19, (byte)0, (byte) (-58)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)21, (byte) (-30), (byte)67, (byte) (-19), (byte)19, (byte)0, (byte) (-58)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      ArrayUtils.reverse(longArray0, (-4976), (-4976));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 1L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '8';
      charArray0[2] = 'Z';
      charArray0[3] = '}';
      charArray0[4] = '\\';
      charArray0[5] = 'w';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, Integer.MAX_VALUE);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'P', '8', 'Z', '}', '\\', 'w'}, charArray1);
      assertArrayEquals(new char[] {'P', '8', 'Z', '}', '\\', 'w'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int int0 = ArrayUtils.indexOf(charArray0, '}', 0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(6, charArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'P', '8', 'Z', '}', '\\', 'w'}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = null;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2470;
      shortArray0[1] = (short)3402;
      shortArray0[2] = (short) (-3208);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)1421;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-282), 18688, (-282));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-59));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-70);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)13, (byte) (-26), (byte) (-70)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)13, (byte) (-26), (byte) (-70)}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)13;
      shortArray0[2] = (short) (byte) (-70);
      shortArray0[3] = (short) (byte) (-26);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-114);
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(928.55F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(928.55F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      floatArray0[2] = floatArray0[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 928.55F, 928.55F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1055L);
      assertNotNull(doubleStream0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1283, (int) (byte)13);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-55);
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 1688;
      doubleArray0[4] = (double) 1688;
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Character[]) null, (-2849));
      assertFalse(boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-55);
      doubleArray0[1] = (double) (-693);
      doubleArray0[2] = (double) (-693);
      doubleArray0[3] = (double) 1688;
      doubleArray0[4] = (double) 1688;
      doubleArray0[5] = (double) (byte) (-55);
      doubleArray0[6] = 3183.301;
      doubleArray0[7] = 3788.964951;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 81, (int) (byte) (-55));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-55.0), (-693.0), (-693.0), 1688.0, 1688.0, (-55.0), 3183.301, 3788.964951}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-2222));
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)15);
      assertEquals(8, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2], 50);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      int int0 = mutableInt0.addAndGet((Number) float0);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, int0);
      
      objectArray0[1] = (Object) mutableInt0;
      objectArray0[2] = (Object) mutableInt0;
      objectArray0[3] = (Object) double0;
      mutableInt0.decrement();
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      
      objectArray0[4] = (Object) mutableInt0;
      objectArray0[5] = (Object) float0;
      objectArray0[6] = (Object) double0;
      mutableInt0.add((-1970));
      assertEquals((-1969.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1969), mutableInt0.shortValue());
      assertEquals((-1969), (int)mutableInt0.getValue());
      assertEquals((-1969.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)79, mutableInt0.byteValue());
      assertEquals("-1969", mutableInt0.toString());
      assertEquals((-1969), (int)mutableInt0.toInteger());
      assertEquals((-1969), mutableInt0.intValue());
      assertEquals((-1969L), mutableInt0.longValue());
      
      objectArray0[7] = (Object) mutableInt0;
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[1], 8);
      assertFalse(int1 == int0);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)64;
      shortArray0[0] = (short) (byte)64;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)64}, shortArray0);
      
      Byte byte0 = Byte.valueOf((byte)64);
      assertEquals((byte)64, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)64);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)64, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-68));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte2);
      assertNotNull(byte2);
      
      try { 
        Byte.valueOf("{}", (int) (byte)122);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 122 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertNotNull(mutableInt1);
      
      int int1 = mutableInt1.incrementAndGet();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, int1);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      MutableInt mutableInt2 = new MutableInt((int) (byte)9);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertEquals(9L, mutableInt2.longValue());
      assertEquals((short)9, mutableInt2.shortValue());
      assertEquals(9.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(9, mutableInt2.intValue());
      assertEquals(9, (int)mutableInt2.toInteger());
      assertEquals((byte)9, mutableInt2.byteValue());
      assertEquals(9.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(9, (int)mutableInt2.getValue());
      assertEquals("9", mutableInt2.toString());
      assertNotNull(mutableInt2);
      
      MutableInt mutableInt3 = new MutableInt(2);
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertEquals(2, mutableInt3.intValue());
      assertEquals(2L, mutableInt3.longValue());
      assertEquals(2, (int)mutableInt3.toInteger());
      assertEquals(2, (int)mutableInt3.getValue());
      assertEquals("2", mutableInt3.toString());
      assertEquals(2.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt3.byteValue());
      assertEquals((short)2, mutableInt3.shortValue());
      assertEquals(2.0, mutableInt3.doubleValue(), 0.01);
      assertNotNull(mutableInt3);
      
      MutableInt mutableInt4 = new MutableInt(mutableInt1);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0L, mutableInt4.longValue());
      assertEquals("0", mutableInt4.toString());
      assertEquals(0, mutableInt4.intValue());
      assertEquals(0.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt4.getValue());
      assertEquals((byte)0, mutableInt4.byteValue());
      assertEquals(0, (int)mutableInt4.toInteger());
      assertEquals((short)0, mutableInt4.shortValue());
      assertEquals(0.0, mutableInt4.doubleValue(), 0.01);
      assertNotNull(mutableInt4);
      
      MutableInt mutableInt5 = new MutableInt((int) (byte) (-10));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertEquals((short) (-10), mutableInt5.shortValue());
      assertEquals((-10.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-10), mutableInt5.intValue());
      assertEquals((-10.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((byte) (-10), mutableInt5.byteValue());
      assertEquals("-10", mutableInt5.toString());
      assertEquals((-10), (int)mutableInt5.getValue());
      assertEquals((-10), (int)mutableInt5.toInteger());
      assertEquals((-10L), mutableInt5.longValue());
      assertNotNull(mutableInt5);
      
      MutableInt mutableInt6 = new MutableInt((-1));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertEquals((short) (-1), mutableInt6.shortValue());
      assertEquals((-1.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt6.longValue());
      assertEquals((-1), mutableInt6.intValue());
      assertEquals("-1", mutableInt6.toString());
      assertEquals((-1), (int)mutableInt6.getValue());
      assertEquals((byte) (-1), mutableInt6.byteValue());
      assertEquals((-1.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt6.toInteger());
      assertNotNull(mutableInt6);
      
      MutableInt mutableInt7 = new MutableInt(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertTrue(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertTrue(mutableInt7.equals((Object)mutableInt6));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertEquals((short) (-1), mutableInt6.shortValue());
      assertEquals((-1.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt6.longValue());
      assertEquals((-1), mutableInt6.intValue());
      assertEquals("-1", mutableInt6.toString());
      assertEquals((-1), (int)mutableInt6.getValue());
      assertEquals((byte) (-1), mutableInt6.byteValue());
      assertEquals((-1.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt6.toInteger());
      assertEquals((-1), (int)mutableInt7.getValue());
      assertEquals((byte) (-1), mutableInt7.byteValue());
      assertEquals((-1), (int)mutableInt7.toInteger());
      assertEquals((short) (-1), mutableInt7.shortValue());
      assertEquals((-1.0), mutableInt7.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt7.longValue());
      assertEquals((-1), mutableInt7.intValue());
      assertEquals("-1", mutableInt7.toString());
      assertEquals((-1.0F), mutableInt7.floatValue(), 0.01F);
      assertNotNull(mutableInt7);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      mutableIntArray0[0] = mutableInt6;
      MutableInt mutableInt8 = ArrayUtils.get(mutableIntArray0, 1408, mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt6));
      assertFalse(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt0.equals((Object)mutableInt7));
      assertFalse(mutableInt0.equals((Object)mutableInt5));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt8.equals((Object)mutableInt7));
      assertFalse(mutableInt8.equals((Object)mutableInt1));
      assertFalse(mutableInt8.equals((Object)mutableInt2));
      assertTrue(mutableInt8.equals((Object)mutableInt6));
      assertFalse(mutableInt8.equals((Object)mutableInt4));
      assertFalse(mutableInt8.equals((Object)mutableInt3));
      assertFalse(mutableInt8.equals((Object)mutableInt5));
      assertEquals(1, mutableIntArray0.length);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt8.shortValue());
      assertEquals((-1.0F), mutableInt8.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt8.getValue());
      assertEquals((-1.0), mutableInt8.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt8.longValue());
      assertEquals((-1), mutableInt8.intValue());
      assertEquals((-1), (int)mutableInt8.toInteger());
      assertEquals((byte) (-1), mutableInt8.byteValue());
      assertEquals("-1", mutableInt8.toString());
      assertNotNull(mutableInt8);
      assertNotSame(mutableInt0, mutableInt7);
      assertNotSame(mutableInt0, mutableInt4);
      assertSame(mutableInt0, mutableInt8);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt6);
      assertNotSame(mutableInt0, mutableInt5);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt8, mutableInt1);
      assertNotSame(mutableInt8, mutableInt2);
      assertNotSame(mutableInt8, mutableInt4);
      assertSame(mutableInt8, mutableInt0);
      assertNotSame(mutableInt8, mutableInt7);
      assertNotSame(mutableInt8, mutableInt6);
      assertNotSame(mutableInt8, mutableInt3);
      assertNotSame(mutableInt8, mutableInt5);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-10);
      ArrayUtils.reverse(shortArray0, 18688, 43);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-10)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-6205);
      shortArray0[1] = (short) (-6205);
      shortArray0[2] = (short) (-1996);
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[2] = (-2750.7645847171934);
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1355;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1355}, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.766711509120914), (-2750.7645847171934)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.766711509120914), (-2750.7645847171934)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y>H{Jp9MKWa/m]";
      stringArray0[1] = ", Length: 0";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1.766711509120914), (-2750.7645847171934)}, doubleArray0, 0.01);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 575);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, 'i');
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Q'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[5] = (Object) true;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L";
      stringArray0[1] = "Cannot store ";
      stringArray0[2] = "Comparator should not be null.";
      stringArray0[3] = "";
      stringArray0[4] = "{";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-2142255659));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2142255659, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int int0 = 5250;
      Object object0 = ArrayUtils.get(objectArray0, 5250);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      Double double0 = new Double(5250);
      assertEquals(5250.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = null;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 5250;
      doubleArray2[1] = (double) 5250;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 0.7;
      doubleArray2[4] = (double) 5250;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 0.0, 5250, 0.7);
      assertEquals(5, doubleArray2.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {5250.0, 5250.0, (-1.0), 0.7, 5250.0}, doubleArray2, 0.01);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-67), (int) (byte)11);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-59), (byte)106, (byte)122, (byte)62, (byte)2, (byte)11, (byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertEquals('o', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'o');
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'o', 'o', 'o'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-282);
      ArrayUtils.swap(intArray0, (-2983), (-2136), 0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-282)}, intArray0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[1] = (Character) 'W';
      characterArray0[2] = (Character) 'W';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '2');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray1.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'2', 'W', 'W'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(3, charArray1.length);
      assertEquals(0, charArray2.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'2', 'W', 'W'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      Character character0 = Character.valueOf('_');
      assertEquals('_', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('_');
      assertEquals('_', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '_');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'_'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-639), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1766);
      assertEquals(18, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)1, (int) (short)1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (-639);
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) (short)1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2283.2555);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, (-639.0), 1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1L), (-677));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-677), (-705));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3335);
      assertEquals(3335, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      Integer integer1 = new Integer((-54));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-54), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)11);
      assertEquals(4, byteArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-67), (byte)11, (byte)2}, byteArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)11, (int) (byte)11);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-2013265919));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-2013265919), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-798));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-798), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((Number) integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((byte) (-30), mutableInt0.byteValue());
      assertEquals("-798", mutableInt0.toString());
      assertEquals((-798), (int)mutableInt0.toInteger());
      assertEquals((short) (-798), mutableInt0.shortValue());
      assertEquals((-798), (int)mutableInt0.getValue());
      assertEquals((-798L), mutableInt0.longValue());
      assertEquals((-798.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-798.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-798), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.toInteger();
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((byte) (-30), mutableInt0.byteValue());
      assertEquals("-798", mutableInt0.toString());
      assertEquals((-798), (int)mutableInt0.toInteger());
      assertEquals((short) (-798), mutableInt0.shortValue());
      assertEquals((-798), (int)mutableInt0.getValue());
      assertEquals((-798L), mutableInt0.longValue());
      assertEquals((-798.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-798.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-798), mutableInt0.intValue());
      assertEquals((-798), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf(1);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2367));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertEquals((-2367), (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((byte)2);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(2, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(Integer.MIN_VALUE);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertEquals(Integer.MIN_VALUE, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = Integer.getInteger("", (-2756));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertEquals((-2756), (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-2127961069));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertEquals((-2127961069), (int)integer8);
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("3U23");
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = new Integer(575);
      assertEquals(575, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)8;
      boolean boolean5 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)8}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)11);
      assertEquals(4, byteArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-67), (byte)11, (byte)2}, byteArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)11;
      intArray0[2] = 2;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {11, 0, 2}, intArray0);
      assertNotNull(integerArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'Z');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2146869159));
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = '%';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'Q', '%'}, charArray0);
      assertArrayEquals(new char[] {'Q', '%'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'i';
      int int1 = ArrayUtils.lastIndexOf(charArray2, 'i');
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(int1 == int0);
      assertEquals(1, charArray2.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'i'}, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertEquals(46.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(46, (int)mutableInt0.getValue());
      assertEquals((byte)46, mutableInt0.byteValue());
      assertEquals(46.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(46, (int)mutableInt0.toInteger());
      assertEquals(46L, mutableInt0.longValue());
      assertEquals(46, mutableInt0.intValue());
      assertEquals("46", mutableInt0.toString());
      assertEquals((short)46, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "iaLMy", (int) (short)46);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3154.4479046;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-333), 0);
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-898));
      assertEquals((short) (-898), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2367));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-2367), (short)short1);
      assertNotNull(short1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) shortArray0[0], 8192);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'X', 'X', 'X'}, charArray0);
      assertArrayEquals(new char[] {'X', 'X', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      Integer integer0 = Integer.getInteger("iaLMy", (-1800));
      assertEquals((-1800), (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((short) (-729));
      assertEquals((short) (-729), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-1), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-31));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-31), (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-607), 1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1);
      assertEquals(0, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'f', 9);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-1029L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints(908, (-2831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, int0);
      
      ArrayUtils.swap((long[]) null, 0, 0, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-3418);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-3418), 0, 0, 0, 0, 1}, intArray0);
      assertArrayEquals(new int[] {(-3418), 0, 0, 0, 1}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      int int0 = mutableInt0.addAndGet((Number) float0);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, int0);
      
      objectArray0[1] = (Object) mutableInt0;
      objectArray0[2] = (Object) mutableInt0;
      objectArray0[3] = (Object) double0;
      mutableInt0.decrement();
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      
      objectArray0[4] = (Object) mutableInt0;
      objectArray0[5] = (Object) float0;
      objectArray0[6] = (Object) double0;
      objectArray0[7] = (Object) mutableInt0;
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[1], 8);
      assertFalse(int1 == int0);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-6205);
      shortArray0[1] = (short) (-6205);
      shortArray0[2] = (short) (-1996);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)53;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1064));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1064), (short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 2147483647L, (-626));
      assertEquals((-1), int0);
      
      Double double0 = new Double((short)2330);
      assertEquals(2330.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)0, 3600, 1);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(boolean2);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1064), (short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 11.101;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 790.0;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 3503.849, 1, (-1.0));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.5, 11.101, 0.0, 1.0, 790.0, (-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0, (-1), 3);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 11.101, 1.5, 1.0, 790.0, (-1.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (-1);
      ArrayUtils.shuffle(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1L, (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3869L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte) (-44));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[14];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-44);
      ArrayUtils.swap((char[]) null, 0, 1632, (int) (short) (-44));
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '`';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-607L);
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) 'S';
      ArrayUtils.shift(doubleArray0, (-2367), (-2367), (-1259));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-607.0), 98.0, 83.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(longArray0, 9, 128, 0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2367L), (-607L), 0L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1441L, (-1188));
      assertEquals(3, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {(-2367L), (-607L), 0L}, longArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      MutableInt mutableInt0 = new MutableInt((-131));
      assertEquals((-131.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-131", mutableInt0.toString());
      assertEquals((-131L), mutableInt0.longValue());
      assertEquals((-131), (int)mutableInt0.toInteger());
      assertEquals((-131), (int)mutableInt0.getValue());
      assertEquals((byte)125, mutableInt0.byteValue());
      assertEquals((-131.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-131), mutableInt0.shortValue());
      assertEquals((-131), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.addAndGet((-131));
      assertEquals((-262), mutableInt0.intValue());
      assertEquals("-262", mutableInt0.toString());
      assertEquals((-262), (int)mutableInt0.toInteger());
      assertEquals((-262.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-6), mutableInt0.byteValue());
      assertEquals((short) (-262), mutableInt0.shortValue());
      assertEquals((-262L), mutableInt0.longValue());
      assertEquals((-262), (int)mutableInt0.getValue());
      assertEquals((-262.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-262), int0);
      
      int int1 = mutableInt0.addAndGet((-131));
      assertFalse(int1 == int0);
      assertEquals((-393), (int)mutableInt0.toInteger());
      assertEquals((byte)119, mutableInt0.byteValue());
      assertEquals("-393", mutableInt0.toString());
      assertEquals((-393), mutableInt0.intValue());
      assertEquals((-393.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-393), mutableInt0.shortValue());
      assertEquals((-393L), mutableInt0.longValue());
      assertEquals((-393), (int)mutableInt0.getValue());
      assertEquals((-393.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-393), int1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(doubleArray0, (-1677), 4, 2173);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, 134.15139858);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {134.15139858}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-5);
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)53);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-5), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-5), (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'S';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      ArrayUtils.shift(charArray0, 0, 68, 2737);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'R', 'R', 'S', 'R'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 2141658067);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2141658067, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)95);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-69), (byte) (-97), (byte)95, (byte) (-87), (byte)67, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-69), (byte) (-97), (byte) (-87), (byte)67, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      long[] longArray0 = new long[9];
      longArray0[1] = (-730L);
      longArray0[4] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(9, longArray0.length);
      assertEquals("{0, 2, 3, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertArrayEquals(new long[] {0L, (-730L), 0L, 0L, 1L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.shift((int[]) null, 7);
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[1] = (double) (-730L);
      doubleArray0[2] = (double) (byte)115;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 1L);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {100.0, (-730.0), 115.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 100.0, (-730.0), 115.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte)115);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)115;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 4853);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4853, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-21);
      ArrayUtils.shift(byteArray0, (-2619), 1126, (-2133));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)27, (byte)68, (byte) (-21), (byte) (-33), (byte)93, (byte) (-33), (byte)2, (byte)113}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte) (-88);
      ArrayUtils.shift(byteArray0, (-1988));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88)}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-88);
      floatArray0[1] = (float) (byte) (-88);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-88));
      assertEquals(2, floatArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new float[] {(-88.0F), (-88.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-88);
      longArray0[1] = (long) (byte) (-88);
      longArray0[2] = (long) 48;
      longArray0[3] = (long) (-1988);
      longArray0[4] = (long) (byte) (-88);
      longArray0[5] = (long) (byte) (-88);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-88L), (-1988));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(6, longArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals(6, bitSet1.length());
      assertEquals("{0, 1, 4, 5}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(4, bitSet1.cardinality());
      assertArrayEquals(new long[] {(-88L), (-88L), 48L, (-1988L), (-88L), (-88L)}, longArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'F');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '}';
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)1021;
      longArray0[5] = (long) (short) (-2690);
      longArray0[6] = (long) (short)1021;
      longArray0[7] = (long) (short) (-2690);
      int int0 = ArrayUtils.indexOf(longArray0, (-2690L), (-1869));
      assertEquals(8, longArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new long[] {2L, 0L, 0L, 0L, 1021L, (-2690L), 1021L, (-2690L)}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-45);
      ArrayUtils.shift(byteArray0, (-354));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte)124, (byte)90, (byte)48, (byte) (-88), (byte) (-45), (byte)78, (byte) (-67)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 2013265920, 2013265920, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1061), 2013265920);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)89;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1878), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1878, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-237), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -237, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-554.0F);
      floatArray0[1] = (-1982.6328F);
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-554.0F);
      floatArray0[1] = (-1982.6328F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-852.3779F);
      floatArray0[6] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-554.0F), (-1982.6328F), 0.0F, Float.NaN, Float.NaN, (-852.3779F), 1.0F}, floatArray0, 0.01F);
      
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 5);
      Class<Short> class0 = Short.class;
      classArray0[0] = class0;
      Class<Short> class1 = Short.class;
      classArray0[1] = class1;
      Class<Short> class2 = Short.class;
      classArray0[2] = class2;
      Class<Short> class3 = Short.class;
      classArray0[3] = class3;
      Class<Short> class4 = Short.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
      assertNotNull(classArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2147183581;
      intArray0[1] = 897;
      intArray0[2] = (-1082);
      intArray0[3] = 3398;
      intArray0[4] = (-798);
      intArray0[5] = 2334;
      int int0 = ArrayUtils.indexOf(intArray0, (-798));
      assertEquals(6, intArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {2147183581, 897, (-1082), 3398, (-798), 2334}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-6205);
      shortArray0[1] = (short) (-6205);
      shortArray0[2] = (short) (-1996);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)53;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1064));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1064), (short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 2147483647L, (-626));
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((short)2330);
      assertEquals(2330.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      ArrayUtils.shift(shortArray0, 1562, 2145370140, 2145475170);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.shift((byte[]) null, (-626));
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      double[] doubleArray0 = new double[8];
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[2] = '';
      charArray0[3] = '';
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'A';
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 3);
      assertEquals(1, characterArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2332.83944126303), 3, (-926.9566947397195));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '';
      intArray0[1] = (int) '5';
      intArray0[2] = (int) '';
      intArray0[3] = (int) '';
      intArray0[4] = (int) '5';
      intArray0[5] = (int) '';
      intArray0[6] = (int) '';
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {127, 53, 127, 127, 53, 127, 127}, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1665.36706523805, 874, 0.0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '5';
      floatArray0[1] = (float) 127;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1121.21F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {53.0F, 127.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {53.0F, 127.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int int1 = ArrayUtils.indexOf(charArray0, '-');
      assertTrue(int1 == int0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'5', '', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer(53);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(53, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = ArrayUtils.isEquals(integer0, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      Float float0 = new Float(914.1482F);
      assertEquals(914.1482F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(914L, mutableInt0.longValue());
      assertEquals("914", mutableInt0.toString());
      assertEquals(914, (int)mutableInt0.getValue());
      assertEquals(914.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(914, (int)mutableInt0.toInteger());
      assertEquals((byte) (-110), mutableInt0.byteValue());
      assertEquals(914.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(914, mutableInt0.intValue());
      assertEquals((short)914, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(914L, mutableInt0.longValue());
      assertEquals("914", mutableInt0.toString());
      assertEquals(914, (int)mutableInt0.getValue());
      assertEquals(914.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(914, (int)mutableInt0.toInteger());
      assertEquals((byte) (-110), mutableInt0.byteValue());
      assertEquals(914.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(914, mutableInt0.intValue());
      assertEquals((short)914, mutableInt0.shortValue());
      assertEquals(914, (int)mutableInt1.getValue());
      assertEquals((byte) (-110), mutableInt1.byteValue());
      assertEquals(914, (int)mutableInt1.toInteger());
      assertEquals(914.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)914, mutableInt1.shortValue());
      assertEquals(914, mutableInt1.intValue());
      assertEquals(914.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(914L, mutableInt1.longValue());
      assertEquals("914", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mutableInt1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double double0 = 638.1690627;
      short short0 = (short)1;
      short short1 = (short) (-1);
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      char char0 = '';
      Character character0 = Character.valueOf('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Short[]) null, (int) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      intArray0[2] = (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse(intArray0, (-528), 99);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, (-528), 0, 0, (-528), 0, 0}, intArray0);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-528), 0, 0, (-528), 0}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2515;
      shortArray0[1] = (short) (-772);
      shortArray0[2] = (short) (-1916);
      shortArray0[3] = (short) (-1318);
      shortArray0[4] = (short) (-503);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-772));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2515, (short) (-1916), (short) (-1318), (short) (-503)}, shortArray1);
      assertArrayEquals(new short[] {(short)2515, (short) (-772), (short) (-1916), (short) (-1318), (short) (-503)}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) bitSet0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1277;
      shortArray0[1] = (short)1277;
      shortArray0[2] = (short)1277;
      shortArray0[3] = (short) (-237);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1277, (-2157));
      assertEquals(4, shortArray0.length);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)1277, (short)1277, (short)1277, (short) (-237)}, shortArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 4, 5, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1922);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-121));
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1922)}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'A';
      floatArray0[1] = (float) (-121);
      ArrayUtils.reverse(floatArray0, (-5419), (-5419));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {65.0F, (-121.0F)}, floatArray0, 0.01F);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Character character0 = Character.valueOf('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.get(objectArray1, (int)  (-1922), (Object) character0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(4, objectArray1.length);
      assertEquals('A', object0);
      assertNotNull(object0);
      assertNotSame(objectArray1, objectArray0);
      
      objectArray1[0] = object0;
      objectArray1[1] = null;
      objectArray1[2] = (Object) 65L;
      objectArray1[3] = (Object) (-121.0F);
      Object[] objectArray2 = ArrayUtils.nullToEmpty(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertEquals(4, objectArray1.length);
      assertEquals(4, objectArray2.length);
      assertNotNull(objectArray2);
      assertNotSame(objectArray1, objectArray0);
      assertSame(objectArray1, objectArray2);
      assertSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      Double double0 = new Double(3147.605);
      assertEquals(3147.605, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), (-1));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) double0;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[3]);
      assertEquals(8, objectArray0.length);
      assertEquals(3147.605, object1);
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) double0;
      objectArray0[6] = (Object) double0;
      objectArray0[7] = (Object) double0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertEquals(8, objectArray0.length);
      assertEquals("{1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = 3147.605;
      doubleArray0[2] = 3147.605;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 3147.605;
      doubleArray0[6] = 638.1690627;
      doubleArray0[7] = 3147.605;
      ArrayUtils.shift(doubleArray0, (-1));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {3147.605, 3147.605, (-1.0), (-1.0), 3147.605, 638.1690627, 3147.605, (-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)570;
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)570, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)570}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('!');
      assertFalse(character1.equals((Object)character0));
      assertEquals('!', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray1.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 54, objectArray0[0]);
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object3);
      assertSame(object0, object3);
      assertSame(object3, object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-4378);
      doubleArray0[4] = (-1.766711509120914);
      doubleArray0[6] = (double) 54;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 54, (-354), (double) (-354));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 0.0, 54.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Object object4 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 0.0, 54.0}, doubleArray0, 0.01);
      assertNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 0.0, 54.0}, doubleArray0, 0.01);
      assertNotNull(bitSet1);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      
      Long long0 = new Long((-354));
      assertEquals((-354L), (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4378), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4378, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 8;
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      ArrayUtils.shuffle(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double(0.7);
      assertEquals(0.7, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 1.0;
      doubleArray1[4] = (Double) (-1.0);
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 1.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.7, 1.0, (-1.0), 0.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '';
      charArray0[2] = '?';
      charArray0[3] = ':';
      charArray0[4] = '*';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'o';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '?';
      int[] intArray1 = ArrayUtils.insert(48, intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {63}, intArray0);
      assertArrayEquals(new int[] {63}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-55);
      shortArray0[1] = (short) (byte) (-55);
      shortArray0[2] = (short) (byte) (-55);
      shortArray0[3] = (short) (byte) (-55);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-55), (-2239));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-55), (short) (-55), (short) (-55), (short) (-55)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-2239), (-2239));
      assertEquals(0, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1287.0F;
      floatArray0[1] = (float) (short) (-55);
      floatArray0[2] = (float) (byte) (-55);
      floatArray0[3] = (float) (short) (-55);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1688);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1688, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = 3968;
      int int1 = 3636;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(98, booleanArray1, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      int int0 = (-1800);
      Integer integer0 = Integer.getInteger("iaLMy", (-1800));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1800), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-4674L), (-1800));
      assertFalse(int1 == int0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int2 = 11;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = true;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(11, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byte byte0 = (byte)62;
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'I', 2049870754);
      assertEquals(2, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'I';
      objectArray0[1] = (Object) (byte)106;
      objectArray0[2] = (Object) (byte) (-55);
      objectArray0[3] = (Object) 'I';
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'I', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertEquals(0, longArray1.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      long[] longArray2 = ArrayUtils.add((long[]) null, (-1678L));
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {(-1678L)}, longArray2);
      assertNotNull(longArray2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '@';
      charArray0[2] = 'Y';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'+', '@', 'Y'}, charArray0);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2479L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)111, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '$';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '$', (int) (byte)42);
      assertEquals(7, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {',', '$', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1169.86F);
      floatArray0[1] = (-2674.816F);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) (-1L);
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) (byte)111;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1169.86F), (-2674.816F), (-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F), 0.0F, 111.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[12];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(12, longArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-78), (-1478));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-182);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (-1478));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-182.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-182.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      char[] charArray0 = new char[3];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2828.441;
      ArrayUtils.swap(charArray0, (-534), 2958, 57);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-534);
      longArray0[1] = (long) 57;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-534L), 57L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = (Object) '0';
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals("{0, 4, 5, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      longArray0[2] = (long) '0';
      longArray0[3] = (long) '0';
      longArray0[4] = (long) '0';
      objectArray0[0] = (Object) 'A';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray1);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray1);
      assertArrayEquals(new long[] {65L, 65L, 48L, 48L, 48L, 0L}, longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short) (-2136));
      assertEquals((short) (-2136), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1090);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1090, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2136));
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-2136), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals(4, shortArray0.length);
      assertEquals((short) (-2136), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)69);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2136), (short)1090, (short) (-2136), (short) (-2136)}, shortArray1);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)shortArray0[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 885.48573407, (int) shortArray0[2]);
      assertEquals(4, shortArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-2136.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)102);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)102, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, (int) 0, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (byte)43;
      longArray0[2] = (long) (byte) (-128);
      longArray0[3] = (long) (byte)43;
      ArrayUtils.swap(longArray0, 1, 2, (-3433));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 43L, (-128L), 43L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)11);
      assertEquals(4, byteArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-67), (byte)11, (byte)2}, byteArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)11, (int) (byte)11);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Float float0 = new Float((-314.54395F));
      assertEquals((-314.54395F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) float0, (-1936));
      assertFalse(int1 == int0);
      assertEquals(1, characterArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '0';
      objectArray0[5] = null;
      objectArray0[6] = (Object) '0';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2], (-5420));
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)0, 0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'O';
      charArray0[2] = 'B';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'B';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-110), (int) (byte)11);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      
      Integer integer0 = new Integer(107);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(107, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(integer0, boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean1);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertTrue(int1 == int0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 54, objectArray0[0]);
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object3);
      assertSame(object0, object3);
      assertSame(object3, object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-4378);
      doubleArray0[4] = (-1.766711509120914);
      doubleArray0[6] = (double) 54;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 54, (-354), (double) (-354));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 0.0, 54.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Object object4 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 0.0, 54.0}, doubleArray0, 0.01);
      assertNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 0.0, 54.0}, doubleArray0, 0.01);
      assertNotNull(bitSet1);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      
      Long long0 = new Long((-354));
      assertEquals((-354L), (long)long0);
      assertNotNull(long0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(objectArray0, (Object) long0);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertEquals(5, objectArray0.length);
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      
      ArrayUtils.shift(doubleArray0, 54);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4378.0), (-1.766711509120914), 0.0, 54.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      BitSet bitSet3 = ArrayUtils.indexesOf(charArray0, 'u');
      assertTrue(bitSet3.equals((Object)bitSet2));
      assertTrue(bitSet3.equals((Object)bitSet1));
      assertTrue(bitSet3.equals((Object)bitSet0));
      assertEquals(0, charArray0.length);
      assertEquals(0, bitSet3.cardinality());
      assertTrue(bitSet3.isEmpty());
      assertEquals(64, bitSet3.size());
      assertEquals(0, bitSet3.length());
      assertEquals("{}", bitSet3.toString());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet3);
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet2);
      assertNotSame(bitSet3, bitSet1);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-7064.7);
      doubleArray0[1] = 27.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 91.0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-7064.7), 27.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short) (-2052);
      shortArray0[3] = (short)579;
      shortArray0[4] = (short) (-2312);
      shortArray0[5] = (short)15;
      ArrayUtils.shift(shortArray0, 644, 120, (int) (short)15);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)51, (short) (-2052), (short)579, (short) (-2312), (short)15}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "gXBKc.=p|8`S0";
      stringArray0[2] = "";
      stringArray0[3] = "hM!;@TZDh6K#^Ako=";
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt(3968);
      assertEquals(3968, (int)mutableInt0.getValue());
      assertEquals((short)3968, mutableInt0.shortValue());
      assertEquals((byte) (-128), mutableInt0.byteValue());
      assertEquals("3968", mutableInt0.toString());
      assertEquals(3968, (int)mutableInt0.toInteger());
      assertEquals(3968.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3968, mutableInt0.intValue());
      assertEquals(3968L, mutableInt0.longValue());
      assertEquals(3968.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      int int1 = mutableInt0.addAndGet(3968);
      assertFalse(int1 == int0);
      assertEquals(7936, (int)mutableInt0.getValue());
      assertEquals(7936, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)7936, mutableInt0.shortValue());
      assertEquals("7936", mutableInt0.toString());
      assertEquals(7936.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(7936L, mutableInt0.longValue());
      assertEquals(7936, mutableInt0.intValue());
      assertEquals(7936.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(7936, int1);
      
      String string0 = ArrayUtils.toString((Object) "", "-}goX ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[7];
      intArray0[2] = 7936;
      intArray0[3] = 2943;
      intArray0[6] = (-1532);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1158));
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 7936, 2943, 0, 0, (-1532)}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'I';
      ArrayUtils.shuffle(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'I', 'd'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'I';
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) 'd';
      intArray0[3] = (int) 'd';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'I';
      intArray0[6] = (int) 'I';
      intArray0[7] = 10;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {73, 100, 100, 100, 73, 73, 10, 73}, intArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 11);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {73, 100, 100, 100, 73, 73, 10, 73}, intArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'I');
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'I', 'd'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 100;
      int int2 = ArrayUtils.indexOf(longArray0, (-903L), 76);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(3, longArray0.length);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {0L, 10L, 100L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100L;
      doubleArray0[1] = (double) 100;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {100.0, 100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.1;
      doubleArray2[1] = (double) 0L;
      double[] doubleArray3 = ArrayUtils.clone(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {0.1, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.1, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ArrayUtils.reverse(objectArray0, 100, 3969);
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 100;
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[5];
      int int0 = 2620;
      intArray0[2] = 2620;
      intArray0[3] = (int) (short)436;
      intArray0[4] = 100;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, 2620);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2620, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "k9[dk";
      String string0 = ArrayUtils.get(stringArray0, 91, "k9[dk");
      assertEquals(1, stringArray0.length);
      assertEquals("k9[dk", string0);
      assertNotNull(string0);
      
      String string1 = ArrayUtils.toString((Object) "k9[dk", "k9[dk");
      assertTrue(string1.equals((Object)string0));
      assertEquals("k9[dk", string1);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 91;
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)7);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)7, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-35));
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-35), (byte)byte2);
      assertNotNull(byte2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-26);
      shortArray0[7] = (short) (byte)7;
      shortArray0[8] = (short)1;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(18, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)1, (short)1, (short)1, (short)1, (short) (-26), (short)7, (short)1}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L);
      assertEquals(0, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'Z', 9);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom(9);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1029L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom1.nextInt(111);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockRandom1;
      objectArray0[1] = (Object) mockRandom1;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(4, objectArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) mockRandom0, 9);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(int1 == int0);
      assertEquals(4, objectArray0.length);
      assertEquals(2, int1);
      assertNotSame(mockRandom0, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 575);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'%', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'%', 'Q'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, 'i');
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'%', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'%', 'Q'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) true;
      MutableInt mutableInt0 = new MutableInt(0.0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) mutableInt0, 322);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(6, objectArray0.length);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) doubleArray0[0]);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'O';
      charArray0[2] = 'Q';
      charArray0[3] = 'A';
      Character character0 = Character.valueOf('Q');
      assertEquals('Q', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('Q');
      assertEquals('Q', (char)character1);
      assertNotNull(character1);
      
      Character character2 = new Character('.');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('.', (char)character2);
      assertNotNull(character2);
      
      ArrayUtils.shift(shortArray0, (int) (short)0, 4702, (-2325));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((int[]) null, 495, (int) 'O', (-791));
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-351);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-351);
      longArray0[5] = (long) 0;
      ArrayUtils.reverse(longArray0, (-351), (-2));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-351L), 0L, (-351L), 0L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2);
      intArray0[1] = 0;
      intArray0[2] = (-351);
      intArray0[3] = 70;
      intArray0[4] = 0;
      intArray0[5] = (-2);
      intArray0[6] = 0;
      intArray0[7] = (-2);
      ArrayUtils.swap(intArray0, 5413, (-3));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2), 0, (-351), 70, 0, (-2), 0, (-2)}, intArray0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, (-351), 70, 0, (-2), 0, (-2), (-2)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-845.2);
      doubleArray0[1] = 789.608847523173;
      ArrayUtils.shift((Object[]) null, 2146175912);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      ArrayUtils.reverse(longArray0, 5, 3124);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short) (-2496));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-2496), (short)short2);
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      short[] shortArray2 = new short[9];
      shortArray2[0] = short0;
      shortArray2[1] = (short) shortArray0[1];
      shortArray2[2] = short0;
      shortArray2[3] = (short)3211;
      shortArray2[4] = (short) (-2496);
      shortArray2[5] = (short)2724;
      shortArray2[6] = (short) shortArray0[1];
      shortArray2[7] = (short)340;
      shortArray2[8] = (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray2, (short) (-1980));
      assertEquals(9, shortArray2.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2496), (short) (-1), (short)3211, (short) (-2496), (short)2724, (short) (-2496), (short)340, (short) (-1)}, shortArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray2, 55);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3154.4479046;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (-333), 0);
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-898));
      assertEquals((short) (-898), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2367));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-2367), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2367));
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-2367), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertEquals(7, shortArray0.length);
      assertEquals((short) (-2367), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short) (-1), (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[3]);
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertEquals(7, shortArray0.length);
      assertEquals((short) (-2367), (short)short5);
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)1192);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertEquals((short)1192, (short)short6);
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-48);
      doubleArray0[1] = (-2182.7159099205);
      doubleArray0[2] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-48.0), (-2182.7159099205), (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      Float float0 = new Float(943.936485);
      assertEquals(943.93646F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-1729L));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((byte)15);
      assertEquals(15.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3331.7556);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3331.7556, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(3331.7556, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(3331.7556, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2991.552901);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(2991.552901, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((byte)34);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals(34.0, (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2991.552901;
      doubleArray2[1] = (double) doubleArray0[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 2991.552901, 91.0);
      assertEquals(2, doubleArray2.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new double[] {2991.552901, 3331.7556}, doubleArray2, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)100;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-31);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 8, (-891), 8);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)115;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {8, 2, 2, 115}, intArray1);
      assertArrayEquals(new int[] {8, 2, 2, 115}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)0, 0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'O';
      charArray0[2] = 'Q';
      charArray0[3] = 'A';
      charArray0[4] = '=';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'B', 'O', 'Q', 'A', '='}, charArray0);
      assertArrayEquals(new char[] {'B', 'O', 'Q', 'A', '='}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {66}, intArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(booleanArray1, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3230.161619);
      doubleArray0[1] = (double) 'B';
      doubleArray0[2] = (double) 'Q';
      doubleArray0[3] = 0.7;
      doubleArray0[4] = (double) 'A';
      doubleArray0[5] = (double) '8';
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 2886.0, 4, 0.7);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new double[] {(-3230.161619), 66.0, 81.0, 0.7, 65.0, 56.0}, doubleArray0, 0.01);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      Byte byte1 = new Byte((byte)43);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)43, (byte)byte1);
      assertNotNull(byte1);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)102);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)102, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, (int) 0, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {2L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = (-2427);
      intArray0[2] = 1;
      intArray0[3] = 108;
      int int0 = ArrayUtils.indexOf(intArray0, 45);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2, (-2427), 1, 108}, intArray0);
      
      ArrayUtils.shift((double[]) null, (-2427));
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get(byteArray0, 46, byte0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((int[]) null, 1766);
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1277, (-1828));
      assertEquals(0, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      long[] longArray0 = new long[9];
      longArray0[1] = (-730L);
      longArray0[4] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(9, longArray0.length);
      assertEquals("{0, 2, 3, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals(7, bitSet0.cardinality());
      assertArrayEquals(new long[] {0L, (-730L), 0L, 0L, 1L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.shift((int[]) null, 7);
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)100;
      int[] intArray1 = ArrayUtils.insert(164, (int[]) null, (int[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      ArrayUtils.shift((int[]) null, (-677));
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      Character character0 = new Character('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      
      Boolean boolean0 = new Boolean("z|xP|Y>&");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Float float0 = new Float((float) 2149);
      assertEquals(2149.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.isEquals(boolean0, float0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1839.7176545311138, 2149);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '.';
      charArray0[2] = 'Q';
      charArray0[3] = '.';
      charArray0[4] = 'Q';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Q';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) '.';
      intArray0[3] = (int) 'Q';
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'Q';
      intArray0[6] = (int) '.';
      boolean boolean0 = ArrayUtils.contains(intArray0, 81);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {81, 81, 46, 81, 81, 81, 46}, intArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2750.7645847171934), (-400), 2752.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1.766711509120914), 1.0, (-2750.7645847171934)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1287;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1287.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1287.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, '5');
      assertFalse(int1 == int0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'Q', '.', 'Q', '.', 'Q', '\u0000'}, charArray0);
      
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isEquals(byte0, byte0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-411);
      intArray0[0] = (-411);
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-411));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-411), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-411), (-411), (-1)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-318.639);
      doubleArray0[1] = (double) (-411);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-411);
      doubleArray0[4] = (double) (-411);
      doubleArray0[5] = (double) (-411);
      doubleArray0[6] = (double) (-411);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1), 308.337);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "java.lang.Boolean");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)0, 0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'O';
      charArray0[2] = 'Q';
      charArray0[3] = 'A';
      charArray0[4] = '=';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'B', 'O', 'Q', 'A', '='}, charArray0);
      assertArrayEquals(new char[] {'B', 'O', 'Q', 'A', '='}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte0 = Byte.valueOf((byte)17);
      assertEquals((byte)17, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.insert((-1), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '8';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)17;
      doubleArray0[3] = (double) 'O';
      doubleArray0[4] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) (byte)17);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {17.0, 56.0, 0.0, 17.0, 79.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {56.0, 0.0, 17.0, 79.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ", Length: 0");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      Double[] doubleArray0 = ArrayUtils.insert(1632, (Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long1;
      longArray0[3] = long0;
      longArray0[4] = long0;
      Long long2 = new Long(1632);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(1632L, (long)long2);
      assertNotNull(long2);
      
      longArray0[5] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1632L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2479L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)111;
      longArray0[4] = (long) (byte)111;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 111L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 111L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[3] = 'D';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'D', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) '\u0000');
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)42, (byte)111, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (byte)42;
      doubleArray0[3] = (double) (-2479L);
      doubleArray0[3] = (double) (byte)42;
      doubleArray0[5] = (double) '\u0000';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 42.0, 42.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 42.0, 42.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 42.0, 42.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2479L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)111, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = 'D';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {',', '$', '$', 'D', '$', '$', '$'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-114));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)42, (byte)111, (byte) (-1)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (byte)42;
      doubleArray0[3] = (double) (-2479L);
      doubleArray0[4] = (double) (byte)42;
      doubleArray0[5] = (double) '$';
      doubleArray0[6] = (double) 'D';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 42.0, (-2479.0), 42.0, 36.0, 68.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      Byte byte0 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)24);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)24, (byte)byte1);
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (int) 43, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      int int0 = 1159;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      
      int int1 = 2334;
      byte byte0 = (byte) (-128);
      Byte byte1 = new Byte((byte) (-128));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-128), (byte)byte1);
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 2334, byte1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2334, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2804.4832F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 48.0F;
      ArrayUtils.swap(floatArray0, 1, (-767), (-80));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 2804.4832F, 1.0F, 48.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-30);
      ArrayUtils.swap(byteArray0, 5, (-51), (int) (byte) (-56));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-1), (byte) (-30)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-6205);
      shortArray0[1] = (short) (-6205);
      MutableInt mutableInt0 = new MutableInt((Number) (short) (-6205));
      assertEquals((-6205.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-6205), mutableInt0.intValue());
      assertEquals((short) (-6205), mutableInt0.shortValue());
      assertEquals((-6205.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-6205", mutableInt0.toString());
      assertEquals((-6205), (int)mutableInt0.toInteger());
      assertEquals((-6205), (int)mutableInt0.getValue());
      assertEquals((byte) (-61), mutableInt0.byteValue());
      assertEquals((-6205L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.decrement();
      assertEquals((-6206.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-6206), mutableInt0.shortValue());
      assertEquals((-6206), mutableInt0.intValue());
      assertEquals((-6206), (int)mutableInt0.toInteger());
      assertEquals((byte) (-62), mutableInt0.byteValue());
      assertEquals("-6206", mutableInt0.toString());
      assertEquals((-6206L), mutableInt0.longValue());
      assertEquals((-6206), (int)mutableInt0.getValue());
      assertEquals((-6206.0F), mutableInt0.floatValue(), 0.01F);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short) (-6205);
      objectArray0[1] = (Object) mutableInt0;
      objectArray0[2] = (Object) mutableInt0;
      objectArray0[3] = (Object) mutableInt0;
      objectArray0[4] = (Object) mutableInt0;
      objectArray0[5] = (Object) mutableInt0;
      objectArray0[6] = (Object) (short) (-6205);
      objectArray0[7] = (Object) mutableInt0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[5], 8);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-6205);
      ArrayUtils.shuffle(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-6205.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (-677);
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (byte)1;
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)1;
      floatArray0[6] = (float) (-677);
      floatArray0[7] = (float) (short)1;
      floatArray0[8] = (float) 46;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-677.0F), 1.0F, 1.0F, 1.0F, 1.0F, (-677.0F), 1.0F, 46.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get(byteArray0, 46, byte0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-639), (int) (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), 1766);
      assertEquals(18, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (-3543.7433141653);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (-265.619);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-3543.7433141653), (-265.619)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 1.0, (-3543.7433141653), (-1.0), (-1.0), (-265.619)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1766;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) 46;
      MockRandom mockRandom0 = new MockRandom((-4590L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 46.0F, 1766.0F}, floatArray0, 0.01F);
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt mutableInt0 = new MutableInt((int) (short)1);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(2083);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(2083, mutableInt1.intValue());
      assertEquals((short)2083, mutableInt1.shortValue());
      assertEquals((byte)35, mutableInt1.byteValue());
      assertEquals(2083, (int)mutableInt1.getValue());
      assertEquals(2083, (int)mutableInt1.toInteger());
      assertEquals(2083.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("2083", mutableInt1.toString());
      assertEquals(2083.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2083L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((-1.0));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertEquals((short) (-1), mutableInt2.shortValue());
      assertEquals((-1.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt2.byteValue());
      assertEquals((-1.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt2.toInteger());
      assertEquals((-1), (int)mutableInt2.getValue());
      assertEquals((-1L), mutableInt2.longValue());
      assertEquals((-1), mutableInt2.intValue());
      assertEquals("-1", mutableInt2.toString());
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt((int) (short)1);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertEquals(1, mutableInt3.intValue());
      assertEquals(1, (int)mutableInt3.toInteger());
      assertEquals(1, (int)mutableInt3.getValue());
      assertEquals(1L, mutableInt3.longValue());
      assertEquals(1.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt3.shortValue());
      assertEquals("1", mutableInt3.toString());
      assertEquals(1.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt3.byteValue());
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((-265.619));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertEquals((-265), (int)mutableInt4.getValue());
      assertEquals((byte) (-9), mutableInt4.byteValue());
      assertEquals((-265.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-265), (int)mutableInt4.toInteger());
      assertEquals((-265L), mutableInt4.longValue());
      assertEquals((-265.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals("-265", mutableInt4.toString());
      assertEquals((short) (-265), mutableInt4.shortValue());
      assertEquals((-265), mutableInt4.intValue());
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(46);
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertEquals((short)46, mutableInt5.shortValue());
      assertEquals(46, (int)mutableInt5.getValue());
      assertEquals((byte)46, mutableInt5.byteValue());
      assertEquals(46.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(46, (int)mutableInt5.toInteger());
      assertEquals(46.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(46L, mutableInt5.longValue());
      assertEquals(46, mutableInt5.intValue());
      assertEquals("46", mutableInt5.toString());
      assertNotNull(mutableInt5);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt((Number) byte0);
      assertTrue(mutableInt6.equals((Object)mutableInt0));
      assertTrue(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertEquals("1", mutableInt6.toString());
      assertEquals(1, mutableInt6.intValue());
      assertEquals((short)1, mutableInt6.shortValue());
      assertEquals(1, (int)mutableInt6.getValue());
      assertEquals((byte)1, mutableInt6.byteValue());
      assertEquals(1, (int)mutableInt6.toInteger());
      assertEquals(1.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(1L, mutableInt6.longValue());
      assertNotNull(mutableInt6);
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt mutableInt7 = new MutableInt((-1744));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertEquals((-1744), mutableInt7.intValue());
      assertEquals((-1744), (int)mutableInt7.getValue());
      assertEquals((byte)48, mutableInt7.byteValue());
      assertEquals((-1744), (int)mutableInt7.toInteger());
      assertEquals((short) (-1744), mutableInt7.shortValue());
      assertEquals((-1744L), mutableInt7.longValue());
      assertEquals((-1744.0F), mutableInt7.floatValue(), 0.01F);
      assertEquals((-1744.0), mutableInt7.doubleValue(), 0.01);
      assertEquals("-1744", mutableInt7.toString());
      assertNotNull(mutableInt7);
      
      mutableIntArray0[7] = mutableInt7;
      Integer integer0 = new Integer(666);
      assertEquals(666, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt8 = new MutableInt((Number) integer0);
      assertFalse(mutableInt8.equals((Object)mutableInt0));
      assertFalse(mutableInt8.equals((Object)mutableInt2));
      assertFalse(mutableInt8.equals((Object)mutableInt3));
      assertFalse(mutableInt8.equals((Object)mutableInt4));
      assertFalse(mutableInt8.equals((Object)mutableInt7));
      assertFalse(mutableInt8.equals((Object)mutableInt5));
      assertFalse(mutableInt8.equals((Object)mutableInt1));
      assertFalse(mutableInt8.equals((Object)mutableInt6));
      assertEquals(666L, mutableInt8.longValue());
      assertEquals(666, mutableInt8.intValue());
      assertEquals((short)666, mutableInt8.shortValue());
      assertEquals(666, (int)mutableInt8.toInteger());
      assertEquals((byte) (-102), mutableInt8.byteValue());
      assertEquals("666", mutableInt8.toString());
      assertEquals(666.0, mutableInt8.doubleValue(), 0.01);
      assertEquals(666.0F, mutableInt8.floatValue(), 0.01F);
      assertEquals(666, (int)mutableInt8.getValue());
      assertNotNull(mutableInt8);
      
      mutableIntArray0[8] = mutableInt8;
      // Undeclared exception!
      try { 
        ArrayUtils.add(mutableIntArray0, 1072, mutableInt1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      Float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, floatArray0[3]);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) (float)floatArray0[1];
      doubleArray0[4] = (double) (float)floatArray0[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.1, 1.5, 0.0, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 0.0, 0.1, 1.5, 0.0, 1.5}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1158);
      shortArray0[1] = (short)98;
      shortArray0[2] = (short) (-1535);
      shortArray0[3] = (short)8192;
      short short0 = (short) (-2647);
      shortArray0[4] = (short) (-2647);
      shortArray0[5] = (short)4;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Integer integer0 = new Integer(220);
      assertEquals(220, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(220, (int)mutableInt0.toInteger());
      assertEquals(220, mutableInt0.intValue());
      assertEquals(220, (int)mutableInt0.getValue());
      assertEquals(220.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(220.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(220L, mutableInt0.longValue());
      assertEquals("220", mutableInt0.toString());
      assertEquals((short)220, mutableInt0.shortValue());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(220, (int)mutableInt0.toInteger());
      assertEquals(220, mutableInt0.intValue());
      assertEquals(220, (int)mutableInt0.getValue());
      assertEquals(220.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(220.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(220L, mutableInt0.longValue());
      assertEquals("220", mutableInt0.toString());
      assertEquals((short)220, mutableInt0.shortValue());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals(220L, mutableInt1.longValue());
      assertEquals(220, (int)mutableInt1.toInteger());
      assertEquals(220, (int)mutableInt1.getValue());
      assertEquals(220.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("220", mutableInt1.toString());
      assertEquals((byte) (-36), mutableInt1.byteValue());
      assertEquals(220.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)220, mutableInt1.shortValue());
      assertEquals(220, mutableInt1.intValue());
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt1.getAndAdd(0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(220, (int)mutableInt0.toInteger());
      assertEquals(220, mutableInt0.intValue());
      assertEquals(220, (int)mutableInt0.getValue());
      assertEquals(220.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(220.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(220L, mutableInt0.longValue());
      assertEquals("220", mutableInt0.toString());
      assertEquals((short)220, mutableInt0.shortValue());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals(220L, mutableInt1.longValue());
      assertEquals(220, (int)mutableInt1.toInteger());
      assertEquals(220, (int)mutableInt1.getValue());
      assertEquals(220.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("220", mutableInt1.toString());
      assertEquals((byte) (-36), mutableInt1.byteValue());
      assertEquals(220.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)220, mutableInt1.shortValue());
      assertEquals(220, mutableInt1.intValue());
      assertEquals(220, int0);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      int int1 = mutableInt1.decrementAndGet();
      assertTrue(integer0.equals((Object)int0));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals(220, (int)mutableInt0.toInteger());
      assertEquals(220, mutableInt0.intValue());
      assertEquals(220, (int)mutableInt0.getValue());
      assertEquals(220.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(220.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(220L, mutableInt0.longValue());
      assertEquals("220", mutableInt0.toString());
      assertEquals((short)220, mutableInt0.shortValue());
      assertEquals((byte) (-36), mutableInt0.byteValue());
      assertEquals(219, mutableInt1.intValue());
      assertEquals(219.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(219L, mutableInt1.longValue());
      assertEquals(219, (int)mutableInt1.toInteger());
      assertEquals((byte) (-37), mutableInt1.byteValue());
      assertEquals(219, (int)mutableInt1.getValue());
      assertEquals(219.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)219, mutableInt1.shortValue());
      assertEquals("219", mutableInt1.toString());
      assertEquals(219, int1);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      MutableInt mutableInt2 = new MutableInt(0);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals("0", mutableInt2.toString());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(0L, mutableInt2.longValue());
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0, mutableInt2.intValue());
      assertNotNull(mutableInt2);
      
      int int2 = mutableInt2.addAndGet(220);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((byte) (-36), mutableInt2.byteValue());
      assertEquals(220, (int)mutableInt2.toInteger());
      assertEquals(220, (int)mutableInt2.getValue());
      assertEquals(220.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)220, mutableInt2.shortValue());
      assertEquals(220L, mutableInt2.longValue());
      assertEquals(220, mutableInt2.intValue());
      assertEquals(220.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals("220", mutableInt2.toString());
      assertEquals(220, int2);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      
      int int3 = mutableInt0.addAndGet((-2146356122));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-2146355902), (int)mutableInt0.toInteger());
      assertEquals((-2.146355902E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2146355902), (int)mutableInt0.getValue());
      assertEquals((-2.14635584E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2146355902", mutableInt0.toString());
      assertEquals((-2146355902L), mutableInt0.longValue());
      assertEquals((byte)66, mutableInt0.byteValue());
      assertEquals((-2146355902), mutableInt0.intValue());
      assertEquals((short)13634, mutableInt0.shortValue());
      assertEquals((-2146355902), int3);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt1);
      
      Long long0 = new Long(220);
      assertEquals(220L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("220", string0);
      assertNotNull(string0);
      
      int int4 = mutableInt1.getAndIncrement();
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals((-2146355902), (int)mutableInt0.toInteger());
      assertEquals((-2.146355902E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2146355902), (int)mutableInt0.getValue());
      assertEquals((-2.14635584E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2146355902", mutableInt0.toString());
      assertEquals((-2146355902L), mutableInt0.longValue());
      assertEquals((byte)66, mutableInt0.byteValue());
      assertEquals((-2146355902), mutableInt0.intValue());
      assertEquals((short)13634, mutableInt0.shortValue());
      assertEquals(220L, mutableInt1.longValue());
      assertEquals(220, (int)mutableInt1.toInteger());
      assertEquals(220, (int)mutableInt1.getValue());
      assertEquals(220.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("220", mutableInt1.toString());
      assertEquals((byte) (-36), mutableInt1.byteValue());
      assertEquals(220.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)220, mutableInt1.shortValue());
      assertEquals(220, mutableInt1.intValue());
      assertEquals(219, int4);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt2);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 69);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3079;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)65;
      shortArray0[3] = (short) (-1158);
      shortArray0[4] = (short)436;
      shortArray0[5] = (short)1140;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1158), (short)436, (short)1140}, shortArray1);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1158), (short)436, (short)1140}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(6, shortArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1158), (short)436, (short)1140}, shortArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)3079, (short) (-1), (short)65, (short) (-1158), (short)436, (short)1140}, shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 584);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 584, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)34);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (byte)34;
      longArray0[2] = (long) (byte)34;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {2L, 34L, 34L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 2L, 34L, 34L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get(byteArray0, 46, byte0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      byte[] byteArray1 = new byte[18];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)11;
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)2, 1672);
      assertEquals(18, byteArray1.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameType(byte1, byte0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)1);
      assertFalse(int1 == int0);
      assertEquals(18, byteArray1.length);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      Character character0 = new Character('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)7);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.reverse(shortArray0, (int) (short)7, (int) (short)7);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, (int) (short)7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[4] = (-1L);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2479L);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-3169);
      floatArray0[3] = (float) (-3169);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) (-3169);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-3169));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3169, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      Float float0 = new Float(65.0);
      assertEquals(65.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (byte)57);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(57.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)57;
      shortArray0[4] = (short) (byte) (-114);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-3474));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3474, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {2L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, 100L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {100L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (byte) (-65);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-65);
      floatArray0[4] = (float) (byte) (-65);
      floatArray0[5] = (float) (byte) (-65);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-65));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, (-65.0F), (-1.0F), (-65.0F), (-65.0F), (-65.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, (-1.0F), (-65.0F), (-65.0F), (-65.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)62;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)106;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1, 45);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)106}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-639), 63);
      assertEquals(0, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-639);
      floatArray0[1] = (float) (byte)106;
      floatArray0[2] = (float) 1688;
      floatArray0[3] = (float) (byte) (-55);
      floatArray0[4] = (float) (byte)62;
      floatArray0[5] = (-1177.2797F);
      floatArray0[6] = 1.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-3169));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3169, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)13;
      shortArray0[1] = (short) (byte)13;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte)13;
      shortArray0[4] = (short) (byte)13;
      shortArray0[5] = (short) (byte)13;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertArrayEquals(new short[] {(short)13, (short)13, (short) (-1), (short)13, (short)13, (short)13}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)88);
      assertEquals((short)88, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short) (-3133));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-3133), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-289));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-289), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = Short.valueOf((short)1124);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)1124, (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)1365);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)1365, (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[1]);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertEquals(8, shortArray0.length);
      assertEquals((short) (-3133), (short)short5);
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) (-289));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertEquals((short) (-289), (short)short6);
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short short7 = Short.valueOf((short) shortArray0[4]);
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short3));
      assertTrue(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short2));
      assertEquals(8, shortArray0.length);
      assertEquals((short)1365, (short)short7);
      assertNotNull(short7);
      
      shortArray0[7] = short7;
      Short short8 = ArrayUtils.get(shortArray0, 585);
      assertEquals(8, shortArray0.length);
      assertNull(short8);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(3, characterArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("`HdCs<mHf,p ");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) null, "Comparator should not be null.");
      assertEquals("Comparator should not be null.", string0);
      assertNotNull(string0);
      
      byte byte0 = (byte) (-97);
      Byte byte1 = new Byte((byte) (-97));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-97), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-97));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-97), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)2);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)2, (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-98));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-98), (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte5 = new Byte((byte)7);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)7, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[0] = byte5;
      byteArray0[1] = byte4;
      byteArray0[2] = byte2;
      Byte byte6 = new Byte((byte) (-98));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte) (-98), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[3] = byte6;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-98), (byte) (-97), (byte) (-98), (byte) (-97), (byte)2}, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-97);
      shortArray0[1] = (short) (-26);
      shortArray0[2] = (short)1;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-97), (short) (-26), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-97), (short) (-26), (short)1, (short) (-97), (short) (-26), (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "gXBKc.=p|8`S0";
      stringArray0[2] = "";
      stringArray0[3] = "hM!;@TZDh6K#^Ako=";
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      int int1 = mutableInt0.getAndAdd((-1));
      assertTrue(int1 == int0);
      assertEquals((short) (-2), mutableInt0.shortValue());
      assertEquals((-2.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-2", mutableInt0.toString());
      assertEquals((-2), mutableInt0.intValue());
      assertEquals((-2L), mutableInt0.longValue());
      assertEquals((-2), (int)mutableInt0.toInteger());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2), (int)mutableInt0.getValue());
      assertEquals((-1), int1);
      
      int int2 = mutableInt0.decrementAndGet();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((short) (-3), mutableInt0.shortValue());
      assertEquals("-3", mutableInt0.toString());
      assertEquals((-3), mutableInt0.intValue());
      assertEquals((-3), (int)mutableInt0.getValue());
      assertEquals((byte) (-3), mutableInt0.byteValue());
      assertEquals((-3.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3L), mutableInt0.longValue());
      assertEquals((-3), (int)mutableInt0.toInteger());
      assertEquals((-3), int2);
      
      int int3 = mutableInt0.addAndGet((-1532));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals((-1535.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1535), (int)mutableInt0.getValue());
      assertEquals((-1535), (int)mutableInt0.toInteger());
      assertEquals((short) (-1535), mutableInt0.shortValue());
      assertEquals((-1535L), mutableInt0.longValue());
      assertEquals((-1535), mutableInt0.intValue());
      assertEquals((-1535.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1535", mutableInt0.toString());
      assertEquals((-1535), int3);
      
      MutableInt mutableInt1 = new MutableInt(3968);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(3968.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)3968, mutableInt1.shortValue());
      assertEquals("3968", mutableInt1.toString());
      assertEquals(3968, (int)mutableInt1.getValue());
      assertEquals(3968L, mutableInt1.longValue());
      assertEquals(3968.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(3968, mutableInt1.intValue());
      assertEquals(3968, (int)mutableInt1.toInteger());
      assertEquals((byte) (-128), mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      
      int int4 = mutableInt1.addAndGet(3968);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(7936.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(7936.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(7936, (int)mutableInt1.toInteger());
      assertEquals(7936, (int)mutableInt1.getValue());
      assertEquals(7936, mutableInt1.intValue());
      assertEquals(7936L, mutableInt1.longValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals("7936", mutableInt1.toString());
      assertEquals((short)7936, mutableInt1.shortValue());
      assertEquals(7936, int4);
      assertNotSame(mutableInt1, mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) "", "-}goX ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int5 = mutableInt0.getAndIncrement();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals((-1534), (int)mutableInt0.getValue());
      assertEquals((-1534), (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals((short) (-1534), mutableInt0.shortValue());
      assertEquals((-1534.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1534L), mutableInt0.longValue());
      assertEquals((-1534), mutableInt0.intValue());
      assertEquals((-1534.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1534", mutableInt0.toString());
      assertEquals((-1535), int5);
      assertNotSame(mutableInt0, mutableInt1);
      
      int[] intArray0 = new int[7];
      mutableInt0.setValue(1);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      
      intArray0[0] = (-1535);
      intArray0[1] = (-3);
      intArray0[2] = 7936;
      intArray0[3] = 2943;
      intArray0[4] = (-1);
      intArray0[5] = (-678);
      intArray0[6] = (-1532);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1158));
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1535), (-3), 7936, 2943, (-1), (-678), (-1532)}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) (-1));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '`';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'S';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      charArray0[8] = 'S';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'M', '`', 'b', 'b', 'b', 'S', 'b', 'b', 'S'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)97;
      ArrayUtils.reverse(byteArray0, (int) (byte)0, (-25));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)10, (byte)97}, byteArray0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'S';
      characterArray0[1] = (Character) 'b';
      characterArray0[2] = (Character) 'b';
      characterArray0[3] = (Character) 'b';
      characterArray0[4] = (Character) 'S';
      characterArray0[5] = (Character) 'M';
      characterArray0[6] = (Character) 'b';
      characterArray0[7] = (Character) 'S';
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (-607));
      assertFalse(boolean1 == boolean0);
      assertEquals(8, characterArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = 'v';
      charArray0[5] = ']';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      charArray1[1] = 'v';
      charArray1[2] = 'v';
      charArray1[3] = ']';
      charArray1[4] = 'v';
      charArray1[5] = ']';
      charArray1[6] = 'v';
      charArray1[7] = ']';
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(14, charArray2.length);
      assertEquals(6, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {']', ']', ']', ']', 'v', ']'}, charArray0);
      assertArrayEquals(new char[] {'K', 'v', 'v', ']', 'v', ']', 'v', ']'}, charArray1);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(758L);
      assertEquals(758L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2147483647L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {758L}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (long)longArray0[0];
      doubleArray0[1] = (double) ']';
      doubleArray0[2] = (double) 'v';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1019.8980076);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {758.0, 93.0, 118.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {758.0, 93.0, 118.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2437;
      shortArray0[1] = (short)1489;
      shortArray0[2] = (short)34;
      shortArray0[3] = (short)1440;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)2437, (short)1489, (short)34, (short)1440}, shortArray0);
      assertArrayEquals(new short[] {(short)2437, (short)1489, (short)34, (short)1440}, shortArray1);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 5250);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.reverse(objectArray0, 100, 3969);
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 100;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)4154;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1677);
      shortArray0[5] = (short)2330;
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2330);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)17, (short)4154, (short)2, (short) (-1), (short) (-1677), (short)2330, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2330, (short)17, (short)4154, (short)2, (short) (-1), (short) (-1677), (short)2330, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 100;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (short) (-1);
      longArray0[6] = (long) (short)17;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short) (-1677), (-3));
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {2L, 0L, 100L, 0L, (-1L), (-1L), 17L}, longArray0);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertArrayEquals(new short[] {(short)17, (short)4154, (short)2, (short) (-1), (short) (-1677), (short)2330, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)17, (short)4154, (short)2, (short) (-1), (short) (-1677), (short)2330, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1151.21834855);
      doubleArray0[2] = 2032.6;
      doubleArray0[3] = 27.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1151.21834855), 2032.6, 27.0, Double.NaN, (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-944.3F);
      floatArray0[1] = 1084.8486F;
      floatArray0[2] = (-465.0F);
      floatArray0[3] = (-987.2885F);
      floatArray0[4] = (-341.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = Float.NaN;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-944.3F), 1084.8486F, (-465.0F), (-987.2885F), (-341.0F), 0.0F, Float.NaN, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-944.3F), 1084.8486F, (-465.0F), (-987.2885F), (-341.0F), 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-103);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-72), (byte) (-72), (byte) (-103), (byte)0, (byte) (-103)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 790;
      longArray0[1] = 369L;
      longArray0[2] = (long) (byte)16;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {790L, 369L, 16L}, longArray1);
      assertArrayEquals(new long[] {790L, 369L, 16L}, longArray0);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 575);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 790L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '$';
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 3968;
      doubleArray0[5] = (double) 3968;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (byte) (-72));
      assertFalse(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {790.0, 0.0, 36.0, 0.0, 3968.0, 3968.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(characterArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '!');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '!';
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) '7';
      doubleArray0[3] = 222.0;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) '7';
      doubleArray0[6] = (double) '7';
      doubleArray0[7] = (double) '7';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 55.0, 1136);
      assertEquals(8, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {33.0, 55.0, 55.0, 222.0, 0.0, 55.0, 55.0, 55.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 55.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 55.0;
      doubleArray1[3] = (Double) 55.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 55.0;
      doubleArray1[6] = (Double) 0.0;
      doubleArray1[7] = (Double) 55.0;
      doubleArray1[8] = (Double) 55.0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(doubleArray1, (Comparator<Double>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(13, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 13;
      boolean boolean0 = ArrayUtils.contains(intArray0, 13);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {13, 13}, intArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {13, 13}, intArray0);
      assertArrayEquals(new int[] {13, 13, 13, 13}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Double double0 = new Double((-1707.804918804929));
      assertEquals((-1707.804918804929), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-2145300867);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (-2145300867);
      ArrayUtils.shift(intArray0, (-2145300867), 2, 2);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2, (-2145300867), 2, 2, (-2145300867)}, intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[0] = '7';
      charArray0[3] = '7';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '7');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'7', '7', '\u0000', '7'}, charArray0);
      assertArrayEquals(new char[] {'7', '\u0000', '7'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'Q', 2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'7', '7', '\u0000', '7'}, charArray0);
      assertArrayEquals(new char[] {'7', '\u0000', '7'}, charArray1);
      assertNotNull(bitSet0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[2] = (long) 575;
      longArray0[3] = (long) 575;
      longArray0[4] = (long) 575;
      longArray0[5] = (long) 575;
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-63), (byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = '<';
      charArray0[2] = '4';
      charArray0[3] = 'M';
      charArray0[4] = 'k';
      charArray0[5] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '4', 18688);
      assertEquals(6, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'f', '<', '4', 'M', 'k', '\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'J';
      charArray0[2] = 'Q';
      charArray0[3] = '.';
      charArray0[4] = '.';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Q', 0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'Q', 'J', 'Q', '.', '.'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (-1066.74F);
      floatArray0[2] = (float) 'Q';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {46.0F, (-1066.74F), 81.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = 1654L;
      longArray0[2] = (long) (byte)9;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift((boolean[]) null, 70, 480, 16);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9}, byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9}, byteArray2);
      assertNotNull(byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      ArrayUtils.swap((float[]) null, (-282), 0, 480);
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 3240.8F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {3240.8F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 9L);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(329.4380733778);
      assertEquals(329.43808F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(Float.NaN);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(329.43808F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1337.08F;
      floatArray1[1] = (-2497.534F);
      floatArray1[2] = (float) floatArray0[1];
      floatArray1[3] = (float) 8;
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 0.0F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(5, floatArray2.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1337.08F, (-2497.534F), Float.NaN, 8.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1337.08F, (-2497.534F), Float.NaN, 8.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      
      Float float3 = new Float((-1971.6321F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1971.6321F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) floatArray0[2]);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(329.43808F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(1519.076);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(1519.076F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray3.length);
      assertNotNull(floatArray3);
      assertSame(floatArray0, floatArray3);
      assertSame(floatArray3, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Byte byte0 = Byte.valueOf((byte)59);
      assertEquals((byte)59, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-68));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)122);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)122, (byte)byte2);
      assertNotNull(byte2);
      
      try { 
        Byte.valueOf("{}", (int) (byte) (-68));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -68 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      MutableInt mutableInt0 = new MutableInt((-131));
      assertEquals((-131L), mutableInt0.longValue());
      assertEquals("-131", mutableInt0.toString());
      assertEquals((-131), (int)mutableInt0.getValue());
      assertEquals((byte)125, mutableInt0.byteValue());
      assertEquals((-131), (int)mutableInt0.toInteger());
      assertEquals((-131), mutableInt0.intValue());
      assertEquals((-131.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-131), mutableInt0.shortValue());
      assertEquals((-131.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.addAndGet((-131));
      assertEquals((byte) (-6), mutableInt0.byteValue());
      assertEquals("-262", mutableInt0.toString());
      assertEquals((short) (-262), mutableInt0.shortValue());
      assertEquals((-262L), mutableInt0.longValue());
      assertEquals((-262.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-262), mutableInt0.intValue());
      assertEquals((-262.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-262), (int)mutableInt0.toInteger());
      assertEquals((-262), (int)mutableInt0.getValue());
      assertEquals((-262), int0);
      
      int int1 = mutableInt0.addAndGet((-131));
      assertFalse(int1 == int0);
      assertEquals((short) (-393), mutableInt0.shortValue());
      assertEquals("-393", mutableInt0.toString());
      assertEquals((-393.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-393.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-393L), mutableInt0.longValue());
      assertEquals((-393), mutableInt0.intValue());
      assertEquals((-393), (int)mutableInt0.getValue());
      assertEquals((byte)119, mutableInt0.byteValue());
      assertEquals((-393), (int)mutableInt0.toInteger());
      assertEquals((-393), int1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, (-1677), 156, (-393));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((short[]) null);
      Byte byte0 = Byte.valueOf((byte)44);
      assertEquals((byte)44, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-104));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-104), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)13);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)13, (byte)byte2);
      assertNotNull(byte2);
      
      try { 
        Byte.valueOf("{}", (int) (byte) (-58));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -58 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '}';
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ArrayUtils.toString((Object) double0, "");
      assertEquals("3.0", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = new boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      ArrayUtils.swap(booleanArray2, (-922), (-2705), Integer.MAX_VALUE);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(6, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((short[]) null);
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)44;
      Byte byte1 = Byte.valueOf((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)104);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)104, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-104));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-104), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)13);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)13, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertEquals((byte)44, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)119);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte)119, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)126);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertEquals((byte)126, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = Byte.valueOf((byte)99);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte1));
      assertEquals((byte)99, (byte)byte8);
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte[] byteArray1 = ArrayUtils.insert((-922), byteArray0, (Byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Byte byte0 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals(104, mutableInt0.intValue());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104L, mutableInt0.longValue());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals("104", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd((-883));
      assertEquals((byte) (-11), mutableInt0.byteValue());
      assertEquals((-779), (int)mutableInt0.getValue());
      assertEquals((-779), (int)mutableInt0.toInteger());
      assertEquals((-779.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-779", mutableInt0.toString());
      assertEquals((-779L), mutableInt0.longValue());
      assertEquals((short) (-779), mutableInt0.shortValue());
      assertEquals((-779), mutableInt0.intValue());
      assertEquals((-779.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals(104, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals((byte) (-12), mutableInt0.byteValue());
      assertEquals((-780L), mutableInt0.longValue());
      assertEquals((-780), (int)mutableInt0.toInteger());
      assertEquals((-780.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-780), (int)mutableInt0.getValue());
      assertEquals((-780.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-780", mutableInt0.toString());
      assertEquals((short) (-780), mutableInt0.shortValue());
      assertEquals((-780), mutableInt0.intValue());
      assertEquals((-780), int1);
      
      int int2 = mutableInt0.incrementAndGet();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((byte) (-11), mutableInt0.byteValue());
      assertEquals((-779), (int)mutableInt0.getValue());
      assertEquals((-779), (int)mutableInt0.toInteger());
      assertEquals((-779.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-779", mutableInt0.toString());
      assertEquals((-779L), mutableInt0.longValue());
      assertEquals((short) (-779), mutableInt0.shortValue());
      assertEquals((-779), mutableInt0.intValue());
      assertEquals((-779.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-779), int2);
      
      int int3 = mutableInt0.addAndGet((-2146407533));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-2146408312L), mutableInt0.longValue());
      assertEquals("-2146408312", mutableInt0.toString());
      assertEquals((short)26760, mutableInt0.shortValue());
      assertEquals((-2146408312), mutableInt0.intValue());
      assertEquals((-2.14640832E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2.146408312E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-120), mutableInt0.byteValue());
      assertEquals((-2146408312), (int)mutableInt0.toInteger());
      assertEquals((-2146408312), (int)mutableInt0.getValue());
      assertEquals((-2146408312), int3);
      
      int int4 = mutableInt0.addAndGet((-131));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((byte)5, mutableInt0.byteValue());
      assertEquals((-2146408443L), mutableInt0.longValue());
      assertEquals((short)26629, mutableInt0.shortValue());
      assertEquals((-2.14640845E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2146408443", mutableInt0.toString());
      assertEquals((-2146408443), mutableInt0.intValue());
      assertEquals((-2146408443), (int)mutableInt0.getValue());
      assertEquals((-2.146408443E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2146408443), (int)mutableInt0.toInteger());
      assertEquals((-2146408443), int4);
      
      String string0 = ArrayUtils.toString((Object) "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int5 = mutableInt0.getAndIncrement();
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertEquals((short)26630, mutableInt0.shortValue());
      assertEquals((-2146408442L), mutableInt0.longValue());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals((-2.14640845E9F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2146408442), mutableInt0.intValue());
      assertEquals("-2146408442", mutableInt0.toString());
      assertEquals((-2146408442), (int)mutableInt0.toInteger());
      assertEquals((-2.146408442E9), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2146408442), (int)mutableInt0.getValue());
      assertEquals((-2146408443), int5);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2146408312);
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)104;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-883));
      assertEquals(3, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-2146408312), 0, 104}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-63), (byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-63);
      shortArray0[1] = (short)53;
      shortArray0[2] = (short) (byte) (-63);
      shortArray0[3] = (short) (byte) (-63);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (-1725);
      shortArray0[6] = (short) (byte) (-63);
      shortArray0[7] = (short) (byte) (-63);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, intArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new short[] {(short) (-63), (short) (-63), (short) (-63), (short) (-1), (short) (-1725), (short) (-63), (short) (-63)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-63), (short)53, (short) (-63), (short) (-63), (short) (-1), (short) (-1725), (short) (-63), (short) (-63)}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1426.446693), (-1));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '*';
      charArray0[2] = '?';
      charArray0[3] = 'X';
      charArray0[4] = 'I';
      charArray0[5] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertEquals(6, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = ArrayUtils.get(booleanArray0, 457);
      assertEquals(1, booleanArray0.length);
      assertNull(boolean2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-350L);
      longArray0[1] = (long) 'I';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-350L), 73L, (-350L), 73L}, longArray1);
      assertArrayEquals(new long[] {(-350L), 73L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = false;
      booleanArray1[1] = (boolean) boolean1;
      booleanArray1[2] = (boolean) boolean1;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) 'X';
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {63, 88, (-1), (-1)}, intArray0);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get(byteArray0, 46, byte0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((byte)1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3179.076));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((-3179.076), (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0, (-1.0), (-3179.076)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)1;
      ArrayUtils.shift(doubleArray1, (-1677), 46, (-2535));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-3179.076), 1.0, 1.0, (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get(byteArray0, 46, byte0);
      assertEquals(0, byteArray0.length);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((byte)1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-3179.076));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-3179.076), (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0, (-1.0), (-3179.076)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1698L);
      assertNotNull(doubleStream0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)1;
      ArrayUtils.shuffle(byteArray1, (Random) mockRandom0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)13}, byteArray1);
      
      ArrayUtils.shift(doubleArray1, (-1677), 46, (-2535));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-3179.076), 1.0, 1.0, (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-31);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 8, (-891), 8);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short) (-2615);
      shortArray0[2] = (short) (-1505);
      shortArray0[3] = (short) (-2653);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)50, (short) (-2615), (short) (-1505), (short) (-2653)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "H8}";
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '';
      charArray0[2] = '?';
      charArray0[3] = ':';
      charArray0[4] = '*';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'u';
      charArray0[8] = '7';
      ArrayUtils.shuffle(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'', '?', ':', '*', 'M', 'M', 'u', '7', '5'}, charArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'5', '7', 'u', 'M', 'M', '*', ':', '?', ''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '0';
      ArrayUtils.shuffle(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3165.477320078359;
      doubleArray0[2] = (-1.0);
      long[] longArray0 = new long[7];
      longArray0[0] = 1676L;
      longArray0[1] = 3513L;
      longArray0[2] = (-657L);
      longArray0[3] = 0L;
      longArray0[4] = 539L;
      longArray0[5] = 1L;
      longArray0[6] = (-2081L);
      long[] longArray1 = ArrayUtils.add(longArray0, 539L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {1676L, 3513L, (-657L), 0L, 539L, 1L, (-2081L)}, longArray0);
      assertArrayEquals(new long[] {1676L, 3513L, (-657L), 0L, 539L, 1L, (-2081L), 539L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1676L;
      floatArray0[1] = (float) (-657L);
      floatArray0[2] = (float) 1L;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1676L;
      floatArray1[1] = (float) 1676L;
      floatArray1[2] = (float) 1676L;
      floatArray1[3] = (float) 0L;
      floatArray1[4] = (float) 0L;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(5, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1676.0F, 1676.0F, 1676.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1676.0F, (-657.0F), 1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 61L;
      longArray0[1] = (long) (byte) (-103);
      longArray0[2] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.add(longArray0, 61L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {61L, (-103L), 0L}, longArray0);
      assertArrayEquals(new long[] {61L, (-103L), 0L, 61L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 61L;
      floatArray0[1] = 2701.4F;
      floatArray0[2] = (float) 61L;
      floatArray0[3] = 2701.4F;
      floatArray0[4] = (float) 0L;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 61L;
      floatArray1[1] = 669.8F;
      floatArray1[2] = 2701.4F;
      floatArray1[3] = (float) 0L;
      floatArray1[4] = (float) 0L;
      floatArray1[5] = (float) 0L;
      floatArray1[6] = 1941.8F;
      floatArray1[7] = (float) 61L;
      floatArray1[8] = 2701.4F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(9, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {61.0F, 669.8F, 2701.4F, 0.0F, 0.0F, 0.0F, 1941.8F, 61.0F, 2701.4F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {61.0F, 2701.4F, 61.0F, 2701.4F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-103);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-103), (byte) (-103), (byte) (-103), (byte)0, (byte) (-103), (byte) (-103)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1033.0349812932773);
      doubleArray0[2] = (-1538.0);
      doubleArray0[3] = (-270.158913095);
      doubleArray0[4] = (-1.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2548.53, 100.0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {100.0, (-1033.0349812932773), (-1538.0), (-270.158913095), (-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.shift(intArray1, (-1412), (-2145300867), 2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      char[] charArray0 = new char[3];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2828.441;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2828.441, 122, 2828.441);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2828.441}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, (-534), 2958, 57);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-534);
      longArray0[1] = (long) 57;
      longArray0[2] = (-1481L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-534L), 57L, (-1481L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      int int0 = (-4378);
      int int1 = (-562);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-354), (-562), (-1.766711509120914));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      int[] intArray0 = new int[1];
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) 0;
      objectArray0[6] = (Object) 0;
      objectArray0[5] = (Object) 0;
      objectArray0[6] = (Object) 0;
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = null;
      int int0 = 271;
      char[] charArray0 = null;
      ArrayUtils.shift((char[]) null, 360);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "k9[dk";
      String string0 = ArrayUtils.get(stringArray0, 91, "k9[dk");
      assertEquals(1, stringArray0.length);
      assertEquals("k9[dk", string0);
      assertNotNull(string0);
      
      String string1 = ArrayUtils.toString((Object) "k9[dk", "k9[dk");
      assertTrue(string1.equals((Object)string0));
      assertEquals("k9[dk", string1);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 91;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {91.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'r';
      charArray0[2] = 'C';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '\\';
      floatArray0[1] = 2496.61F;
      floatArray0[2] = (float) 'C';
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-987.2885F);
      floatArray0[5] = (float) 'r';
      floatArray0[6] = (float) 'r';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1902.6F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {92.0F, 2496.61F, 67.0F, 1.0F, (-987.2885F), 114.0F, 114.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {92.0F, 2496.61F, 67.0F, 1.0F, (-987.2885F), 114.0F, 114.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(4, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {4, 4, 4}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2690));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2690), (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      int int1 = ArrayUtils.indexOf(longArray0, 0L, 2);
      assertFalse(int1 == int0);
      assertEquals(3, longArray0.length);
      assertEquals(2, int1);
      assertArrayEquals(new long[] {4L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-607), 1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1);
      assertEquals(0, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'f', 9);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((-1029L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints(908, (-2831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (-2418L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals(7, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, (-2418L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'X', ':'}, charArray0);
      assertArrayEquals(new char[] {'X', ':'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 90, 90, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 90;
      intArray0[1] = (-282);
      intArray0[2] = (-282);
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (long) (-282);
      longArray0[2] = (long) (-282);
      longArray0[3] = 0L;
      longArray0[4] = (long) (-282);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(5, longArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new long[] {1L, (-282L), (-282L), 0L, (-282L)}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2615), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2615, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, int1);
      
      int int2 = mutableInt0.addAndGet(0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, int2);
      
      int int3 = mutableInt0.addAndGet(0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, int3);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "");
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      mutableInt0.setValue((Number) 0L);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      
      longArray0[2] = (long) 0;
      int int4 = mutableInt0.decrementAndGet();
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), int4);
      
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1654L;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {1654L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1654L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, int1);
      
      int int2 = mutableInt0.addAndGet(0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, int2);
      
      int int3 = mutableInt0.addAndGet(0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, int3);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "");
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      mutableInt0.setValue((Number) 0L);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      
      longArray0[2] = (long) 0;
      int int4 = mutableInt0.decrementAndGet();
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), int4);
      
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1654L;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(4, longArray1.length);
      assertEquals(9, longArray2.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1654L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {1654L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2886.0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (-1.766711509120914);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (-1.766711509120914);
      doubleArray0[8] = (-612.872294218);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2925.733562343891), (-354), 1910.6577531862124);
      assertEquals(9, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {1.0, 2886.0, 0.0, (-1.766711509120914), 1.5, 0.0, 0.0, (-1.766711509120914), (-612.872294218)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Short short0 = new Short((short)955);
      assertEquals((short)955, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 54, objectArray0[0]);
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object3);
      assertSame(object0, object3);
      assertSame(object3, object0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-4378);
      doubleArray0[4] = (-1.766711509120914);
      doubleArray0[5] = (double) 54;
      doubleArray0[6] = (double) 54;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 54, (-354), (double) (-354));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {54.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 54.0, 54.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Object object4 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {54.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 54.0, 54.0}, doubleArray0, 0.01);
      assertNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertEquals(7, doubleArray0.length);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {54.0, 0.0, 0.0, (-4378.0), (-1.766711509120914), 54.0, 54.0}, doubleArray0, 0.01);
      assertNotNull(bitSet1);
      assertSame(bitSet1, bitSet0);
      assertSame(bitSet0, bitSet1);
      
      Long long0 = new Long((-354));
      assertEquals((-354L), (long)long0);
      assertNotNull(long0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(objectArray0, (Object) long0);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertEquals(5, objectArray0.length);
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-178);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-4378), (-4378), (double) 0);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-178.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      MutableInt mutableInt0 = new MutableInt(49);
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals(49, (int)mutableInt0.getValue());
      assertEquals(49, mutableInt0.intValue());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals("49", mutableInt0.toString());
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)49, mutableInt0.shortValue());
      assertEquals(49L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 49.0;
      doubleArray0[1] = 1840.910556294466;
      doubleArray0[2] = (-2211.3671876268904);
      doubleArray0[3] = 0.1;
      doubleArray0[4] = 4400.005253805594;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {49.0, 1840.910556294466, (-2211.3671876268904), 0.1, 4400.005253805594}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {49.0, 1840.910556294466, (-2211.3671876268904), 0.1, 4400.005253805594, 0.1}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (-441.332188634), 1768.74);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {49.0, 1840.910556294466, (-2211.3671876268904), 0.1, 4400.005253805594}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {49.0, 1840.910556294466, (-2211.3671876268904), 0.1, 4400.005253805594, 0.1}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      longArray0[2] = (long) (-2367);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-607), (-2367));
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2367L), (-607L), (-2367L)}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '4';
      int int1 = ArrayUtils.indexOf(charArray0, 'X', (-2367));
      assertTrue(int1 == int0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {':', '4', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      Short short0 = new Short((short)3214);
      assertEquals((short)3214, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)99);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)99, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)3214);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)3214, (short)short2);
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = shortArray0[1];
      shortArray0[0] = short0;
      shortArray0[4] = short2;
      shortArray0[5] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-3760));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)3214, (short)3214, (short)3214, (short) (-3760), (short)3214, (short)99}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-105);
      doubleArray0[2] = (-1.0);
      doubleArray0[4] = (-265.619);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, 98, 98, (int) (byte)0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((byte) (-105));
      assertEquals((short) (-105), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-105));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-105), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte)0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)8192);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)8192, (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)8192);
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short)8192, (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1612));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertEquals((short) (-1612), (short)short5);
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) (-5483));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertEquals((short) (-5483), (short)short6);
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short)1248);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short2));
      assertEquals((short)1248, (short)short7);
      assertNotNull(short7);
      
      shortArray0[7] = short7;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1612));
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-105), (short) (-105), (short)0, (short)8192, (short)8192, (short) (-1612), (short) (-5483), (short)1248}, shortArray1);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (short)8192);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-105.0), 0.0, (-1.0), 0.0, (-265.619), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(3, characterArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("`HdCs<mHf,p ");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) null, "Comparator should not be null.");
      assertEquals("Comparator should not be null.", string0);
      assertNotNull(string0);
      
      byte byte0 = (byte) (-97);
      Byte byte1 = new Byte((byte) (-97));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-97), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-97));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-97), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)2);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-98));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-98), (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte5 = new Byte((byte)7);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte)7, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[1] = byte4;
      byteArray0[2] = byte2;
      Byte byte6 = new Byte((byte) (-98));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals((byte) (-98), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[3] = byte6;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-98), (byte) (-97), (byte) (-98), (byte) (-97), (byte)2}, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-97);
      shortArray0[1] = (short) (-26);
      shortArray0[2] = (short)1;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-97), (short) (-26), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-97), (short) (-26), (short)1, (short) (-97), (short) (-26), (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte) (-98));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte) (-97), (byte) (-98), (byte) (-97), (byte)2}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "`HdCs<mHf,p ");
      assertEquals(6, stringArray0.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      Object[] objectArray0 = new Object[18];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 90);
      assertEquals(18, objectArray0.length);
      assertNull(object2);
      
      objectArray0[2] = null;
      ArrayUtils.reverse(objectArray0, 90, 90);
      assertEquals(18, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = (double) 90;
      doubleArray0[2] = (double) 90;
      doubleArray0[3] = (double) 90;
      doubleArray0[4] = (double) 90;
      doubleArray0[5] = (double) 90;
      doubleArray0[6] = (double) 90;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('0');
      assertTrue(character1.equals((Object)character0));
      assertEquals('0', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('{');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('{', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('t');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('t', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('0');
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertEquals('0', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(5, characterArray0.length);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("\"<");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      String string0 = ArrayUtils.toString((Object) boolean1, "-EHw/Y5M9p~");
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals("false", string0);
      assertNotNull(string0);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-97);
      Byte byte1 = new Byte((byte) (-97));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-97), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-55));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-55), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-97));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte) (-97), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte) (-97), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)48);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-55), (byte) (-97), (byte) (-97)}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2182.7159099205);
      doubleArray0[2] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-2182.7159099205), (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-63), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[9];
      Double double0 = new Double((-2182.7159099205));
      assertEquals((-2182.7159099205), (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)27232;
      shortArray1[1] = (short)3151;
      shortArray1[2] = (short)27232;
      shortArray1[3] = (short)536;
      shortArray1[4] = (short)536;
      shortArray1[5] = (short)536;
      shortArray1[6] = (short)536;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(7, shortArray2.length);
      assertEquals(9, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)27232, (short)3151, (short)27232, (short)536, (short)536, (short)536, (short)536}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)27232, (short)3151, (short)27232, (short)536, (short)536, (short)536, (short)536}, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      
      Short[] shortArray3 = ArrayUtils.toObject(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(9, shortArray3.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      
      short[] shortArray4 = new short[3];
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray2));
      
      shortArray4[0] = (short)536;
      shortArray4[1] = (short)27232;
      shortArray4[2] = (short)3151;
      short[] shortArray5 = ArrayUtils.nullToEmpty(shortArray4);
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray5.equals((Object)shortArray0));
      assertFalse(shortArray5.equals((Object)shortArray2));
      assertFalse(shortArray5.equals((Object)shortArray1));
      assertEquals(3, shortArray4.length);
      assertEquals(3, shortArray5.length);
      assertArrayEquals(new short[] {(short)536, (short)27232, (short)3151}, shortArray4);
      assertArrayEquals(new short[] {(short)536, (short)27232, (short)3151}, shortArray5);
      assertNotNull(shortArray5);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray2);
      assertSame(shortArray4, shortArray5);
      assertSame(shortArray5, shortArray4);
      assertNotSame(shortArray5, shortArray0);
      assertNotSame(shortArray5, shortArray2);
      assertNotSame(shortArray5, shortArray1);
      
      short[] shortArray6 = ArrayUtils.toPrimitive(shortArray3, (short)0);
      assertFalse(shortArray0.equals((Object)shortArray4));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray5));
      assertFalse(shortArray6.equals((Object)shortArray4));
      assertFalse(shortArray6.equals((Object)shortArray0));
      assertFalse(shortArray6.equals((Object)shortArray5));
      assertFalse(shortArray6.equals((Object)shortArray1));
      assertFalse(shortArray6.equals((Object)shortArray2));
      assertEquals(9, shortArray3.length);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray6.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray6);
      assertNotNull(shortArray6);
      assertNotSame(shortArray0, shortArray4);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray6);
      assertNotSame(shortArray0, shortArray5);
      assertNotSame(shortArray6, shortArray4);
      assertNotSame(shortArray6, shortArray0);
      assertNotSame(shortArray6, shortArray5);
      assertNotSame(shortArray6, shortArray1);
      assertNotSame(shortArray6, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Double double0 = new Double((-1707.804918804929));
      assertEquals((-1707.804918804929), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '.';
      charArray0[2] = 'Q';
      charArray0[3] = '.';
      charArray0[4] = 'Q';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Q';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) '.';
      intArray0[3] = (int) 'Q';
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'Q';
      intArray0[6] = (int) '.';
      boolean boolean0 = ArrayUtils.contains(intArray0, 81);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {81, 81, 46, 81, 81, 81, 46}, intArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2750.7645847171934), (-400), 2752.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1.766711509120914), 1.0, (-2750.7645847171934)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1287;
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1287;
      shortArray1[1] = (short)85;
      shortArray1[2] = (short)1287;
      shortArray1[3] = (short)1287;
      shortArray1[4] = (short)1287;
      shortArray1[5] = (short)1287;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(1, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)1287}, shortArray0);
      assertArrayEquals(new short[] {(short)1287, (short)85, (short)1287, (short)1287, (short)1287, (short)1287}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 5250);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.reverse(objectArray0, 100, 3969);
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) 100;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 90;
      doubleArray0[4] = (double) 100;
      doubleArray0[5] = (double) 3969;
      doubleArray0[6] = (double) 5250;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {100.0, 100.0, 0.0, 90.0, 100.0, 3969.0, 5250.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0, 100.0, 0.0, 90.0, 100.0, 3969.0, 5250.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf('v');
      assertEquals('v', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('5');
      assertFalse(character1.equals((Object)character0));
      assertEquals('5', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('@');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('@', (char)character2);
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('@');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('@', (char)character3);
      assertNotNull(character3);
      
      Character character4 = new Character(']');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertEquals(']', (char)character4);
      assertNotNull(character4);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character4;
      characterArray0[1] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(2, characterArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short) (-2582);
      shortArray0[2] = (short)916;
      shortArray0[3] = (short)433;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)98, (short) (-2582), (short)916, (short)433}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-2147483648L));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Float float0 = new Float(1269.2F);
      assertEquals(1269.2F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 1, (-1725), 1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-1725));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1472L);
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (-1725), (-1725), 1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[1] = '!';
      charArray0[2] = '=';
      charArray0[3] = 'G';
      charArray0[4] = '+';
      charArray0[5] = 'c';
      charArray0[6] = '\\';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(482, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 482, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      int[] intArray0 = new int[2];
      intArray0[0] = (-178);
      intArray0[1] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1727);
      assertEquals(2, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {(-178), 0}, intArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(booleanArray0, (-2613), 2065);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((String[]) null, 2065);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2065, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      Object[] objectArray0 = null;
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = (-1);
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = 0L;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      ArrayUtils.swap(longArray0, (-1863), 10, 10);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(6, objectArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '}';
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ArrayUtils.toString((Object) double0, "");
      assertEquals("3.0", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = new boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray2, (-922), 5);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(5, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray3));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-922);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1535.125908));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-922.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertNotNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte)9);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {9L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 1688;
      floatArray0[8] = (float) (byte)0;
      floatArray0[3] = (float) 1688;
      floatArray0[4] = (float) (byte) (-10);
      floatArray0[5] = (float) (-2222);
      floatArray0[6] = (float) (-2222);
      floatArray0[7] = (float) 1688;
      floatArray0[8] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1688.0F, 0.0F, 1688.0F, (-10.0F), (-2222.0F), (-2222.0F), 1688.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1663.558528744894);
      doubleArray0[2] = 4312.2202812;
      doubleArray0[3] = 2887.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 684.914181863;
      doubleArray0[6] = (-7064.7);
      doubleArray0[7] = (-1451.6300950373);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 4312.2202812);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, (-1663.558528744894), 4312.2202812, 2887.0, (-1.0), 684.914181863, (-7064.7), (-1451.6300950373)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1663.558528744894), 2887.0, (-1.0), 684.914181863, (-7064.7), (-1451.6300950373)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-47);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)116);
      assertEquals(2, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-47)}, byteArray0);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      long[] longArray1 = ArrayUtils.addAll((long[]) null, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-63L), 0L, (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-63L), 0L, (-63L), (-63L), 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (-63L));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-557.0));
      assertNull(doubleArray0);
      
      ArrayUtils.shift(longArray0, (-1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-63L), (-63L), 0L, 0L, 0L, 0L, (-63L)}, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-0.7556037622919062);
      doubleArray0[2] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-0.7556037622919062)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (int) '.';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-910), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-161);
      shortArray0[1] = (short) (-19);
      shortArray0[2] = (short)458;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-161), (short) (-19), (short)458}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-161), (short) (-19), (short)458}, shortArray0);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      int[] intArray0 = new int[2];
      intArray0[0] = (-178);
      intArray0[1] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1727);
      assertEquals(2, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {(-178), 0}, intArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(booleanArray0, (-2613), 2065);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2613);
      longArray0[1] = (long) 2065;
      longArray0[2] = 0L;
      longArray0[3] = (long) 2065;
      longArray0[4] = (long) (-178);
      longArray0[5] = (long) (-178);
      longArray0[6] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-2613));
      assertEquals(7, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-2613L), 2065L, 0L, 2065L, (-178L), (-178L), 0L}, longArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2613);
      intArray1[1] = 0;
      intArray1[2] = (-2613);
      intArray1[3] = 1727;
      intArray1[4] = 2065;
      intArray1[5] = 0;
      intArray1[6] = (-178);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1727, intArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1727, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      int[] intArray0 = ArrayUtils.insert(726, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = 8;
      intArray0[6] = 8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Object[] objectArray0 = new Object[0];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1050), (Object) short0);
      assertEquals(0, objectArray0.length);
      assertEquals((short) (-1), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 2434);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[2] = object0;
      objectArray1[1] = object0;
      objectArray1[2] = object0;
      objectArray1[3] = object2;
      Object object3 = ArrayUtils.get(objectArray1, (-1050));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(4, objectArray1.length);
      assertNull(object3);
      assertNotSame(objectArray1, objectArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertFalse(boolean0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1472L);
      longArray0[2] = (-381L);
      longArray0[3] = (-2253L);
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (-1472L));
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray2.length);
      assertArrayEquals(new long[] {0L, (-1472L), (-381L), (-2253L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1472L), 0L, (-1472L), (-381L), (-2253L), 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1, "f(04u8[z`a$+d");
      assertEquals(0, longArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2253L);
      floatArray0[1] = (float) (-1472L);
      floatArray0[2] = (float) (-2253L);
      floatArray0[3] = (float) (-1472L);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) (-2253L);
      floatArray0[6] = (float) (byte)3;
      floatArray0[7] = (float) (-1472L);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1472.0F));
      assertEquals(8, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals("{1, 3, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertArrayEquals(new float[] {(-2253.0F), (-1472.0F), (-2253.0F), (-1472.0F), Float.NaN, (-2253.0F), 3.0F, (-1472.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 61L);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(boolean1 == boolean0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {0L, (-1472L), (-381L), (-2253L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, int1);
      
      int int2 = mutableInt0.addAndGet(0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, int2);
      
      int int3 = mutableInt0.addAndGet(0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, int3);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "");
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = ')';
      charArray0[2] = ']';
      charArray0[3] = ')';
      charArray0[4] = '4';
      charArray0[5] = 'L';
      charArray0[6] = 'g';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(14, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'%', ')', ']', ')', '4', 'L', 'g'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ')';
      objectArray0[1] = (Object) ')';
      objectArray0[2] = (Object) float0;
      objectArray0[3] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "len must be > 0");
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-3869L);
      longArray0[1] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-3869L), 0L}, longArray0);
      assertNotNull(longArray1);
      
      String[] stringArray2 = ArrayUtils.toStringArray((Object[]) stringArray0, "ykUm");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-693);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2}", bitSet0.toString());
      assertArrayEquals(new float[] {(-693.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-23));
      assertEquals(1, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-902.60648498511);
      doubleArray0[0] = (double) (short) (-23);
      doubleArray0[4] = (double) (short) (-35);
      doubleArray0[5] = (double) (short) (-35);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (double) (short) (-23);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-23.0), (int) (short)3);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-23.0), 0.0, 0.0, 0.0, (-35.0), (-35.0), 0.1, (-23.0)}, doubleArray0, 0.01);
      
      ArrayUtils.swap(shortArray0, 0, 0, (int) (short) (-23));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)3}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.shuffle(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-2147483648L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'c';
      charArray0[2] = 'k';
      charArray0[3] = ' ';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'k', 'c', 'k', ' '}, charArray0);
      assertArrayEquals(new char[] {'k', 'c', 'k', ' ', 'k', 'c', 'k', ' '}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) 'k');
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1061);
      shortArray0[2] = (short) (-1061);
      ArrayUtils.swap(shortArray0, 2, (int) (short) (-1061), (int) (short) (-1061));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1061), (short)0, (short) (-1061)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1269.2F;
      floatArray0[1] = (float) '0';
      floatArray0[2] = (float) '0';
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) '0';
      floatArray0[6] = (float) '0';
      floatArray0[7] = (float) '0';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(8, floatArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new float[] {1269.2F, 48.0F, 48.0F, (-1.0F), 1.0F, 48.0F, 48.0F, 48.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)953;
      shortArray0[1] = (short)176;
      shortArray0[2] = (short)160;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1982;
      shortArray0[5] = (short)2069;
      MockRandom mockRandom0 = new MockRandom(501L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)953, (short)160, (short)0, (short)1982, (short)2069, (short)176}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '.';
      charArray0[2] = 'Q';
      charArray0[3] = '.';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'J', 0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'Q', '.', 'Q', '.', 'Q', 'Q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      Integer integer0 = new Integer((-351));
      assertEquals((-351), (int)integer0);
      assertNotNull(integer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = '\"';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'J', (-351));
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', '\"'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = '0';
      charArray0[2] = 'o';
      charArray0[3] = 'j';
      charArray0[4] = '}';
      charArray0[5] = '9';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'X', 17);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {' ', '0', 'o', 'j', '}', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Double double0 = new Double((-1707.804918804929));
      assertEquals((-1707.804918804929), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)13);
      assertNotNull(doubleStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)13;
      MockRandom mockRandom1 = new MockRandom((byte)13);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)13}, byteArray0);
      assertNotSame(mockRandom1, mockRandom0);
      
      ArrayUtils.shift(doubleArray1, 160, (-657), (int) (byte)13);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Double double0 = new Double((-1707.804918804929));
      assertEquals((-1707.804918804929), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (byte)13);
      assertNotNull(doubleStream0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[7] = (byte)13;
      MockRandom mockRandom1 = new MockRandom((byte)13);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)13, (byte)13, (byte)13, (byte)0, (byte)13, (byte)13}, byteArray0);
      assertNotSame(mockRandom1, mockRandom0);
      
      ArrayUtils.shift(doubleArray1, 160, (int) '0', (int) (byte)13);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, int1);
      
      int int2 = mutableInt0.addAndGet(0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, int2);
      
      int int3 = mutableInt0.addAndGet(0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, int3);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "");
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[4];
      intArray0[0] = 63;
      int int4 = mutableInt0.getAndIncrement();
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(0, int4);
      
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1158));
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {63, 1, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[4] = (short)57;
      Float float0 = new Float((-622.208));
      assertEquals((-622.208F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      Float float1 = new Float((double) (short)57);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(57.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-622.208F), (-622.208F), 57.0F, (-622.208F), (-622.208F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)44;
      ArrayUtils.swap(byteArray0, 4, 4, (int) (byte)0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)0, (byte)44, (byte)44, (byte)44}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-1), (int) (byte)44, (int) (byte)44);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte) (-114), (byte) (-114), (byte)0, (byte)57, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-114);
      shortArray0[2] = (short) (byte)57;
      ArrayUtils.swap(byteArray0, (int) (byte)0, (-446));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte) (-114), (byte) (-114), (byte)0, (byte)57, (byte)0, (byte)0}, byteArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(928.55F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(928.55F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = Float.valueOf((float) (short) (-114));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-114.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 928.55F, (-114.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      Double double0 = new Double(3147.605);
      assertEquals(3147.605, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-6), (byte) (-6), (byte) (-109)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)108);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-6), (byte) (-6), (byte) (-109)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-6), (byte) (-6), (byte) (-109)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-597), (float) (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -597, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(9, (double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte)100;
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (-1L);
      longArray0[5] = (long) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 69);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1L), 100L, (-1L), (-1L), (-1L), (-1L)}, longArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(2, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 20.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {20.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.toArray(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      boolean[] booleanArray2 = ArrayUtils.insert(3264, booleanArray1, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3360.965894377717);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 575;
      doubleArray0[3] = (double) 575;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 575;
      doubleArray0[6] = (double) 575;
      doubleArray0[7] = (double) 1L;
      ArrayUtils.shift(doubleArray0, 575, 575, (-1259));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3360.965894377717), 1.0, 575.0, 575.0, 1.0, 575.0, 575.0, 1.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)9;
      floatArray0[1] = 2701.4F;
      floatArray0[2] = (float) 1L;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {9.0F, 2701.4F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      Float float0 = new Float(914.1482F);
      assertEquals(914.1482F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(914.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(914.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(914L, mutableInt0.longValue());
      assertEquals(914, (int)mutableInt0.toInteger());
      assertEquals(914, (int)mutableInt0.getValue());
      assertEquals("914", mutableInt0.toString());
      assertEquals((byte) (-110), mutableInt0.byteValue());
      assertEquals((short)914, mutableInt0.shortValue());
      assertEquals(914, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(914.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(914.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(914L, mutableInt0.longValue());
      assertEquals(914, (int)mutableInt0.toInteger());
      assertEquals(914, (int)mutableInt0.getValue());
      assertEquals("914", mutableInt0.toString());
      assertEquals((byte) (-110), mutableInt0.byteValue());
      assertEquals((short)914, mutableInt0.shortValue());
      assertEquals(914, mutableInt0.intValue());
      assertEquals(914L, mutableInt1.longValue());
      assertEquals(914.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("914", mutableInt1.toString());
      assertEquals(914, (int)mutableInt1.toInteger());
      assertEquals(914, (int)mutableInt1.getValue());
      assertEquals(914.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-110), mutableInt1.byteValue());
      assertEquals((short)914, mutableInt1.shortValue());
      assertEquals(914, mutableInt1.intValue());
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = '~';
      charArray0[2] = 'k';
      charArray0[3] = 'v';
      charArray0[4] = '6';
      charArray0[5] = '-';
      charArray0[6] = ' ';
      charArray0[7] = 'u';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertArrayEquals(new char[] {'Q', '~', 'k', 'v', '6', '-', ' ', 'u'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-2581L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray0 = new Long[2];
      long long0 = 513L;
      Long long1 = new Long(513L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(513L, (long)long1);
      assertNotNull(long1);
      
      longArray0[0] = long1;
      try { 
        Long.decode("91>`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"91>`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '{';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'c', '{'}, charArray0);
      assertArrayEquals(new char[] {'c', '{', 'c', '{'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-6205);
      shortArray0[1] = (short) (-6205);
      shortArray0[2] = (short) (-1996);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)53;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)3;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte)3, (byte)48, (byte)48, (byte)48, (byte)48, (byte)48, (byte)3}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'j';
      charArray0[2] = 'D';
      charArray0[3] = 'u';
      charArray0[4] = '^';
      charArray0[5] = 'V';
      charArray0[6] = ']';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertArrayEquals(new char[] {'G', 'j', 'D', 'u', '^', 'V', ']'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)3);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[1] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      longArray0[4] = (long) (byte) (-63);
      longArray0[5] = (long) (byte) (-63);
      longArray0[6] = (long) (byte) (-63);
      longArray0[7] = (long) (byte) (-63);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L)}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-63L);
      doubleArray0[1] = (double) (-63L);
      doubleArray0[2] = (double) (-63L);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-693), (int) (byte) (-63));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-63L));
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-63));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(bitSet0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1305L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2479L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)111;
      longArray0[4] = (long) (byte)111;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 111L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 111L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[3] = 'D';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'D', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) '\u0000');
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)42, (byte)111, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (byte)42;
      doubleArray0[3] = (double) (-2479L);
      doubleArray0[4] = (double) (byte)42;
      doubleArray0[5] = (double) '\u0000';
      doubleArray0[6] = (double) 'D';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 42.0, (-2479.0), 42.0, 0.0, 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)0, 0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'O';
      charArray0[2] = 'B';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'B';
      Object[] objectArray0 = new Object[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      char[] charArray0 = new char[3];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)42;
      longArray0[1] = (long) (byte)111;
      longArray0[2] = (long) '0';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {42L, 111L, 48L}, longArray0);
      assertArrayEquals(new long[] {42L, 111L, 48L}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)42);
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)42;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)111, (byte)42, (byte)111, (byte)111, (byte)42}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)111;
      doubleArray0[1] = (double) (byte)42;
      doubleArray0[2] = (double) (byte)111;
      doubleArray0[3] = (double) 48L;
      doubleArray0[4] = (double) 'D';
      doubleArray0[5] = (double) 'D';
      doubleArray0[6] = (double) (byte)111;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {111.0, 42.0, 111.0, 48.0, 68.0, 68.0, 111.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 0.0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 575);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'%', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'%', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'I');
      assertNull(charArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)69;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1277, (int) (short)69);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)69}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-5803L);
      longArray0[1] = (-2477L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-5803L), (-2477L)}, longArray0);
      assertArrayEquals(new long[] {(-5803L), (-2477L)}, longArray1);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\"');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertArrayEquals(new char[] {'='}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2165.34;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2165.34}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 22;
      longArray0[1] = (long) 22;
      ArrayUtils.swap(longArray0, 3, 0, 3);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {22L, 22L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[1] = (long) (byte) (-63);
      ArrayUtils.swap(longArray0, Integer.MAX_VALUE, 22, (int) (byte) (-63));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-63L), (-63L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-63L);
      objectArray0[1] = (Object) (-63L);
      objectArray0[2] = (Object) (-63L);
      objectArray0[3] = (Object) (-63L);
      objectArray0[4] = (Object) (-63L);
      objectArray0[5] = (Object) (-63L);
      objectArray0[6] = (Object) (-63L);
      objectArray0[7] = (Object) (-63L);
      ArrayUtils.shuffle(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.swap((long[]) null, (int) (short)0, 0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'A';
      charArray0[4] = '=';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'B';
      ArrayUtils.swap(longArray0, 0, (-1117), (-2813));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {66L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)0, 0, 0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'O';
      charArray0[2] = 'B';
      charArray0[3] = 'A';
      charArray0[4] = '=';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'B';
      ArrayUtils.swap(longArray0, 0, (-1117), (-2813));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {66L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3869L);
      longArray0[1] = (-2418L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-3869L), (-2418L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'X', ':'}, charArray0);
      assertArrayEquals(new char[] {'X', ':'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[0] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)1;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)33, (byte)36, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)33, (byte)36, (byte)1, (byte)1}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2326.63F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-944.3F);
      floatArray0[4] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = (double) (short) (-2822);
      int int0 = ArrayUtils.indexOf(doubleArray0, 42.186578233);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-2822.0)}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-2822.0);
      doubleArray1[1] = (Double) 0.0;
      ArrayUtils.shift((Object[]) doubleArray1, (int) (short) (-2822));
      assertEquals(3, doubleArray1.length);
      
      ArrayUtils.reverse((long[]) null, 0, (-1));
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      ArrayUtils.swap(byteArray0, (int) (byte) (-55), (int) (byte) (-59));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-59), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1426.446693), (-1));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '*';
      charArray0[2] = '?';
      charArray0[3] = 'X';
      charArray0[4] = 'I';
      charArray0[5] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertEquals(6, charArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = ArrayUtils.get(booleanArray0, 457);
      assertEquals(1, booleanArray0.length);
      assertNull(boolean2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-350L);
      longArray0[1] = (long) 'I';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-350L), 73L, (-350L), 73L}, longArray1);
      assertArrayEquals(new long[] {(-350L), 73L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = false;
      booleanArray1[1] = (boolean) boolean1;
      booleanArray1[2] = (boolean) boolean1;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)44;
      ArrayUtils.swap(byteArray0, (-1), (int) (byte)100);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)8, (byte) (-60), (byte) (-83), (byte) (-97), (byte) (-90), (byte) (-6), (byte) (-85), (byte)44}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      ArrayUtils.swap((long[]) null, 0, 0, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-3418);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-3418), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-3418), 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'S';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      ArrayUtils.shift(charArray0, (-479), 0, 2737);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'S', 'R', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3360.965894377717);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 575;
      Integer integer0 = new Integer(394);
      assertEquals(394, (int)integer0);
      assertNotNull(integer0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean(false);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((String) null);
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean6));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BRK,";
      stringArray0[1] = "z_0Dc3";
      stringArray0[2] = "W!N%3$39e@zBwY2qz";
      stringArray0[3] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[4] = "Cannot store ";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)48;
      ArrayUtils.shift(byteArray0, (-1988));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)48}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)48;
      floatArray0[1] = (float) (byte) (-88);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(2, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {48.0F, (-88.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-88);
      intArray0[1] = (int) (byte)48;
      intArray0[2] = 1134;
      intArray0[3] = (int) (byte) (-88);
      intArray0[4] = (int) (byte)48;
      intArray0[5] = (int) (byte) (-88);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)48, 194);
      assertEquals(6, intArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {(-88), 48, 1134, (-88), 48, (-88)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-693);
      ArrayUtils.swap(doubleArray0, (-1707), (-693), (-1995));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-693.0)}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, (-3660), (-693), 1726);
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      int[] intArray1 = new int[5];
      intArray1[0] = 1726;
      intArray1[1] = 1726;
      intArray1[2] = 1994;
      intArray1[3] = (-1707);
      intArray1[4] = (-1707);
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-67), 2);
      assertEquals(5, intArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1726, 1726, 1994, (-1707), (-1707)}, intArray1);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BRK,";
      stringArray0[1] = "z_0Dc3";
      stringArray0[2] = "W!N%3$39e@zBwY2qz";
      stringArray0[3] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "Array and element cannot both be null";
      boolean boolean0 = ArrayUtils.isSorted(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)20;
      ArrayUtils.shift(byteArray0, (int) (byte)27, (int) (byte)0, 69);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)27, (byte)0, (byte)89, (byte)0, (byte)0, (byte)20}, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)89;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)89;
      intArray0[6] = (int) (byte)20;
      intArray0[7] = (int) (byte)20;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 69, (int) (byte)0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 89, 0, 0, 89, 20, 20}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)27;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1707.804918804929), 2730);
      assertTrue(int1 == int0);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 27.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2);
      assertEquals(8, intArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {0, 2, 0, 2, 2, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3165.477320078359;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 3165.477320078359, (-1.0), 1.0}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(0.0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, int0);
      
      MutableInt mutableInt1 = new MutableInt((-31));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-31), (int)mutableInt1.getValue());
      assertEquals((byte) (-31), mutableInt1.byteValue());
      assertEquals((-31), (int)mutableInt1.toInteger());
      assertEquals((short) (-31), mutableInt1.shortValue());
      assertEquals((-31L), mutableInt1.longValue());
      assertEquals((-31.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-31), mutableInt1.intValue());
      assertEquals((-31.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-31", mutableInt1.toString());
      assertNotNull(mutableInt1);
      
      MutableInt mutableInt2 = new MutableInt(45);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertEquals(45.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(45.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(45, (int)mutableInt2.getValue());
      assertEquals((byte)45, mutableInt2.byteValue());
      assertEquals(45, (int)mutableInt2.toInteger());
      assertEquals((short)45, mutableInt2.shortValue());
      assertEquals(45L, mutableInt2.longValue());
      assertEquals(45, mutableInt2.intValue());
      assertEquals("45", mutableInt2.toString());
      assertNotNull(mutableInt2);
      
      MutableInt mutableInt3 = new MutableInt((-1.0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertEquals((-1), mutableInt3.intValue());
      assertEquals((-1L), mutableInt3.longValue());
      assertEquals((-1.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt3.getValue());
      assertEquals((short) (-1), mutableInt3.shortValue());
      assertEquals((-1), (int)mutableInt3.toInteger());
      assertEquals((byte) (-1), mutableInt3.byteValue());
      assertEquals("-1", mutableInt3.toString());
      assertEquals((-1.0F), mutableInt3.floatValue(), 0.01F);
      assertNotNull(mutableInt3);
      
      MutableInt mutableInt4 = new MutableInt((-31));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertEquals((-31.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((-31), mutableInt4.intValue());
      assertEquals((-31L), mutableInt4.longValue());
      assertEquals((-31.0), mutableInt4.doubleValue(), 0.01);
      assertEquals("-31", mutableInt4.toString());
      assertEquals((short) (-31), mutableInt4.shortValue());
      assertEquals((-31), (int)mutableInt4.getValue());
      assertEquals((-31), (int)mutableInt4.toInteger());
      assertEquals((byte) (-31), mutableInt4.byteValue());
      assertNotNull(mutableInt4);
      
      MutableInt mutableInt5 = new MutableInt(45);
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertTrue(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertEquals(45.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals((byte)45, mutableInt5.byteValue());
      assertEquals(45.0, mutableInt5.doubleValue(), 0.01);
      assertEquals((short)45, mutableInt5.shortValue());
      assertEquals(45, mutableInt5.intValue());
      assertEquals(45L, mutableInt5.longValue());
      assertEquals("45", mutableInt5.toString());
      assertEquals(45, (int)mutableInt5.getValue());
      assertEquals(45, (int)mutableInt5.toInteger());
      assertNotNull(mutableInt5);
      
      MutableInt mutableInt6 = new MutableInt(3165.477320078359);
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertEquals(3165, (int)mutableInt6.getValue());
      assertEquals((byte)93, mutableInt6.byteValue());
      assertEquals(3165, (int)mutableInt6.toInteger());
      assertEquals((short)3165, mutableInt6.shortValue());
      assertEquals(3165L, mutableInt6.longValue());
      assertEquals(3165, mutableInt6.intValue());
      assertEquals(3165.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals("3165", mutableInt6.toString());
      assertEquals(3165.0, mutableInt6.doubleValue(), 0.01);
      assertNotNull(mutableInt6);
      
      MutableInt mutableInt7 = ArrayUtils.get((MutableInt[]) null, (-1), mutableInt0);
      assertFalse(mutableInt0.equals((Object)mutableInt6));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt5));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals("1", mutableInt7.toString());
      assertEquals(1L, mutableInt7.longValue());
      assertEquals(1, (int)mutableInt7.getValue());
      assertEquals(1.0F, mutableInt7.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt7.toInteger());
      assertEquals((byte)1, mutableInt7.byteValue());
      assertEquals((short)1, mutableInt7.shortValue());
      assertEquals(1, mutableInt7.intValue());
      assertEquals(1.0, mutableInt7.doubleValue(), 0.01);
      assertNotNull(mutableInt7);
      assertNotSame(mutableInt0, mutableInt6);
      assertSame(mutableInt0, mutableInt7);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt5);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt7, mutableInt3);
      assertNotSame(mutableInt7, mutableInt1);
      assertNotSame(mutableInt7, mutableInt4);
      assertNotSame(mutableInt7, mutableInt2);
      assertNotSame(mutableInt7, mutableInt5);
      assertSame(mutableInt7, mutableInt0);
      assertNotSame(mutableInt7, mutableInt6);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '', 127);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(959, 3953);
      assertNotNull(intStream0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) intStream0;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) false;
      objectArray0[8] = (Object) mockRandom0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(9, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-2752);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)17, (short)2, (short) (-2752)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift(shortArray0, (-970), (-1629), (int) (byte) (-31));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)17, (short)2, (short) (-2752)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.shift((byte[]) null, 91);
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (-1629));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-730L));
      assertFalse(boolean0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2752));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)17, (short)2, (short) (-2752)}, shortArray0);
      assertArrayEquals(new short[] {(short)17, (short)2}, shortArray2);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      Short short0 = new Short((short)1166);
      assertEquals((short)1166, (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = ArrayUtils.isSameType(character0, short0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-528), 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      intArray0[2] = (-528);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), 0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-590);
      shortArray0[1] = (short) (-48);
      ArrayUtils.shift(shortArray0, (-356), 66, (-576));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-590), (short) (-48)}, shortArray0);
      
      ArrayUtils.swap(intArray0, 15, 0, (int) (short) (-48));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-528), 0, 0, (-528), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('M');
      assertFalse(character1.equals((Object)character0));
      assertEquals('M', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'M', '9'}, charArray0);
      assertNotNull(charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)99;
      ArrayUtils.shift(shortArray0, (int) (short)99, (-2558), (int) (short)99);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)99}, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-791);
      ArrayUtils.swap(intArray0, (-1795), (int) (short)99, (-1795));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-791)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[2] = (-2750.7645847171934);
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1355;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1355}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)90);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)1355}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1355}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.766711509120914), (-2750.7645847171934)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.766711509120914), (-2750.7645847171934)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1426.446693), (-1));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '*';
      charArray0[2] = '?';
      charArray0[3] = 'X';
      charArray0[4] = 'I';
      charArray0[5] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*');
      assertEquals(6, charArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '*', '?', 'X', 'I', '1'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = ArrayUtils.get(booleanArray0, 457);
      assertEquals(1, booleanArray0.length);
      assertNull(boolean2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-350L);
      longArray0[1] = (long) 'I';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-350L), 73L, (-350L), 73L}, longArray1);
      assertArrayEquals(new long[] {(-350L), 73L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = false;
      booleanArray1[1] = (boolean) boolean1;
      booleanArray1[2] = (boolean) boolean1;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1998, (-1), (-1));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-2367), (-607));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      longArray0[2] = (long) (-2367);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), (-2367));
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2367L), (-607L), (-2367L)}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '4';
      charArray0[2] = '5';
      charArray0[3] = ']';
      charArray0[4] = '*';
      charArray0[5] = '~';
      charArray0[6] = 'C';
      charArray0[7] = 'l';
      charArray0[8] = 'J';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {':', '4', '5', ']', '*', '~', 'C', 'l', 'J'}, charArray1);
      assertArrayEquals(new char[] {':', '4', '5', ']', '*', '~', 'C', 'l', 'J'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, (-2367), (-607), 100);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2367);
      longArray0[1] = (long) (-607);
      longArray0[2] = (long) (-2367);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-607), (-2367));
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2367L), (-607L), (-2367L)}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = '4';
      charArray0[2] = '5';
      charArray0[3] = ']';
      charArray0[4] = '*';
      charArray0[5] = '~';
      charArray0[6] = 'C';
      charArray0[7] = 'l';
      charArray0[8] = 'J';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {':', '4', '5', ']', '*', '~', 'C', 'l', 'J'}, charArray1);
      assertArrayEquals(new char[] {':', '4', '5', ']', '*', '~', 'C', 'l', 'J'}, charArray0);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, (-2367), (-607), 100);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3360.965894377717);
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'N';
      charArray0[2] = '';
      charArray0[3] = 'i';
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'A', 'N', '', 'i'}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, 2853, 73);
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'A';
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, 3);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, characterArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1072);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1072, (-354));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '0';
      longArray0[1] = (long) '0';
      longArray0[2] = 1L;
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 48L, 48L}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1), 1072);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, 0, 2853);
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)91);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1269.2F;
      floatArray0[1] = 2496.61F;
      floatArray0[2] = (-944.3F);
      floatArray0[3] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = ']';
      charArray0[2] = '\"';
      charArray0[3] = 'h';
      charArray0[4] = 'm';
      charArray0[5] = 'd';
      charArray0[6] = 'b';
      charArray0[7] = 'S';
      charArray0[8] = 'M';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'b', ']', '\"', 'h', 'm', 'd', 'b', 'S', 'M'}, charArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      ArrayUtils.reverse(byteArray0, 2146226195, (int) (byte) (-2));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-2), (byte) (-76), (byte)97, (byte)0, (byte)10}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      long[] longArray0 = null;
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      Boolean boolean0 = Boolean.valueOf("1zI!v)5byZw&xS");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) "1zI!v)5byZw&xS", (Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      ArrayUtils.reverse(longArray0, (-4976), (-4976));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 1L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-4976);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-4976);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4976), (-2088.7));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-4976.0), 1.0, 1.0, 0.0, (-4976.0), 1.0, 1.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 723);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Float float0 = new Float((-371.0));
      assertEquals((-371.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) float0, (Object) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      long[] longArray0 = new long[7];
      ArrayUtils.swap(longArray0, 1833, 1833, 10);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1833, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1833, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Double double0 = new Double(3147.61);
      assertEquals(3147.61, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('A');
      assertEquals('A', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, (-1));
      assertEquals(1, characterArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 'A';
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 81, (-3170), 100.0);
      assertFalse(int1 == int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {(-1.0), 65.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1139));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1139)}, shortArray0);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3847);
      intArray0[1] = 1414;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-679);
      intArray0[4] = 2139398821;
      intArray0[5] = 8;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-679));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-3847), 1414, Integer.MAX_VALUE, (-679), 2139398821, 8}, intArray0);
      assertArrayEquals(new int[] {(-679), (-3847), 1414, Integer.MAX_VALUE, (-679), 2139398821, 8}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte) (-114), (byte) (-114), (byte)0, (byte)57, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-114);
      shortArray0[2] = (short) (byte)57;
      shortArray0[3] = (short) (byte)57;
      shortArray0[4] = (short) (byte) (-114);
      shortArray0[5] = (short) (byte) (-114);
      shortArray0[6] = (short) (byte) (-114);
      shortArray0[7] = (short) (byte)57;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-114), (short)57, (short)57, (short) (-114), (short) (-114), (short) (-114), (short)57, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-114), (short)57, (short)57, (short) (-114), (short) (-114), (short) (-114), (short)57}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 604;
      intArray0[1] = 421;
      intArray0[2] = (int) (short)57;
      intArray0[3] = (int) (short) (-114);
      intArray0[4] = (int) (byte) (-114);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (short) (-114);
      intArray0[7] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 604);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {604, 421, 57, (-114), (-114), 0, (-114), 0}, intArray0);
      assertArrayEquals(new int[] {604, 604, 421, 57, (-114), (-114), 0, (-114), 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 54);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new int[] {54}, intArray0);
      assertNotNull(bitSet0);
      
      bitSet0.flip(54);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 54}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(55, bitSet0.length());
      assertArrayEquals(new int[] {54}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) 54;
      objectArray0[2] = (Object) 54;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 54;
      objectArray0[6] = (Object) 54;
      objectArray0[7] = (Object) bitSet0;
      objectArray0[8] = (Object) bitSet0;
      ArrayUtils.shift(objectArray0, 54);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 54);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, int1);
      
      int int2 = mutableInt0.addAndGet(0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, int2);
      
      int int3 = mutableInt0.addAndGet(0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, int3);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "");
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1654L;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 1;
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals(4, longArray1.length);
      assertEquals(9, longArray2.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1654L, 0L, 0L, 1L}, longArray1);
      assertArrayEquals(new long[] {1654L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = (-1472L);
      longArray0[2] = (-381L);
      longArray0[3] = (-2253L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertArrayEquals(new long[] {0L, (-1472L), (-381L), (-2253L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      Integer integer0 = new Integer((-351));
      assertEquals((-351), (int)integer0);
      assertNotNull(integer0);
      
      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-351);
      intArray0[1] = (-351);
      intArray0[2] = (-351);
      intArray0[3] = (-351);
      intArray0[4] = (-351);
      intArray0[5] = (-351);
      intArray0[6] = (-351);
      intArray0[7] = (-351);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-351));
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-351), (-351), (-351), (-351), (-351), (-351), (-351), (-351)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      MockRandom mockRandom0 = new MockRandom(2589L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) shortArray0, (Random) mockRandom0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      short[] shortArray0 = new short[13];
      ArrayUtils.reverse((long[]) null, 1073741824, 1073741824);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.766711509120914);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1.766711509120914);
      objectArray0[1] = (Object) (-1.766711509120914);
      objectArray0[2] = (Object) (-1.766711509120914);
      ArrayUtils.shift(objectArray0, (-607));
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      ArrayUtils.reverse(longArray0, 76, 91);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Float float0 = new Float((-1467.7709F));
      assertEquals((-1467.7709F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap((Object[]) floatArray0, 19, 2409);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = 1654L;
      longArray0[2] = (long) (byte)9;
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) 9L);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'C';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)495;
      shortArray0[1] = (short)495;
      shortArray0[2] = (short) (-1086);
      shortArray0[3] = (short) (-11246);
      shortArray0[4] = (short)43;
      shortArray0[5] = (short) (-1863);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)495, (short) (-1086), (short) (-11246), (short)43, (short) (-1863), (short)495}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 0L);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.shift((int[]) null, 160);
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-1086));
      assertFalse(boolean1 == boolean0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)495, (short) (-1086), (short) (-11246), (short)43, (short) (-1863), (short)495}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      byte byte0 = (byte) (-63);
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      short short0 = (short) (-84);
      Short short1 = new Short((short) (-84));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-84), (short)short1);
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[0];
      short short2 = (short) (-158);
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-158));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte) (-63);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-158), shortArray1, shortArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -158, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, int0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, int1);
      
      int int2 = mutableInt0.addAndGet(0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, int2);
      
      int int3 = mutableInt0.addAndGet(0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, int3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '!';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1933), 65);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertArrayEquals(new char[] {'!', '!'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      Float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, floatArray0[4]);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (float)floatArray0[3];
      doubleArray0[3] = (double) (float)floatArray0[2];
      doubleArray0[4] = (double) (float)floatArray0[6];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1058.2290163707007));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.5, 1.5, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1058.2290163707007), 0.0, 0.0, 1.5, 1.5, 1.5}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(65, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte) (-114), (byte)65, (byte)0, (byte)57, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      int int0 = (-677);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short) (-1158);
      intArray0[2] = (int) (short) (-1158);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1158, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)11);
      assertEquals(4, byteArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-67), (byte)11, (byte)2}, byteArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)2, 4, 644);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-67);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(120, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {2L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[4];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)553;
      shortArray0[1] = (short) (-28772);
      shortArray0[2] = (short)111;
      shortArray0[3] = (short) (-13107);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, intArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)553, (short) (-28772), (short)111, (short) (-13107)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-28772), (short)111, (short) (-13107)}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 90, 90, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 90;
      intArray0[1] = (-282);
      intArray0[2] = (-282);
      intArray0[3] = 90;
      intArray0[4] = (-282);
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {90, (-282), (-282), 90, (-282), 0}, intArray0);
      assertArrayEquals(new int[] {90, (-282), (-282), 90, (-282), 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, (-3));
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      Double double0 = new Double((-762.43895835342));
      assertEquals((-762.43895835342), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      int int0 = 1159;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Cannot store ";
      stringArray0[1] = "";
      stringArray0[2] = "Comparator should not be null.";
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1159, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1159, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'I');
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = Integer.MAX_VALUE;
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 5250);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.reverse(objectArray0, 100, 3969);
      assertEquals(7, objectArray0.length);
      
      Object object1 = ArrayUtils.get(objectArray0, 100);
      assertEquals(7, objectArray0.length);
      assertNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(7, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 54, object0);
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNotNull(object2);
      assertSame(object2, object0);
      assertSame(object2, object1);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = ArrayUtils.get(objectArray0, 0);
      assertFalse(object4.equals((Object)object3));
      assertEquals(5, objectArray0.length);
      assertNotNull(object4);
      assertSame(object4, object2);
      assertSame(object4, object1);
      assertSame(object4, object0);
      assertNotSame(object4, object3);
      
      objectArray0[4] = object4;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) long1;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) long0;
      ArrayUtils.shift(objectArray0, (-116), 3488, (-116));
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-116);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-116L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertArrayEquals(new long[] {2L, 2L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(objectArray0, 2, 2, 5);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 7);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, 7, 0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = '|';
      charArray0[2] = 'K';
      charArray0[3] = 'c';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'o', '|', 'K', 'c'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte) (-63));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-63);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray2.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'K';
      doubleArray0[1] = (double) 'K';
      doubleArray0[2] = (double) '|';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {75.0, 75.0, 124.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray1 = ArrayUtils.insert((-1), booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2174), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2174, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '}';
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ArrayUtils.toString((Object) double0, "");
      assertEquals("3.0", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = new boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      ArrayUtils.swap(booleanArray2, (-922), (-2705), Integer.MAX_VALUE);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(6, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1059L);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '-', (-2983));
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Long[] longArray0 = new Long[22];
      longArray0[0] = long0;
      longArray0[1] = long1;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long1;
      longArray0[5] = long0;
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 0, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (-2065L);
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(7, longArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-2065L), 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)0, 1939, 1939);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (byte)43);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'O';
      charArray0[2] = 'Q';
      charArray0[3] = 'A';
      charArray0[4] = '=';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '=');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'B', 'O', 'Q', 'A', '='}, charArray0);
      assertArrayEquals(new char[] {'B', 'O', 'Q', 'A'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'B', 'O', 'Q', 'A', '='}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3968;
      intArray1[1] = (-180);
      intArray1[2] = (int) (byte) (-103);
      intArray1[3] = (int) (byte) (-103);
      intArray1[4] = 790;
      intArray1[5] = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 790);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray1.length);
      assertEquals("{4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertArrayEquals(new int[] {3968, (-180), (-103), (-103), 790, 2}, intArray1);
      assertNotNull(bitSet0);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap((boolean[]) null, 3968, 3636);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 790);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-845.2);
      doubleArray0[1] = 789.608847523173;
      doubleArray0[2] = (-2906.82338164904);
      doubleArray0[3] = (-2182.7159099205);
      doubleArray0[4] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-845.2), 789.608847523173, (-2906.82338164904), (-2182.7159099205), (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert(32, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)27232;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)11;
      shortArray0[5] = (short)3151;
      shortArray0[6] = (short)1958;
      shortArray0[7] = (short)3020;
      shortArray0[8] = (short) (-2940);
      boolean boolean1 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)6, (short)27232, (short)1, (short)1, (short)11, (short)3151, (short)1958, (short)3020, (short) (-2940)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-3429), 575);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1974.6483F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1974.6483F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1974.6483F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1974.6483F), (-1974.6483F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1974.6483F);
      objectArray0[1] = (Object) (-1974.6483F);
      objectArray0[2] = (Object) (-1974.6483F);
      objectArray0[3] = (Object) (-1974.6483F);
      ArrayUtils.reverse(objectArray0, 2132253267, 1301);
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.hashCode(objectArray0[0]);
      assertEquals(4, objectArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2750.7645847171934)}, doubleArray0, 0.01);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.hashCode((Object) double0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'D';
      charArray0[1] = 'P';
      charArray0[2] = '@';
      charArray0[3] = 'C';
      charArray0[4] = 'f';
      charArray0[5] = '&';
      charArray0[6] = 'R';
      charArray0[7] = '`';
      ArrayUtils.shift(charArray0, 1428, (-2536), 1428);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'D', 'P', '@', 'C', 'f', '&', 'R', '`'}, charArray0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) '@';
      characterArray0[1] = (Character) '`';
      Character character0 = Character.valueOf('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      characterArray0[2] = character0;
      characterArray0[3] = (Character) '&';
      characterArray0[4] = (Character) 'R';
      characterArray0[5] = (Character) 'f';
      characterArray0[6] = (Character) '`';
      characterArray0[7] = (Character) 'C';
      characterArray0[8] = (Character) 'f';
      Double double1 = new Double(1428);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1428.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(9, characterArray0.length);
      assertEquals(9, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-63), (int) (byte) (-63));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1555);
      longArray0[2] = (long) 2;
      ArrayUtils.reverse(longArray0, (-351), (-1201));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1555L), 2L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1555);
      intArray0[1] = (int) (byte) (-63);
      intArray0[2] = (-1555);
      ArrayUtils.swap(intArray0, 4, 4);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1555), (-63), (-1555)}, intArray0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-63), (-1555), (-1555)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      ArrayUtils.shift(shortArray0, 1289, 72, 317);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 70;
      ArrayUtils.swap(intArray0, 0, (-3421), (int) (short)0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {70}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      Double double0 = new Double(3147.605);
      assertEquals(3147.605, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 68, 68);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) 68;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1.0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2.147483647E9, 2.147483647E9, 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2.147483647E9, 2.147483647E9, 68.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[5] = null;
      objectArray0[7] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(8, objectArray0.length);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'A';
      Float float0 = new Float(376.9832917590819);
      assertEquals(376.9833F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 65L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(65.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2219.0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2219.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-86.79656));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-86.79656F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((-86.79656));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-86.79656F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      Float float5 = new Float(70.91597F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals(70.91597F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      Float float0 = new Float((-63.0));
      assertEquals((-63.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-930.0F);
      floatArray0[1] = (-930.0F);
      floatArray0[2] = (float) (byte)42;
      floatArray0[3] = (-930.0F);
      floatArray0[4] = (-930.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte)42);
      assertEquals(5, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertArrayEquals(new float[] {(-930.0F), (-930.0F), 42.0F, (-930.0F), (-930.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-3065L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-3065L)}, longArray0);
      assertArrayEquals(new long[] {(-3065L)}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-3065L);
      objectArray0[1] = (Object) (-3065L);
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(2, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      floatArray0[3] = 709.7751F;
      floatArray0[4] = 3253.9153F;
      floatArray0[5] = (-455.63F);
      floatArray0[6] = (-843.29F);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, (-3199.304F), (-1921.717F), 709.7751F, 3253.9153F, (-455.63F), (-843.29F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) (-1921.717F);
      floatArray1[1] = (Float) (-1921.717F);
      floatArray1[2] = (Float) (-843.29F);
      floatArray1[3] = (Float) (-3199.304F);
      floatArray1[4] = (Float) 3253.9153F;
      floatArray1[5] = (Float) 3253.9153F;
      floatArray1[6] = (Float) (-455.63F);
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray2);
      assertSame(floatArray2, floatArray1);
      assertSame(floatArray1, floatArray2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[6];
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(6, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-1491), (-1491));
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)175);
      assertEquals((short)175, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)175);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)175}, shortArray1);
      assertNotNull(shortArray1);
      
      int int1 = 65536;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(65536, shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65536, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2), (-1938));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      
      Long long0 = new Long((-2));
      assertEquals((-2L), (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1362;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-1938);
      intArray0[4] = 1;
      intArray0[5] = 1763;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1362;
      intArray1[1] = 1362;
      intArray1[2] = 1763;
      intArray1[3] = (-2);
      intArray1[4] = 1362;
      intArray1[5] = (-1938);
      intArray1[6] = 1;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1362, 1, 1, (-1938), 1, 1763}, intArray0);
      assertArrayEquals(new int[] {1362, 1362, 1763, (-2), 1362, (-1938), 1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = ']';
      charArray0[2] = 'u';
      charArray0[3] = '8';
      ArrayUtils.shift(charArray0, 1362, 3103, 1362);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'G', ']', 'u', '8'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (short) (-2649), shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'r';
      floatArray0[1] = (float) 'r';
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {114.0F, 114.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 2013265920, 2013265920, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-55);
      shortArray0[1] = (short) (byte) (-55);
      shortArray0[2] = (short) (byte) (-55);
      shortArray0[3] = (short) (byte) (-55);
      shortArray0[4] = (short) (-107);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)986);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-55), (short) (-55), (short) (-55), (short) (-55), (short) (-107)}, shortArray0);
      assertArrayEquals(new short[] {(short)986, (short) (-55), (short) (-55), (short) (-55), (short) (-55), (short) (-107)}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte) (-55), 59);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      Long long0 = new Long(961L);
      assertEquals(961L, (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'q';
      intArray0[1] = (int) 'q';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {113, 113}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)210;
      shortArray0[1] = (short)145;
      shortArray0[2] = (short)108;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-31735));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)210, (short)145, (short)108}, shortArray0);
      assertArrayEquals(new short[] {(short)210, (short)145, (short)108}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)210;
      intArray0[1] = (int) (short)108;
      intArray0[2] = (int) (short)145;
      intArray0[3] = (int) (short)145;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object[]) doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 210, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      Double double0 = new Double(64.5);
      assertEquals(64.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)536;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)536}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)536}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2886, 2886);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2886;
      longArray0[1] = (long) 2886;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(int1 == int0);
      assertEquals(7, booleanArray0.length);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short short0 = (short)0;
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-20924));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-20924)}, shortArray0);
      assertNotNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Integer[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(4, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {4, 4, 4}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2690));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2690), (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(integerArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2182.7159099205);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-2182.7159099205), 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-63), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3163;
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-63), (int) (short)25);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-876.8), (int) (short)3163);
      assertTrue(int1 == int0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, (-2182.7159099205), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 16.243445292449;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2752.0;
      doubleArray0[5] = (-1042.8897120490221);
      doubleArray0[6] = 684.914181863;
      doubleArray0[7] = (-1451.6300950373);
      doubleArray0[8] = (-1707.804918804929);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
      assertEquals(9, doubleArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {16.243445292449, 0.0, 0.0, (-1.0), 2752.0, (-1042.8897120490221), 684.914181863, (-1451.6300950373), (-1707.804918804929)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-59);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false}, booleanArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-59);
      floatArray0[1] = (float) (-722);
      floatArray0[2] = (float) (byte) (-59);
      floatArray0[3] = (-1245.0F);
      floatArray0[4] = (float) (byte) (-59);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte) (-55), 65);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-59.0F), (-722.0F), (-59.0F), (-1245.0F), (-59.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-59.0F), (-722.0F), (-59.0F), (-1245.0F), (-59.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 'W';
      ArrayUtils.shift(charArray0, (int) (byte) (-55));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'#', 'W', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'r';
      charArray0[2] = 'C';
      ArrayUtils.shift(charArray0, 271);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'C', '\\', 'r'}, charArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'r';
      intArray0[5] = (int) 'r';
      intArray0[6] = (int) '\\';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 54);
      assertEquals(1, intArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new int[] {54}, intArray0);
      assertNotNull(bitSet0);
      
      bitSet0.flip(54);
      assertEquals(1, intArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(55, bitSet0.length());
      assertEquals("{0, 54}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {54}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) bitSet0;
      objectArray0[1] = (Object) 54;
      objectArray0[6] = (Object) 54;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 54;
      objectArray0[6] = (Object) 54;
      objectArray0[7] = (Object) bitSet0;
      objectArray0[8] = (Object) bitSet0;
      ArrayUtils.shift(objectArray0, 54);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = null;
      int int0 = 271;
      char[] charArray0 = null;
      ArrayUtils.shift((char[]) null, 360);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      ArrayUtils.shift(charArray0, 1004);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'#'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '#', (-340));
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "k9[dk";
      String string0 = ArrayUtils.get(stringArray0, 91, "k9[dk");
      assertEquals(1, stringArray0.length);
      assertEquals("k9[dk", string0);
      assertNotNull(string0);
      
      String string1 = ArrayUtils.toString((Object) "k9[dk", "k9[dk");
      assertTrue(string1.equals((Object)string0));
      assertEquals("k9[dk", string1);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 91;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {91.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'r';
      charArray0[2] = 'C';
      ArrayUtils.shift(charArray0, 271);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'C', '\\', 'r'}, charArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'r';
      intArray0[1] = 91;
      intArray0[2] = 91;
      intArray0[3] = 271;
      intArray0[4] = 271;
      intArray0[5] = (int) 'r';
      intArray0[6] = (int) '\\';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 271, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, (-1525));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      
      Character character0 = new Character('F');
      assertEquals('F', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("`HdCs<mHf,p ");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertEquals(0, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean3;
      booleanArray0[2] = boolean3;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean3;
      booleanArray0[5] = boolean1;
      Boolean boolean4 = ArrayUtils.get(booleanArray0, 426);
      assertEquals(6, booleanArray0.length);
      assertNull(boolean4);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (-455.63F);
      floatArray0[3] = 709.7751F;
      floatArray0[4] = (float) 0;
      floatArray0[1] = 3253.9153F;
      floatArray0[6] = (-455.63F);
      floatArray0[7] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-88.0F), 0);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 3253.9153F, (-455.63F), 709.7751F, 0.0F, 0.0F, (-455.63F), 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      Character character0 = new Character('k');
      assertEquals('k', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSorted((Character[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("java.lang.Character");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertEquals(1, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      Boolean boolean4 = ArrayUtils.get(booleanArray0, (-670));
      assertEquals(1, booleanArray0.length);
      assertNull(boolean4);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-670);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-670);
      longArray0[3] = 0L;
      longArray0[4] = (long) (-670);
      longArray0[5] = (long) 'k';
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 44L);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(8, longArray0.length);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new long[] {(-670L), 0L, (-670L), 0L, (-670L), 107L, 0L, (-1L)}, longArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null, comparator0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.getInteger("iaLMy", (-1800));
      assertEquals((-1800), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1800));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1800), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      MutableInt mutableInt0 = new MutableInt((Number) integerArray0[0]);
      assertEquals(6, integerArray0.length);
      assertEquals((-1800), (int)mutableInt0.toInteger());
      assertEquals((byte) (-8), mutableInt0.byteValue());
      assertEquals((-1800), (int)mutableInt0.getValue());
      assertEquals((short) (-1800), mutableInt0.shortValue());
      assertEquals("-1800", mutableInt0.toString());
      assertEquals((-1800L), mutableInt0.longValue());
      assertEquals((-1800), mutableInt0.intValue());
      assertEquals((-1800.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1800.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer2 = mutableInt0.getValue();
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(6, integerArray0.length);
      assertEquals((-1800), (int)mutableInt0.toInteger());
      assertEquals((byte) (-8), mutableInt0.byteValue());
      assertEquals((-1800), (int)mutableInt0.getValue());
      assertEquals((short) (-1800), mutableInt0.shortValue());
      assertEquals("-1800", mutableInt0.toString());
      assertEquals((-1800L), mutableInt0.longValue());
      assertEquals((-1800), mutableInt0.intValue());
      assertEquals((-1800.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1800.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1800), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1586);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(1586, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      try { 
        Integer.decode("iaLMy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"iaLMy\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-354), 9, (-1.766711509120914));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      String string0 = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      int int0 = 558;
      BitSet bitSet0 = new BitSet(558);
      assertEquals(0, bitSet0.length());
      assertEquals(576, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("8");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("8");
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("8");
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-513);
      ArrayUtils.swap(intArray0, (-2521), 0, 317);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-513)}, intArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {(-513)}, intArray0);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      floatArray0[2] = 709.7751F;
      ArrayUtils.swap((long[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Long long0 = new Long(637L);
      assertEquals(637L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(637L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(637L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      
      Long long3 = new Long(2834L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals(2834L, (long)long3);
      assertNotNull(long3);
      
      Long long4 = new Long((byte) (-55));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertEquals((-55L), (long)long4);
      assertNotNull(long4);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-58));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-58);
      longArray0[1] = (long) (byte) (-58);
      longArray0[1] = (long) (byte) (-58);
      longArray0[4] = (long) (byte) (-58);
      longArray0[5] = (long) (byte) (-58);
      longArray0[6] = (long) (byte) (-58);
      longArray0[7] = (long) (byte) (-58);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-58L), (-58L), 0L, 0L, (-58L), (-58L), (-58L), (-58L)}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-58L);
      doubleArray0[1] = (double) (-58L);
      doubleArray0[2] = (double) (-58L);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-693), (int) (byte) (-58));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-58.0), (-58.0), (-58.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-58L));
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-58L), (-58L), 0L, 0L, (-58L), (-58L), (-58L), (-58L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-58));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray1);
      assertNotNull(bitSet0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 224;
      intArray0[2] = (-143);
      intArray0[3] = 4;
      intArray0[4] = (-143);
      intArray0[5] = 73;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertArrayEquals(new int[] {0, 224, (-143), 4, (-143), 73}, intArray0);
      assertNotNull(integerArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-143);
      longArray0[1] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-143L), 0L}, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-143));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, 224, (-143), 4, (-143), 73}, intArray0);
      assertArrayEquals(new int[] {0, 224, 4, (-143), 73}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      int[] intArray0 = new int[8];
      Character[] characterArray0 = new Character[3];
      char char0 = 'o';
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('o', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-576), (-576), (-2558));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.swap(intArray0, (-791), (int) char0, 15);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      double double0 = 3147.605;
      Double double1 = new Double(3147.605);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(3147.605, (double)double1, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(Integer.MAX_VALUE, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1077;
      shortArray0[1] = (short)21845;
      shortArray0[2] = (short)832;
      shortArray0[3] = (short)21845;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)832;
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, (int) (short)832);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {832}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 832, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = 1261.0119939200156;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), 0.0, (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-63);
      doubleArray0[1] = (double) (byte) (-63);
      doubleArray0[2] = (double) (byte) (-63);
      doubleArray0[3] = 1261.0119939200156;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1261.0119939200156}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      ArrayUtils.reverse(longArray0, (-351), 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-63);
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 2;
      ArrayUtils.swap(intArray0, (int) (byte) (-63), (-1555));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-63), 2, 1, 2}, intArray0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 1, 2, (-63)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-902.60648498511);
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (short) (-35);
      doubleArray0[5] = (double) (short) (-35);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (-902.60648498511);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-902.60648498511), (int) (short)3);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-902.60648498511), 1.0, 0.0, 0.0, (-35.0), (-35.0), 0.1, (-902.60648498511)}, doubleArray0, 0.01);
      
      ArrayUtils.swap(shortArray0, 0, 0, (int) (short)1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)3}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      mutableInt0.setValue(252);
      assertEquals(252.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(252.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(252, mutableInt0.intValue());
      assertEquals(252L, mutableInt0.longValue());
      assertEquals("252", mutableInt0.toString());
      assertEquals((byte) (-4), mutableInt0.byteValue());
      assertEquals(252, (int)mutableInt0.toInteger());
      assertEquals((short)252, mutableInt0.shortValue());
      assertEquals(252, (int)mutableInt0.getValue());
      
      int int0 = mutableInt0.getAndAdd(0);
      assertEquals(252.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(252.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(252, mutableInt0.intValue());
      assertEquals(252L, mutableInt0.longValue());
      assertEquals("252", mutableInt0.toString());
      assertEquals((byte) (-4), mutableInt0.byteValue());
      assertEquals(252, (int)mutableInt0.toInteger());
      assertEquals((short)252, mutableInt0.shortValue());
      assertEquals(252, (int)mutableInt0.getValue());
      assertEquals(252, int0);
      
      int int1 = mutableInt0.getAndAdd(2);
      assertTrue(int1 == int0);
      assertEquals(254.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(254L, mutableInt0.longValue());
      assertEquals((short)254, mutableInt0.shortValue());
      assertEquals(254, mutableInt0.intValue());
      assertEquals("254", mutableInt0.toString());
      assertEquals(254, (int)mutableInt0.toInteger());
      assertEquals(254.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(254, (int)mutableInt0.getValue());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals(252, int1);
      
      int int2 = mutableInt0.decrementAndGet();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(253L, mutableInt0.longValue());
      assertEquals(253.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(253, mutableInt0.intValue());
      assertEquals(253.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("253", mutableInt0.toString());
      assertEquals(253, (int)mutableInt0.getValue());
      assertEquals((byte) (-3), mutableInt0.byteValue());
      assertEquals(253, (int)mutableInt0.toInteger());
      assertEquals((short)253, mutableInt0.shortValue());
      assertEquals(253, int2);
      
      int int3 = mutableInt0.addAndGet(253);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(506.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(506, mutableInt0.intValue());
      assertEquals(506, (int)mutableInt0.toInteger());
      assertEquals(506.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(506, (int)mutableInt0.getValue());
      assertEquals(506L, mutableInt0.longValue());
      assertEquals((short)506, mutableInt0.shortValue());
      assertEquals((byte) (-6), mutableInt0.byteValue());
      assertEquals("506", mutableInt0.toString());
      assertEquals(506, int3);
      
      int int4 = mutableInt0.addAndGet(0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(506.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(506, mutableInt0.intValue());
      assertEquals(506, (int)mutableInt0.toInteger());
      assertEquals(506.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(506, (int)mutableInt0.getValue());
      assertEquals(506L, mutableInt0.longValue());
      assertEquals((short)506, mutableInt0.shortValue());
      assertEquals((byte) (-6), mutableInt0.byteValue());
      assertEquals("506", mutableInt0.toString());
      assertEquals(506, int4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '!';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1933), 65);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertArrayEquals(new char[] {'!', '!'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int5 = ArrayUtils.indexOf(charArray0, '!', (-1933));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int5);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-21);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((byte)104);
      assertEquals(104, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.766711509120914), (int) (byte) (-8));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2750.7645847171934)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1426.446693), (-1));
      assertTrue(int1 == int0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 2258);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-1), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 5, 97, 9);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '!');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, 'T');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
      assertArrayEquals(new char[] {'7', '7'}, charArray2);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, Integer.MAX_VALUE);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertArrayEquals(new char[] {'w'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'w', 0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3809L);
      longArray0[1] = 1225L;
      longArray0[2] = 2320L;
      MutableInt mutableInt0 = new MutableInt((-2577));
      assertEquals((-2577), (int)mutableInt0.toInteger());
      assertEquals((-2577), (int)mutableInt0.getValue());
      assertEquals((-2577), mutableInt0.intValue());
      assertEquals("-2577", mutableInt0.toString());
      assertEquals((-2577L), mutableInt0.longValue());
      assertEquals((-2577.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2577.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-2577), mutableInt0.shortValue());
      assertEquals((byte) (-17), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-2577));
      assertEquals((-1), int0);
      
      mutableInt0.setValue((Number) (-1));
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      
      int int1 = mutableInt0.decrementAndGet();
      assertFalse(int1 == int0);
      assertEquals("-2", mutableInt0.toString());
      assertEquals((-2), (int)mutableInt0.getValue());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2), (int)mutableInt0.toInteger());
      assertEquals((-2L), mutableInt0.longValue());
      assertEquals((-2.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2), mutableInt0.intValue());
      assertEquals((short) (-2), mutableInt0.shortValue());
      assertEquals((-2), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1675), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1675, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3199.304F);
      floatArray0[2] = (-1921.717F);
      floatArray0[3] = 709.7751F;
      floatArray0[4] = 3253.9153F;
      floatArray0[5] = (-455.63F);
      floatArray0[6] = (-843.29F);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-3155);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3155), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3155, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = 1654L;
      longArray0[2] = (long) (byte)9;
      longArray0[3] = (long) (byte)9;
      longArray0[4] = 1654L;
      longArray0[5] = (long) (byte)9;
      longArray0[6] = (long) (byte)9;
      longArray0[7] = (long) (byte)9;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)9, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2030);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray2 = ArrayUtils.insert(Integer.MAX_VALUE, (long[]) null, (long[]) null);
      assertNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 54);
      assertEquals(1, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new int[] {54}, intArray0);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) 54;
      objectArray0[2] = (Object) 54;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 54;
      objectArray0[6] = (Object) 54;
      objectArray0[7] = (Object) bitSet0;
      objectArray0[8] = (Object) bitSet0;
      ArrayUtils.shift(objectArray0, 54);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      assertArrayEquals(new char[] {'X', 'X'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      ArrayUtils.shift((float[]) null, 14, 3968, 1568);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = ArrayUtils.indexOf(intArray0, (-2157), (-1500));
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 790;
      intArray0[2] = 0;
      intArray0[3] = 3968;
      intArray0[4] = 3636;
      intArray0[5] = 49;
      intArray0[6] = 53;
      intArray0[7] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-1), 790, 0, 3968, 3636, 49, 53, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 790, 3968, 3636, 49, 53}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 53;
      longArray0[1] = (long) 3636;
      longArray0[2] = (long) 49;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 49;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(49, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 127.0F;
      floatArray0[1] = 127.0F;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 225.86F;
      floatArray0[4] = 390.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 575, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 575, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-48));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-48)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-48);
      doubleArray0[1] = (-2182.7159099205);
      doubleArray0[2] = (-1479.304977916891);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-48.0), (-2182.7159099205), (-1479.304977916891)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-48), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Float float0 = new Float(943.936485);
      assertEquals(943.93646F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-2900), (-1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-48);
      shortArray0[1] = (short) (byte) (-48);
      shortArray0[2] = (short) (byte) (-48);
      shortArray0[3] = (short) (byte) (-48);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-48), (short) (-48), (short) (-48), (short) (-48)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short) (-48), (short) (-48), (short) (-48)}, shortArray1);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte) (-48);
      doubleArray1[1] = (double) (float)floatArray0[2];
      doubleArray1[2] = (-954.42903);
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) (short) (-48));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-48.0), 943.9364624023438, (-954.42903), (-48.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-48.0), 943.9364624023438, (-954.42903)}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      Integer integer0 = new Integer(2543);
      assertEquals(2543, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2543);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2543, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2543);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(2543, (int)integer2);
      assertNotNull(integer2);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)37}, byteArray0);
      assertArrayEquals(new byte[] {(byte)37, (byte)37}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 54, objectArray0[0]);
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object3);
      assertSame(object0, object3);
      assertSame(object3, object0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-4378);
      Integer integer0 = new Integer(131);
      assertEquals(131, (int)integer0);
      assertNotNull(integer0);
      
      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 131;
      intArray0[1] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {131, 0}, intArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 131, 545.572145901007);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4378.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-12.093851653150093), 1779.8112312373194);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-6205);
      shortArray0[1] = (short) (-6205);
      shortArray0[2] = (short) (-1996);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)53;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1064));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1064), (short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 2147483647L, (-626));
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((short)2330);
      assertEquals(2330.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3543.7433141653));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3543.7433141653), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-3543.7433141653), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1064), (short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1064), (short) (-6205), (short) (-6205), (short) (-1996), (short)0, (short)53}, shortArray1);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-3479));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2479L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, (-1887L), 1697);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-2479L), 0L, 0L}, longArray0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (-1446.2988011), (double) (-1L));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 225.86F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 1697;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (-2479L);
      floatArray0[7] = (float) (-1L);
      floatArray0[8] = (float) (-1887L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 2, (-1822.5867F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {225.86F, 0.0F, 0.0F, 0.0F, 1697.0F, 1.0F, (-2479.0F), (-1.0F), (-1887.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {225.86F, 0.0F, (-1822.5867F), 0.0F, 0.0F, 1697.0F, 1.0F, (-2479.0F), (-1.0F), (-1887.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 76;
      int int0 = (-1612);
      intArray0[1] = (-1612);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-814), 575, (-814));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 2065, 456);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'w');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Long long0 = new Long(995L);
      assertEquals(995L, (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'w';
      intArray0[1] = (int) 'w';
      intArray0[2] = (int) 'w';
      intArray0[3] = (int) 'w';
      intArray0[4] = (int) 'w';
      intArray0[5] = (int) 'w';
      intArray0[6] = (-2002);
      intArray0[7] = (int) 'w';
      intArray0[8] = (int) 'w';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1727);
      assertEquals(2, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(booleanArray0, (-2613), 2065);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((String[]) null, 2065);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2065, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-2147483648L));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 685, 685);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 685);
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, '', 127);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      MockRandom mockRandom0 = new MockRandom(127);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints(3953, 3953);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)49);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)49, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, (int) 0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)102;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray0, (byte)102);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)49}, byteArray3);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3360.965894377717);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 575;
      doubleArray0[3] = (double) 575;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 575;
      doubleArray0[6] = (double) 575;
      doubleArray0[7] = (double) 1L;
      ArrayUtils.shift(doubleArray0, 575, 575, (-1259));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3360.965894377717), 1.0, 575.0, 575.0, 1.0, 575.0, 575.0, 1.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)16;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)9, (byte) (-103), (byte)0, (byte) (-72), (byte)3, (byte)48, (byte)16}, byteArray0);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 54);
      assertEquals(1, intArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {54}, intArray0);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) 54;
      objectArray0[0] = (Object) 54;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 54;
      objectArray0[6] = (Object) 54;
      objectArray0[7] = (Object) bitSet0;
      objectArray0[8] = (Object) bitSet0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) 54;
      doubleArray0[2] = (double) 54;
      doubleArray0[3] = (double) 54;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {54.0, 54.0, 54.0, 54.0}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(54);
      assertEquals(54, mutableInt0.intValue());
      assertEquals(54, (int)mutableInt0.getValue());
      assertEquals(54, (int)mutableInt0.toInteger());
      assertEquals(54L, mutableInt0.longValue());
      assertEquals(54.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)54, mutableInt0.shortValue());
      assertEquals(54.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)54, mutableInt0.byteValue());
      assertEquals("54", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(54);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(54.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(54.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)54, mutableInt1.shortValue());
      assertEquals(54L, mutableInt1.longValue());
      assertEquals(54, (int)mutableInt1.getValue());
      assertEquals(54, (int)mutableInt1.toInteger());
      assertEquals("54", mutableInt1.toString());
      assertEquals(54, mutableInt1.intValue());
      assertEquals((byte)54, mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      
      MutableInt mutableInt2 = new MutableInt(54);
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertEquals(54L, mutableInt2.longValue());
      assertEquals(54.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)54, mutableInt2.shortValue());
      assertEquals(54, mutableInt2.intValue());
      assertEquals(54, (int)mutableInt2.toInteger());
      assertEquals(54, (int)mutableInt2.getValue());
      assertEquals("54", mutableInt2.toString());
      assertEquals((byte)54, mutableInt2.byteValue());
      assertEquals(54.0, mutableInt2.doubleValue(), 0.01);
      assertNotNull(mutableInt2);
      
      MutableInt mutableInt3 = new MutableInt(54.0);
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertEquals(54.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)54, mutableInt3.shortValue());
      assertEquals(54, mutableInt3.intValue());
      assertEquals(54L, mutableInt3.longValue());
      assertEquals(54, (int)mutableInt3.toInteger());
      assertEquals(54, (int)mutableInt3.getValue());
      assertEquals("54", mutableInt3.toString());
      assertEquals((byte)54, mutableInt3.byteValue());
      assertEquals(54.0F, mutableInt3.floatValue(), 0.01F);
      assertNotNull(mutableInt3);
      
      MutableInt mutableInt4 = new MutableInt(45);
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertEquals(45, (int)mutableInt4.toInteger());
      assertEquals(45, (int)mutableInt4.getValue());
      assertEquals(45.0, mutableInt4.doubleValue(), 0.01);
      assertEquals((byte)45, mutableInt4.byteValue());
      assertEquals("45", mutableInt4.toString());
      assertEquals((short)45, mutableInt4.shortValue());
      assertEquals(45.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(45, mutableInt4.intValue());
      assertEquals(45L, mutableInt4.longValue());
      assertNotNull(mutableInt4);
      
      MutableInt mutableInt5 = new MutableInt(54);
      assertTrue(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertTrue(mutableInt5.equals((Object)mutableInt1));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      assertTrue(mutableInt5.equals((Object)mutableInt2));
      assertEquals(54, (int)mutableInt5.toInteger());
      assertEquals(54, (int)mutableInt5.getValue());
      assertEquals("54", mutableInt5.toString());
      assertEquals((byte)54, mutableInt5.byteValue());
      assertEquals((short)54, mutableInt5.shortValue());
      assertEquals(54, mutableInt5.intValue());
      assertEquals(54L, mutableInt5.longValue());
      assertEquals(54.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(54.0, mutableInt5.doubleValue(), 0.01);
      assertNotNull(mutableInt5);
      
      MutableInt mutableInt6 = new MutableInt(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertTrue(mutableInt1.equals((Object)mutableInt5));
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt6.equals((Object)mutableInt0));
      assertTrue(mutableInt6.equals((Object)mutableInt5));
      assertTrue(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertTrue(mutableInt6.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt2));
      assertEquals(54.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(54.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)54, mutableInt1.shortValue());
      assertEquals(54L, mutableInt1.longValue());
      assertEquals(54, (int)mutableInt1.getValue());
      assertEquals(54, (int)mutableInt1.toInteger());
      assertEquals("54", mutableInt1.toString());
      assertEquals(54, mutableInt1.intValue());
      assertEquals((byte)54, mutableInt1.byteValue());
      assertEquals(54, mutableInt6.intValue());
      assertEquals((short)54, mutableInt6.shortValue());
      assertEquals(54.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals(54, (int)mutableInt6.toInteger());
      assertEquals((byte)54, mutableInt6.byteValue());
      assertEquals(54, (int)mutableInt6.getValue());
      assertEquals("54", mutableInt6.toString());
      assertEquals(54.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(54L, mutableInt6.longValue());
      assertNotNull(mutableInt6);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt mutableInt7 = ArrayUtils.get(mutableIntArray0, 90, mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt1.equals((Object)mutableInt6));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertTrue(mutableInt1.equals((Object)mutableInt5));
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt7.equals((Object)mutableInt0));
      assertTrue(mutableInt7.equals((Object)mutableInt5));
      assertTrue(mutableInt7.equals((Object)mutableInt6));
      assertTrue(mutableInt7.equals((Object)mutableInt3));
      assertTrue(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertEquals(0, mutableIntArray0.length);
      assertEquals(54.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(54.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)54, mutableInt1.shortValue());
      assertEquals(54L, mutableInt1.longValue());
      assertEquals(54, (int)mutableInt1.getValue());
      assertEquals(54, (int)mutableInt1.toInteger());
      assertEquals("54", mutableInt1.toString());
      assertEquals(54, mutableInt1.intValue());
      assertEquals((byte)54, mutableInt1.byteValue());
      assertEquals(54.0F, mutableInt7.floatValue(), 0.01F);
      assertEquals(54L, mutableInt7.longValue());
      assertEquals((short)54, mutableInt7.shortValue());
      assertEquals("54", mutableInt7.toString());
      assertEquals(54, mutableInt7.intValue());
      assertEquals(54, (int)mutableInt7.getValue());
      assertEquals((byte)54, mutableInt7.byteValue());
      assertEquals(54, (int)mutableInt7.toInteger());
      assertEquals(54.0, mutableInt7.doubleValue(), 0.01);
      assertNotNull(mutableInt7);
      assertNotSame(mutableInt1, mutableInt3);
      assertSame(mutableInt1, mutableInt7);
      assertNotSame(mutableInt1, mutableInt6);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt5);
      assertNotSame(mutableInt1, mutableInt4);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt7, mutableInt6);
      assertNotSame(mutableInt7, mutableInt3);
      assertSame(mutableInt7, mutableInt1);
      assertNotSame(mutableInt7, mutableInt2);
      assertNotSame(mutableInt7, mutableInt0);
      assertNotSame(mutableInt7, mutableInt5);
      assertNotSame(mutableInt7, mutableInt4);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3154.4479046;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 3154.4479046, (-1.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3154.4479046, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      MutableInt mutableInt0 = new MutableInt((-1.0));
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals("-1", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(45);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(45, (int)mutableInt1.getValue());
      assertEquals((byte)45, mutableInt1.byteValue());
      assertEquals(45, (int)mutableInt1.toInteger());
      assertEquals(45.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)45, mutableInt1.shortValue());
      assertEquals(45L, mutableInt1.longValue());
      assertEquals(45, mutableInt1.intValue());
      assertEquals("45", mutableInt1.toString());
      assertEquals(45.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(45);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertEquals(45, (int)mutableInt2.getValue());
      assertEquals((byte)45, mutableInt2.byteValue());
      assertEquals(45, (int)mutableInt2.toInteger());
      assertEquals(45.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)45, mutableInt2.shortValue());
      assertEquals(45.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(45, mutableInt2.intValue());
      assertEquals(45L, mutableInt2.longValue());
      assertEquals("45", mutableInt2.toString());
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertEquals(45, (int)mutableInt3.getValue());
      assertEquals((byte)45, mutableInt3.byteValue());
      assertEquals(45, (int)mutableInt3.toInteger());
      assertEquals(45L, mutableInt3.longValue());
      assertEquals(45.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(45.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("45", mutableInt3.toString());
      assertEquals((short)45, mutableInt3.shortValue());
      assertEquals(45, mutableInt3.intValue());
      assertEquals(45, (int)mutableInt2.getValue());
      assertEquals((byte)45, mutableInt2.byteValue());
      assertEquals(45, (int)mutableInt2.toInteger());
      assertEquals(45.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)45, mutableInt2.shortValue());
      assertEquals(45.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(45, mutableInt2.intValue());
      assertEquals(45L, mutableInt2.longValue());
      assertEquals("45", mutableInt2.toString());
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(45);
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertEquals(45.0, mutableInt4.doubleValue(), 0.01);
      assertEquals((byte)45, mutableInt4.byteValue());
      assertEquals(45, (int)mutableInt4.getValue());
      assertEquals(45, (int)mutableInt4.toInteger());
      assertEquals("45", mutableInt4.toString());
      assertEquals(45L, mutableInt4.longValue());
      assertEquals((short)45, mutableInt4.shortValue());
      assertEquals(45.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(45, mutableInt4.intValue());
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((-875));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertEquals((-875.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-875L), mutableInt5.longValue());
      assertEquals((-875), mutableInt5.intValue());
      assertEquals("-875", mutableInt5.toString());
      assertEquals((short) (-875), mutableInt5.shortValue());
      assertEquals((-875), (int)mutableInt5.getValue());
      assertEquals((byte) (-107), mutableInt5.byteValue());
      assertEquals((-875.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-875), (int)mutableInt5.toInteger());
      assertNotNull(mutableInt5);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt5));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt4));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertTrue(mutableInt6.equals((Object)mutableInt2));
      assertTrue(mutableInt6.equals((Object)mutableInt3));
      assertTrue(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt4));
      assertTrue(mutableInt2.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt5));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertEquals(45, (int)mutableInt3.getValue());
      assertEquals((byte)45, mutableInt3.byteValue());
      assertEquals(45, (int)mutableInt3.toInteger());
      assertEquals(45L, mutableInt3.longValue());
      assertEquals(45.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(45.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("45", mutableInt3.toString());
      assertEquals((short)45, mutableInt3.shortValue());
      assertEquals(45, mutableInt3.intValue());
      assertEquals(45.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(45, (int)mutableInt6.getValue());
      assertEquals(45L, mutableInt6.longValue());
      assertEquals(45, (int)mutableInt6.toInteger());
      assertEquals((byte)45, mutableInt6.byteValue());
      assertEquals("45", mutableInt6.toString());
      assertEquals(45.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals((short)45, mutableInt6.shortValue());
      assertEquals(45, mutableInt6.intValue());
      assertEquals(45, (int)mutableInt2.getValue());
      assertEquals((byte)45, mutableInt2.byteValue());
      assertEquals(45, (int)mutableInt2.toInteger());
      assertEquals(45.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)45, mutableInt2.shortValue());
      assertEquals(45.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(45, mutableInt2.intValue());
      assertEquals(45L, mutableInt2.longValue());
      assertEquals("45", mutableInt2.toString());
      assertNotNull(mutableInt6);
      
      MutableInt mutableInt7 = ArrayUtils.get(mutableIntArray0, 2, mutableInt6);
      assertFalse(mutableInt3.equals((Object)mutableInt5));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt4));
      assertTrue(mutableInt3.equals((Object)mutableInt6));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertTrue(mutableInt6.equals((Object)mutableInt2));
      assertTrue(mutableInt6.equals((Object)mutableInt3));
      assertTrue(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertTrue(mutableInt7.equals((Object)mutableInt3));
      assertTrue(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertTrue(mutableInt7.equals((Object)mutableInt4));
      assertTrue(mutableInt7.equals((Object)mutableInt6));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt6));
      assertTrue(mutableInt2.equals((Object)mutableInt4));
      assertTrue(mutableInt2.equals((Object)mutableInt3));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt5));
      assertEquals(6, mutableIntArray0.length);
      assertEquals(45, (int)mutableInt3.getValue());
      assertEquals((byte)45, mutableInt3.byteValue());
      assertEquals(45, (int)mutableInt3.toInteger());
      assertEquals(45L, mutableInt3.longValue());
      assertEquals(45.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(45.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("45", mutableInt3.toString());
      assertEquals((short)45, mutableInt3.shortValue());
      assertEquals(45, mutableInt3.intValue());
      assertEquals(45.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(45, (int)mutableInt6.getValue());
      assertEquals(45L, mutableInt6.longValue());
      assertEquals(45, (int)mutableInt6.toInteger());
      assertEquals((byte)45, mutableInt6.byteValue());
      assertEquals("45", mutableInt6.toString());
      assertEquals(45.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals((short)45, mutableInt6.shortValue());
      assertEquals(45, mutableInt6.intValue());
      assertEquals(45L, mutableInt7.longValue());
      assertEquals(45, mutableInt7.intValue());
      assertEquals("45", mutableInt7.toString());
      assertEquals(45.0, mutableInt7.doubleValue(), 0.01);
      assertEquals(45, (int)mutableInt7.getValue());
      assertEquals(45.0F, mutableInt7.floatValue(), 0.01F);
      assertEquals(45, (int)mutableInt7.toInteger());
      assertEquals((byte)45, mutableInt7.byteValue());
      assertEquals((short)45, mutableInt7.shortValue());
      assertEquals(45, (int)mutableInt2.getValue());
      assertEquals((byte)45, mutableInt2.byteValue());
      assertEquals(45, (int)mutableInt2.toInteger());
      assertEquals(45.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)45, mutableInt2.shortValue());
      assertEquals(45.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(45, mutableInt2.intValue());
      assertEquals(45L, mutableInt2.longValue());
      assertEquals("45", mutableInt2.toString());
      assertNotNull(mutableInt7);
      assertNotSame(mutableInt3, mutableInt4);
      assertNotSame(mutableInt3, mutableInt5);
      assertNotSame(mutableInt3, mutableInt7);
      assertNotSame(mutableInt3, mutableInt1);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt6);
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt6, mutableInt0);
      assertNotSame(mutableInt6, mutableInt4);
      assertNotSame(mutableInt6, mutableInt5);
      assertNotSame(mutableInt6, mutableInt7);
      assertNotSame(mutableInt6, mutableInt3);
      assertNotSame(mutableInt6, mutableInt1);
      assertNotSame(mutableInt6, mutableInt2);
      assertNotSame(mutableInt7, mutableInt6);
      assertNotSame(mutableInt7, mutableInt5);
      assertSame(mutableInt7, mutableInt2);
      assertNotSame(mutableInt7, mutableInt3);
      assertNotSame(mutableInt7, mutableInt1);
      assertNotSame(mutableInt7, mutableInt0);
      assertNotSame(mutableInt7, mutableInt4);
      assertNotSame(mutableInt2, mutableInt3);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt4);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt2, mutableInt6);
      assertSame(mutableInt2, mutableInt7);
      assertNotSame(mutableInt2, mutableInt5);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.NaN;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 928.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2470;
      intArray0[1] = (-1491);
      intArray0[2] = 2470;
      int int0 = ArrayUtils.indexOf(intArray0, 4500, (-2983));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2470, (-1491), 2470}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 294.8297F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)86);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)0, (byte)99, (byte) (-100), (byte)90, (byte)0, (byte)127, (byte)1}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-105);
      MockRandom mockRandom0 = new MockRandom(2790L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-105.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 2790L;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte) (-105));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 2790.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 2790.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      Double double0 = new Double((-1707.804918804929));
      assertEquals((-1707.804918804929), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)9);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) (byte)9;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 48.0F, 9.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {48.0F, 9.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = 1441L;
      longArray0[2] = (-3211L);
      longArray0[3] = (-2147483648L);
      longArray0[4] = (-1L);
      longArray0[5] = 501L;
      longArray0[6] = 0L;
      longArray0[7] = 2320L;
      longArray0[8] = (-2253L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 54);
      assertEquals(9, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {1L, 1441L, (-3211L), (-2147483648L), (-1L), 501L, 0L, 2320L, (-2253L)}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-121);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte) (-121)}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-178.0));
      assertEquals((-178.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-178.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2577.0));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-2577.0), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-178.0), (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-178.0), (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(195.0);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals(195.0, (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2132), (-2132));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      Integer integer0 = Integer.getInteger("java.lang.Boolean", (-1800));
      assertEquals((-1800), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1800);
      longArray0[3] = (long) (-1800);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-2471));
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1800L), 0L, 0L, (-1800L)}, longArray0);
      
      char[] charArray0 = new char[0];
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "gXBKc.=p|8`S0";
      stringArray0[2] = "";
      stringArray0[3] = "hM!;@TZDh6K#^Ako=";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3869L);
      longArray0[1] = (-2418L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-3869L), (-2418L), 0L, 0L, (-1L), (-1L), 0L}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'X', ':'}, charArray0);
      assertArrayEquals(new char[] {'X', ':'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2239));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "hM!;@TZDh6K#^Ako=";
      stringArray0[1] = "hM!;@TZDh6K#^Ako=";
      stringArray0[2] = "java.lang.Boolean";
      stringArray0[3] = "hM!;@TZDh6K#^Ako=";
      stringArray0[4] = "hM!;@TZDh6K#^Ako=";
      stringArray0[5] = "hM!;@TZDh6K#^Ako=";
      stringArray0[6] = "hM!;@TZDh6K#^Ako=";
      stringArray0[7] = "hM!;@TZDh6K#^Ako=";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 650, 650);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-44));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)70;
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short)1;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)70, (short) (-44), (short)1, (short)1, (short)70, (short) (-44), (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)70, (short) (-44), (short)1}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 0, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-3869L);
      longArray0[2] = (long) 0;
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)65;
      ArrayUtils.shift((Object[]) null, 70, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-59);
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1873L));
      assertEquals((-1873L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1873L)}, longArray1);
      assertNotNull(longArray1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte) (-55);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55), (byte) (-55), (byte) (-55)}, byteArray1);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 70.91597F;
      floatArray0[1] = (float) (long)longArray0[0];
      floatArray0[2] = 70.0F;
      floatArray0[3] = (float) (byte) (-55);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-55), 2277);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {70.91597F, (-1873.0F), 70.0F, (-55.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap(booleanArray1, 1114111, (int) (byte) (-55), 20);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift((boolean[]) null, (-1757));
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)1;
      objectArray0[1] = (Object) (short)1;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) (short)1;
      objectArray0[4] = (Object) (short)1;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) "f(04u8[z`a$+d";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.lang.Boolean");
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 46;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F));
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {46.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], (int) (short)1);
      assertEquals(8, objectArray0.length);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)1;
      intArray0[1] = 46;
      intArray0[2] = 46;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-358);
      longArray0[1] = (long) (-358);
      longArray0[2] = (long) (-358);
      longArray0[3] = (long) (-358);
      longArray0[4] = (long) (-358);
      longArray0[5] = (long) (-358);
      ArrayUtils.reverse(longArray0, 1, (-358));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-358L), (-358L), (-358L), (-358L), (-358L), (-358L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2L);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Float float0 = new Float((float) 2L);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-1725));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-11), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -11, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-23));
      assertEquals(1, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)3}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)3;
      doubleArray0[0] = (double) (short) (-23);
      doubleArray0[4] = (double) (short) (-35);
      doubleArray0[5] = (double) (short) (-35);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (double) (short) (-23);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      ArrayUtils.reverse(longArray0, (-4976), (-4976));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 1L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-4976);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 16;
      floatArray0[1] = 1290.5272F;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 1408L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2, 16);
      assertEquals(4, floatArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {16.0F, 1290.5272F, 2.0F, 1408.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), 0}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-982.83F);
      floatArray0[1] = (-982.83F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-982.83F), 0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-982.83F), (-982.83F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-982.83F);
      floatArray0[1] = (-982.83F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-982.83F), (-528));
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-982.83F), (-982.83F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1974.6483F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1974.6483F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1974.6483F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1974.6483F), 0.0F, (-1974.6483F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1269.2F;
      floatArray0[1] = 2496.61F;
      floatArray0[2] = (-944.3F);
      floatArray0[3] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1269.2F, 2496.61F, (-944.3F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 1, (-718));
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 70;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)37;
      shortArray0[2] = (short)24;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)37);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)37, (short)24, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)24, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 90);
      assertEquals(3, objectArray0.length);
      assertNull(object2);
      
      objectArray0[2] = null;
      ArrayUtils.reverse(objectArray0, 90, 90);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = (double) 90;
      doubleArray0[2] = (double) 90;
      doubleArray0[3] = (double) 90;
      doubleArray0[4] = (double) 90;
      doubleArray0[5] = (double) 90;
      doubleArray0[6] = (double) 90;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('0');
      assertTrue(character1.equals((Object)character0));
      assertEquals('0', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('{');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('{', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('t');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('t', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('0');
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertEquals('0', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(5, characterArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      doubleArray0[2] = (-2750.7645847171934);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.766711509120914), (-2750.7645847171934)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.766711509120914), (-2750.7645847171934)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      Integer integer0 = new Integer((-1452));
      assertEquals((-1452), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("}r&\\G.2{6y");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("}r&\\G.2{6y");
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      Boolean boolean6 = Boolean.valueOf((String) null);
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean5;
      booleanArray0[1] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[5];
      intArray0[0] = (-1452);
      intArray0[1] = (-1452);
      intArray0[2] = (-1452);
      intArray0[3] = (-1452);
      intArray0[4] = (-1452);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1452, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 23;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {23}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2222);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2222, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 2, (Object) null);
      assertEquals(6, objectArray0.length);
      assertNull(object1);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf('v');
      assertEquals('v', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('(');
      assertFalse(character1.equals((Object)character0));
      assertEquals('(', (char)character1);
      assertNotNull(character1);
      
      Character character2 = new Character('z');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('z', (char)character2);
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('|');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('|', (char)character3);
      assertNotNull(character3);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      characterArray0[2] = character2;
      characterArray0[3] = character3;
      doubleArray0[3] = (double) (char)character0;
      characterArray0[5] = character2;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(6, characterArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)433;
      shortArray0[2] = (short)433;
      shortArray0[3] = (short)98;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)433, (short)433, (short)98}, shortArray0);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) (short) (-2582));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 118.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 118.0}, doubleArray1, 0.01);
      assertNotNull(bitSet0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-92);
      ArrayUtils.shift(byteArray0, 1510, (int) (byte) (-86), 2909);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-92)}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 1670.1F, 2909);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertEquals(3, characterArray0.length);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("`HdCs<mHf,p ");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = (char) character0;
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, (char) character0);
      assertEquals(1, charArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertNotNull(bitSet0);
      
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'q'}, charArray0);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[0];
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BRK,";
      stringArray0[1] = "z_0Dc3";
      stringArray0[2] = "W!N%3$39e@zBwY2qz";
      stringArray0[3] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "Array and element cannot both be null";
      boolean boolean0 = ArrayUtils.isSorted(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)27, (int) (byte)0, 69);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)27, (byte)0, (byte)89, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-59);
      MutableInt mutableInt0 = new MutableInt((int) (byte) (-59));
      assertEquals((-59.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-59), mutableInt0.shortValue());
      assertEquals((-59.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals("-59", mutableInt0.toString());
      assertEquals((-59), (int)mutableInt0.toInteger());
      assertEquals((-59), mutableInt0.intValue());
      assertEquals((-59), (int)mutableInt0.getValue());
      assertEquals((-59L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-59);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-79);
      byte byte0 = (byte)90;
      byteArray0[3] = (byte)90;
      byte byte1 = (byte)106;
      byteArray0[4] = (byte)106;
      byte byte2 = (byte)1;
      byteArray0[5] = (byte)1;
      int int0 = 2103;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)106, 2103);
      assertFalse(int1 == int0);
      assertEquals(6, byteArray0.length);
      assertEquals(4, int1);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-91), (byte) (-79), (byte)90, (byte)106, (byte)1}, byteArray0);
      
      Byte byte3 = ArrayUtils.get((Byte[]) null, (-642));
      assertNull(byte3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-817.594);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2121.788;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1922.53705605334);
      doubleArray0[5] = 1190.3184615015;
      doubleArray0[6] = (-1.0);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 1190.3184615015, (-1922.53705605334), 1.0, 2121.788, 1.0, (-817.594)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1.0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)0, object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "", intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 54, objectArray0[0]);
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      Object object2 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object2);
      
      Object object3 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object3);
      assertSame(object0, object3);
      assertSame(object3, object0);
      
      objectArray0[3] = object3;
      Object object4 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object4);
      
      objectArray0[4] = null;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("8");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("8");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-5501), (-5501), (-5501));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-22);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-22), 0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-22)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1055L);
      assertNotNull(doubleStream0);
      
      byte[] byteArray0 = new byte[0];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte)13, (-479), (int) (byte)13);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)13, (int) (byte)13);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1061);
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-528), (-1061)}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-528);
      floatArray0[1] = (float) (-528);
      floatArray0[2] = (float) (-1061);
      floatArray0[3] = (float) (-528);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-982.83F), (-528));
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), (-1061.0F), (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)2;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(6, byteArray0.length);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new byte[] {(byte)13, (byte)0, (byte)3, (byte)22, (byte) (-65), (byte)2}, byteArray0);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), (-1061.0F), (-528.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-528.0F), (-528.0F), (-1061.0F), (-528.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2397, byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2397, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableInt0.add(2401);
      assertEquals((short)2402, mutableInt0.shortValue());
      assertEquals(2402, (int)mutableInt0.getValue());
      assertEquals(2402.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals(2402.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2402, (int)mutableInt0.toInteger());
      assertEquals(2402, mutableInt0.intValue());
      assertEquals(2402L, mutableInt0.longValue());
      assertEquals("2402", mutableInt0.toString());
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = mutableInt0.addAndGet((Number) float0);
      assertEquals((short)2403, mutableInt0.shortValue());
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals(2403.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2403, (int)mutableInt0.toInteger());
      assertEquals(2403.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2403, (int)mutableInt0.getValue());
      assertEquals(2403, mutableInt0.intValue());
      assertEquals(2403L, mutableInt0.longValue());
      assertEquals("2403", mutableInt0.toString());
      assertEquals(2403, int0);
      
      mutableInt0.decrement();
      assertEquals((short)2402, mutableInt0.shortValue());
      assertEquals(2402, (int)mutableInt0.getValue());
      assertEquals(2402.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals(2402.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2402, (int)mutableInt0.toInteger());
      assertEquals(2402, mutableInt0.intValue());
      assertEquals(2402L, mutableInt0.longValue());
      assertEquals("2402", mutableInt0.toString());
      
      ArrayUtils.reverse((byte[]) null);
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-101));
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst((byte[]) null, (byte)121);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)121}, byteArray1);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = '3';
      charArray0[2] = '^';
      charArray0[3] = 'H';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'h');
      assertEquals(4, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'Z', '3', '^', 'H'}, charArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)102);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)102, (byte)byte1);
      assertNotNull(byte1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (byte)43;
      floatArray0[2] = (-1822.5867F);
      floatArray0[3] = 390.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (byte)43, 491.38403F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 48, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.swap(byteArray1, (int) (byte) (-63), (int) (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-63);
      byte[] byteArray3 = ArrayUtils.removeAllOccurrences(byteArray2, (byte) (-63));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(1, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byte byte0 = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-109);
      byte byte1 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-109), (byte) (-31), (byte)2, (byte)90, (byte)100}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-109), (byte) (-31), (byte)2, (byte)90, (byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-109), (byte) (-31), (byte)2, (byte)90, (byte)100}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (int) (byte)2, (float) (byte) (-31));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      ArrayUtils.shift(doubleArray0, 4305);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = '\"';
      charArray0[2] = 'Y';
      charArray0[3] = '/';
      ArrayUtils.swap(charArray0, (-1), (-2141468286), 4305);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'8', '\"', 'Y', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      doubleArray0[2] = 0.3103802909607922;
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'J';
      charArray0[2] = 'Q';
      charArray0[3] = '.';
      charArray0[4] = '.';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Q', 0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'Q', 'J', 'Q', '.', '.'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) 'Q';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {46.0F, 46.0F, 81.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 3160L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {3160L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'J', 'Q', '.', '.'}, charArray0);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-63));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-63);
      longArray0[1] = (long) (byte) (-63);
      longArray0[2] = (long) (byte) (-63);
      longArray0[3] = (long) (byte) (-63);
      longArray0[4] = (long) (byte) (-63);
      longArray0[5] = (long) (byte) (-63);
      longArray0[6] = (long) (byte) (-63);
      longArray0[7] = (long) (byte) (-63);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L)}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-63L);
      doubleArray0[1] = (double) (-63L);
      doubleArray0[2] = (double) (-63L);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-693), (int) (byte) (-63));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.reverse(longArray0, (-1555), 0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L), (-63L)}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-693);
      intArray0[1] = (-1555);
      intArray0[2] = 0;
      intArray0[3] = (int) (byte) (-63);
      intArray0[4] = (-1555);
      intArray0[5] = 0;
      intArray0[6] = (int) (byte) (-63);
      ArrayUtils.swap(intArray0, (-63), 0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-693), (-1555), 0, (-63), (-1555), 0, (-63)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1812.72F), (-1));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, 206L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = 1654L;
      longArray0[2] = (long) (byte)9;
      longArray0[3] = (long) (byte)9;
      longArray0[4] = 1654L;
      longArray0[5] = (long) (byte)9;
      longArray0[6] = (long) (byte)9;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 9L;
      objectArray0[1] = (Object) 9L;
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1654L;
      floatArray0[1] = (float) 9L;
      floatArray0[2] = 1269.2F;
      floatArray0[3] = 684.6408F;
      floatArray0[4] = (float) 9L;
      floatArray0[5] = (float) 9L;
      floatArray0[6] = (float) (byte)9;
      floatArray0[7] = (float) 1654L;
      floatArray0[8] = (float) 1654L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 9.0F, 1291);
      assertEquals(9, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {1654.0F, 9.0F, 1269.2F, 684.6408F, 9.0F, 9.0F, 9.0F, 1654.0F, 1654.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, (int) (byte)11);
      assertEquals(4, byteArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-67), (byte)11, (byte)2}, byteArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('0');
      assertEquals('0', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'0'}, charArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int1 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertFalse(int1 == int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (byte)2, 4308);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.shift(longArray0, 575);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = (double) 575;
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[2] = '';
      charArray0[3] = '';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 'A';
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) '';
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {127.0F, 1.0F, 65.0F, 1.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 1L);
      assertEquals(4, floatArray0.length);
      assertEquals(4, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 3}", bitSet0.toString());
      assertArrayEquals(new float[] {127.0F, 1.0F, 65.0F, 1.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[6];
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(6, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-2157), (-1491));
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 45, 45);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.reverse((long[]) null, 1936, 1936);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 549;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2030);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {549}, intArray0);
      assertArrayEquals(new int[] {549}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(20, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1402));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1402), (int)integer1);
      assertNotNull(integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 4);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals(0, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = '[';
      charArray0[2] = 'c';
      charArray0[3] = 's';
      charArray0[4] = '3';
      charArray0[5] = 'h';
      charArray0[6] = 'i';
      charArray0[7] = 'L';
      ArrayUtils.shuffle(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'[', 'c', 's', '3', 'h', 'i', 'L', 'p'}, charArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1812.72F), (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '}';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '@');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'0', '}', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'0', '}', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2639), Integer.MAX_VALUE, (-2639));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-84), Integer.MAX_VALUE);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      long[] longArray0 = new long[0];
      MutableInt mutableInt0 = new MutableInt((-4849));
      assertEquals((-4849), mutableInt0.intValue());
      assertEquals((-4849.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-4849), mutableInt0.shortValue());
      assertEquals((-4849), (int)mutableInt0.toInteger());
      assertEquals((-4849), (int)mutableInt0.getValue());
      assertEquals((-4849L), mutableInt0.longValue());
      assertEquals("-4849", mutableInt0.toString());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals((-4849.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, (String) null);
      assertEquals((-4849), mutableInt0.intValue());
      assertEquals((-4849.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-4849), mutableInt0.shortValue());
      assertEquals((-4849), (int)mutableInt0.toInteger());
      assertEquals((-4849), (int)mutableInt0.getValue());
      assertEquals((-4849L), mutableInt0.longValue());
      assertEquals("-4849", mutableInt0.toString());
      assertEquals((byte)15, mutableInt0.byteValue());
      assertEquals((-4849.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-4849", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2222);
      boolean boolean0 = ArrayUtils.contains(intArray0, 892);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-2222)}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, 8192);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, 48);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = ArrayUtils.add(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1));
      assertEquals(1, floatArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      char[] charArray0 = new char[3];
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1055L);
      assertNotNull(doubleStream0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (byte)13, (-479), (-1530));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)13, (int) (byte)13);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'I');
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 286, 1329);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)49);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)49, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, (int) 0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)102;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)49, (byte)102, (byte)102}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray0, (byte)102);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)49}, byteArray3);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      Integer integer0 = new Integer(2543);
      assertEquals(2543, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2543);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2543, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2543);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(2543, (int)integer2);
      assertNotNull(integer2);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 2543, 2543);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 942.06605406601);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray3 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2804.4832F;
      floatArray0[2] = 2804.4832F;
      floatArray0[3] = 48.0F;
      ArrayUtils.swap(floatArray0, 1, (-767), (-80));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 2804.4832F, 2804.4832F, 48.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '`');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertArrayEquals(new char[] {'`', '`'}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3154.4479046;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 5, 5);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 3154.4479046, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray3 = ArrayUtils.removeElement(booleanArray1, true);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray3));
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '}';
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ArrayUtils.toString((Object) double0, "");
      assertEquals("3.0", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-922), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -922, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '0');
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '0';
      ArrayUtils.shift(longArray0, 321, 13, 1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {48L}, longArray0);
      
      char[] charArray2 = ArrayUtils.insert(50, charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1994, 0);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-55), 0, 10);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray2 = ArrayUtils.insert(117, byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 775);
      assertEquals(0, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      ArrayUtils.swap((boolean[]) null, 2, (-331), 2);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 2, 1568, (-249));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      Long long0 = new Long(220);
      assertEquals(220L, (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("220", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 220;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 220;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 220.0F, 0.0F, 0.0F, 0.0F, 220.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      int int0 = 46;
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      short[] shortArray0 = new short[4];
      int int1 = 1;
      short short0 = (short)2385;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 994, (short)2385);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 994, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      byte byte0 = (byte) (-87);
      Byte byte1 = Byte.valueOf((byte) (-87));
      assertEquals((byte) (-87), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-87), (byte)byte2);
      assertNotNull(byte2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 256, byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-3575);
      shortArray0[2] = (short)6;
      shortArray0[3] = (short) (-2248);
      shortArray0[4] = (short)66;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short)2385);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)7, (short) (-3575), (short)6, (short) (-2248), (short)66}, shortArray0);
      assertArrayEquals(new short[] {(short)7, (short)2385, (short) (-3575), (short)6, (short) (-2248), (short)66}, shortArray1);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, byte0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)66;
      ArrayUtils.swap(doubleArray0, (int) (short)7, (int) (short)66, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {66.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[9];
      ArrayUtils.reverse(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte) (-95));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1004), 2152L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1004, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte)42;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)42);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)118, (byte)1, (byte)2, (byte)0, (byte)75, (byte) (-44), (byte)42}, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)104, (byte)118, (byte)1, (byte)2, (byte)0, (byte)75, (byte) (-44), (byte)42}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)42;
      shortArray0[1] = (short) (byte)104;
      shortArray0[2] = (short) (byte)75;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (byte)104, (short)1459);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)85;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-44), (int) (byte)75);
      assertEquals(6, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)78, (byte) (-53), (byte)30, (byte)75, (byte)85}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1.766711509120914);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-16));
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)65, (-1652));
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)56, (byte)45, (byte)11, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      ArrayUtils.swap((long[]) null, (-2222), (-2222), (-2222));
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte) (-55), 584);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      int int0 = ArrayUtils.indexOf(longArray0, 2L);
      assertEquals(7, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.indexOf(floatArray0, (-83.79F), 101);
      assertFalse(int1 == int0);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-3590L);
      longArray0[1] = (-1729L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1211L), 0);
      assertEquals(2, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {(-3590L), (-1729L)}, longArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)43;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)43}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Double double0 = new Double(3147.605);
      assertEquals(3147.605, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), (-1));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(Integer.MAX_VALUE, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2065L);
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-2187L);
      longArray0[4] = 1820L;
      longArray0[5] = 2320L;
      longArray0[6] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 2320L);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2065L), 0L, (-1L), (-2187L), 1820L, 2320L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      int int0 = 34;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 34;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(34, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0.0F;
      objectArray0[6] = (Object) 0.0F;
      objectArray0[7] = (Object) 0.0F;
      Integer integer0 = new Integer((-1995));
      assertEquals((-1995), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) byte0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)90;
      intArray0[1] = (int) (byte)90;
      intArray0[2] = (int) (byte)90;
      intArray0[3] = (int) (byte)90;
      intArray0[4] = (int) (byte)90;
      intArray0[5] = (int) (byte)90;
      intArray0[6] = (int) (byte)90;
      intArray0[7] = (int) (byte)90;
      ArrayUtils.shift(intArray0, 9, 90, (int) (byte)90);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {90, 90, 90, 90, 90, 90, 90, 90}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3809L);
      longArray0[1] = 1225L;
      longArray0[2] = 2320L;
      longArray0[3] = 1L;
      longArray0[4] = (-59L);
      long[] longArray1 = ArrayUtils.add(longArray0, (-3809L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-3809L), 1225L, 2320L, 1L, (-59L)}, longArray0);
      assertArrayEquals(new long[] {(-3809L), 1225L, 2320L, 1L, (-59L), (-3809L)}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.shift(longArray1, 0, 0, 0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-3809L), 1225L, 2320L, 1L, (-59L)}, longArray0);
      assertArrayEquals(new long[] {(-3809L), 1225L, 2320L, 1L, (-59L), (-3809L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2320L;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertEquals(1, objectArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      Character[] characterArray0 = new Character[10];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(10, characterArray0.length);
      assertEquals(10, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 790;
      intArray0[2] = 29;
      intArray0[3] = 3968;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray1, (Object) null);
      assertEquals(10, characterArray0.length);
      assertEquals(10, characterArray1.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(10, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}", bitSet0.toString());
      assertEquals(10, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.swap(intArray0, 0, 790, (-273));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 790, 29, 3968, 0, 0, 0, 0}, intArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray1, 'H');
      assertEquals(10, characterArray0.length);
      assertEquals(10, characterArray1.length);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'}, charArray0);
      assertNotNull(charArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(10, characterArray0.length);
      assertEquals(10, characterArray1.length);
      assertEquals(10, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(3147.605);
      assertEquals(3147.605, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3147.605, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(105.91280432534);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(105.91280432534, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3147.605, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-535.74090857666));
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((-535.74090857666), (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-928.0));
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((-928.0), (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[0]);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(3147.605, (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1845.8);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertEquals(1845.8, (double)double7, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((-928.0));
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals((-928.0), (double)double8, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, doubleArray0[0]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 482, (-81), 2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1839;
      shortArray0[3] = (short) (-1974);
      shortArray0[4] = (short) (-1339);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1839, (short) (-1974), (short) (-1339), (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1949.2132786081);
      doubleArray0[1] = (-452.093373197955);
      doubleArray0[2] = 11.101;
      doubleArray0[3] = 11.101;
      doubleArray0[4] = 11.101;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      
      ArrayUtils.swap((boolean[]) null, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1472L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 145L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {145L}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.swap(floatArray0, 1, 740, 2846);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '`');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-2212.927));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2212.927)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-6205);
      shortArray0[1] = (short)1045;
      shortArray0[2] = (short) (-1996);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)53;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-6205), (short)1045, (short) (-1996), (short)0, (short)53}, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-6205);
      longArray0[1] = (long) (short) (-6205);
      longArray0[2] = (long) (short)53;
      longArray0[3] = (long) (short)1045;
      longArray0[4] = (long) (short)1045;
      long[] longArray1 = ArrayUtils.add(longArray0, (-249L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-6205L), (-6205L), 53L, 1045L, 1045L}, longArray0);
      assertArrayEquals(new long[] {(-6205L), (-6205L), 53L, 1045L, 1045L, (-249L)}, longArray1);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      MockRandom mockRandom0 = new MockRandom((-7L));
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-7L);
      doubleArray0[1] = (double) (-7L);
      doubleArray0[2] = (double) (-528);
      doubleArray0[3] = (double) (-528);
      doubleArray0[4] = (double) (-528);
      doubleArray0[5] = (double) (-528);
      doubleArray0[6] = (double) (-7L);
      doubleArray0[7] = (double) (-528);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-7.0), (-528.0), (-528.0), (-528.0), (-528.0), (-7.0), (-528.0), (-7.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1812.72F), (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(doubleArray0, (-1677), 4, 2173);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'G', (int) (byte) (-63));
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Character character0 = new Character('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) character0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.insert((int) character0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)254;
      shortArray0[1] = (short) (-1223);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-816);
      shortArray0[4] = (short) (-850);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)254, (short) (-1223), (short)0, (short) (-816), (short) (-850)}, shortArray0);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'b');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      long long0 = 0L;
      Long long1 = new Long(0L);
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      longArray0[1] = long2;
      Long long3 = new Long((-1845L));
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      longArray0[3] = long4;
      Long long5 = new Long((long) longArray0[2]);
      longArray0[4] = long5;
      Long[] longArray1 = ArrayUtils.addFirst(longArray0, (Long) long0);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.lastIndexOf((char[]) null, 'Q');
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1845L);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) long0;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = (double) long0;
      doubleArray0[5] = (double) long0;
      doubleArray0[6] = (double) 'Q';
      doubleArray0[7] = (double) long0;
      MockRandom mockRandom0 = new MockRandom((-7L));
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 81.0, 0.0, 0.0, 81.0, 0.0, (-1845.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.add(booleanArray0, true);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '}';
      charArray0[2] = '!';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-6);
      ArrayUtils.toPrimitive((Short[]) null, (short)1);
      double[] doubleArray0 = new double[1];
      byteArray0[1] = (byte) (-31);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-109), (int) (byte) (-31));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)90;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)90;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short)1;
      longArray0[7] = (long) (short)1;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      ArrayUtils.shift(booleanArray1, 70, 70, (-282));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      ArrayUtils.swap(floatArray0, (-5225), 1, 1);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (-1431655764), 3335);
      Integer integer0 = new Integer(3335);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-432.706355);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-432.706355), (-386));
      assertEquals(1, bitSet0.length());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-343));
      int int1 = ArrayUtils.indexOf(doubleArray0, 3.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      ArrayUtils.reverse((float[]) null, 1231, 1231);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)221;
      shortArray0[1] = (short) (-2061);
      shortArray0[2] = (short)221;
      ArrayUtils.shift(shortArray0, (-6));
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)221);
      assertEquals("{0, 2}", bitSet0.toString());
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-2061));
      assertArrayEquals(new short[] {(short)221, (short)221}, shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-9);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 685, 685);
      long[] longArray0 = new long[0];
      ArrayUtils.indexesOf(longArray0, (long) 685);
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      ArrayUtils.subarray((short[]) null, 1363, 1363);
      byte byte0 = (byte)49;
      Byte byte1 = Byte.valueOf((byte)49);
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[5] = byte2;
      byteArray0[6] = byte1;
      Byte byte3 = new Byte((byte)20);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-677), byte3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -677, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      ArrayUtils.indexesOf(doubleArray0, 1.0, 4794);
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      ArrayUtils.toMap((Object[]) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.removeElements(shortArray0, shortArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (short)98);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "k9[dk";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-265.619);
      doubleArray0[1] = (-265.619);
      doubleArray0[2] = (-265.619);
      doubleArray0[3] = (double) 91;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 3968.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-265.619), (-265.619), (-265.619), 91.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 2013265920, 2013265920, (-2222));
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-55);
      byteArray0[7] = (byte) (-55);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 2013265920, (-722));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ArrayUtils.reverse(objectArray0, 100, 3969);
      Object object0 = ArrayUtils.get(objectArray0, 100);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1688, 1688, (-2222));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-59);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1688, (-722));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      ArrayUtils.toMap((Object[]) null);
      double[] doubleArray0 = new double[1];
      ArrayUtils.indexOf(doubleArray0, 885.48573407, 13);
      ArrayUtils.swap((float[]) null, 13, (-1), 3457);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-677), (int) (short)1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      Byte byte1 = new Byte((byte) (-62));
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)1}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)1);
      ArrayUtils.get(byteArray0, 46, byte0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-639), (int) (short)1);
      assertArrayEquals(new short[] {(short)1}, shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 46;
      longArray0[2] = (long) (short)1;
      ArrayUtils.indexesOf(longArray0, (-1L), 1766);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (-3543.7433141653);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (-265.619);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {1.0, (-3543.7433141653), (-265.619)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (-1472L);
      longArray0[2] = (-381L);
      longArray0[3] = (-2253L);
      longArray0[4] = 53L;
      longArray0[5] = (-1661L);
      longArray0[6] = (-1306L);
      longArray0[7] = 1L;
      longArray0[8] = (-3162L);
      ArrayUtils.shift(longArray0, 34);
      assertArrayEquals(new long[] {(-381L), (-2253L), 53L, (-1661L), (-1306L), 1L, (-3162L), 1L, (-1472L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-528);
      ArrayUtils.reverse(intArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-982.83F);
      floatArray0[1] = (-982.83F);
      floatArray0[2] = (float) (-528);
      floatArray0[3] = (float) 0;
      ArrayUtils.isEmpty(floatArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-528);
      ArrayUtils.shift(longArray0, (-528));
      Long long0 = new Long((-60L));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      Double double0 = new Double(91.0);
      ArrayUtils.isSameType(double0, double0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 276.887570131;
      doubleArray0[1] = (double) 0;
      doubleArray0[6] = 91.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 91.0, 0, 1677.74);
      assertEquals(0, int0);
      
      ArrayUtils.addFirst(booleanArray0, false);
      ArrayUtils.add(longArray0, 0, (long) 0);
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, false);
      assertEquals(1, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      Double double0 = new Double(91.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 276.887570131;
      doubleArray0[1] = (double) 0;
      doubleArray0[6] = 91.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[8] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 91.0, 0, 276.887570131);
      assertEquals(0, int0);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(6, booleanArray2.length);
      
      ArrayUtils.add(longArray0, 0, (long) 0);
      boolean[] booleanArray3 = ArrayUtils.addFirst(booleanArray1, false);
      assertEquals(1, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2.106052901032398);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2750.7645847171934);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = '0';
      charArray0[2] = 'Q';
      ArrayUtils.shuffle(charArray0);
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', 'Q', '0'}, charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) '\u0000';
      longArray0[2] = (long) 'Q';
      longArray0[3] = (long) 'Q';
      longArray0[4] = (long) '\u0000';
      ArrayUtils.swap(longArray0, (-502), (-502));
      assertArrayEquals(new long[] {81L, 0L, 81L, 81L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 3035L;
      longArray0[2] = (-3222L);
      longArray0[3] = 2731L;
      longArray0[4] = (-1922L);
      ArrayUtils.shift(longArray0, (-672));
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3222L);
      floatArray0[1] = (float) 3035L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 3035L;
      floatArray0[4] = (float) 3035L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}r&\\G.2{6y";
      stringArray0[1] = "{}";
      long[] longArray0 = new long[3];
      ArrayUtils.swap(longArray0, (-2813), 779, 779);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      ArrayUtils.toPrimitive((Double[]) null, (-1225.3728351407));
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, (-999), 2172, 34);
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      ArrayUtils.reverse(charArray0, 12, (-1688));
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1806.0F;
      ArrayUtils.isEmpty(floatArray0);
      ArrayUtils.shift((long[]) null, 3969);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-329), (-329), 459);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.addFirst(booleanArray0, true);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'b';
      floatArray0[1] = (float) (byte)97;
      floatArray0[2] = (float) (byte)97;
      floatArray0[3] = (float) (byte)97;
      ArrayUtils.isSorted(floatArray0);
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (byte)97);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((String[]) null, 2106);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2106, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ArrayUtils.get(objectArray0, 5250);
      Double double0 = new Double(5250);
      ArrayUtils.nullToEmpty((Double[]) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-22616);
      shortArray0[1] = (short) (-48);
      ArrayUtils.nullToEmpty(shortArray0);
      ArrayUtils.removeAllOccurences((int[]) null, Integer.MAX_VALUE);
      Boolean boolean0 = Boolean.valueOf("s3LQ");
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) boolean0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      ArrayUtils.swap((Object[]) null, (int) (short)0, (int) (short)0, (-873));
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.reverse(arrayUtils0.EMPTY_OBJECT_ARRAY);
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shuffle(shortArray0);
      ArrayUtils.indexesOf((long[]) null, (-2147483648L));
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1269.2F);
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2877.0F));
      assertArrayEquals(new float[] {(-2877.0F), 1269.2F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2385);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-452.093373197955);
      doubleArray0[2] = (-452.093373197955);
      doubleArray0[3] = 927.11;
      doubleArray0[4] = (-452.093373197955);
      doubleArray0[5] = 547.0;
      ArrayUtils.indexesOf(doubleArray0, (-1949.2132786081), 1081);
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(114.0F);
      floatArray0[0] = float0;
      Float float1 = new Float(48.0F);
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {114.0F, 48.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1081;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 723);
      assertArrayEquals(new int[] {1081}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1072);
      assertNull(shortArray0);
      
      Character.valueOf('0');
      ArrayUtils.shift(charArray0, (-479), 14, 6);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      ArrayUtils.toMap((Object[]) null);
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse(doubleArray0);
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-1), (-1));
      ArrayUtils.removeAll(intArray0, intArray0);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      ArrayUtils.reverse((Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
      char[] charArray0 = new char[0];
      ArrayUtils.removeElements(charArray0, charArray0);
      ArrayUtils.lastIndexOf((int[]) null, 2052, 0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 2052);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2052, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shift(longArray0, 575);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      ArrayUtils.lastIndexOf((int[]) null, 2886, 2886);
      ArrayUtils.contains((short[]) null, (short)0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2886;
      longArray0[1] = (long) 2886;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      ArrayUtils.shift(longArray0, 46);
      ArrayUtils.isNotEmpty((int[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2886L;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0L;
      ArrayUtils.lastIndexOf(doubleArray0, (double) 2886, 1.0);
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 723);
      assertNull(intArray0);
  }
}
