/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:28:16 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)2, byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = 177.0;
      doubleArray0[4] = (double) (byte)2;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 177.0, 2.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.7;
      doubleArray2[1] = (double) (byte)2;
      doubleArray2[2] = 177.0;
      doubleArray2[3] = (double) (byte)2;
      doubleArray2[4] = (double) (byte)2;
      doubleArray2[5] = (double) (byte)2;
      doubleArray2[6] = 177.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray2, (double) (byte)2, 0.0);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.7, 2.0, 177.0, 2.0, 2.0, 2.0, 177.0}, doubleArray2, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt(2.0);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(177.0);
      assertEquals((short)177, mutableInt1.shortValue());
      assertEquals(177, (int)mutableInt1.toInteger());
      assertEquals(177, (int)mutableInt1.getValue());
      assertEquals(177.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-79), mutableInt1.byteValue());
      assertEquals(177, mutableInt1.intValue());
      assertEquals(177L, mutableInt1.longValue());
      assertEquals("177", mutableInt1.toString());
      assertEquals(177.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(4306);
      assertEquals("4306", mutableInt2.toString());
      assertEquals(4306.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(4306, mutableInt2.intValue());
      assertEquals(4306.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(4306L, mutableInt2.longValue());
      assertEquals((short)4306, mutableInt2.shortValue());
      assertEquals(4306, (int)mutableInt2.getValue());
      assertEquals(4306, (int)mutableInt2.toInteger());
      assertEquals((byte) (-46), mutableInt2.byteValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(2.0);
      assertEquals(2L, mutableInt3.longValue());
      assertEquals("2", mutableInt3.toString());
      assertEquals(2, (int)mutableInt3.toInteger());
      assertEquals(2, (int)mutableInt3.getValue());
      assertEquals((byte)2, mutableInt3.byteValue());
      assertEquals(2.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt3.shortValue());
      assertEquals(2, mutableInt3.intValue());
      assertNotNull(mutableInt3);
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((int) (byte)2);
      assertEquals(2.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt4.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt4.shortValue());
      assertEquals(2, mutableInt4.intValue());
      assertEquals(2L, mutableInt4.longValue());
      assertEquals("2", mutableInt4.toString());
      assertEquals((byte)2, mutableInt4.byteValue());
      assertEquals(2, (int)mutableInt4.getValue());
      assertEquals(2, (int)mutableInt4.toInteger());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(4306);
      assertEquals(4306, (int)mutableInt5.toInteger());
      assertEquals(4306, (int)mutableInt5.getValue());
      assertEquals((byte) (-46), mutableInt5.byteValue());
      assertEquals(4306.0, mutableInt5.doubleValue(), 0.01);
      assertEquals("4306", mutableInt5.toString());
      assertEquals(4306L, mutableInt5.longValue());
      assertEquals(4306.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(4306, mutableInt5.intValue());
      assertEquals((short)4306, mutableInt5.shortValue());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertTrue(mutableInt5.equals((Object)mutableInt2));
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = null;
      try {
        mutableInt6 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-2195));
      assertNotNull(long0);
      assertEquals((-2195L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short) (-2));
      assertNotNull(long1);
      assertEquals((-2L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(51L);
      assertNotNull(long2);
      assertEquals(51L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long((-2195));
      assertNotNull(long3);
      assertEquals((-2195L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      
      longArray0[3] = long3;
      Long long4 = new Long((-1533L));
      assertNotNull(long4);
      assertEquals((-1533L), (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, ";E6q1oF`@j");
      assertEquals(6, longArray0.length);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-109));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)113, (byte) (-2), (byte)108, (byte)0, (byte)1}, byteArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (int) (byte)0, (short)1033);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)1033}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      short[] shortArray0 = new short[4];
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertFalse(bitSet1.isEmpty());
      assertEquals(6, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(6, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet1.toString());
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)122;
      shortArray1[1] = (short)1389;
      shortArray1[2] = (short)2112;
      shortArray1[3] = (short)0;
      shortArray1[4] = (short)103;
      shortArray1[5] = (short) (-1);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)122, (short)1389, (short)2112, (short)103, (short) (-1)}, shortArray2);
      assertArrayEquals(new short[] {(short)122, (short)1389, (short)2112, (short)0, (short)103, (short) (-1)}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (short)2112);
      assertNull(longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)122;
      intArray0[1] = (int) (short)1389;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 2440, (-2793));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2440, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[3] = '&';
      charArray0[4] = '?';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '\u0000';
      intArray0[1] = (int) '&';
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 38}, intArray0);
      assertArrayEquals(new int[] {0, 38, 0, 38}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '?';
      objectArray0[1] = (Object) '?';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "org.apache.commons.lang3.ClassUtils", 2);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      Float float0 = new Float(1002.69706228);
      assertNotNull(float0);
      assertEquals(1002.6971F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(floatArray0, comparator0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Float float0 = new Float(949.835F);
      assertNotNull(float0);
      assertEquals(949.835F, (float)float0, 0.01F);
      
      Float float1 = new Float(Float.NaN);
      assertNotNull(float1);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-1654.4095F));
      assertNotNull(float2);
      assertEquals((-1654.4095F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((-2655.31084854));
      assertNotNull(float3);
      assertEquals((-2655.3108F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 51}, intArray0);
      assertTrue(boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) (byte)51;
      floatArray0[4] = 949.835F;
      floatArray0[5] = (-1654.4095F);
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 58.0F, 51.0F, 949.835F, (-1654.4095F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '1';
      charArray0[3] = '1';
      charArray0[1] = 'o';
      Float float0 = new Float((float) '\u0000');
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object1);
      assertEquals(0.0F, object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertEquals(0.0F, object2);
      
      String string0 = ArrayUtils.toString(object2);
      assertNotNull(string0);
      assertEquals("0.0", string0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', 'o', '\u0000', '1'}, charArray0);
      assertArrayEquals(new char[] {':', 'o', '\u0000', '1'}, charArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ':';
      intArray0[1] = 15;
      intArray0[2] = 133;
      intArray0[3] = (int) 'o';
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {58, 15, 133, 111, 58, 15, 133, 111}, intArray1);
      assertArrayEquals(new int[] {58, 15, 133, 111}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) "0.0", 15);
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 133, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.swap((int[]) null, 347, 347, (-2652));
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)70);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)70}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)70;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 759.0231721, 0.7);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {70.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34, mutableInt0.intValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)34, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      
      mutableInt0.add(0);
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34, mutableInt0.intValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)34, mutableInt0.shortValue());
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 34;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 34;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {34L, 0L, 0L, 34L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 8.826670143;
      doubleArray0[1] = 8.826670143;
      doubleArray0[2] = (double) (-199L);
      boolean boolean3 = ArrayUtils.contains(doubleArray0, 2672.15392383, 8.826670143);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {8.826670143, 8.826670143, (-199.0)}, doubleArray0, 0.01);
      assertFalse(boolean3);
      
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, (Object) "af}pmju-kq$uPQy!8");
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      Float float0 = new Float((float) (byte)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[9];
      Float float1 = new Float((float) (byte)0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      Float float2 = new Float(73.0);
      assertNotNull(float2);
      assertEquals(73.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[5] = float2;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      floatArray0[8] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[4];
      floatArray2[0] = (float) floatArray0[8];
      floatArray2[1] = (float) floatArray0[3];
      floatArray2[2] = (float) floatArray0[7];
      floatArray2[3] = 3223.71F;
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertEquals(4, floatArray3.length);
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3223.71F}, floatArray2, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (double) 3223.71F);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[2] = (Object) (-1);
      objectArray0[4] = (Object) character0;
      objectArray0[6] = (Object) 0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[6], (-36));
      assertEquals(7, objectArray0.length);
      assertEquals(6, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-334);
      shortArray0[1] = (short) (-45);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)794;
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1930;
      shortArray0[1] = (short) (-1759);
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1759);
      intArray0[1] = (int) (short) (-1759);
      intArray0[2] = (int) (short)1930;
      intArray0[3] = (int) (short) (-1759);
      ArrayUtils.shift(intArray0, (-1759), 2126280738, (-1462));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1930, (-1759), (-1759), (-1759)}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-1759);
      doubleArray0[1] = (double) (short)1930;
      doubleArray0[2] = (double) 2126280738;
      doubleArray0[3] = (double) 2126280738;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1241.08284747, (double) (short)1930);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1759.0), 1930.0, 2.126280738E9, 2.126280738E9}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1930;
      objectArray0[1] = (Object) 1930.0;
      objectArray0[2] = (Object) 1930;
      objectArray0[3] = (Object) (short) (-1759);
      objectArray0[4] = (Object) (-1759);
      objectArray0[5] = (Object) 2.126280738E9;
      objectArray0[6] = (Object) (short)1930;
      Object[] objectArray1 = new Object[9];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 2.126280738E9;
      objectArray1[1] = (Object) (short) (-1759);
      objectArray1[2] = (Object) (-1759);
      objectArray1[3] = (Object) 2.126280738E9;
      objectArray1[4] = (Object) 1930;
      objectArray1[5] = (Object) (short) (-1759);
      objectArray1[6] = (Object) 1930.0;
      objectArray1[7] = (Object) (-1759);
      objectArray1[8] = (Object) 2.126280738E9;
      Object object0 = ArrayUtils.get(objectArray1, 0);
      assertEquals(9, objectArray1.length);
      assertNotNull(object0);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2.126280738E9, object0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (-1759);
      Object object1 = new Object();
      assertNotNull(object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, objectArray0.length);
      assertNotNull(bitSet0);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)321;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)321, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)321, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1391.2301F);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      ArrayUtils.reverse(floatArray0, (int) (short)321, (-1246));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1391.2301F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'Q';
      ArrayUtils.shift(charArray0, 2146984000);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'+', 'Q'}, charArray0);
      
      double[] doubleArray2 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (double) (short)0, (int) (short)0, (-1291.9));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray2.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (byte)112;
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) 'u';
      floatArray0[4] = (float) '\u0000';
      ArrayUtils.shift(floatArray0, (-1), (int) (byte)112, 620);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 112.0F, 58.0F, 117.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      ArrayUtils.reverse(longArray0, (-621), (-1312));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-621));
      assertNotNull(integer0);
      assertEquals((-621), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'u';
      intArray0[2] = 620;
      int int0 = ArrayUtils.indexOf(intArray0, (-1552), 117);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), 117, 620}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) (byte)112;
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) 'u';
      floatArray0[4] = (float) '\u0000';
      ArrayUtils.shift(floatArray0, (-1), (int) (byte)112, 620);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {58.0F, 112.0F, 58.0F, 117.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) ':';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 58L}, longArray0);
      
      ArrayUtils.reverse(byteArray0, (-4991), (int) (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'u';
      intArray0[2] = 620;
      intArray0[3] = (-4991);
      intArray0[4] = (-4991);
      intArray0[5] = (int) 'u';
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 620, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-745.6F));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'X');
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      byte[] byteArray0 = new byte[0];
      int int0 = 79;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2124974727, 79);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5674.3;
      doubleArray0[1] = (double) 'X';
      doubleArray0[2] = (double) 79;
      doubleArray0[3] = (double) (-745.6F);
      doubleArray0[4] = (double) 2124974727;
      doubleArray0[5] = 3934.2926;
      int int1 = 1214;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1214);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1214, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      short short0 = (short)0;
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)0, (int) (short) (-3245));
      ArrayUtils.shift(booleanArray0, (-1149), 1006, (-42));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Short[] shortArray1 = new Short[2];
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray1[0] = short1;
      Short short2 = new Short((short)1);
      assertNotNull(short2);
      assertEquals((short)1, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray1[1] = short2;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)1}, shortArray2);
      
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Integer integer0 = new Integer((-42));
      assertNotNull(integer0);
      assertEquals((-42), (int)integer0);
      
      Float[] floatArray0 = ArrayUtils.removeElements((Float[]) null, (Float[]) null);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) short0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2477));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)3, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (-800.2F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (short)3;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (float) (short)0;
      floatArray1[3] = (float) (short)0;
      floatArray1[4] = (float) (short) (-2477);
      floatArray1[5] = (float) (short)3;
      floatArray1[6] = (-800.2F);
      floatArray1[7] = (float) (short)0;
      floatArray1[8] = (float) (-1);
      float[] floatArray2 = ArrayUtils.insert((int) (short)3, floatArray0, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals(15, floatArray2.length);
      assertNotNull(floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, (-2477.0F), 3.0F, (-800.2F), 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-800.2F), (-1.0F), 3.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)3, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 4;
      longArray0[1] = 4769L;
      longArray0[2] = (long) 4;
      longArray0[3] = (long) 4;
      longArray0[4] = 1L;
      longArray0[5] = (long) 4;
      long[] longArray1 = ArrayUtils.insert(4, longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {4L, 4769L, 4L, 4L, 1L, 4L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double[] doubleArray0 = new Double[0];
      try { 
        Short.decode("S");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"S\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3577);
      shortArray0[1] = (short)4487;
      shortArray0[2] = (short) (-1231);
      shortArray0[3] = (short)128;
      shortArray0[4] = (short) (-3219);
      shortArray0[5] = (short) (-1765);
      shortArray0[6] = (short)702;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3577), (short)4487, (short) (-1231), (short)128, (short) (-3219), (short) (-1765), (short)702}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short) (-3577));
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(4, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1624);
      assertNotNull(integer1);
      assertEquals(1624, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(9, integerArray0.length);
      assertNotNull(integer2);
      assertEquals(1624, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short)128);
      assertNotNull(integer3);
      assertEquals(128, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      String string0 = "null";
      try { 
        Integer.valueOf("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)50, (byte)70, (byte)120, (byte) (-1), (byte) (-28), (byte)20, (byte) (-126), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = 'U';
      charArray0[2] = 'g';
      charArray0[3] = ']';
      charArray0[4] = '0';
      charArray0[5] = '{';
      charArray0[6] = 'E';
      charArray0[7] = 'W';
      charArray0[8] = ')';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'0', 'U', 'g', ']', '0', '{', 'E', 'W', ')'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[2] = (long) 51;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 51L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 51;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)51;
      doubleArray0[6] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 51.0, 0.0, 51.0, 0.0, 51.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short) (-1), (int) (short)98, 2585);
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)98;
      intArray0[1] = (int) (short) (-3859);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)14;
      ArrayUtils.swap(byteArray0, 3, (int) (byte)38, (int) (byte)38);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)123, (byte)38, (byte)35, (byte) (-121), (byte)14}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)38);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte)35, (byte) (-121), (byte)14}, byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte)38, (byte)35, (byte) (-121), (byte)14}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)98;
      longArray0[1] = (long) 3;
      longArray0[2] = (long) (byte)123;
      ArrayUtils.shift(longArray0, (int) (short) (-3859));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {3L, 123L, 98L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) (byte)112;
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) 'u';
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, 294, 65);
      assertEquals(1, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      Float float0 = new Float(1342.6206595652416);
      assertNotNull(float0);
      assertEquals(1342.6206F, (float)float0, 0.01F);
      
      Float float1 = new Float(1342.6206595652416);
      assertNotNull(float1);
      assertEquals(1342.6206F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(240.80335);
      assertNotNull(float2);
      assertEquals(240.80334F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = float2;
      floatArray1[1] = float0;
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyFloat() , anyFloat());
      boolean boolean1 = ArrayUtils.isSorted(floatArray1, comparator0);
      assertEquals(2, floatArray1.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)321;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)321, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)321, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1391.2301F);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      ArrayUtils.shift(floatArray0, (int) (short)0, (int) (short)0, (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1391.2301F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)321;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 321L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.reverse(byteArray0, (-3727), (int) (short)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)77, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      int int0 = 1;
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-2684));
      assertNotNull(integer1);
      assertEquals((-2684), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertEquals(1, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      
      Integer integer4 = Integer.getInteger("", integer1);
      assertNotNull(integer4);
      assertEquals((-2684), (int)integer4);
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      
      Integer integer5 = new Integer(1);
      assertNotNull(integer5);
      assertEquals(1, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer3;
      integerArray0[1] = integer4;
      integerArray0[2] = integer5;
      Integer integer6 = new Integer((-905));
      assertNotNull(integer6);
      assertEquals((-905), (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      
      integerArray0[3] = integer6;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[1]);
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '>', (-2684));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer[] integerArray2 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray2.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(integerArray2);
      assertSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertSame(integerArray0, integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(integerArray2.equals((Object)integerArray1));
      assertFalse(integerArray0.equals((Object)integerArray1));
      
      ArrayUtils.reverse((long[]) null, int0, (-2170));
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-98), int0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (-3865.549071423241);
      ArrayUtils.reverse(doubleArray0, 17, 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, (-3865.549071423241)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-3865.549071423241));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {69.0, (-3865.549071423241)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3865.549071423241), 69.0, (-3865.549071423241)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray1, 1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 69.0;
      objectArray0[1] = (Object) (-3865.549071423241);
      objectArray0[2] = (Object) 69.0;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(127);
      assertNotNull(integer2);
      assertEquals(127, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(127);
      assertNotNull(integer3);
      assertEquals(127, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = Integer.getInteger(">RHAUU4'8[;1", integer3);
      assertNotNull(integer4);
      assertEquals(127, (int)integer4);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      
      Integer integer5 = new Integer((-310));
      assertNotNull(integer5);
      assertEquals((-310), (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer1);
      assertEquals(0, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer5));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '>', 8);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Integer[] integerArray2 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray2.length);
      assertNotNull(integerArray2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertNotSame(integerArray2, integerArray1);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray2.equals((Object)integerArray1));
      
      ArrayUtils.reverse((long[]) null, 17, 51);
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 120, 49);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ArrayUtils.shift(byteArray0, 1535);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)3;
      longArray0[1] = (long) (byte)3;
      longArray0[2] = (long) (byte)3;
      longArray0[3] = 75L;
      longArray0[4] = (long) (byte)3;
      ArrayUtils.shuffle(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {3L, 3L, 75L, 3L, 3L}, longArray0);
      
      Long[] longArray1 = new Long[9];
      Long long0 = new Long(3L);
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) 3L;
      Long long1 = new Long(75L);
      assertNotNull(long1);
      assertEquals(75L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray1[2] = long1;
      longArray1[3] = (Long) 3L;
      longArray1[4] = (Long) 3L;
      longArray1[5] = (Long) 3L;
      Long long2 = new Long(1996L);
      assertNotNull(long2);
      assertEquals(1996L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray1[6] = long2;
      longArray1[7] = (Long) 75L;
      longArray1[8] = (Long) 3L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(9, longArray2.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {3L, 3L, 75L, 3L, 3L, 3L, 1996L, 75L, 3L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)91;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)91;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (-2055.2807506);
      ArrayUtils.reverse(doubleArray0, (-531), 1643);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2055.2807506), 0.0, 91.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, 0.0);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift(charArray0, (int) (short)91);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (short)91;
      objectArray0[2] = (Object) '[';
      objectArray0[3] = (Object) (-2055.2807506);
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) '[';
      ArrayUtils.swap(objectArray0, (int) (short)0, (-1159), 50);
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 64;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) (-1256);
      doubleArray0[3] = 8.826670143;
      doubleArray0[4] = (double) (-1256);
      ArrayUtils.shift(doubleArray0, (-1256), 64, 810);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, 64.0, (-1256.0), 8.826670143, (-1256.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-260.57228), (-1256.0));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, 64.0, (-1256.0), 8.826670143, (-1256.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Boolean[] booleanArray1 = ArrayUtils.removeElement((Boolean[]) null, (Object) character0);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 64;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) (-1256);
      doubleArray0[3] = 8.826670143;
      doubleArray0[4] = (double) (-1256);
      ArrayUtils.shift(doubleArray0, (-1256), 64, 810);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, 64.0, (-1256.0), 8.826670143, (-1256.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-260.57228), (-1256.0));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, 64.0, (-1256.0), 8.826670143, (-1256.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      short short0 = (short)0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0}, shortArray0);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 810;
      floatArray0[1] = (float) 810;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-620), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -620, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 962.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 2, 962, (-1190));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 2;
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray1);
      assertEquals(0, intArray2.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {0, 2, 2}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray3 = ArrayUtils.removeAll(intArray1, intArray1);
      assertEquals(1, intArray3.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertArrayEquals(new int[] {2}, intArray3);
      assertArrayEquals(new int[] {0, 2, 2}, intArray1);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      Integer integer0 = Integer.valueOf(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)115;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)115;
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)115, (short) (-1), (short)115, (short) (-1), (short) (-1)}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-81));
      assertNotNull(byte0);
      assertEquals((byte) (-81), (byte)byte0);
      
      Byte byte1 = new Byte((byte)56);
      assertNotNull(byte1);
      assertEquals((byte)56, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)108);
      assertNotNull(byte2);
      assertEquals((byte)108, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-81));
      assertNotNull(byte3);
      assertEquals((byte) (-81), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte) (-1));
      assertNotNull(byte4);
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)56);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)108}, byteArray1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(624);
      assertNotNull(integer1);
      assertEquals(624, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[2] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {34, 34, 624}, intArray0);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-81);
      shortArray1[1] = (short) (-1);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)115, (short) (-1), (short)115, (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-81), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short)115, (short)115, (short) (-1), (short) (-1)}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = ArrayUtils.get(objectArray0, 471, object1);
      assertEquals(4, objectArray0.length);
      assertNotNull(object2);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 471, object0);
      assertEquals(4, objectArray0.length);
      assertNotNull(object3);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertSame(object0, object3);
      assertSame(object3, object0);
      assertNotSame(object3, object1);
      assertNotSame(object3, object2);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 471;
      intArray0[1] = 471;
      intArray0[2] = 471;
      intArray0[3] = 471;
      intArray0[4] = (-2491);
      intArray0[5] = 471;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 59, 471);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {471, 471, 471, 471, (-2491), 471}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)37;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)111, (byte)106, (byte)82, (byte)116, (byte)6, (byte)2, (byte) (-86), (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)111, (byte)106, (byte)82, (byte)116, (byte)6, (byte)2, (byte) (-86), (byte)37}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-2195));
      assertNotNull(long0);
      assertEquals((-2195L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short) (-2));
      assertNotNull(long1);
      assertEquals((-2L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(51L);
      assertNotNull(long2);
      assertEquals(51L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = new Long((-2195));
      assertNotNull(long3);
      assertEquals((-2195L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      Long long4 = new Long((-1533L));
      assertNotNull(long4);
      assertEquals((-1533L), (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      
      longArray0[4] = long4;
      Long long5 = new Long((-2195));
      assertNotNull(long5);
      assertEquals((-2195L), (long)long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long0));
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 44L);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2195L), (-2L), 51L, (-2195L), (-1533L), (-2195L)}, longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertArrayEquals(new char[] {'^'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '^';
      intArray0[1] = (-1273);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2195));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {94, (-1273)}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      byteArray0[2] = (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) 0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (-42));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[0] = doubleArray0[0];
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte)0;
      Object object0 = ArrayUtils.get((Object[]) byteArray1, (-42), (Object) short0);
      assertEquals(6, byteArray1.length);
      assertNotNull(object0);
      assertEquals((short)0, object0);
      
      Object object1 = ArrayUtils.get((Object[]) byteArray1, 1155, (Object) doubleArray0[0]);
      assertEquals(6, byteArray1.length);
      assertEquals(2, doubleArray0.length);
      assertNotNull(object1);
      assertEquals(2623.11219682622, object1);
      assertTrue(object1.equals((Object)double0));
      assertFalse(object1.equals((Object)double1));
      
      ArrayUtils.reverse(intArray0, 2170, 9);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 51}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = 'i';
      charArray0[2] = '|';
      charArray0[3] = 'H';
      charArray0[4] = '-';
      charArray0[5] = 'B';
      charArray0[6] = '|';
      charArray0[7] = 'x';
      ArrayUtils.shift(charArray0, (-2704), 78, (int) (byte)0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'7', 'i', '|', 'H', '-', 'B', '|', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = Integer.valueOf(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      mutableInt0.setValue((Number) int0);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      
      mutableInt0.add(0);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.get((Object[]) integerArray0, (-1938), (Object) mutableInt0);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, mutableInt1.intValue());
      assertEquals(34.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("34", mutableInt1.toString());
      assertEquals(34L, mutableInt1.longValue());
      assertEquals(34.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)34, mutableInt1.shortValue());
      assertEquals(34, (int)mutableInt1.getValue());
      assertEquals(34, (int)mutableInt1.toInteger());
      assertEquals((byte)34, mutableInt1.byteValue());
      assertEquals(9, integerArray0.length);
      assertNotNull(mutableInt1);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertFalse(integer0.equals((Object)int1));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mutableInt1;
      MutableInt mutableInt2 = (MutableInt)ArrayUtils.get(objectArray0, 0, (Object) integer0);
      assertEquals("34", mutableInt2.toString());
      assertEquals(34L, mutableInt2.longValue());
      assertEquals(34, (int)mutableInt2.getValue());
      assertEquals((byte)34, mutableInt2.byteValue());
      assertEquals(34, (int)mutableInt2.toInteger());
      assertEquals(34.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(34, mutableInt2.intValue());
      assertEquals(34.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)34, mutableInt2.shortValue());
      assertEquals(1, objectArray0.length);
      assertNotNull(mutableInt2);
      assertSame(mutableInt2, mutableInt1);
      assertSame(mutableInt2, mutableInt0);
      assertFalse(integer0.equals((Object)int1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = int0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = int0;
      ArrayUtils.reverse(intArray0, 0, 0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 34, 0, 0, 34}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Float float0 = new Float(74.48586);
      assertNotNull(float0);
      assertEquals(74.48586F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) 1);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float(1.0);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Float float4 = new Float((double) 1);
      assertNotNull(float4);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float4;
      floatArray0[1] = float3;
      floatArray0[2] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      
      ArrayUtils.swap(intArray0, (-2145944812), (-2146070955), 5006);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 266.063F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {266.063F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1360);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (short) (-1360), 45, (-2337));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3186;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = 3186;
      intArray0[3] = (int) (short) (-684);
      intArray0[4] = (-866);
      ArrayUtils.reverse(intArray0, 2272, (int) (short) (-28744));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3186, (-1), 3186, (-684), (-866)}, intArray0);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3186, (-1), 3186, (-684), (-866)}, intArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)656);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)656}, shortArray0);
      
      boolean boolean4 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3186, (-1), 3186, (-684), (-866)}, intArray0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)113;
      byteArray1[2] = (byte)110;
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-3);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)113, (byte)110, (byte)55, (byte)0, (byte) (-3)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1151));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1151)}, shortArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1151);
      longArray0[1] = (long) (short) (-1151);
      longArray0[2] = (long) (short) (-1151);
      longArray0[3] = (long) (short) (-1151);
      longArray0[4] = (long) (short) (-1151);
      longArray0[5] = (long) (short) (-1151);
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      ArrayUtils.reverse(longArray0, 47, (-1312));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1151L), (-1151L), (-1151L), (-1151L), (-1151L), (-1151L), 1L, 1L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.insert(5111, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1312), shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1312, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      char[] charArray0 = new char[4];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Double double0 = new Double(100.0);
      assertNotNull(double0);
      assertEquals(100.0, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(true, object0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)4827, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      AbstractMap.SimpleImmutableEntry<Integer, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "Array and element cannot both be null");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Integer integer0 = new Integer(68);
      assertNotNull(integer0);
      assertEquals(68, (int)integer0);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, ";8uym$$O");
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(abstractMap_SimpleImmutableEntryArray0, (int) 4827);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4827, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1438);
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      Double double0 = new Double(1438);
      assertNotNull(double0);
      assertEquals(1438.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Character character0 = new Character('&');
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      Character character1 = Character.valueOf('&');
      assertNotNull(character1);
      assertEquals('&', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2735);
      intArray0[1] = (int) '&';
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (int) '&';
      intArray0[5] = (-1);
      intArray0[6] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1482);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2735), 38, (-1), (-1), 38, (-1), 0}, intArray0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1438);
      assertNotNull(integer0);
      assertEquals(1438, (int)integer0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'&', '&', '&'}, charArray0);
      assertArrayEquals(new char[] {'&', '&'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      Character character1 = new Character('>');
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (byte)56;
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (short)0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray1, 0.01F);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(1, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) '&';
      intArray0[2] = 2;
      intArray0[3] = (-2236);
      intArray0[4] = 233;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {63, 38, 2, (-2236), 233}, intArray0);
      assertArrayEquals(new int[] {63, 38, 63, 38, 2, (-2236), 233, 2, (-2236), 233}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 38;
      objectArray0[1] = (Object) 63;
      objectArray0[2] = (Object) (-2236);
      objectArray0[3] = (Object) (-2236);
      objectArray0[4] = (Object) (-2236);
      objectArray0[5] = (Object) 63;
      Object[] objectArray1 = new Object[9];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 2;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[1] = object0;
      Double double0 = new Double((-2288.0));
      assertNotNull(double0);
      assertEquals((-2288.0), (double)double0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(double0);
      assertEquals("-2288", mutableInt0.toString());
      assertEquals((-2288.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2288), (int)mutableInt0.getValue());
      assertEquals((byte)16, mutableInt0.byteValue());
      assertEquals((-2288), (int)mutableInt0.toInteger());
      assertEquals((-2288.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2288), mutableInt0.intValue());
      assertEquals((short) (-2288), mutableInt0.shortValue());
      assertEquals((-2288L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray1, (Object) mutableInt0);
      assertEquals("-2288", mutableInt0.toString());
      assertEquals((-2288.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2288), (int)mutableInt0.getValue());
      assertEquals((byte)16, mutableInt0.byteValue());
      assertEquals((-2288), (int)mutableInt0.toInteger());
      assertEquals((-2288.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2288), mutableInt0.intValue());
      assertEquals((short) (-2288), mutableInt0.shortValue());
      assertEquals((-2288L), mutableInt0.longValue());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(9, objectArray1.length);
      assertNotNull(bitSet0);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray1[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[3] = '&';
      charArray0[4] = '?';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '\u0000';
      intArray0[1] = (int) '&';
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 38}, intArray0);
      assertArrayEquals(new int[] {0, 38, 0, 38}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '?';
      objectArray0[1] = (Object) '?';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "org.apache.commons.lang3.ClassUtils", 2);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short)0, (int) (byte) (-88));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 266;
      longArray0[1] = (long) (byte) (-88);
      longArray0[2] = (-711L);
      longArray0[3] = (long) 266;
      longArray0[4] = (long) (byte) (-88);
      ArrayUtils.shift(longArray0, 1);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-88L), 266L, (-88L), (-711L), 266L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-2441.1052F);
      floatArray0[0] = 51.0F;
      floatArray0[3] = 334.0322F;
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 38.861121831498316);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.7, 625.701578154);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-278L);
      longArray0[2] = 757L;
      longArray0[3] = (-2L);
      longArray0[4] = 1879L;
      longArray0[5] = (-1725L);
      longArray0[6] = 0L;
      longArray0[7] = (-1L);
      ArrayUtils.shift(longArray0, 2);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), 0L, (-278L), 757L, (-2L), 1879L, (-1725L)}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, 8192);
      assertEquals(3, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      Float float0 = new Float(949.835F);
      assertNotNull(float0);
      assertEquals(949.835F, (float)float0, 0.01F);
      
      Float float1 = new Float(Float.NaN);
      assertNotNull(float1);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-1654.4095F));
      assertNotNull(float2);
      assertEquals((-1654.4095F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float((-2655.31084854));
      assertNotNull(float3);
      assertEquals((-2655.3108F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)51;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) float1;
      objectArray0[4] = (Object) float0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-694));
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 1624, (-1), (int) (byte)0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertEquals(0, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      Character[] characterArray0 = new Character[6];
      char char0 = '_';
      Character character0 = Character.valueOf('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('_');
      assertNotNull(character1);
      assertEquals('_', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('k');
      assertNotNull(character2);
      assertEquals('k', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character1);
      assertNotNull(character3);
      assertEquals('_', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = new Character('z');
      assertNotNull(character4);
      assertEquals('z', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character1);
      assertNotNull(character5);
      assertEquals('_', (char)character5);
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character3));
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(6, characterArray1.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) char0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {95L}, longArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1575.065), (double) character1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character5));
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      long[] longArray0 = new long[21];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)0, (int) (byte)0);
      assertEquals(21, longArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (double) 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = '?';
      charArray0[4] = '+';
      charArray0[5] = 'm';
      charArray0[6] = '?';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3228), 944);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'?', 'o', 'o', '?', '+', 'm', '?'}, charArray0);
      assertArrayEquals(new char[] {'?', 'o', 'o', '?', '+', 'm', '?'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 944);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)23, (int) (byte)44);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = '+';
      charArray0[4] = '+';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2, (int) (byte)44);
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'o', 'o', 'o', '+', '+'}, charArray0);
      assertArrayEquals(new char[] {'o', '+', '+'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte)44);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)91;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)91;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)91;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 9;
      intArray0[5] = 9;
      intArray0[6] = (int) (byte)91;
      intArray0[7] = (int) (byte)0;
      ArrayUtils.swap(intArray0, (int) (byte)0, 9);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {91, 9, 9, 9, 9, 9, 91, 0}, intArray0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '@', 1206);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)44;
      shortArray0[2] = (short)0;
      shortArray0[1] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)403, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)91;
      intArray0[1] = (int) (short)91;
      intArray0[2] = (int) (short)0;
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {91, 91, 0}, intArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Character character0 = Character.valueOf('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = Integer.valueOf(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals("34", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableInt0.setValue((Number) int0);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals("34", mutableInt0.toString());
      
      mutableInt0.add(0);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals("34", mutableInt0.toString());
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 3124.2048F;
      floatArray0[3] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-449);
      floatArray0[1] = (float) (-449);
      floatArray0[2] = (float) (-449);
      int[] intArray0 = new int[7];
      intArray0[0] = (-449);
      intArray0[1] = 5006;
      intArray0[2] = (-1935);
      intArray0[3] = 5006;
      intArray0[4] = (-976);
      intArray0[5] = 5006;
      intArray0[6] = (-449);
      ArrayUtils.swap(intArray0, 123, (-2178), (-1));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-449), 5006, (-1935), 5006, (-976), 5006, (-449)}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, 84);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MockRandom mockRandom0 = new MockRandom(1407L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-46);
      intArray0[1] = (-479);
      intArray0[3] = 5004;
      intArray0[4] = (-3254);
      intArray0[5] = (-46);
      ArrayUtils.swap(intArray0, (-46), 51, (-545));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-46), (-479), 0, 5004, (-3254), (-46)}, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 5004;
      integerArray0[1] = (Integer) 5004;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-479));
      assertEquals(2, intArray1.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5004, 5004}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MockRandom mockRandom0 = new MockRandom(1407L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-46);
      intArray0[1] = (-976);
      intArray0[2] = 956;
      intArray0[3] = 5006;
      intArray0[4] = (-3254);
      intArray0[5] = (-46);
      ArrayUtils.swap(intArray0, (-46), (-1935), (-545));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-46), (-976), 956, 5006, (-3254), (-46)}, intArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 5006;
      integerArray0[1] = (Integer) 5006;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-976));
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5006, 5006}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      byte byte0 = (byte)58;
      int int0 = 0;
      char[] charArray0 = new char[0];
      int int1 = 79;
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)58, 79);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)58;
      longArray0[1] = (long) '1';
      longArray0[2] = (long) '1';
      longArray0[3] = 2147483647L;
      longArray0[4] = (long) 0;
      long long0 = (-429L);
      longArray0[6] = (long) '1';
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (byte)58;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(9, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {58L, 49L, 49L, 2147483647L, 0L, 0L, 49L, 0L, 58L}, longArray0);
      assertArrayEquals(new long[] {58L, 49L, 49L, 2147483647L, 49L, 58L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
      
      float float0 = 2493.4756F;
      Float float1 = new Float(2493.4756F);
      assertNotNull(float1);
      assertEquals(2493.4756F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Character character0 = new Character('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-449);
      floatArray0[1] = (float) (-449);
      floatArray0[2] = (float) (-449);
      ArrayUtils.shift(floatArray0, (-2152), (-449), 97);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-850.90497F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-2152));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2152)}, intArray0);
      
      ArrayUtils.swap((boolean[]) null, (-632), 2881, 2881);
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("21(gCbv");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray2);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-2152), 737, 2146492591);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 255, (int) (short)0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'j';
      charArray0[2] = 'O';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'w', (int) (short)0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'w', 'j', 'O'}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3476.0F);
      floatArray0[1] = (-834.0F);
      floatArray0[2] = 1605.7614F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-66.6766F);
      ArrayUtils.shift(floatArray0, 2146144817, (-2240), 2146144817);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-3476.0F), (-834.0F), 1605.7614F, 1.0F, (-66.6766F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1605.7614F;
      objectArray0[1] = (Object) 1.0F;
      objectArray0[2] = (Object) (-834.0F);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertEquals(1605.7614F, object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (-66.6766F);
      objectArray0[5] = (Object) (-3476.0F);
      objectArray0[6] = (Object) (-834.0F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], (-2240));
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-86));
      assertNotNull(byte0);
      assertEquals((byte) (-86), (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 962.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 2, 962, (-1190));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = ',';
      charArray0[2] = '3';
      charArray0[3] = 'b';
      charArray0[4] = '#';
      charArray0[5] = 's';
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '#';
      floatArray0[1] = (float) ',';
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      long[] longArray1 = new long[8];
      longArray1[0] = (long) ',';
      longArray1[1] = 2028L;
      longArray1[2] = (long) (-3218);
      longArray1[3] = (long) ',';
      longArray1[4] = (long) 'b';
      longArray1[5] = 2028L;
      longArray1[6] = (long) ',';
      longArray1[7] = (long) 'b';
      int int0 = ArrayUtils.lastIndexOf(longArray1, 98L, (-3218));
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {44L, 2028L, (-3218L), 44L, 98L, 2028L, 44L, 98L}, longArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Boolean boolean0 = Boolean.valueOf("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(" X$#01F&{X\u0005");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-449.0);
      doubleArray0[1] = (-449.0);
      doubleArray0[2] = (-449.0);
      doubleArray0[3] = (-449.0);
      doubleArray0[4] = (-449.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 2814.382205403);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-449.0), (-449.0), (-449.0), (-449.0), (-449.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-449.0), (-449.0), (-449.0), (-449.0), (-449.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'E';
      charArray0[2] = 'm';
      charArray0[3] = '_';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'E';
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {69L, 0L}, longArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) '_';
      floatArray0[4] = (float) 69L;
      floatArray0[3] = (float) '_';
      floatArray0[4] = (float) 69L;
      floatArray0[5] = (float) 'E';
      floatArray0[6] = (float) '_';
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {69.0F, 95.0F, 0.0F, 95.0F, 69.0F, 69.0F, 95.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 'e';
      longArray1[1] = (long) '_';
      longArray1[2] = (long) 'm';
      ArrayUtils.shift(longArray1, (-3162));
      assertEquals(3, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {101L, 95L, 109L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      Integer integer0 = new Integer(127);
      assertNotNull(integer0);
      assertEquals(127, (int)integer0);
      
      Integer integer1 = new Integer(127);
      assertNotNull(integer1);
      assertEquals(127, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      int int0 = 4;
      Integer integer2 = new Integer(4);
      assertNotNull(integer2);
      assertEquals(4, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      
      Integer integer3 = Integer.getInteger(">RHAUU4'8[;1", integer2);
      assertNotNull(integer3);
      assertEquals(4, (int)integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer3;
      integerArray0[3] = integer0;
      Integer integer4 = new Integer((-310));
      assertNotNull(integer4);
      assertEquals((-310), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer4);
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '>';
      charArray0[4] = '>';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '>', int0);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'>', '&', '&', '>', '>'}, charArray0);
      
      Integer[] integerArray2 = ArrayUtils.nullToEmpty(integerArray1);
      assertEquals(5, integerArray2.length);
      assertEquals(4, integerArray0.length);
      assertEquals(5, integerArray1.length);
      assertNotNull(integerArray2);
      assertNotSame(integerArray2, integerArray0);
      assertSame(integerArray2, integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray0, integerArray2);
      assertSame(integerArray1, integerArray2);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray2.equals((Object)integerArray0));
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      Character character1 = new Character('\'');
      assertNotNull(character1);
      assertEquals('\'', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '>';
      floatArray0[1] = (float) '^';
      floatArray0[2] = (float) 52;
      floatArray0[3] = (-437.35F);
      floatArray0[4] = (float) 'c';
      floatArray0[5] = (float) '>';
      floatArray0[6] = (float) (short)91;
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 62.0F, 99.0F, (-437.35F), 52.0F, 94.0F, 62.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-437.35F), 3057);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 62.0F, 99.0F, (-437.35F), 52.0F, 94.0F, 62.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {91.0F, 62.0F, 99.0F, (-437.35F), 52.0F, 94.0F, 62.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {91.0F, 62.0F, 99.0F, (-437.35F), 52.0F, 94.0F, 62.0F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)44;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)634;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)44, (short)0, (short)0, (short)0, (short)634}, shortArray1);
      assertArrayEquals(new short[] {(short)44, (short)0, (short)0, (short)0, (short)634}, shortArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 321);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '^';
      objectArray0[1] = (Object) '^';
      objectArray0[2] = (Object) '^';
      objectArray0[1] = (Object) '^';
      objectArray0[4] = (Object) '^';
      ArrayUtils.shift(objectArray0, 508);
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-142.630938);
      doubleArray0[1] = (double) '^';
      doubleArray0[2] = (double) '%';
      doubleArray0[3] = (double) (-3800);
      doubleArray0[4] = (double) 508;
      doubleArray0[5] = (double) 508;
      doubleArray0[6] = (double) '%';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-457.95683421498404), (double) (-3800));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-142.630938), 94.0, 37.0, (-3800.0), 508.0, 508.0, 37.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)83;
      Byte byte2 = new Byte((byte)83);
      assertNotNull(byte2);
      assertEquals((byte)83, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)16);
      assertNotNull(byte3);
      assertEquals((byte)16, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)32);
      assertNotNull(byte4);
      assertEquals((byte)32, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)32);
      assertNotNull(byte5);
      assertEquals((byte)32, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[0];
      ArrayUtils.swap(byteArray2, (-471), (int) byte1, (-352));
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((byte)32);
      assertNotNull(double0);
      assertEquals(32.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3234.0402101244877));
      assertNotNull(double1);
      assertEquals((-3234.0402101244877), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2625), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2625, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 472.0;
      doubleArray0[1] = 1719.7241430910335;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.7;
      doubleArray0[4] = 99.0;
      doubleArray0[5] = 3195.78003635887;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1719.7241430910335, 14, 2228.0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {472.0, 1719.7241430910335, 0.0, 0.7, 99.0, 3195.78003635887}, doubleArray0, 0.01);
      assertEquals(5, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) 14;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 14L, 4482);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {14L, 14L}, longArray0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {472.0, 1719.7241430910335, 0.0, 0.7, 99.0, 3195.78003635887}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '-';
      ArrayUtils.shift(charArray0, (-2225), 4482, 1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'-', '5'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 14;
      intArray0[1] = (int) '-';
      intArray0[2] = (int) '-';
      intArray0[3] = (int) '5';
      intArray0[4] = 5;
      intArray0[5] = 14;
      intArray0[6] = 1;
      intArray0[7] = 14;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      Float float0 = new Float(3350.0F);
      assertNotNull(float0);
      assertEquals(3350.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(3350.0F);
      assertNotNull(float1);
      assertEquals(3350.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) (byte)26);
      assertNotNull(float2);
      assertEquals(26.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      Float float3 = new Float((double) floatArray0[0]);
      assertEquals(4, floatArray0.length);
      assertNotNull(float3);
      assertEquals(3350.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) float0, 1660);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)26;
      longArray0[1] = (long) 1660;
      longArray0[2] = (long) (-1);
      ArrayUtils.shift(longArray0, 1624, 1624, (-1));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {26L, 1660L, (-1L)}, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'e';
      charArray0[2] = 'V';
      charArray0[4] = '\\';
      charArray0[5] = 'T';
      charArray0[6] = 'b';
      charArray0[7] = 'y';
      ArrayUtils.shift(charArray0, 88, (int) (byte)0, Integer.MAX_VALUE);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'p', 'e', 'V', '\u0000', '\\', 'T', 'b', 'y'}, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) 'y';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'p', 'e', 'V', '\u0000', '\\', 'T', 'b', 'y'}, charArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) (byte)51;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)51}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = (long) 51;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      booleanArray0[7] = boolean0;
      booleanArray0[8] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'true', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.insert((int) (short)0, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short)0, (int) (byte) (-88));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 300;
      intArray0[1] = 91;
      intArray0[2] = (-633);
      intArray0[3] = (-2237);
      intArray0[4] = (-2146428519);
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '[', 2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      ArrayUtils.shift(byteArray0, (-343), 300, (-1493));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)13}, byteArray0);
      
      ArrayUtils.shift(charArray0, (-633));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = (long) 51;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double double0 = new Double(91.0);
      assertNotNull(double0);
      assertEquals(91.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[1] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = (long) 51;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      Long[] longArray2 = new Long[1];
      longArray2[0] = (Long) 51L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertEquals(1, longArray3.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {51L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(longArray3);
      assertEquals(1, longArray3.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {51L}, longArray3);
      assertTrue(boolean0);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      ArrayUtils.swap(longArray3, (-11), (-2146412048), (-2146412048));
      assertEquals(1, longArray3.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {51L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (long)longArray2[0];
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 91.0;
      ArrayUtils.shift(doubleArray1, (-11));
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {91.0, 51.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 8;
      longArray0[1] = 4769L;
      longArray0[2] = (long) 8;
      longArray0[3] = (long) 8;
      longArray0[4] = 1L;
      longArray0[5] = (long) 8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 8;
      longArray0[1] = 4769L;
      longArray0[2] = (long) 8;
      longArray0[3] = (long) 8;
      long long0 = 1L;
      longArray0[4] = 1L;
      longArray0[5] = (long) 8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(8, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1702;
      intArray0[1] = (-1116);
      intArray0[2] = 85;
      intArray0[3] = 54;
      intArray0[4] = (-2741);
      intArray0[5] = 0;
      intArray0[6] = (-2146412048);
      intArray0[7] = 90;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1702, (-1116), 85, 54, (-2741), 0, (-2146412048), 90}, intArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '';
      charArray0[2] = ']';
      charArray0[3] = 'K';
      charArray0[4] = ']';
      charArray0[5] = 'R';
      charArray0[6] = '&';
      charArray0[7] = 'a';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray1);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'<', '', ']', 'K', ']', 'R', '&', 'a'}, charArray1);
      assertArrayEquals(new char[] {'<', '', ']', 'K', ']', 'R', '&', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      char[] charArray0 = new char[2];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 52.0F;
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 'D';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 91.0F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {52.0F, 68.0F, 68.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F, 68.0F, 68.0F, 91.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 'D';
      ArrayUtils.shift(doubleArray0, (-956), (-956), Integer.MAX_VALUE);
      assertEquals(16, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'D';
      ArrayUtils.shift(longArray0, (-956), Integer.MAX_VALUE, 940);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {68L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Short[] shortArray0 = new Short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1728.8832F);
      floatArray0[1] = (float) (-1);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1728.8832F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-883.6528091093883);
      doubleArray0[1] = (double) (-1728.8832F);
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) shortArray0, (Object) boolean2);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Boolean
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Float float0 = new Float(3350.0F);
      assertNotNull(float0);
      assertEquals(3350.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(3350.0F);
      assertNotNull(float1);
      assertEquals(3350.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) (byte) (-117));
      assertNotNull(float2);
      assertEquals((-117.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[0] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      int int0 = ArrayUtils.indexOf(charArray0, '$', (-3315));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'$', '\u0000', '$', '$'}, charArray0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-117);
      ArrayUtils.shift(byteArray0, (int) (byte) (-117), (-3315), 0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117), (byte) (-117), (byte)9, (byte)9, (byte) (-117), (byte) (-117)}, byteArray0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '$';
      ArrayUtils.shift(charArray1, (-3942));
      assertEquals(1, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'$'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray1);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'$'}, charArray1);
      assertTrue(boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      Double double0 = new Double(626.41555);
      assertNotNull(double0);
      assertEquals(626.41555, (double)double0, 0.01);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '1');
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'^', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-722.8);
      doubleArray0[2] = (double) (short)4827;
      ArrayUtils.shift(doubleArray0, (int) (short)4827);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-722.8), 4827.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '1');
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'^', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-722.8);
      doubleArray0[2] = (double) (short)4827;
      ArrayUtils.shift(doubleArray0, (int) (short)4827);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-722.8), 4827.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Long long0 = new Long((-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Long long1 = new Long((-199L));
      assertNotNull(long1);
      assertEquals((-199L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-199L));
      assertNotNull(long2);
      assertEquals((-199L), (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      Long long3 = new Long(2330L);
      assertNotNull(long3);
      assertEquals(2330L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long long4 = new Long((-199L));
      assertNotNull(long4);
      assertEquals((-199L), (long)long4);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[4] = (double) (byte) (-117);
      doubleArray0[5] = (double) (byte)56;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)34;
      floatArray0[1] = (float) (byte)56;
      floatArray0[2] = (-605.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {34.0F, 56.0F, (-605.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-117), (int) (byte)56, Integer.MAX_VALUE);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)56;
      byteArray2[1] = (byte)54;
      byteArray2[2] = (byte)56;
      byteArray2[3] = (byte)15;
      byteArray2[4] = (byte)56;
      byteArray2[5] = (byte)15;
      byteArray2[6] = (byte) (-117);
      byteArray2[7] = (byte) (-117);
      byteArray2[8] = (byte)34;
      byte[] byteArray3 = ArrayUtils.addAll(byteArray2, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(14, byteArray3.length);
      assertEquals(9, byteArray2.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte)54, (byte)56, (byte)15, (byte)56, (byte)15, (byte) (-117), (byte) (-117), (byte)34}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)15;
      longArray0[1] = (-3656L);
      longArray0[2] = (long) (byte)56;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {15L, (-3656L), 56L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)40;
      shortArray0[1] = (short)40;
      shortArray0[2] = (short)40;
      shortArray0[3] = (short)40;
      shortArray0[4] = (short)3;
      Float float0 = new Float(0.7);
      assertNotNull(float0);
      assertEquals(0.7F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[8];
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.7F, 0.7F, 0.7F, 0.7F, 0.7F, (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2734.959914);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)34;
      floatArray0[1] = (float) (byte)34;
      floatArray0[2] = (float) (byte)34;
      ArrayUtils.swap(floatArray0, (int) (byte)34, 1856, (int) (byte)34);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {34.0F, 34.0F, 34.0F}, floatArray0, 0.01F);
      
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character character1 = new Character('K');
      assertNotNull(character1);
      assertEquals('K', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character('%');
      assertNotNull(character2);
      assertEquals('%', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = new Character('3');
      assertNotNull(character3);
      assertEquals('3', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      
      Character character4 = Character.valueOf('B');
      assertNotNull(character4);
      assertEquals('B', (char)character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      
      Character character5 = new Character('*');
      assertNotNull(character5);
      assertEquals('*', (char)character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character5;
      characterArray0[1] = character1;
      characterArray0[2] = character5;
      characterArray0[3] = character1;
      characterArray0[4] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character5);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'*', 'K', '*', 'K', '3'}, charArray0);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      
      ArrayUtils.swap(doubleArray1, (int) character3, 826);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character5));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character4));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)34;
      shortArray0[1] = (short) (byte)34;
      shortArray0[2] = (short) (byte)34;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) character3, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      Long long0 = new Long(1247L);
      assertNotNull(long0);
      assertEquals(1247L, (long)long0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 294;
      ArrayUtils.shift(objectArray0, (-3800));
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '%';
      doubleArray0[1] = (double) '%';
      doubleArray0[2] = (double) '%';
      doubleArray0[3] = (double) (-3800);
      doubleArray0[4] = (double) 1247L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3800.0), 1.5);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {37.0, 37.0, 37.0, (-3800.0), 1247.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, true, true}, booleanArray0));
      assertFalse(boolean1);
      
      Short[] shortArray0 = new Short[9];
      try { 
        Short.decode(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", '\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[2] = '?';
      charArray0[2] = 'o';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'm';
      charArray1[1] = '1';
      charArray1[2] = '?';
      charArray1[3] = '?';
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-319), (-319));
      assertEquals(4, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'m', '1', '?', '?'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2147483648L);
      longArray0[1] = (long) '?';
      longArray0[2] = (long) '?';
      longArray0[3] = (long) '?';
      longArray0[4] = (long) '1';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (-319));
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-2147483648L), 63L, 63L, 63L, 49L}, longArray1);
      assertArrayEquals(new long[] {(-2147483648L), 63L, 63L, 63L, 49L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(boolean0);
      
      Float float0 = new Float((float) 63L);
      assertNotNull(float0);
      assertEquals(63.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      long long0 = (-501L);
      int int0 = 2449;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-1152);
      longArray0[3] = (long) 0;
      ArrayUtils.swap(longArray0, (-3425), 1, 1073741824);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1152L), 0L, 0L}, longArray0);
      
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1816);
      shortArray0[2] = (short) (byte)51;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-2089));
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1816), (short)0, (short)51}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1816), (short)0, (short)51, (short) (-2089)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)51;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-11));
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      Float float0 = new Float(94.0);
      assertNotNull(float0);
      assertEquals(94.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (byte) (-99));
      assertNotNull(float1);
      assertEquals((-99.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(2403.0F);
      assertNotNull(float2);
      assertEquals(2403.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float((-3158.7247229615));
      assertNotNull(float3);
      assertEquals((-3158.7246F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float3;
      floatArray0[1] = float3;
      Float float4 = new Float((float) floatArray0[0]);
      assertEquals(5, floatArray0.length);
      assertNotNull(float4);
      assertEquals((-3158.7246F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      
      floatArray0[2] = float4;
      floatArray0[3] = float3;
      floatArray0[4] = float3;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[0];
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)91, 2690);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)91}, byteArray0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)91;
      objectArray0[1] = (Object) (byte)91;
      objectArray0[2] = (Object) (byte)91;
      objectArray0[3] = (Object) (byte)91;
      objectArray0[4] = (Object) (byte)91;
      objectArray0[5] = (Object) (byte)91;
      ArrayUtils.shift(byteArray0, (-861));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)91}, byteArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short) (-1577));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-861);
      intArray0[1] = (int) (byte)91;
      intArray0[2] = (int) (short) (-1577);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2690);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-861), 91, (-1577)}, intArray0);
      assertArrayEquals(new int[] {(-861), 91, (-1577)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean2 = ArrayUtils.isSorted(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(boolean2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 84;
      intArray0[1] = 84;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 84, 84);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {84, 84, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      int int0 = ArrayUtils.indexOf(charArray0, '');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, 84, 45);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      Float float0 = new Float((double) 84);
      assertNotNull(float0);
      assertEquals(84.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) 84);
      assertNotNull(float1);
      assertEquals(84.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 84);
      assertNotNull(float2);
      assertEquals(84.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Float[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MockRandom mockRandom0 = new MockRandom(1407L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-850);
      intArray0[1] = (-850);
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-850), (-850)}, intArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayUtils.swap((byte[]) null, 1116, (-850), (-850));
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((-850), longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = '@';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'E');
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new char[] {'E', '@', '\u0000'}, charArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.andNot(bitSet1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(0, booleanArray0.length);
      assertEquals(3, charArray0.length);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new char[] {'E', '@', '\u0000'}, charArray0);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.set(91, 2170);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2176, bitSet0.size());
      assertEquals(2079, bitSet0.cardinality());
      assertEquals(2170, bitSet0.length());
      assertEquals(0, booleanArray0.length);
      assertNotSame(bitSet0, bitSet1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(bitSet0.equals((Object)bitSet1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 908;
      doubleArray0[1] = (double) 'E';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (-2891));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {908.0, 69.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.insert(0, booleanArray1, booleanArray1);
      assertEquals(14, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3476.0F);
      floatArray0[1] = (-834.0F);
      floatArray0[2] = 1605.7614F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-66.6766F);
      ArrayUtils.shift(floatArray0, 2146144817, (-2240), 2146144817);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-3476.0F), (-834.0F), 1605.7614F, 1.0F, (-66.6766F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1605.7614F;
      objectArray0[1] = (Object) 1.0F;
      objectArray0[2] = (Object) (-834.0F);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertEquals(1605.7614F, object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (-66.6766F);
      objectArray0[5] = (Object) (-3476.0F);
      objectArray0[6] = (Object) (-834.0F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], (-2240));
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-86));
      assertNotNull(byte0);
      assertEquals((byte) (-86), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)40);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-834.0F);
      floatArray0[2] = 1605.7614F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-66.6766F);
      ArrayUtils.shift(floatArray0, 2146144817, (-2240), 2146144817);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-834.0F), 1605.7614F, 1.0F, (-66.6766F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1605.7614F;
      objectArray0[1] = (Object) 1.0F;
      objectArray0[2] = (Object) (-834.0F);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertEquals(1605.7614F, object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (-66.6766F);
      objectArray0[5] = (Object) 0.0F;
      objectArray0[6] = (Object) (-834.0F);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], (-2240));
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-86));
      assertNotNull(byte0);
      assertEquals((byte) (-86), (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)40);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2400);
      floatArray0[1] = (float) (-2147061675);
      floatArray0[2] = (float) 'x';
      floatArray0[3] = (float) 2188;
      floatArray0[4] = (float) (-2400);
      floatArray0[5] = (float) (-2400);
      floatArray0[6] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 6, 296);
      assertEquals(7, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2400.0F), (-2.14706163E9F), 120.0F, 2188.0F, (-2400.0F), (-2400.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'x';
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 2188;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) (-2147061675);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {120L, 1L, 2188L, 0L, 0L, 0L, 1L, (-2147061675L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-660);
      shortArray0[3] = (short) (-24);
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)400);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      Character character1 = new Character('r');
      assertNotNull(character1);
      assertEquals('r', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-84);
      objectArray0[2] = (Object) (-2195.0);
      objectArray0[3] = (Object) (byte) (-1);
      objectArray0[4] = (Object) (byte) (-1);
      ArrayUtils.swap(objectArray0, 0, (int) '^', (int) (byte) (-1));
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) (byte)112;
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) 'u';
      floatArray0[4] = (float) '\u0000';
      ArrayUtils.reverse(floatArray0, (-1246), (int) (byte)112);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 117.0F, 58.0F, 112.0F, 58.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(charArray0, (int) (byte)112);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1246), (-1246), (double) (byte)112);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1246);
      intArray0[1] = (-490);
      intArray0[2] = (int) 'u';
      intArray0[3] = (-1246);
      intArray0[4] = (int) 'u';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1246));
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1246), (-490), 117, (-1246), 117}, intArray0);
      assertArrayEquals(new int[] {(-490), 117, (-1246), 117}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-32));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-32)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 117.0F, 58.0F, 112.0F, 58.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[4] = object3;
      Double double0 = new Double((-572));
      assertNotNull(double0);
      assertEquals((-572.0), (double)double0, 0.01);
      
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, (-572), (-1795), (-2879));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2879);
      doubleArray0[1] = (double) (-2879);
      doubleArray0[2] = (double) (-1795);
      doubleArray0[3] = (double) (-572);
      doubleArray0[4] = (double) (-1795);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2879.0), (-2879.0), (-1795.0), (-572.0), (-1795.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      MutableInt mutableInt0 = new MutableInt((-214));
      assertEquals((-214), (int)mutableInt0.getValue());
      assertEquals((byte)42, mutableInt0.byteValue());
      assertEquals((-214), (int)mutableInt0.toInteger());
      assertEquals((-214L), mutableInt0.longValue());
      assertEquals((-214), mutableInt0.intValue());
      assertEquals((short) (-214), mutableInt0.shortValue());
      assertEquals((-214.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-214.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-214", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-214);
      longArray0[1] = (long) (-2879);
      boolean boolean1 = ArrayUtils.contains(longArray0, (-1276L));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-214L), (-2879L)}, longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = ' ';
      charArray0[2] = '\"';
      charArray0[3] = 'e';
      boolean boolean2 = ArrayUtils.isEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'A', ' ', '\"', 'e'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      byte byte0 = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      byteArray0[0] = (byte)44;
      longArray0[4] = (long) (byte)23;
      longArray0[5] = (long) (byte)23;
      Object[] objectArray0 = new Object[0];
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) null, (-1));
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 322, (float) (byte)44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 322, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-4.405891F);
      floatArray0[2] = (-2389.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-4.405891F), 0.0F, (-2389.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 90.0F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-4.405891F), 0.0F, (-2389.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-1));
      assertEquals(5, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(5, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet1.toString());
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), 0, 0}, intArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      ArrayUtils.swap(charArray0, (-1), (-1661), (-1));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-4.405891F);
      doubleArray0[3] = 586.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-4.405891F);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-2389.0F));
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-4.405890941619873), 586.0, (-1.0), (-4.405890941619873)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2389.0), (-1.0), (-1.0), (-4.405890941619873), 586.0, (-1.0), (-4.405890941619873)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-936);
      intArray0[1] = (-988);
      intArray0[2] = (-988);
      intArray0[3] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-936), (-988), (-988), Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)89;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)80, (byte)10, (byte)101, (byte)89}, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)80, Integer.MAX_VALUE);
      assertEquals(0, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (byte)80;
      longArray0[2] = (long) (-988);
      longArray0[3] = (-935L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2147483647L, 80L, (-988L), (-935L)}, longArray0);
      assertArrayEquals(new long[] {2147483647L, 80L, (-988L), (-935L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[2];
      int int0 = 36;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146428521, 36);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte byte0 = new Byte((byte) (-104));
      assertNotNull(byte0);
      assertEquals((byte) (-104), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-104));
      assertNotNull(byte1);
      assertEquals((byte) (-104), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      long long0 = 717L;
      Long long1 = new Long(2528);
      assertNotNull(long1);
      assertEquals(2528L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 36, long1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 962.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 0, 962, (-1190));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 962, 0, 1430, 0, 0, (-1), 0}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)95;
      intArray0[0] = (int) (byte)14;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-114);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)53);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)84, (byte)95, (byte)0, (byte)53, (byte) (-114), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)16;
      Byte byte1 = new Byte((byte)16);
      assertNotNull(byte1);
      assertEquals((byte)16, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)83;
      Byte byte3 = new Byte((byte)83);
      assertNotNull(byte3);
      assertEquals((byte)83, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)16);
      assertNotNull(byte4);
      assertEquals((byte)16, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[2] = byte4;
      byte byte5 = (byte)32;
      Byte byte6 = new Byte((byte)32);
      assertNotNull(byte6);
      assertEquals((byte)32, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      
      byteArray0[3] = byte6;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)32;
      doubleArray0[1] = (double) byte2;
      doubleArray0[2] = (double) byte5;
      doubleArray0[3] = (double) byte5;
      doubleArray0[4] = (double) (byte)83;
      doubleArray0[5] = (double) (byte)83;
      doubleArray0[7] = (double) byte0;
      doubleArray0[8] = (double) byte0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 433.0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, 83.0, 32.0, 32.0, 83.0, 83.0, 0.0, 16.0, 16.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 51.0F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {51.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)16;
      intArray0[1] = (int) byte2;
      intArray0[2] = 2;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) (byte)16;
      ArrayUtils.shift(intArray0, 3026);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {16, 16, 16, 83, 2, 16}, intArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, (Object) byte0, (int) byte5);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte5);
      assertFalse(byte5 == byte2);
      assertFalse(byte5 == byte0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1930;
      shortArray0[0] = (short) (-1759);
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('A');
      assertNotNull(character0);
      assertEquals('A', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(',');
      assertNotNull(character1);
      assertEquals(',', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(',');
      assertNotNull(character2);
      assertEquals(',', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character0);
      assertNotNull(character3);
      assertEquals('A', (char)character3);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      
      characterArray0[3] = character3;
      Character character4 = new Character('u');
      assertNotNull(character4);
      assertEquals('u', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      char char0 = 'j';
      Character character5 = new Character('j');
      assertNotNull(character5);
      assertEquals('j', (char)character5);
      assertTrue(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('j');
      assertNotNull(character6);
      assertEquals('j', (char)character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf(char0);
      assertNotNull(character7);
      assertEquals('j', (char)character7);
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character1));
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('G');
      assertNotNull(character8);
      assertEquals('G', (char)character8);
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)char0));
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'e');
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'A', ',', ',', 'A', 'u', 'j', 'j', 'j', 'G'}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (char)character5;
      intArray0[1] = (int) char0;
      intArray0[2] = (int) 'G';
      ArrayUtils.shift(intArray0, (-2170), (int) character5, 1136);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {106, 71, 106}, intArray0);
      assertTrue(character5.equals((Object)character7));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character6));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character8));
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)5447);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1759), (short)0}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 962.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 0, 962, (-1190));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 962, 0, 1430, 0, 0, (-1), 0}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'*'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)34;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)53);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)84, (byte)95, (byte)14, (byte)53, (byte) (-114), (byte)34}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[2] = (long) (byte)44;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)0;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)39, (-625));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 44L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2511.094, (int) (byte) (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 44.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 44.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)0, (-2145726982), 0.0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int1 = ArrayUtils.indexOf(byteArray2, (byte) (-116), (int) (byte)0);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals((-1), int1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-2145726982), (-1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 57;
      intArray0[1] = (int) (byte) (-116);
      intArray0[2] = (-2145726982);
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, 2499, (-470), 2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {57, (-116), (-2145726982), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 5.0F;
      floatArray0[1] = (-850.90497F);
      floatArray0[2] = (-3758.91F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 56.0F;
      floatArray0[5] = (-199.0F);
      floatArray0[6] = 3026.9941F;
      floatArray0[7] = (-223.8F);
      ArrayUtils.swap(floatArray0, 1, 1, (-2145726982));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {5.0F, (-850.90497F), (-3758.91F), (-1.0F), 56.0F, (-199.0F), 3026.9941F, (-223.8F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3026.9941F;
      doubleArray0[1] = (double) 5.0F;
      doubleArray0[2] = (double) (-199.0F);
      doubleArray0[3] = (double) (-3758.91F);
      doubleArray0[4] = (double) (-223.8F);
      doubleArray0[5] = (double) 3026.9941F;
      doubleArray0[6] = (double) 56.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 5.0F, (double) 3026.9941F);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3026.994140625, 5.0, (-199.0), (-3758.909912109375), (-223.8000030517578), 3026.994140625, 56.0}, doubleArray0, 0.01);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', (-2231));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (int) 'd';
      intArray0[2] = (-2231);
      intArray0[3] = (int) 'd';
      ArrayUtils.shift(intArray0, 108, 4653, (-1));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 100, (-2231), 100}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      char[] charArray1 = ArrayUtils.subarray(charArray0, 59, 51);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-2231));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int[] intArray1 = ArrayUtils.subarray((int[]) null, 0, 2165);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MockRandom mockRandom0 = new MockRandom(1407L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-353);
      longArray0[1] = (long) (-850);
      longArray0[2] = 2743L;
      longArray0[3] = (long) (-353);
      longArray0[4] = 4474L;
      longArray0[5] = (long) (-850);
      ArrayUtils.swap(longArray0, (-850), 861, (-353));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-353L), (-850L), 2743L, (-353L), 4474L, (-850L)}, longArray0);
      
      ArrayUtils.shift(doubleArray1, 19);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      Float float0 = new Float((double) 1996L);
      assertNotNull(float0);
      assertEquals(1996.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 1996L);
      assertNotNull(float1);
      assertEquals(1996.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 99L;
      longArray0[2] = (-1458L);
      longArray0[3] = 0L;
      longArray0[4] = (-501L);
      int int0 = (-981);
      ArrayUtils.swap(longArray0, (-981), 2449, (-1152));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 99L, (-1458L), 0L, (-501L)}, longArray0);
      
      Number number0 = null;
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      Float float0 = new Float((-4988.164F));
      assertNotNull(float0);
      assertEquals((-4988.164F), (float)float0, 0.01F);
      
      Float float1 = new Float(625.701578154);
      assertNotNull(float1);
      assertEquals(625.7016F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-679.8762F));
      assertNotNull(float2);
      assertEquals((-679.8762F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-679L);
      longArray0[2] = 99L;
      longArray0[3] = 1L;
      longArray0[4] = (-1458L);
      longArray0[5] = (-4371L);
      longArray0[6] = 1L;
      int int0 = 8;
      ArrayUtils.swap(longArray0, 8, 0, 8);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, (-679L), 99L, 1L, (-1458L), (-4371L), 1L}, longArray0);
      
      Integer[] integerArray0 = new Integer[4];
      MutableInt mutableInt0 = new MutableInt(float1);
      assertEquals(625, mutableInt0.intValue());
      assertEquals(625L, mutableInt0.longValue());
      assertEquals(625.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)625, mutableInt0.shortValue());
      assertEquals((byte)113, mutableInt0.byteValue());
      assertEquals(625.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(625, (int)mutableInt0.toInteger());
      assertEquals(625, (int)mutableInt0.getValue());
      assertEquals("625", mutableInt0.toString());
      assertNotNull(mutableInt0);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Character character0 = Character.valueOf('j');
      assertNotNull(character0);
      assertEquals('j', (char)character0);
      
      Double double0 = new Double((-328.934140369798));
      assertNotNull(double0);
      assertEquals((-328.934140369798), (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEquals(character0, double0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      Short[] shortArray1 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 99L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 99L;
      doubleArray0[4] = (double) (-679.8762F);
      doubleArray0[5] = (double) (short)36;
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 1L;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 580.7098217, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {99.0, 1.0, 1.0, 99.0, (-679.876220703125), 36.0, 8.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      
      mutableInt0.add(0);
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34L, mutableInt0.longValue());
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1490));
      assertNotNull(integer0);
      assertEquals((-1490), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1490));
      assertNotNull(integer1);
      assertEquals((-1490), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(4, integerArray0.length);
      assertNotNull(integer2);
      assertEquals((-1490), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1490));
      assertNotNull(integer3);
      assertEquals((-1490), (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1490), (-1490), (-1490), (-1490)}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (int)integerArray0[1];
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) (int)integerArray0[3];
      floatArray0[3] = (float) (int)integerArray0[2];
      floatArray0[4] = (float) (int)integerArray0[1];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1490.0F), (-1490.0F), (-1490.0F), (-1490.0F), (-1490.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1401;
      shortArray0[1] = (short) (-1142);
      shortArray0[2] = (short)15;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2331));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1401, (short) (-1142), (short)15}, shortArray0);
      assertArrayEquals(new short[] {(short)1401, (short) (-1142), (short)15}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'A';
      charArray0[2] = '+';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) integerArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1490, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1438);
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Double double0 = new Double(1438);
      assertNotNull(double0);
      assertEquals(1438.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Character character0 = new Character('&');
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      Byte byte0 = new Byte((byte) (-104));
      assertNotNull(byte0);
      assertEquals((byte) (-104), (byte)byte0);
      
      Byte byte1 = new Byte((byte)116);
      assertNotNull(byte1);
      assertEquals((byte)116, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      int int0 = 3354;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, 3354, (-866));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte byte2 = (byte)64;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)64);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int2);
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'g');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      ArrayUtils.shift(byteArray0, 0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long long0 = new Long(102L);
      assertNotNull(long0);
      assertEquals(102L, (long)long0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertTrue(boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short)2140;
      floatArray0[2] = (float) (short)4827;
      floatArray0[3] = (float) 'g';
      floatArray0[4] = (float) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146858599, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146858599, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-72), (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)0}, byteArray0);
      
      Character character0 = new Character('=');
      assertNotNull(character0);
      assertEquals('=', (char)character0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-746.1847391071));
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.insert((int) (byte) (-99), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap(intArray0, (-416), 4);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 0, 4, 4, 0, 0, 0, 0}, intArray0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-99)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[4] = (double) (byte) (-117);
      doubleArray0[5] = (double) (byte)56;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)34;
      floatArray0[1] = (float) (byte)56;
      floatArray0[2] = (-605.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {34.0F, 56.0F, (-605.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (byte)56);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 75.0F;
      floatArray0[1] = 3223.71F;
      floatArray0[2] = (-211.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1384.5206F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-1474.7393F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {75.0F, 3223.71F, (-211.0F), 0.0F, (-1384.5206F), 1.0F, (-1474.7393F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-3157L);
      longArray0[1] = (-863L);
      longArray0[2] = (-1550L);
      longArray0[3] = (-2L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-863L));
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-3157L), (-863L), (-1550L), (-2L)}, longArray0);
      assertArrayEquals(new long[] {(-863L), (-3157L), (-863L), (-1550L), (-2L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)0;
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 101.962, 334);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-28.273076));
      assertNotNull(float0);
      assertEquals((-28.273075F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(426.0F);
      assertNotNull(float1);
      assertEquals(426.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-28.273075F), 426.0F}, floatArray1, 0.01F);
      
      org.evosuite.runtime.Random.setNextRandom(112);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(2483.107F);
      assertNotNull(float0);
      assertEquals(2483.107F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(Float.NaN);
      assertNotNull(float1);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[1]);
      assertEquals(7, floatArray0.length);
      assertNotNull(float2);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1.0F));
      assertNotNull(float3);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals(7, floatArray0.length);
      assertNotNull(float4);
      assertEquals(Float.NaN, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[2]);
      assertEquals(7, floatArray0.length);
      assertNotNull(float5);
      assertEquals(Float.NaN, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) floatArray0[1]);
      assertEquals(7, floatArray0.length);
      assertNotNull(float6);
      assertEquals(Float.NaN, (float)float6, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2483.107F, Float.NaN, Float.NaN, (-1.0F), Float.NaN, Float.NaN, Float.NaN}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 28;
      intArray0[1] = 1707;
      intArray0[2] = (-973);
      intArray0[3] = 956;
      intArray0[4] = (-3254);
      intArray0[5] = (-4587);
      intArray0[6] = 5006;
      intArray0[7] = (-1729);
      intArray0[8] = (-46);
      ArrayUtils.swap(intArray0, (-1729), 1707, 28);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {28, 1707, (-973), 956, (-3254), (-4587), 5006, (-1729), (-46)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)91;
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      Character character1 = new Character('>');
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (byte)56;
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (short)0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray1, 0.01F);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)91, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)91, (short)0, (short)0}, shortArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '>');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (-927L);
      longArray0[1] = (-927L);
      longArray0[2] = (-927L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(22, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2028L, (-3218));
      assertEquals(22, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      Short short0 = new Short((short)53);
      assertNotNull(short0);
      assertEquals((short)53, (short)short0);
      
      short short1 = (short)2;
      Short short2 = new Short((short)2);
      assertNotNull(short2);
      assertEquals((short)2, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short short3 = new Short((short)1);
      assertNotNull(short3);
      assertEquals((short)1, (short)short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      
      Short short4 = new Short((short)53);
      assertNotNull(short4);
      assertEquals((short)53, (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, 121);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-95);
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (short)1);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)69, (byte)58, (byte) (-2), (byte)9, (byte) (-95)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)69, (byte)67, (byte)58, (byte) (-2), (byte)9, (byte) (-95)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) 121;
      longArray0[2] = (long) (byte)58;
      longArray0[3] = (long) (byte) (-95);
      longArray0[4] = 35L;
      longArray0[5] = (long) short1;
      longArray0[6] = (long) (byte)67;
      longArray0[7] = (long) (byte) (-2);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) short1);
      assertEquals(8, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2L, 121L, 58L, (-95L), 35L, 2L, 67L, (-2L)}, longArray0);
      assertArrayEquals(new long[] {121L, 58L, (-95L), 35L, 67L, (-2L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      Object[] objectArray0 = ArrayUtils.removeAll((Object[]) shortArray0, intArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      assertNotSame(shortArray0, objectArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1151));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1151);
      longArray0[1] = (long) (short) (-1151);
      longArray0[2] = (long) (short) (-1151);
      longArray0[3] = (long) (short) (-1151);
      longArray0[4] = (long) (short) (-1151);
      longArray0[5] = (long) (short) (-1151);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1151L), (-1151L), (-1151L), (-1151L), (-1151L), (-1151L), 0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1272.0F;
      floatArray0[1] = (float) (byte)67;
      floatArray0[2] = (float) (-1151L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-199.0F));
      assertEquals(4, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1272.0F, 67.0F, (-1151.0F), (-199.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1272.0F, 67.0F, (-1151.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', '*', '*'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse(charArray0, (-3970), (int) (byte)67);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', '*', '*'}, charArray0);
      
      Float[] floatArray2 = new Float[8];
      floatArray2[0] = (Float) 67.0F;
      floatArray2[1] = (Float) 1272.0F;
      floatArray2[2] = (Float) 67.0F;
      floatArray2[3] = (Float) (-1151.0F);
      floatArray2[4] = (Float) 67.0F;
      floatArray2[5] = (Float) (-1151.0F);
      floatArray2[6] = (Float) 1272.0F;
      floatArray2[7] = (Float) 1272.0F;
      Float[] floatArray3 = ArrayUtils.remove(floatArray2, 1);
      assertEquals(7, floatArray3.length);
      assertEquals(8, floatArray2.length);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray2));
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift((float[]) null, (-2195));
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-17);
      ArrayUtils.swap(intArray0, (-2652), 0, (-2146765595));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-17), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 0, (int) (byte)11);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float(2634.362);
      assertNotNull(float0);
      assertEquals(2634.362F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-4268.43188115962));
      assertNotNull(float1);
      assertEquals((-4268.4316F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-78.8666422));
      assertNotNull(float2);
      assertEquals((-78.866646F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-2039.0F));
      assertNotNull(float3);
      assertEquals((-2039.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-5305.0F));
      assertNotNull(float4);
      assertEquals((-5305.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-989.78));
      assertNotNull(float5);
      assertEquals((-989.78F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-850.90497F));
      assertNotNull(float6);
      assertEquals((-850.90497F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = Float.valueOf(1223.3405F);
      assertNotNull(float7);
      assertEquals(1223.3405F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      
      floatArray0[7] = float7;
      Class<Float[]> class0 = Float[].class;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0, class0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3419.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3419.0, 3285);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3419.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {52}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)83);
      assertEquals(7, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)95, (byte)73, (byte)75, (byte) (-89), (byte) (-115), (byte)111, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)95, (byte)73, (byte)75, (byte) (-89), (byte)83, (byte) (-115), (byte)83, (byte)111, (byte)1}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-115);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)83, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)91;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)91;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (-2055.2807506);
      ArrayUtils.reverse(doubleArray0, (-531), 1643);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2055.2807506), 4.0, 91.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, 0.0);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift(charArray0, (int) (short)91);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 4.0;
      objectArray0[1] = (Object) (short)91;
      objectArray0[2] = (Object) '[';
      objectArray0[3] = (Object) (-2055.2807506);
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) '[';
      ArrayUtils.swap(objectArray0, (int) (short)0, (-1159), 50);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '<';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) '<';
      int int0 = 127;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 127);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {60, 60}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap((byte[]) null, 1072, Integer.MAX_VALUE, (-1527));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)26, (byte)26, (byte)26, (byte)26, (byte)26, (byte)26}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)26, (byte)26, (byte)26, (byte)26, (byte)26, (byte)26}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 45L;
      longArray0[2] = (-530L);
      longArray0[3] = 2217L;
      longArray0[4] = (-3313L);
      longArray0[5] = 4350L;
      longArray0[6] = 99L;
      longArray0[7] = 2147483647L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 99L);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 45L, (-530L), 2217L, (-3313L), 4350L, 99L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {99L, 0L, 45L, (-530L), 2217L, (-3313L), 4350L, 99L, 2147483647L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap((byte[]) null, 1116, 1116, 120);
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      short[] shortArray0 = new short[14];
      shortArray0[0] = (short)2815;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)18688;
      ArrayUtils.swap(shortArray0, 5, (int) (short)0, (-99));
      assertEquals(14, shortArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)18688;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Long[] longArray0 = new Long[6];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      Long long2 = new Long((short)0);
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[1] = long2;
      Long long3 = new Long((-1863L));
      assertNotNull(long3);
      assertEquals((-1863L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      
      longArray0[2] = long3;
      Long long4 = new Long((long) longArray0[2]);
      assertEquals(6, longArray0.length);
      assertNotNull(long4);
      assertEquals((-1863L), (long)long4);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      
      longArray0[3] = long4;
      Long long5 = new Long((short)2815);
      assertNotNull(long5);
      assertEquals(2815L, (long)long5);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      
      longArray0[4] = long5;
      Long long6 = new Long((-1943L));
      assertNotNull(long6);
      assertEquals((-1943L), (long)long6);
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) long0;
      floatArray0[1] = (float) 5;
      ArrayUtils.shift(floatArray0, 4);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 5.0F}, floatArray0, 0.01F);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)18688;
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)2815;
      shortArray1[4] = (short)2815;
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short)2815, (int) (short)0);
      assertEquals(5, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)18688, (short) (-1), (short)0, (short)2815, (short)2815}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[8] = (int) (byte)91;
      intArray0[2] = 86;
      intArray0[3] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 9, (-117));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)35);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (long) 9);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '\'';
      charArray0[2] = 'm';
      charArray0[3] = '^';
      charArray0[4] = ':';
      charArray0[5] = 'D';
      charArray0[6] = 'o';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'M', 54);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'m', '\'', 'm', '^', ':', 'D', 'o'}, charArray0);
      assertEquals((-1), int0);
      
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Double double0 = new Double(64.0);
      assertNotNull(double0);
      assertEquals(64.0, (double)double0, 0.01);
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) double0, (Object) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)84;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)84;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)84, (short)0, (short)84, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)84, (short)0, (short)84, (short)0, (short)84, (short)0, (short)84, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Float float0 = new Float((-1283.1608F));
      assertNotNull(float0);
      assertEquals((-1283.1608F), (float)float0, 0.01F);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = null;
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) integer0);
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '^');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', 'U', 'U', 'U'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'W');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', 'U', 'U', 'U'}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 52);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2195);
      ArrayUtils.shift(intArray0, 86, (-2195), (-2195));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-2195), booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[6];
      booleanArray2[0] = boolean0;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = boolean0;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = boolean0;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2400;
      shortArray0[1] = (short)122;
      shortArray0[2] = (short)1824;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2400, (short)122, (short)1824}, shortArray0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-570), (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 52;
      ArrayUtils.shift(doubleArray0, 1435);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {52.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.swap(charArray0, (-2195), (-2195), (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (-1), Integer.MAX_VALUE, (int) (byte)52);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)52, (byte)9, (byte) (-1)}, byteArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte) (-1));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1816L);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) 'g';
      longArray0[3] = (long) (byte)9;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (-1674L);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)9, 1114111);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1816L), (-1L), 103L, 9L, 2147483647L, (-1674L), (-1L), (-1L)}, longArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)23;
      longArray0[2] = (long) (byte)44;
      longArray0[4] = (long) (byte)23;
      longArray0[5] = (long) (byte)23;
      longArray0[6] = 684L;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)44;
      intArray0[1] = (int) (byte)23;
      intArray0[2] = (int) (byte)44;
      intArray0[3] = (-1);
      intArray0[4] = (-669);
      intArray0[5] = 2655;
      ArrayUtils.swap(intArray0, 1210, 296, 44);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {44, 23, 44, (-1), (-669), 2655}, intArray0);
      
      ArrayUtils.reverse(byteArray0, (-669), 7);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)44}, byteArray0);
      
      Float[] floatArray2 = new Float[5];
      Float float0 = new Float(4654.0);
      assertNotNull(float0);
      assertEquals(4654.0F, (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Float float1 = new Float((double) 23);
      assertNotNull(float1);
      assertEquals(23.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray2[1] = float1;
      Float float2 = new Float(914.626);
      assertNotNull(float2);
      assertEquals(914.626F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray2[2] = float2;
      Float float3 = new Float((float) 296);
      assertNotNull(float3);
      assertEquals(296.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray2[3] = float3;
      Float float4 = new Float((-2884.3639437028));
      assertNotNull(float4);
      assertEquals((-2884.364F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      floatArray2[4] = float4;
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(44).when(comparator0).compare(anyFloat() , anyFloat());
      boolean boolean0 = ArrayUtils.isSorted(floatArray2, comparator0);
      assertEquals(5, floatArray2.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)57, (-495573150));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Character character0 = new Character('j');
      assertNotNull(character0);
      assertEquals('j', (char)character0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, 2961.94933205);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.insert((-495573150), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'j';
      intArray0[1] = (-495573150);
      intArray0[2] = (int) (byte)0;
      intArray0[4] = 322;
      intArray0[5] = (int) (byte)0;
      ArrayUtils.swap(intArray0, (-1291), 322);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {106, (-495573150), 0, 0, 322, 0, 0}, intArray0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      Double double0 = new Double((short)433);
      assertNotNull(double0);
      assertEquals(433.0, (double)double0, 0.01);
      
      Double double1 = new Double((short)433);
      assertNotNull(double1);
      assertEquals(433.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)91;
      floatArray0[1] = (float) (short)433;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 433.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 433.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 91.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {91.0F, 433.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {91.0F, 433.0F}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.1, (double) (short)91);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 91.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)91;
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)91);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)91}, shortArray1);
      assertEquals(0, int1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 34;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {34.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {34.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (-2064));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      classArray0[5] = class0;
      Class<Object> class4 = Object.class;
      classArray0[6] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
      
      int int1 = ArrayUtils.hashCode((Object) class1);
      assertSame(class1, class4);
      assertSame(class1, class3);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertFalse(int1 == int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.7);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)277;
      shortArray0[1] = (short)277;
      shortArray0[2] = (short)792;
      shortArray0[3] = (short) (-30);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)277, (short)277, (short)792, (short) (-30)}, shortArray0);
      assertArrayEquals(new short[] {(short)277, (short)277, (short)792, (short) (-30)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'I';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {73}, intArray0);
      assertArrayEquals(new int[] {0, 73}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 266, 266);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 73;
      doubleArray0[1] = (double) 266;
      doubleArray0[2] = (double) 266;
      doubleArray0[3] = 73.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 266;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {73.0, 266.0, 266.0, 73.0, 0.0, 266.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {73.0, 266.0, 266.0, 73.0, 0.0, 266.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse((Object[]) shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Long long0 = new Long((-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[3] = (-773.0F);
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-773.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean3 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean3);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean4 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      
      ArrayUtils.hashCode(object0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (-2073));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
      
      int int1 = ArrayUtils.hashCode((Object) class1);
      assertSame(class1, class5);
      assertSame(class1, class3);
      assertSame(class1, class6);
      assertSame(class1, class4);
      assertSame(class1, class2);
      assertSame(class1, class0);
      assertFalse(int1 == int0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.7);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)277;
      shortArray0[1] = (short) (-3702);
      shortArray0[2] = (short)792;
      shortArray0[3] = (short) (-30);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)277, (short) (-3702), (short)792, (short) (-30)}, shortArray0);
      assertArrayEquals(new short[] {(short)277, (short) (-3702), (short)792, (short) (-30)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 126.61;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 126.61}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int1 = ArrayUtils.indexOf(intArray0, (-99), (-99));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-4.405891F);
      floatArray0[1] = (-113.24824F);
      floatArray0[2] = (-2389.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 1129);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-4.405891F), (-113.24824F), (-2389.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-4.405891F), (-113.24824F), (-2389.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1129;
      intArray0[2] = 1129;
      intArray0[3] = 1129;
      intArray0[4] = 1129;
      intArray0[5] = 93;
      intArray0[6] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1));
      assertEquals("{0, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), 1129, 1129, 1129, 1129, 93, (-1)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-58);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-20));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)105, (byte)11, (byte)120, (byte)105, (byte) (-128), (byte)50, (byte) (-58)}, byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short) (-3859), (int) (short) (-1), (-1991));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = ';';
      charArray0[2] = '_';
      charArray0[3] = 'o';
      charArray0[4] = 'V';
      charArray0[5] = '>';
      charArray0[6] = '\\';
      ArrayUtils.shift(charArray0, (-1991));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'o', 'V', '>', '\\', '}', ';', '_'}, charArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'o', 'V', '>', '\\', '}', ';', '_'}, charArray0);
      assertTrue(boolean2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (int) (short) (-1), (int) (short) (-1));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) 'o';
      intArray0[2] = (int) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)467;
      shortArray0[1] = (short) (-2237);
      shortArray0[2] = (short) (-478);
      shortArray0[3] = (short) (-1886);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (-1737);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-478));
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)467, (short) (-2237), (short) (-478), (short) (-1886), (short)0, (short)2, (short) (-1737)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) (short) (-1886));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)467;
      longArray0[1] = (long) (short) (-1737);
      longArray0[2] = (long) (short) (-1886);
      longArray0[3] = (long) (short) (-478);
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short) (-1737);
      longArray0[6] = (long) (short)467;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {467L, (-1737L), (-1886L), (-478L), 0L, (-1737L), 467L}, longArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {467L, (-1737L), (-1886L), (-478L), 0L, (-1737L), 467L}, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1886);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1886)}, intArray0);
      assertArrayEquals(new int[] {(-1886)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(shortArray0, (int) (short)2, (int) (short)2, 53);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)467, (short) (-2237), (short) (-478), (short) (-1886), (short)0, (short)2, (short) (-1737)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-30));
      assertNotNull(byte0);
      assertEquals((byte) (-30), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-30);
      shortArray0[1] = (short) (byte) (-30);
      shortArray0[2] = (short) (byte) (-30);
      shortArray0[3] = (short) (byte) (-106);
      shortArray0[4] = (short) (byte) (-30);
      shortArray0[5] = (short) (byte) (-106);
      shortArray0[6] = (short) (byte) (-106);
      shortArray0[7] = (short) (byte) (-30);
      shortArray0[8] = (short) (byte) (-106);
      ArrayUtils.shift(shortArray0, (int) (short) (-30), (-747), 3577);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-30), (short) (-30), (short) (-30), (short) (-106), (short) (-30), (short) (-106), (short) (-106), (short) (-30), (short) (-106)}, shortArray0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('d');
      assertNotNull(character1);
      assertEquals('d', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) characterArray0);
      assertEquals(9, characterArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-30);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30)}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-106);
      intArray0[1] = (int) (short) (-30);
      intArray0[2] = 866;
      intArray0[3] = (int) (byte) (-30);
      intArray0[4] = (int) (short) (-30);
      intArray0[5] = (int) (char)character0;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-106), (-30), 866, (-30), (-30), 109}, intArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-781.715159387), (-1.0));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 175.54107531187714;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.toObject(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)120;
      longArray0[1] = (long) ',';
      longArray0[2] = (-328L);
      longArray0[1] = (long) ',';
      int int0 = ArrayUtils.indexOf(longArray0, 0L, (-35));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {120L, 44L, (-328L), 0L}, longArray0);
      assertEquals(3, int0);
      
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals(1, shortArray0.length);
      assertNotNull(short1);
      assertEquals((short) (-4991), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-2035));
      assertNotNull(short2);
      assertEquals((short) (-2035), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((byte)120);
      assertNotNull(short3);
      assertEquals((short)120, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      Short short4 = new Short((byte)120);
      assertNotNull(short4);
      assertEquals((short)120, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, (-2146010751));
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, 'T');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals((-1), int1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-2035);
      floatArray0[1] = 1201.672F;
      floatArray0[3] = (float) (short) (-4991);
      floatArray0[4] = (float) (short)shortArray0[0];
      floatArray0[5] = (-449.0F);
      ArrayUtils.reverse(floatArray0, (-1), (int) shortArray0[0]);
      assertEquals(1, shortArray0.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2035.0F), 1201.672F, 0.0F, (-4991.0F), (-4991.0F), (-449.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4562.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2918.7971011318);
      doubleArray0[3] = (-511.0);
      doubleArray0[4] = 2341.30727773;
      doubleArray0[5] = 1.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4562.0, 0.0, (-2918.7971011318), (-511.0), 2341.30727773, 1.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'q';
      charArray0[3] = '~';
      charArray0[4] = 'b';
      charArray0[5] = '+';
      charArray0[6] = 'J';
      charArray0[7] = '~';
      charArray0[8] = 'J';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'J');
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'J', 't', 't', 'q', '~', 'b', '+', 'J', '~', 'J'}, charArray1);
      assertArrayEquals(new char[] {'t', 't', 'q', '~', 'b', '+', 'J', '~', 'J'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, (-32));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character('U');
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertTrue(boolean0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1727, (-32));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Short short0 = new Short((short) (-4878));
      assertNotNull(short0);
      assertEquals((short) (-4878), (short)short0);
      
      Short short1 = new Short((short)1141);
      assertNotNull(short1);
      assertEquals((short)1141, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-955));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      
      ArrayUtils.reverse(longArray0, 385, 82);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((long[]) null, (int) (short)0, (int) (short) (-3245));
      ArrayUtils.shift(booleanArray0, (-1149), 1006, (-42));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (int) (short)1);
      assertEquals(5, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'a');
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 75, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 75, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2081.13644645;
      doubleArray0[1] = 2081.13644645;
      doubleArray0[2] = 2081.13644645;
      doubleArray0[3] = 2081.13644645;
      doubleArray0[7] = 2081.13644645;
      doubleArray0[5] = 2081.13644645;
      doubleArray0[6] = (double) 586.0F;
      doubleArray0[7] = (double) 586.0F;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2081.13644645, 2081.13644645, 2081.13644645, 2081.13644645, 0.0, 2081.13644645, 586.0, 586.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2081.13644645, 2081.13644645, 2081.13644645, 2081.13644645, 0.0, 2081.13644645, 586.0, 586.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2626L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1662, 3773);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2626L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)30;
      Byte byte1 = new Byte((byte)30);
      assertNotNull(byte1);
      assertEquals((byte)30, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertEquals((byte)30, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertEquals((byte) (-1), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte) (-1)}, byteArray1);
      
      Integer[] integerArray0 = new Integer[5];
      MutableInt mutableInt0 = new MutableInt((int) byte0);
      assertEquals(30, (int)mutableInt0.getValue());
      assertEquals((byte)30, mutableInt0.byteValue());
      assertEquals(30, (int)mutableInt0.toInteger());
      assertEquals("30", mutableInt0.toString());
      assertEquals(30.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(30L, mutableInt0.longValue());
      assertEquals(30, mutableInt0.intValue());
      assertEquals((short)30, mutableInt0.shortValue());
      assertEquals(30.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(30, (int)mutableInt0.getValue());
      assertEquals((byte)30, mutableInt0.byteValue());
      assertEquals(30, (int)mutableInt0.toInteger());
      assertEquals("30", mutableInt0.toString());
      assertEquals(30.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(30L, mutableInt0.longValue());
      assertEquals(30, mutableInt0.intValue());
      assertEquals((short)30, mutableInt0.shortValue());
      assertEquals(30.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(integer0);
      assertEquals(30, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1662);
      assertNotNull(integer1);
      assertEquals(1662, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1662);
      assertNotNull(integer2);
      assertEquals(1662, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(182);
      assertNotNull(integer3);
      assertEquals(182, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(385);
      assertNotNull(integer4);
      assertEquals(385, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer0);
      assertEquals(30, (int)mutableInt0.getValue());
      assertEquals((byte)30, mutableInt0.byteValue());
      assertEquals(30, (int)mutableInt0.toInteger());
      assertEquals("30", mutableInt0.toString());
      assertEquals(30.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(30L, mutableInt0.longValue());
      assertEquals(30, mutableInt0.intValue());
      assertEquals((short)30, mutableInt0.shortValue());
      assertEquals(30.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(4, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer3));
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-53);
      Byte byte1 = new Byte((byte) (-53));
      assertNotNull(byte1);
      assertEquals((byte) (-53), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-41);
      Byte byte3 = new Byte((byte) (-41));
      assertNotNull(byte3);
      assertEquals((byte) (-41), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-41));
      assertNotNull(byte4);
      assertEquals((byte) (-41), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertNotNull(byte5);
      assertEquals((byte) (-41), (byte)byte5);
      assertFalse(byte2 == byte0);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      byte byte6 = (byte) (-54);
      Byte byte7 = new Byte((byte) (-54));
      assertNotNull(byte7);
      assertEquals((byte) (-54), (byte)byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      
      byteArray0[4] = byte7;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-54);
      longArray0[1] = (long) (byte) (-54);
      longArray0[2] = (long) (byte) (-53);
      longArray0[3] = (long) (byte) (-41);
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte2;
      longArray0[6] = (long) byte6;
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte) (-53);
      longArray1[1] = (long) byte6;
      longArray1[2] = 2147483647L;
      longArray1[3] = (long) byte2;
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(11, longArray2.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertArrayEquals(new long[] {(-53L), (-54L), 2147483647L, (-41L)}, longArray1);
      assertArrayEquals(new long[] {(-54L), (-54L), (-53L), (-41L), (-53L), (-41L), (-54L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      ArrayUtils.shift(byteArray0, 1506);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)3;
      floatArray0[1] = (float) (byte)3;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1506, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1506, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 'c';
      longArray0[2] = 1L;
      longArray0[3] = 579L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 579L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {99L, 99L, 1L, 579L}, longArray0);
      assertEquals(3, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 579L;
      floatArray0[1] = (float) 579L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 'c';
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F, 3);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{4, 5}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {579.0F, 579.0F, 1.0F, 99.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("T<Q}S)q");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf("*:l");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.valueOf(true);
      assertNotNull(boolean7);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = new Boolean("java.lang.Float");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean3));
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = new Boolean(boolean0);
      assertNotNull(boolean9);
      assertFalse(boolean9);
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean6));
      assertFalse(boolean9.equals((Object)boolean5));
      assertTrue(boolean9.equals((Object)boolean0));
      assertTrue(boolean9.equals((Object)boolean3));
      
      booleanArray0[8] = boolean9;
      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean8);
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean9));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-449);
      floatArray0[1] = (float) (-449);
      floatArray0[2] = (float) (-449);
      ArrayUtils.shift(floatArray0, (-2152), (-449), 97);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-850.90497F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-2152));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2152)}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 266, (-449));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(0, int0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F), (-449.0F), (-449.0F), (-449.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'I';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {73}, intArray0);
      assertArrayEquals(new int[] {0, 73}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 266, 266);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(1, int0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[4]);
      assertEquals(6, objectArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)55;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)55;
      longArray0[4] = (long) (short)55;
      longArray0[5] = (-3061L);
      longArray0[6] = (long) (short)55;
      long[] longArray1 = ArrayUtils.add(longArray0, 49L);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {55L, 0L, 0L, 55L, 55L, (-3061L), 55L, 49L}, longArray1);
      assertArrayEquals(new long[] {55L, 0L, 0L, 55L, 55L, (-3061L), 55L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = 2;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int int1 = 1456;
      short[] shortArray0 = new short[0];
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean2);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Double[]) null, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = '#';
      Object[] objectArray0 = new Object[0];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object0 = ArrayUtils.get(objectArray0, 863, (Object) boolean0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object0);
      assertEquals(true, object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 606, object0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object1);
      assertEquals(true, object1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1457;
      intArray0[1] = 606;
      intArray0[2] = 863;
      charArray0[0] = '#';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-682));
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1457, 606, 863, 0}, intArray0);
      assertArrayEquals(new int[] {(-682), 1457, 606, 863, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      longArray0[3] = (long) 0;
      int int0 = ArrayUtils.indexOf(longArray0, 3364L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 3364L;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) (-1L);
      floatArray0[8] = (float) 3364L;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 3364.0F, (-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F), 3364.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 3364.0F, (-1.0F), 0.0F, 0.0F, 0.0F, (-1.0F), 3364.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1296.52));
      assertNotNull(double0);
      assertEquals((-1296.52), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 3, (-669));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 3;
      longArray1[1] = (-3597L);
      longArray1[5] = 841L;
      longArray1[3] = (long) (-1);
      longArray1[4] = 1247L;
      longArray1[5] = (long) (-1);
      ArrayUtils.swap(longArray1, 3931, 3250);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {3L, (-3597L), 0L, (-1L), 1247L, (-1L)}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)45;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)101);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)45}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte)45}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)101);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {101.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Long[] longArray2 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray2);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(868.7337);
      assertNotNull(double0);
      assertEquals(868.7337, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(868.7337);
      assertNotNull(double1);
      assertEquals(868.7337, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte)45);
      assertNotNull(double2);
      assertEquals(45.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'J');
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.49255018;
      ArrayUtils.swap(doubleArray0, 1, 1, 1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {93.49255018}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2331), (-2331));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)23, (int) (byte)44);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte)44;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), (-1.0F), 44.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Character character0 = new Character('e');
      assertNotNull(character0);
      assertEquals('e', (char)character0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      ArrayUtils.swap(objectArray0, (-5), Integer.MAX_VALUE, 2187);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-449);
      floatArray0[1] = (float) (-449);
      floatArray0[2] = (float) (-449);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-850.90497F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      
      Byte[] byteArray1 = new Byte[4];
      byte byte0 = (byte)9;
      Byte byte1 = new Byte((byte)9);
      assertNotNull(byte1);
      assertEquals((byte)9, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertEquals((byte)9, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray1[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertEquals((byte)9, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray1[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte)9, (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray1[3] = byte4;
      Byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (Byte) byte0);
      assertEquals(0, byteArray2.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-70));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("34", mutableInt0.toString());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      mutableInt0.add(0);
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("34", mutableInt0.toString());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-34);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)53, (byte) (-34)}, byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)53, (byte) (-34)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)42, (byte)53, (byte) (-34)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1438);
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2006);
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)18688;
      shortArray0[4] = (short)87;
      shortArray0[5] = (short)18688;
      ArrayUtils.swap(shortArray0, (-1902), 8, 896);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2006), (short)18688, (short)18688, (short)18688, (short)87, (short)18688}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)617);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)617, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)104;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)104}, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)1;
      objectArray0[4] = (Object) (byte)1;
      objectArray0[5] = (Object) (byte)1;
      objectArray0[6] = (Object) (byte)1;
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (byte)104;
      objectArray1[1] = object0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertEquals(2, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(boolean1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)104}, byteArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte)23);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Character[] characterArray0 = new Character[26];
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character((char) character0);
      assertNotNull(character2);
      assertEquals('i', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      ArrayUtils.swap((Object[]) characterArray0, 182, (-1506), (int) (byte)23);
      assertEquals(26, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146428521, 36);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte byte0 = (byte) (-104);
      Byte byte1 = new Byte((byte) (-104));
      assertNotNull(byte1);
      assertEquals((byte) (-104), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-104));
      assertNotNull(byte2);
      assertEquals((byte) (-104), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, 3354, 2);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray2, (byte)35);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) byte2, 3354);
      assertEquals(0, byteArray1.length);
      assertEquals((-1), int1);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 1210, 1);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)494;
      shortArray0[1] = (short) (-571);
      shortArray0[2] = (short)887;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1579;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)9;
      shortArray0[7] = (short) (-3396);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)494);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)494, (short) (-571), (short)887, (short)2, (short)1579, (short)2, (short)9, (short) (-3396)}, shortArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(723L);
      assertNotNull(long0);
      assertEquals(723L, (long)long0);
      
      Long long1 = Long.getLong("", long0);
      assertNotNull(long1);
      assertEquals(723L, (long)long1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) long1, (-95));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-95);
      intArray0[2] = (int) (byte)51;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int int0 = ArrayUtils.indexOf(intArray0, 51);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-95), 51, 0, 0}, intArray0);
      assertEquals(2, int0);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte)0;
      Byte byte0 = new Byte((byte)117);
      assertNotNull(byte0);
      assertEquals((byte)117, (byte)byte0);
      
      byteArray1[1] = byte0;
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      byteArray1[6] = (Byte) (byte)0;
      byteArray1[7] = (Byte) (byte)0;
      byteArray1[8] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)117, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      Double double0 = new Double((short)433);
      assertNotNull(double0);
      assertEquals(433.0, (double)double0, 0.01);
      
      Double double1 = new Double((short)433);
      assertNotNull(double1);
      assertEquals(433.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)91;
      floatArray0[1] = (float) (short)433;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)433;
      doubleArray0[2] = (double) (short)433;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 433.0F;
      doubleArray0[5] = (double) 91.0F;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)91;
      doubleArray0[8] = (double) (short)91;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.5);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5, 0.0, 433.0, 433.0, 0.0, 433.0, 91.0, 0.0, 91.0, 91.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 433.0, 433.0, 0.0, 433.0, 91.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 433.0F, (int) (short)0, (-2769.85));
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 433.0, 433.0, 0.0, 433.0, 91.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray1, 100.2825);
      assertEquals(10, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5, 0.0, 433.0, 433.0, 0.0, 433.0, 91.0, 0.0, 91.0, 91.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.5, 0.0, 433.0, 433.0, 0.0, 433.0, 91.0, 0.0, 91.0, 91.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 433.0, 433.0, 0.0, 433.0, 91.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 4537.0F;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4537.0F;
      doubleArray0[1] = (double) 4537.0F;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) (-383.54788F);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = (double) (-383.54788F);
      doubleArray0[7] = 1.5;
      doubleArray0[8] = (double) 4537.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (-44.64205926794102));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {4537.0, 4537.0, 1.5, (-383.5478820800781), 1.0, 1.5, (-383.5478820800781), 1.5, 4537.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2815;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)2815;
      doubleArray0[2] = (double) '%';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 100.0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2815.0, 0.0, 37.0}, doubleArray0, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      Short[] shortArray0 = new Short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1728.8832F);
      floatArray0[1] = (float) (-1);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1728.8832F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-884.0);
      doubleArray0[1] = (double) (-1728.8832F);
      int int0 = new Integer(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("5 eBt*wE");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("5 eBt*wE");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("dmf 9<x}p0M,");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((String) null);
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean("p");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean6);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false}, booleanArray1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean7));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 1331L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1331L);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 1331L}, longArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf("5 eBt*wE");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[2] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[3] = boolean2;
      Boolean boolean3 = Boolean.valueOf("dmf 9<x}p0M,");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[4] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[5] = boolean4;
      Boolean boolean5 = new Boolean((String) null);
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      
      booleanArray0[6] = boolean5;
      Boolean boolean6 = new Boolean("p");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean5);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, false}, booleanArray1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean6));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 1331L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1331L);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 1331L}, longArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("5 eBt*wE");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("5 eBt*wE");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("dmf 9<x}p0M,");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((String) null);
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean("p");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean3));
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean6);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean7));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 1331L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1331L);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 1331L}, longArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      char[] charArray0 = new char[2];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 52.0F;
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 'D';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 91.0F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {52.0F, 68.0F, 68.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F, 68.0F, 68.0F, 91.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'D';
      ArrayUtils.shift(doubleArray0, (-956), (-956), Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4562.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2918.7971011318);
      Long long0 = null;
      Long[] longArray0 = new Long[1];
      longArray0[0] = null;
      int int0 = 1871;
      Long long1 = new Long((-347L));
      assertNotNull(long1);
      assertEquals((-347L), (long)long1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 1871, long1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1871, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[4] = object3;
      Double double0 = new Double((-572));
      assertNotNull(double0);
      assertEquals((-572.0), (double)double0, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 1393, 1, (-2107715431));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long long0 = 717L;
      Long long1 = new Long(717L);
      assertNotNull(long1);
      assertEquals(717L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, 2528, long1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2528, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'd';
      ArrayUtils.reverse(doubleArray0, 2569, 102);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 102;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-834);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-834)}, shortArray0);
      
      int int0 = (-1795);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'd';
      ArrayUtils.swap(intArray0, (int) (short) (-834), 90, 85);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {100}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-109));
      assertNotNull(byte0);
      assertEquals((byte) (-109), (byte)byte0);
      
      MutableInt mutableInt0 = new MutableInt((-660));
      assertEquals((-660), (int)mutableInt0.getValue());
      assertEquals((byte)108, mutableInt0.byteValue());
      assertEquals((-660L), mutableInt0.longValue());
      assertEquals((-660), (int)mutableInt0.toInteger());
      assertEquals((-660.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-660.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-660), mutableInt0.intValue());
      assertEquals("-660", mutableInt0.toString());
      assertEquals((short) (-660), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int1 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) byte0, (-660));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-834)}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 2, (float) (-1795));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "v;z*$Is%:ulF";
      stringArray0[2] = "o^+P-sM5nrt+AL}";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 504L);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 48;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 41.0, 1183, 0.1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {48.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 3, (-669));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 3;
      longArray1[1] = (-3597L);
      longArray1[2] = 841L;
      longArray1[3] = (long) (-1);
      longArray1[4] = 1247L;
      longArray1[5] = (long) (-1);
      ArrayUtils.swap(longArray1, 3931, (-1));
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {3L, (-3597L), 841L, (-1L), 1247L, (-1L)}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)45;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)101);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)45}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte)45}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)101);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {101.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, (-2705L));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = ',';
      charArray0[2] = '3';
      charArray0[3] = 'b';
      charArray0[4] = '#';
      charArray0[5] = 's';
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '#';
      floatArray0[1] = (float) ',';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-594.481F));
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {35.0F, 44.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-594.481F), 35.0F, 44.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 175.54107531187714;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.toObject(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)120;
      longArray0[1] = (long) '4';
      longArray0[2] = (-328L);
      longArray0[1] = (long) '4';
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 5);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {120L, 52L, (-328L), 0L}, longArray0);
      assertEquals((-1), int0);
      
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals(1, shortArray0.length);
      assertNotNull(short1);
      assertEquals((short) (-4991), (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-2035));
      assertNotNull(short2);
      assertEquals((short) (-2035), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((byte)120);
      assertNotNull(short3);
      assertEquals((short)120, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      Short short4 = new Short((byte)120);
      assertNotNull(short4);
      assertEquals((short)120, (short)short4);
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, (-2146010751));
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray1, 'T');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals((-1), int1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-2035);
      floatArray0[1] = 1201.672F;
      floatArray0[2] = 976.55F;
      floatArray0[3] = (float) (short) (-4991);
      floatArray0[4] = (float) (short)shortArray0[0];
      floatArray0[5] = (-449.0F);
      ArrayUtils.reverse(floatArray0, (-1), (int) shortArray0[0]);
      assertEquals(1, shortArray0.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-2035.0F), 1201.672F, 976.55F, (-4991.0F), (-4991.0F), (-449.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = Integer.valueOf(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      mutableInt0.setValue((Number) int0);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      
      mutableInt0.add(0);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int2 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer0, 1287);
      assertEquals(9, integerArray0.length);
      assertEquals((-1), int2);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 34;
      ArrayUtils.shift(longArray0, 89, 0, (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 34L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      int int0 = 1438;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      Double double0 = new Double(1438);
      assertNotNull(double0);
      assertEquals(1438.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      int int1 = (-52);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-52), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -52, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean[] booleanArray0 = new boolean[5];
      int[] intArray0 = new int[0];
      Boolean[] booleanArray1 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean("', is neither of type Map.Entry nor an Array");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean0);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      
      booleanArray1[3] = boolean3;
      Boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, (Object) "T<Q}S)q");
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 52);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2195);
      ArrayUtils.shift(intArray0, 86, (-2195), (-2195));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-2195), booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[6];
      booleanArray2[0] = boolean0;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = boolean0;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = boolean0;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2400;
      shortArray0[1] = (short)122;
      shortArray0[2] = (short)1824;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2400, (short)122, (short)1824}, shortArray0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-570), (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2195);
      floatArray0[1] = (float) (short)122;
      floatArray0[2] = (float) (short)122;
      floatArray0[3] = (float) (short)122;
      floatArray0[4] = (float) (short)122;
      floatArray0[5] = (float) (short)1824;
      floatArray0[6] = (float) (-2195);
      floatArray0[7] = (float) (short)122;
      floatArray0[8] = 2939.2646F;
      boolean boolean3 = ArrayUtils.isSorted(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-2195.0F), 122.0F, 122.0F, 122.0F, 122.0F, 1824.0F, (-2195.0F), 122.0F, 2939.2646F}, floatArray0, 0.01F);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      int int0 = ArrayUtils.indexOf((float[]) null, 617.1899F);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      int[] intArray0 = new int[4];
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      Long long0 = new Long(3267L);
      assertNotNull(long0);
      assertEquals(3267L, (long)long0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, long0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) 'm';
      doubleArray0[2] = (double) 3267L;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {109.0, 3267.0, 109.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.subarray((Boolean[]) null, 1716, 1716);
      assertNull(booleanArray0);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 109.0;
      doubleArray1[1] = (Double) 109.0;
      doubleArray0[0] = 109.0;
      doubleArray1[3] = (Double) 3267.0;
      doubleArray1[4] = (Double) 109.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-320.0));
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {109.0, 109.0, (-320.0), 3267.0, 109.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, booleanArray1.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Boolean boolean1 = new Boolean("H=K>.]F1LtN{.S6S?");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) doubleArray1[2], 2227);
      assertEquals(5, doubleArray1.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = ArrayUtils.insert((int) (byte)51, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)58;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)51;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (byte)58;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)58, (short)0, (short)51, (short)0, (short)0, (short)58}, shortArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "v;z*$Is%:ulF";
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      assertEquals(0, longArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '<';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) '<';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 127);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {60, 60}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.reverse(intArray0, (-357), (-357));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {60, 60}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '4';
      characterArray0[1] = (Character) '\u0000';
      characterArray0[2] = (Character) '4';
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (char)characterArray0[1];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[3] = (float) '\u0000';
      ArrayUtils.shift(floatArray0, (int) 'K');
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {52.0F, 52.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-590.892F));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {52.0F, 52.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MockRandom mockRandom0 = new MockRandom(1407L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, (-3215), (-3215), (int) (short)0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      Character character0 = new Character('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'B', 'B', 't', 'B'}, charArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (char)character1;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {116L}, longArray0);
      assertArrayEquals(new long[] {116L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap((byte[]) null, (int) character0, (int) character1, (int) character0);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) '^';
      longArray0[2] = (long) '^';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1601L);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 94L, 94L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1601L, 0L, 94L, 94L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 1210, 1);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)494;
      shortArray0[1] = (short) (-571);
      shortArray0[2] = (short)887;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1579;
      shortArray0[6] = (short)9;
      shortArray0[7] = (short) (-3396);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)494);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)494, (short) (-571), (short)887, (short)2, (short)1579, (short)0, (short)9, (short) (-3396)}, shortArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-956);
      shortArray0[2] = (short)79;
      shortArray0[3] = (short)1116;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)53;
      shortArray0[6] = (short) (-925);
      shortArray0[7] = (short)403;
      shortArray0[8] = (short)0;
      ArrayUtils.shift(shortArray0, 794, 2, 1483);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-956), (short)79, (short)1116, (short) (-1), (short)53, (short) (-925), (short)403, (short)0}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (short)403, (-111));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-30));
      assertNotNull(byte0);
      assertEquals((byte) (-30), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-30);
      shortArray0[1] = (short) (byte) (-30);
      shortArray0[2] = (short) (byte) (-30);
      shortArray0[3] = (short) (byte) (-106);
      shortArray0[4] = (short) (byte) (-30);
      shortArray0[5] = (short) (byte) (-106);
      shortArray0[6] = (short) (byte) (-106);
      shortArray0[7] = (short) (byte) (-30);
      shortArray0[8] = (short) (byte) (-106);
      ArrayUtils.shift(shortArray0, (int) (short) (-30), (-747), (int) (short) (-106));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-30), (short) (-30), (short) (-30), (short) (-106), (short) (-30), (short) (-106), (short) (-106), (short) (-30), (short) (-106)}, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)11;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)11;
      ArrayUtils.reverse(byteArray0, (int) (short) (-30), 1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-30), (byte)11, (byte)0, (byte) (-106), (byte) (-106), (byte)11, (byte)11}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-30));
      assertNotNull(byte0);
      assertEquals((byte) (-30), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-30);
      shortArray0[1] = (short) (byte) (-30);
      shortArray0[2] = (short) (byte) (-30);
      shortArray0[3] = (short) (byte) (-106);
      shortArray0[4] = (short) (byte) (-30);
      shortArray0[5] = (short) (byte) (-106);
      shortArray0[6] = (short) (byte) (-106);
      shortArray0[7] = (short) (byte) (-30);
      shortArray0[8] = (short) (byte) (-106);
      ArrayUtils.shift(shortArray0, (int) (short) (-30), (-747), 3577);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-30), (short) (-30), (short) (-30), (short) (-106), (short) (-30), (short) (-106), (short) (-106), (short) (-30), (short) (-106)}, shortArray0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('d');
      assertNotNull(character1);
      assertEquals('d', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('d');
      assertNotNull(character2);
      assertEquals('d', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('D');
      assertNotNull(character3);
      assertEquals('D', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('');
      assertNotNull(character4);
      assertEquals('', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = new Character('?');
      assertNotNull(character5);
      assertEquals('?', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf((char) character0);
      assertNotNull(character6);
      assertEquals('m', (char)character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character4));
      
      characterArray0[6] = character6;
      Character character7 = new Character('D');
      assertNotNull(character7);
      assertEquals('D', (char)character7);
      assertTrue(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character0));
      
      characterArray0[7] = character7;
      Character character8 = new Character((char) character3);
      assertNotNull(character8);
      assertEquals('D', (char)character8);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character5));
      assertTrue(character3.equals((Object)character7));
      assertFalse(character3.equals((Object)character4));
      assertFalse(character3.equals((Object)character6));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character2));
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'m', 'd', 'd', 'D', '', '?', 'm', 'D', 'D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean0);
      
      ArrayUtils.swap(longArray0, 7, (-353), (-2146412048));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      ArrayUtils.shift(doubleArray0, 7);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'f';
      charArray0[4] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'z', 'z', 'f', 'Y'}, charArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'z';
      floatArray0[1] = (float) 'Q';
      floatArray0[2] = (float) 15;
      floatArray0[3] = (float) 'Q';
      floatArray0[4] = (float) 'Q';
      floatArray0[5] = (float) 'z';
      floatArray0[6] = (float) 'z';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(15, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 78.557, (-1), 78.557);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-2645L));
      assertNotNull(long0);
      assertEquals((-2645L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1688L);
      assertNotNull(long1);
      assertEquals(1688L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2645L), 1688L}, longArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "z");
      assertEquals(2, longArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-299));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-40.78854305512851));
      assertNotNull(float0);
      assertEquals((-40.788544F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-2541.8F));
      assertNotNull(float2);
      assertEquals((-2541.8F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float3);
      assertEquals((-40.788544F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-2541.8F));
      assertNotNull(float5);
      assertEquals((-2541.8F), (float)float5, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) floatArray0[2]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float6);
      assertEquals((-2541.8F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) floatArray0[4]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float7);
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      
      floatArray0[7] = float7;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[8] = (int) (byte)91;
      intArray0[2] = 86;
      intArray0[3] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 9, (-117));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)35);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, false, 16);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, int1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      long[] longArray0 = new long[2];
      longArray0[0] = 2L;
      longArray0[1] = (long) '#';
      int int0 = ArrayUtils.indexOf(longArray0, 2147483647L, (-1457));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2L, 35L}, longArray0);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)53);
      assertNotNull(short0);
      assertEquals((short)53, (short)short0);
      
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertEquals((short)0, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      
      Short short4 = new Short((short)951);
      assertNotNull(short4);
      assertEquals((short)951, (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      shortArray0[4] = short4;
      shortArray0[5] = short0;
      shortArray0[6] = short1;
      shortArray0[7] = short0;
      shortArray0[8] = short3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, (-485));
      assertEquals(9, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = 1573L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 1L, 1573L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1573L;
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) 1L;
      objectArray0[3] = (Object) 1573L;
      objectArray0[4] = (Object) (-1L);
      objectArray0[5] = (Object) 1573L;
      objectArray0[6] = (Object) 1L;
      objectArray0[7] = (Object) 1L;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(objectArray0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)23;
      longArray0[2] = (long) (byte)44;
      longArray0[4] = (long) (byte)23;
      longArray0[5] = (long) (byte)23;
      longArray0[6] = 684L;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)44;
      intArray0[1] = (int) (byte)23;
      intArray0[2] = (int) (byte)44;
      intArray0[3] = (-1);
      intArray0[4] = (-669);
      intArray0[5] = 2655;
      ArrayUtils.swap(intArray0, 1210, 296, 44);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {44, 23, 44, (-1), (-669), 2655}, intArray0);
      
      ArrayUtils.reverse(byteArray0, (-669), 7);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23, (byte)44}, byteArray0);
      
      Float[] floatArray2 = new Float[5];
      Float float0 = new Float(4654.0);
      assertNotNull(float0);
      assertEquals(4654.0F, (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Float float1 = new Float((double) 23);
      assertNotNull(float1);
      assertEquals(23.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray2[1] = float1;
      Float float2 = new Float(914.626);
      assertNotNull(float2);
      assertEquals(914.626F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray2[2] = float2;
      Float float3 = new Float((float) 296);
      assertNotNull(float3);
      assertEquals(296.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray2[3] = float3;
      Float float4 = new Float((-2884.3639437028));
      assertNotNull(float4);
      assertEquals((-2884.364F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      floatArray2[4] = float4;
      Comparator<Float> comparator0 = (Comparator<Float>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyFloat() , anyFloat());
      boolean boolean0 = ArrayUtils.isSorted(floatArray2, comparator0);
      assertEquals(5, floatArray2.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2118.3125260047873);
      doubleArray0[1] = (-1287.2431255854);
      doubleArray0[2] = Double.NaN;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2081.13644645);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2118.3125260047873), (-1287.2431255854), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2118.3125260047873), (-1287.2431255854), Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) 0;
      longArray0[5] = (long) (byte)51;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      ArrayUtils.swap(byteArray0, (int) (byte)0, 0, 5);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)51);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(byteArray0, 1482, (-2145960608), (-4299));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)51);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray0, (-2490));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 51}, intArray0);
      assertArrayEquals(new int[] {0, 51}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'K';
      charArray0[2] = '_';
      charArray0[3] = ':';
      charArray0[4] = '(';
      charArray0[5] = 'b';
      charArray0[6] = 'r';
      charArray0[7] = '9';
      char[] charArray1 = ArrayUtils.add(charArray0, 'u');
      assertEquals(9, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'X', 'K', '_', ':', '(', 'b', 'r', '9', 'u'}, charArray1);
      assertArrayEquals(new char[] {'X', 'K', '_', ':', '(', 'b', 'r', '9'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      byteArray0[2] = (byte)0;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte) (-18);
      objectArray0[2] = (Object) (byte) (-18);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte) (-18);
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) (byte) (-18);
      objectArray0[7] = (Object) (byte)0;
      MutableInt mutableInt0 = new MutableInt((Number) (byte)0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.add((int) (byte) (-18));
      assertEquals((-18.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-18), mutableInt0.shortValue());
      assertEquals((-18), mutableInt0.intValue());
      assertEquals((-18), (int)mutableInt0.getValue());
      assertEquals((byte) (-18), mutableInt0.byteValue());
      assertEquals((-18L), mutableInt0.longValue());
      assertEquals((-18.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-18), (int)mutableInt0.toInteger());
      assertEquals("-18", mutableInt0.toString());
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) mutableInt0);
      assertEquals((-18.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-18), mutableInt0.shortValue());
      assertEquals((-18), mutableInt0.intValue());
      assertEquals((-18), (int)mutableInt0.getValue());
      assertEquals((byte) (-18), mutableInt0.byteValue());
      assertEquals((-18L), mutableInt0.longValue());
      assertEquals((-18.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-18), (int)mutableInt0.toInteger());
      assertEquals("-18", mutableInt0.toString());
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      ArrayUtils.swap(intArray0, (-2652), (-1), (-2146765595));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2231);
      shortArray0[1] = (short) (-1989);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1268;
      shortArray0[5] = (short)1517;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1989));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2231), (short) (-1989), (short)0, (short)0, (short)1268, (short)1517}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[3] = (double) (byte) (-117);
      doubleArray0[4] = (double) (byte) (-117);
      doubleArray0[5] = (double) (byte)56;
      doubleArray0[6] = (-1863.729780602);
      Float float0 = new Float((float) (byte)34);
      assertNotNull(float0);
      assertEquals(34.0F, (float)float0, 0.01F);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)34;
      shortArray0[1] = (short) (byte) (-117);
      shortArray0[2] = (short) (byte) (-117);
      shortArray0[3] = (short) (byte)34;
      shortArray0[4] = (short) (byte)56;
      shortArray0[5] = (short) (byte)56;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte)34);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short) (-117), (short) (-117), (short)34, (short)56, (short)56}, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'E';
      charArray0[2] = 'm';
      charArray0[3] = 'n';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'E';
      objectArray0[1] = (Object) 'n';
      objectArray0[2] = (Object) 'E';
      objectArray0[3] = (Object) 'n';
      objectArray0[4] = (Object) 'E';
      objectArray0[5] = (Object) 'n';
      objectArray0[6] = (Object) 'n';
      ArrayUtils.shift(objectArray0, (-3202), (-3202), (int) 'e');
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, 0, 3650, 2);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-140), 649, 58);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)230;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-2571);
      shortArray0[3] = (short)34;
      shortArray0[4] = (short) (-1137);
      shortArray0[5] = (short) (-1049);
      shortArray0[6] = (short)2;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)230, (short)1, (short) (-2571), (short)34, (short) (-1137), (short) (-1049), (short)2}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap((int[]) null, (-2652), (-2652), 64);
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray2, false);
      assertEquals(64, bitSet0.size());
      assertEquals("{6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray2.length);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-1024), 64, 64);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)403;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)91;
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 120;
      doubleArray0[2] = (double) 403;
      doubleArray0[3] = (double) 91;
      doubleArray0[4] = (double) (short)91;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) (short)91;
      ArrayUtils.swap(doubleArray0, (-863), (int) (short)0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, 120.0, 403.0, 91.0, 91.0, 0.0, 0.0, 0.0, 91.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)82, 2141061726);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      Short short0 = new Short((short) (-934));
      assertNotNull(short0);
      assertEquals((short) (-934), (short)short0);
      
      MutableInt mutableInt0 = new MutableInt(90);
      assertEquals((byte)90, mutableInt0.byteValue());
      assertEquals("90", mutableInt0.toString());
      assertEquals(90, (int)mutableInt0.toInteger());
      assertEquals(90, (int)mutableInt0.getValue());
      assertEquals(90L, mutableInt0.longValue());
      assertEquals(90.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(90.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(90, mutableInt0.intValue());
      assertEquals((short)90, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isEquals(mutableInt0, short0);
      assertEquals((byte)90, mutableInt0.byteValue());
      assertEquals("90", mutableInt0.toString());
      assertEquals(90, (int)mutableInt0.toInteger());
      assertEquals(90, (int)mutableInt0.getValue());
      assertEquals(90L, mutableInt0.longValue());
      assertEquals(90.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(90.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(90, mutableInt0.intValue());
      assertEquals((short)90, mutableInt0.shortValue());
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 2578);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)6322;
      intArray0[1] = 0;
      intArray0[2] = 102;
      intArray0[3] = 2145764285;
      intArray0[4] = 90;
      intArray0[5] = (int) 'u';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 90, 1473);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      charArray0[7] = 'U';
      charArray0[8] = 'O';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '?');
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'O'}, charArray1);
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'O'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(doubleArray0, 2071);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 51.0}, doubleArray0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      String[] stringArray0 = new String[3];
      Character character0 = Character.valueOf('6');
      assertNotNull(character0);
      assertEquals('6', (char)character0);
      
      Object object0 = ArrayUtils.get((Object[]) stringArray0, 619, (Object) character0);
      assertEquals(3, stringArray0.length);
      assertNotNull(object0);
      assertEquals('6', object0);
      
      ArrayUtils.shift((Object[]) stringArray0, 117, 717, 8);
      assertEquals(3, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-449);
      floatArray0[1] = (float) (-449);
      floatArray0[2] = (float) (-449);
      ArrayUtils.shift(floatArray0, (-2152), (-449), 97);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-850.90497F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      MockRandom mockRandom0 = new MockRandom(728L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-449.0F);
      doubleArray0[1] = (double) (-449.0F);
      doubleArray0[2] = (double) 97;
      doubleArray0[3] = (double) 97;
      doubleArray0[4] = (-2917.9934);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-449.0), 97.0, 97.0, (-2917.9934), (-449.0)}, doubleArray0, 0.01);
      
      ArrayUtils.swap(booleanArray0, 1072, (-762), 1765);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      ArrayUtils.reverse(floatArray1, 1072, (-449));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '7';
      Character character0 = Character.valueOf('7');
      assertNotNull(character0);
      assertEquals('7', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('7', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) (short)1473;
      doubleArray0[3] = (double) '7';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)10;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)10}, shortArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 881);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false}, booleanArray0));
      assertEquals(6, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 76);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {55.0, 1473.0, 0.0, 55.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)10;
      floatArray0[1] = (float) char0;
      floatArray0[2] = (float) char0;
      floatArray0[3] = (float) char0;
      floatArray0[4] = (float) 881;
      floatArray0[5] = (float) char0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (short)1473);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1473, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2815;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)18688;
      ArrayUtils.swap(shortArray0, 5, (int) (short)0, (-99));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2815, (short)0, (short)18688}, shortArray0);
      
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[0];
      MockRandom mockRandom1 = new MockRandom(23L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      assertEquals(0, longArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.reverse((int[]) null, 1429, (-99));
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-2147483648L));
      assertNull(longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = '7';
      charArray0[2] = '6';
      charArray0[3] = '7';
      charArray0[4] = '=';
      charArray0[5] = 'N';
      charArray0[6] = 'K';
      charArray0[7] = 'w';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'v', '7', '6', '7', '=', 'N', 'K', 'w'}, charArray0);
      assertArrayEquals(new char[] {'v', '7', '6', '7', '=', 'N', 'K', 'w'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray1 = ArrayUtils.addFirst((long[]) null, (-1714L));
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1714L)}, longArray1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'd';
      ArrayUtils.reverse(doubleArray0, 2569, 102);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 102;
      longArray0[2] = (long) 102;
      longArray0[3] = (long) 102;
      longArray0[4] = (long) 'd';
      longArray0[5] = (long) 102;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {100L, 102L, 102L, 102L, 100L, 102L}, longArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) 100L;
      longArray1[1] = (Long) 102L;
      longArray1[2] = (Long) 100L;
      longArray1[3] = (Long) 102L;
      longArray1[4] = (Long) 102L;
      Long long0 = new Long((-692L));
      assertNotNull(long0);
      assertEquals((-692L), (long)long0);
      
      longArray1[5] = long0;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray2);
      assertSame(longArray2, longArray1);
      assertSame(longArray1, longArray2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (long)longArray1[0];
      floatArray0[1] = (float) 102L;
      floatArray0[2] = (float) (long)longArray1[1];
      floatArray0[3] = (float) (long)longArray1[2];
      ArrayUtils.swap(floatArray0, 2146428521, 1044, 0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {100.0F, 102.0F, 102.0F, 100.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      Double double0 = new Double((short)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((short)0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)91;
      floatArray0[1] = (float) (short)0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (-850));
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-58), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      Double double0 = new Double((short)433);
      assertNotNull(double0);
      assertEquals(433.0, (double)double0, 0.01);
      
      Double double1 = new Double((short)433);
      assertNotNull(double1);
      assertEquals(433.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)91;
      floatArray0[1] = (float) (short)433;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 433.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 433.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 91.0F;
      doubleArray0[2] = (double) (short)91;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 433.0F;
      doubleArray0[5] = (double) (short)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 91.0, 91.0, 0.0, 433.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 't';
      charArray0[2] = '+';
      charArray0[3] = '~';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 't');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'J', 't', '+', '~'}, charArray0);
      assertArrayEquals(new char[] {'t', 'J', 't', '+', '~'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-956.0);
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      doubleArray0[5] = (-1610.2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.swap(charArray0, (-2195), (-2195), (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (-1), Integer.MAX_VALUE, (int) (byte)52);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)52, (byte)9, (byte) (-1)}, byteArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte) (-1));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)52;
      floatArray0[1] = (float) 'F';
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) 'F';
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) (byte)52;
      floatArray0[7] = (float) 'g';
      floatArray0[8] = (float) 'g';
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {52.0F, 70.0F, (-1.0F), (-1.0F), 70.0F, 2.14748365E9F, 52.0F, 103.0F, 103.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2118.3125260047873);
      doubleArray0[1] = (-1287.2431255854);
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      Double double0 = new Double((short)433);
      assertNotNull(double0);
      assertEquals(433.0, (double)double0, 0.01);
      
      Double double1 = new Double((short)433);
      assertNotNull(double1);
      assertEquals(433.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)91;
      floatArray0[1] = (float) (short)433;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 433.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 433.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 91.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(369L);
      assertNotNull(long0);
      assertEquals(369L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1307L));
      assertNotNull(long1);
      assertEquals((-1307L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-1307L));
      assertNotNull(long2);
      assertEquals((-1307L), (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {369L, (-1307L), (-1307L)}, longArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-3072), byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse((Object[]) longArray0, 83, 2146671744);
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, (-2146816312), (long) longArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146816312, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3167.3662F);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 0;
      intArray0[6] = (-2896);
      intArray0[7] = 0;
      intArray0[8] = 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1259.4F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)18688;
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)18688;
      shortArray0[4] = (short)18688;
      shortArray0[5] = (short)18688;
      shortArray0[6] = (short)18688;
      ArrayUtils.swap(shortArray0, (-258), 1, 48);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)0, (short)18688}, shortArray0);
      
      Long long0 = new Long((-258));
      assertNotNull(long0);
      assertEquals((-258L), (long)long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)18688;
      floatArray0[1] = 1.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {18688.0F, 1.0F}, floatArray0, 0.01F);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)0, (short)18688}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      short short0 = (short)18688;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)18688;
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)18688;
      shortArray0[4] = (short)18688;
      shortArray0[5] = (short)18688;
      shortArray0[6] = (short)18688;
      shortArray0[7] = (short)18688;
      int int0 = (-258);
      int int1 = 1;
      ArrayUtils.swap(shortArray0, (-258), 1, 48);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688}, shortArray0);
      
      Long long0 = new Long((-258));
      assertNotNull(long0);
      assertEquals((-258L), (long)long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      byte byte0 = (byte)76;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)76;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)18688, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146428521, 36);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Double double0 = new Double(102);
      assertNotNull(double0);
      assertEquals(102.0, (double)double0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '1';
      charArray0[2] = '^';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'^', '1', '^'}, charArray0);
      assertFalse(boolean1);
      
      float[] floatArray0 = ArrayUtils.insert(2146428521, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = '?';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '4';
      intArray0[1] = (int) '&';
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {52, 38}, intArray0);
      assertArrayEquals(new int[] {52, 38, 52, 38}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) 2;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) '&';
      floatArray0[4] = (float) 'm';
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 'm';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {52.0F, 2.0F, (-1.0F), 38.0F, 109.0F, 2.0F, 109.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {52.0F, 2.0F, (-1.0F), 38.0F, 109.0F, 2.0F, 109.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'm', '4', '&', '?'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1234);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-1234)}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '1';
      intArray0[1] = (int) '^';
      intArray0[2] = (int) '^';
      intArray0[3] = (int) '^';
      intArray0[4] = 102;
      intArray0[5] = (int) '1';
      intArray0[6] = 3250;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {49, 94, 94, 94, 102, 49, 3250}, intArray0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3250);
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {49, 94, 94, 94, 102, 49, 3250}, intArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'^', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2433;
      shortArray0[2] = (short)4827;
      shortArray0[3] = (short) (-334);
      shortArray0[4] = (short)361;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)2358;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2433, (short)4827, (short) (-334), (short)361, (short)1, (short)2358}, shortArray0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', '\u0000'}, charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 3250;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)4827;
      floatArray0[3] = (float) 3250;
      floatArray0[4] = (float) (short) (-334);
      floatArray0[5] = (float) 94;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)4827, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4827, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (byte)0;
      ArrayUtils.shift(doubleArray1, (-92));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1549L);
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1549.0F)}, floatArray0, 0.01F);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)4960;
      shortArray0[2] = (short) (-1382);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)2918;
      shortArray0[5] = (short) (-684);
      shortArray0[6] = (short) (-28744);
      boolean boolean4 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)4960, (short) (-1382), (short) (-1), (short)2918, (short) (-684), (short) (-28744)}, shortArray0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (int) (short)2918;
      intArray3[1] = (int) (short)1;
      intArray3[2] = (int) (short) (-684);
      intArray3[3] = (-866);
      intArray3[4] = (int) (short) (-684);
      intArray3[5] = (int) (short) (-28744);
      intArray3[6] = (int) (short) (-684);
      ArrayUtils.reverse(intArray3, 3186, (int) (short)2918);
      assertEquals(7, intArray3.length);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {2918, 1, (-684), (-866), (-684), (-28744), (-684)}, intArray3);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("34", mutableInt0.toString());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, mutableInt0.intValue());
      assertEquals((short)34, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      
      mutableInt0.add(0);
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("34", mutableInt0.toString());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, mutableInt0.intValue());
      assertEquals((short)34, mutableInt0.shortValue());
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (long) (short)55;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {55L, 1L}, longArray0);
      
      ArrayUtils.reverse((int[]) null, (int) (short)55, (-2713));
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-988);
      int int0 = 734;
      intArray0[2] = 734;
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (-2.3010851885398744), (-988), (double) (-988));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[3];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-2561));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2561, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1432L;
      longArray0[1] = (-1458L);
      longArray0[2] = (-1419L);
      longArray0[3] = 36L;
      longArray0[4] = 1166L;
      longArray0[5] = (-1419L);
      longArray0[6] = 1996L;
      ArrayUtils.swap(longArray0, 2139273742, 2139273742, 2139273742);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1432L, (-1458L), (-1419L), 36L, 1166L, (-1419L), 1996L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1419L);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1166L;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1419.0F), (-1.0F), 1166.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)55);
      assertNotNull(short0);
      assertEquals((short)55, (short)short0);
      
      boolean boolean1 = ArrayUtils.isEquals(short0, short0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)55;
      shortArray0[1] = (short)55;
      shortArray0[2] = (short)55;
      shortArray0[3] = (short)55;
      shortArray0[4] = (short)55;
      shortArray0[5] = (short)55;
      shortArray0[6] = (short)55;
      shortArray0[7] = (short)55;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)55, (short)55, (short)55, (short)55, (short)55, (short)55, (short)55, (short)55}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      Long long0 = new Long((-1215L));
      assertNotNull(long0);
      assertEquals((-1215L), (long)long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'q';
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 'q';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-1.0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {113.0, (-1.0), 113.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[2] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, false, (-648));
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{0, 1}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(2, bitSet1.length());
      assertEquals(3, booleanArray1.length);
      assertNotNull(bitSet1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 148);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) 'q';
      intArray0[2] = (int) 'q';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 113, 113, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 113, 113, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 113, 113, 0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.addAll(intArray2, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      assertEquals(12, intArray3.length);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {0, 113, 113, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 113, 113, 0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      Long long0 = new Long((-1215L));
      assertNotNull(long0);
      assertEquals((-1215L), (long)long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'q';
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 'q';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-1.0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {113.0, (-1.0), 113.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, false, (-648));
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertEquals(3, booleanArray1.length);
      assertNotNull(bitSet1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 148);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) 'q';
      intArray0[2] = (int) 'q';
      intArray0[3] = (int) 'q';
      intArray0[4] = (int) 'q';
      intArray0[5] = (int) 'q';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)91;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)403;
      longArray0[1] = (long) (short)403;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (-3284);
      longArray0[4] = (long) 4;
      longArray0[5] = (long) (short)91;
      longArray0[6] = (long) (short)0;
      ArrayUtils.shift(longArray0, (int) (short)0, (int) (short)0, (int) (short)403);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {403L, 403L, 0L, (-3284L), 4L, 91L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.indexOf((int[]) null, (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2147483619);
      intArray0[1] = (-2147483619);
      intArray0[2] = (-2147483619);
      intArray0[3] = (-913);
      intArray0[4] = (-2147483619);
      intArray0[5] = (-2147483619);
      intArray0[6] = (-2147483619);
      intArray0[7] = (-2147483619);
      intArray0[8] = (-2147483619);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-913), (-212));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-2147483619), (-2147483619), (-2147483619), (-913), (-2147483619), (-2147483619), (-2147483619), (-2147483619), (-2147483619)}, intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-454);
      doubleArray0[1] = (double) (-2147483619);
      doubleArray0[2] = 2522.958009;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-212));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -212, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      Double double0 = new Double((-1610.2));
      assertNotNull(double0);
      assertEquals((-1610.2), (double)double0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = '*';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'h');
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'h', '*'}, charArray0);
      assertArrayEquals(new char[] {'*'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '*';
      doubleArray0[1] = (double) '*';
      doubleArray0[2] = (-722.8);
      doubleArray0[3] = (double) (short)4827;
      doubleArray0[4] = (double) 'h';
      doubleArray0[5] = (-1610.2);
      doubleArray0[6] = (-722.8);
      ArrayUtils.shift(doubleArray0, (int) (short)4827);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {4827.0, 104.0, (-1610.2), (-722.8), 42.0, 42.0, (-722.8)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 64;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) (-1256);
      doubleArray0[3] = 8.826670143;
      doubleArray0[4] = (double) (-1256);
      ArrayUtils.shift(doubleArray0, (-1256), 64, 797);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {8.826670143, (-1256.0), 64.0, 64.0, (-1256.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-260.57228), 64.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {8.826670143, (-1256.0), 64.0, 64.0, (-1256.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Boolean[] booleanArray1 = ArrayUtils.removeElement((Boolean[]) null, (Object) character0);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 34.0;
      doubleArray0[1] = (-382.6671);
      doubleArray0[2] = (-786.7367897808574);
      doubleArray0[3] = (-1502.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {34.0, (-382.6671), (-786.7367897808574), (-1502.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "L[K+`");
      assertNotNull(string0);
      assertEquals("1", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '2';
      charArray0[2] = 'A';
      charArray0[3] = 'Q';
      charArray0[4] = 'S';
      charArray0[5] = 'g';
      charArray0[6] = 'e';
      charArray0[7] = 'w';
      charArray0[8] = 'g';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-304), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -304, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1432L;
      longArray0[1] = (-1458L);
      longArray0[2] = (-1419L);
      longArray0[3] = 36L;
      longArray0[4] = 1166L;
      longArray0[5] = (-1419L);
      longArray0[6] = 1996L;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer((-2145480398));
      assertNotNull(integer0);
      assertEquals((-2145480398), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) "", ", Length: ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = 2188;
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int2 = 1456;
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) longArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(objectArray0);
      assertSame(longArray1, objectArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Double[]) null, 1456);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1456, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1102;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 6;
      intArray0[3] = (-2147061675);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (-42));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)51;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertNotNull(byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, (int) shortArray0[0]);
      assertEquals(2, floatArray0.length);
      assertEquals(2, shortArray0.length);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) 0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (-42));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[0] = doubleArray0[0];
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)51;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertNotNull(byteArray2);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, (int) shortArray0[0]);
      assertEquals(2, shortArray0.length);
      assertEquals(2, floatArray0.length);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      Long long0 = new Long((-1409L));
      assertNotNull(long0);
      assertEquals((-1409L), (long)long0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = (-3800);
      int[] intArray0 = new int[5];
      intArray0[0] = 294;
      intArray0[1] = 294;
      intArray0[2] = (-3800);
      intArray0[3] = 294;
      intArray0[4] = 294;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-408), 294);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {294, 294, (-3800), 294, 294}, intArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 1247L;
      doubleArray0[1] = (double) (-1409L);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 294;
      doubleArray0[5] = (double) 294;
      doubleArray0[6] = (double) (-3800);
      doubleArray0[7] = (-1573.59764029);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-3800));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3800, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-660);
      shortArray0[3] = (short) (-24);
      shortArray0[4] = (short)400;
      shortArray0[5] = (short)10;
      shortArray0[6] = (short) (-23669);
      shortArray0[7] = (short)2;
      shortArray0[8] = (short)240;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2), (short)2, (short) (-660), (short) (-24), (short)400, (short)10, (short) (-23669), (short)2, (short)240}, shortArray0);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short)0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-2), (short)2, (short) (-660), (short) (-24), (short)400, (short)10, (short) (-23669), (short)2, (short)240}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-863);
      intArray0[1] = (int) (short)400;
      intArray0[2] = (int) (short) (-660);
      int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE, (-1233));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-863), 400, (-660)}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '^';
      intArray0[1] = 1430;
      intArray0[2] = (int) '^';
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1430, 94, 94}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '^';
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) '^';
      floatArray0[3] = (float) 1430;
      floatArray0[4] = (float) '^';
      floatArray0[5] = (float) 94;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {94.0F, 1.0F, 94.0F, 1430.0F, 94.0F, 94.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, (-1026), (-1), (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1430, 94, 94}, intArray0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-1));
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {94.0F, 1.0F, 94.0F, 1430.0F, 94.0F, 94.0F, 0.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {94.0F, 1.0F, 94.0F, 1430.0F, 94.0F, 94.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift((int[]) null, 2, 0, (-1));
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 778;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '1';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = 'u';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (-2542));
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'W', '1', 'u', 'u', '1', '1', 'u'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = (long) '1';
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) '1';
      longArray0[6] = (long) '1';
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'E';
      charArray0[2] = 'm';
      charArray0[3] = 'n';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'e', 'E', 'm', 'n'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      ArrayUtils.swap(doubleArray0, (-1), (-2146812558));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean1;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'K';
      boolean boolean4 = ArrayUtils.contains(charArray0, 'V');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'V', 'K'}, charArray0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      ArrayUtils.swap(charArray0, (int) (byte)32, 3507, 3056);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'g';
      charArray1[1] = 't';
      charArray1[2] = 'g';
      charArray1[3] = 'g';
      charArray1[4] = 'g';
      charArray1[5] = 'g';
      charArray1[6] = 'g';
      charArray1[7] = 'g';
      int int0 = ArrayUtils.indexOf(charArray1, 'c', (int) (byte)32);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g', 't', 'g', 'g', 'g', 'g', 'g', 'g'}, charArray1);
      assertEquals((-1), int0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 3056, (-549), 1257);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.shift(charArray1, 3);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 't', 'g', 'g', 'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray1);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 't', 'g', 'g', 'g'}, charArray1);
      assertTrue(boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short) (-1), (int) (short)98, 2585);
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)98;
      intArray0[1] = (int) (short) (-3859);
      intArray0[2] = (int) (short)98;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 98);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = 'a';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-3859), '');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3859, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertNotNull(byte2);
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)55;
      Byte byte4 = new Byte((byte)55);
      assertNotNull(byte4);
      assertEquals((byte)55, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertNotNull(byte5);
      assertEquals((byte)55, (byte)byte5);
      assertFalse(byte3 == byte0);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte3);
      assertNotNull(byte6);
      assertEquals((byte)55, (byte)byte6);
      assertFalse(byte3 == byte0);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte5));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte) (-1));
      assertNotNull(byte7);
      assertEquals((byte) (-1), (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte2));
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte3);
      assertNotNull(byte8);
      assertEquals((byte)55, (byte)byte8);
      assertFalse(byte3 == byte0);
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      
      byteArray0[6] = byte8;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) byte3;
      intArray0[1] = (int) byte3;
      intArray0[2] = (int) byte3;
      intArray0[3] = (int) (byte)55;
      intArray0[4] = (int) byte3;
      intArray0[5] = (int) byte0;
      intArray0[6] = (int) byte3;
      intArray0[7] = (int) byte0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {55, 55, 55, 55, 55, (-1), 55, (-1)}, intArray0);
      assertFalse(boolean0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {55, 55, 55, 55, 55, (-1), 55, (-1)}, intArray0);
      assertArrayEquals(new int[] {55, 55, 55, 55, 55, (-1), 55, (-1)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1407L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1407L;
      ArrayUtils.shift(longArray0, (-850), (-850), (-850));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1407L}, longArray0);
      
      Long long0 = new Long(294L);
      assertNotNull(long0);
      assertEquals(294L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, 2143019025, (Long) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-863);
      intArray0[2] = (-2147483619);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-863), (-2147483619), 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-863);
      intArray0[2] = (-2147483619);
      intArray0[3] = (-863);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-863), (-2147483619), (-863)}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-863);
      doubleArray0[1] = (double) (-2147483619);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-454));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -454, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      ArrayUtils.swap((double[]) null, 2519, (int) (short)0);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0, (short)91, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F, 2);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      Character character0 = new Character('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)35;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)35);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte)35, (byte)7, (byte)35, (byte)35}, byteArray0);
      assertEquals(5, int0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)35);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146428521, 36);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte byte0 = new Byte((byte) (-104));
      assertNotNull(byte0);
      assertEquals((byte) (-104), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-104));
      assertNotNull(byte1);
      assertEquals((byte) (-104), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, 3354, 2);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray2, (byte)35);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true, (-891));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)99;
      intArray0[1] = (int) (short) (-386);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {99, (-386)}, intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)99, 888);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      boolean boolean2 = ArrayUtils.contains(booleanArray2, false);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray2));
      assertTrue(boolean2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      Character character1 = new Character('>');
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (byte)56;
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {56.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (short)91, (-405), (-798));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)91;
      intArray0[1] = (-798);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (byte)56;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (byte)56;
      int int0 = ArrayUtils.indexOf(intArray0, (-1644));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {91, (-798), 0, 56, 0, 56}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '-';
      charArray0[2] = '@';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1236, 1236);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', '-', '@'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '@';
      longArray0[1] = (long) '@';
      longArray0[2] = (long) 'n';
      longArray0[3] = (long) 'n';
      longArray0[4] = 723L;
      longArray0[5] = (long) 1236;
      longArray0[6] = (long) '-';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1236L);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {64L, 64L, 110L, 110L, 723L, 1236L, 45L}, longArray0);
      assertArrayEquals(new long[] {64L, 64L, 110L, 110L, 723L, 45L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, 1236);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1236, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = ArrayUtils.subarray((Boolean[]) null, (int) 58, (int) 58);
      assertNull(booleanArray0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (byte)0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = new boolean[1];
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, false, 0);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(1, booleanArray1.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Boolean boolean1 = new Boolean("H=K>.]F1LtN{.S6S?");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) boolean1, 2227);
      assertEquals(0, characterArray0.length);
      assertEquals((-1), int0);
      assertFalse(boolean1.equals((Object)boolean0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = ArrayUtils.subarray((Boolean[]) null, (int) 58, (int) 58);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = new boolean[1];
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, false, 0);
      assertEquals(1, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, booleanArray1.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Boolean boolean1 = new Boolean("H=K>.]F1LtN{.S6S?");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) boolean1, 2227);
      assertEquals(0, characterArray0.length);
      assertEquals((-1), int0);
      assertFalse(boolean1.equals((Object)boolean0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) (byte)2;
      objectArray0[2] = (Object) (byte)2;
      ArrayUtils.swap(objectArray0, (-1), (-5), 2146492591);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      Float float0 = new Float(3350.0F);
      assertNotNull(float0);
      assertEquals(3350.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (byte) (-117));
      assertNotNull(float1);
      assertEquals((-117.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-444.17F), (int) (byte) (-117));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1630.5F;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = 3350.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) Integer.MAX_VALUE);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1630.5F, 2.14748365E9F, 3350.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1630.5F, 3350.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'C';
      charArray0[7] = 'Y';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'Y', '%', '%', 'Y', 'Y', 'Y', 'C', 'Y', 'C'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 33, 22);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 22;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 22;
      floatArray0[3] = (float) (-1549L);
      floatArray0[4] = 0.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {22.0F, 1.0F, 22.0F, (-1549.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = '{';
      charArray0[4] = 'D';
      charArray0[5] = '+';
      charArray0[6] = '&';
      charArray0[7] = 'W';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'N', '^', 'l', '{', 'D', '+', '&', 'W'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)96;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)107);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)51, (byte)108, (byte)27, (byte)26, (byte)121, (byte) (-57), (byte)28, (byte)96}, byteArray1);
      assertArrayEquals(new byte[] {(byte)51, (byte)108, (byte)27, (byte)26, (byte)121, (byte) (-57), (byte)107, (byte)28, (byte)96}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3797);
      assertNotNull(integer0);
      assertEquals(3797, (int)integer0);
      
      Character character0 = ArrayUtils.get((Character[]) null, 1173, (Character) null);
      assertNull(character0);
      
      Byte byte0 = new Byte((byte) (-106));
      assertNotNull(byte0);
      assertEquals((byte) (-106), (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) byte0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, integerArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-106);
      shortArray0[1] = (short) (byte) (-106);
      shortArray0[2] = (short) (byte) (-106);
      shortArray0[3] = (short) (byte) (-106);
      shortArray0[4] = (short) (byte) (-106);
      ArrayUtils.shift(shortArray0, 3797, 1483, (int) (short) (-106));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-106), (short) (-106), (short) (-106), (short) (-106), (short) (-106)}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      int[] intArray0 = new int[8];
      intArray0[0] = 1173;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 1173;
      intArray0[3] = (-2404);
      intArray0[4] = (int) (short) (-106);
      intArray0[5] = 1173;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (short) (-106);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1173, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[3] = (float) '4';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {52.0F, 52.0F, 52.0F, 52.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(longArray0, 1302, (-2147483644));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 52.0F;
      objectArray0[1] = (Object) 52.0F;
      objectArray0[2] = (Object) 52.0F;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 45L;
      short short0 = (short)6322;
      Short short1 = new Short((short)6322);
      assertNotNull(short1);
      assertEquals((short)6322, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = ArrayUtils.isEquals(short1, short1);
      assertTrue(boolean0);
      assertTrue(short1.equals((Object)short0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)6322);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(4, int0);
      
      int[] intArray0 = new int[1];
      int int1 = 797;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 797, (int) (short)6322);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 797, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 22);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 0, 329, (-813));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 45L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {45L}, longArray0);
      assertArrayEquals(new long[] {45L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Short short0 = new Short((short)6322);
      assertNotNull(short0);
      assertEquals((short)6322, (short)short0);
      
      boolean boolean0 = ArrayUtils.isEquals(short0, short0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)6322);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(4, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 797, (int) (short)6322);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 797, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)87;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-40), (byte)109, (byte) (-23), (byte)53, (byte) (-79), (byte)87}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-40), (byte)109, (byte) (-23), (byte)53, (byte) (-79), (byte)87}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1102;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 6;
      intArray0[3] = (-2147061675);
      intArray0[4] = 296;
      intArray0[6] = (-2147061675);
      intArray0[7] = 1;
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 1102, (-2400));
      assertNull(floatArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '1';
      charArray0[2] = 'V';
      charArray0[3] = 'b';
      charArray0[4] = 'j';
      charArray0[5] = 'B';
      charArray0[6] = '4';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'6', '1', 'V', 'b', 'j', 'B', '4'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(longArray1, 66L, 1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((short)53);
      assertNotNull(short0);
      assertEquals((short)53, (short)short0);
      
      shortArray0[0] = short0;
      short short1 = (short)2;
      Short short2 = new Short((short)2);
      assertNotNull(short2);
      assertEquals((short)2, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[1] = short2;
      Short short3 = new Short(short1);
      assertNotNull(short3);
      assertEquals((short)2, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)91);
      assertNotNull(short4);
      assertEquals((short)91, (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)53);
      assertNotNull(short5);
      assertEquals((short)53, (short)short5);
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      
      shortArray0[4] = short5;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, 296);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character character0 = Character.valueOf('a');
      assertNotNull(character0);
      assertEquals('a', (char)character0);
      
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double((-173.74459));
      assertNotNull(double1);
      assertEquals((-173.74459), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      Character character1 = ArrayUtils.get(characterArray0, (-4258), character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(character1);
      assertEquals('a', (char)character1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) character1, (-95));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, characterArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = 3397.563;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-1L);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 3397.563, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 3397.563, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)617);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)617, (short)91, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)91, 1981, (-1111.4));
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'Z';
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      assertTrue(character0.equals((Object)char0));
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      ArrayUtils.swap((Object[]) characterArray0, 1, (int) char0, (-4352));
      assertEquals(2, characterArray0.length);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-97));
      assertNotNull(byte0);
      assertEquals((byte) (-97), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-97));
      assertNotNull(byte1);
      assertEquals((byte) (-97), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-97)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      Double double0 = new Double(156.0);
      assertNotNull(double0);
      assertEquals(156.0, (double)double0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(723L);
      assertNotNull(long0);
      assertEquals(723L, (long)long0);
      
      Long long1 = Long.getLong("", long0);
      assertNotNull(long1);
      assertEquals(723L, (long)long1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) long1, (-95));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)51;
      intArray0[1] = (-95);
      intArray0[2] = (int) (byte)51;
      intArray0[3] = (int) (byte)51;
      intArray0[4] = (int) (byte)0;
      int int0 = ArrayUtils.indexOf(intArray0, 51);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {51, (-95), 51, 51, 0}, intArray0);
      assertEquals(0, int0);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte)0;
      Byte byte0 = new Byte((byte)117);
      assertNotNull(byte0);
      assertEquals((byte)117, (byte)byte0);
      
      byteArray1[1] = byte0;
      Byte byte1 = new Byte((byte)11);
      assertNotNull(byte1);
      assertEquals((byte)11, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)51;
      byteArray1[6] = (Byte) (byte)51;
      byteArray1[7] = (Byte) (byte)0;
      byteArray1[8] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)117, (byte)11, (byte)0, (byte)0, (byte)51, (byte)51, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3898);
      intArray0[1] = (-3898);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3898), (-3898));
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3898), (-3898), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1312);
      longArray1[1] = (long) (-3898);
      longArray1[2] = (long) (-1312);
      longArray1[3] = (long) (-1312);
      longArray1[4] = (long) (-3898);
      longArray1[5] = (long) (-3898);
      longArray1[6] = (long) (-3898);
      longArray1[7] = (long) (-3898);
      longArray1[8] = (long) 47;
      ArrayUtils.reverse(longArray1, 47, (-3898));
      assertEquals(9, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1312L), (-3898L), (-1312L), (-1312L), (-3898L), (-3898L), (-3898L), (-3898L), 47L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Float float0 = new Float((-4988.164F));
      assertNotNull(float0);
      assertEquals((-4988.164F), (float)float0, 0.01F);
      
      Float float1 = new Float(625.701578154);
      assertNotNull(float1);
      assertEquals(625.7016F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-679.8762F));
      assertNotNull(float2);
      assertEquals((-679.8762F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-679L);
      longArray0[2] = 99L;
      longArray0[3] = 1L;
      longArray0[4] = (-1458L);
      longArray0[5] = (-4371L);
      longArray0[6] = 1L;
      ArrayUtils.swap(longArray0, 8, 0, 8);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, (-679L), 99L, 1L, (-1458L), (-4371L), 1L}, longArray0);
      
      Integer[] integerArray0 = new Integer[4];
      MutableInt mutableInt0 = new MutableInt(float1);
      assertEquals((short)625, mutableInt0.shortValue());
      assertEquals((byte)113, mutableInt0.byteValue());
      assertEquals(625.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(625, (int)mutableInt0.toInteger());
      assertEquals(625, mutableInt0.intValue());
      assertEquals(625, (int)mutableInt0.getValue());
      assertEquals(625.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("625", mutableInt0.toString());
      assertEquals(625L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals((short)625, mutableInt0.shortValue());
      assertEquals((byte)113, mutableInt0.byteValue());
      assertEquals(625.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(625, (int)mutableInt0.toInteger());
      assertEquals(625, mutableInt0.intValue());
      assertEquals(625, (int)mutableInt0.getValue());
      assertEquals(625.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("625", mutableInt0.toString());
      assertEquals(625L, mutableInt0.longValue());
      assertNotNull(integer0);
      assertEquals(625, (int)integer0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2146096644);
      assertNotNull(integer2);
      assertEquals(2146096644, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(33);
      assertNotNull(integer3);
      assertEquals(33, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = true;
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1874);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1874), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1874), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'F';
      charArray0[2] = '2';
      charArray0[3] = '0';
      charArray0[4] = ';';
      charArray0[5] = '@';
      charArray0[6] = '`';
      int int0 = ArrayUtils.indexOf(charArray0, 'F', (int) (short)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'!', 'F', '2', '0', ';', '@', '`'}, charArray0);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (short)47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 778;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 778, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1834.23);
      doubleArray0[1] = (double) 0;
      ArrayUtils.swap(doubleArray0, 0, (-1));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1834.23), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 45L;
      longArray0[2] = (-530L);
      longArray0[3] = 2217L;
      longArray0[4] = (-3313L);
      longArray0[5] = 4350L;
      longArray0[6] = 99L;
      longArray0[7] = 2147483647L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 99L);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 45L, (-530L), 2217L, (-3313L), 4350L, 99L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {99L, 0L, 45L, (-530L), 2217L, (-3313L), 4350L, 99L, 2147483647L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1524;
      shortArray0[1] = (short) (-1357);
      shortArray0[2] = (short)960;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1524, 1609);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1524, (short) (-1357), (short)960}, shortArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      Double double0 = new Double(4371.725791050785);
      assertNotNull(double0);
      assertEquals(4371.725791050785, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(4371.725791050785, object0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 1252L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1252L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1252L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)960;
      shortArray0[1] = (short)960;
      shortArray0[2] = (short)19;
      shortArray0[3] = (short) (-1357);
      shortArray0[4] = (short)960;
      shortArray0[5] = (short)960;
      shortArray0[6] = (short)960;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1357), (-958));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)960, (short)960, (short)19, (short) (-1357), (short)960, (short)960, (short)960}, shortArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(shortArray0, (int) (short)960, (-1));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)960, (short)960, (short)19, (short) (-1357), (short)960, (short)960, (short)960}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (-1);
      objectArray0[4] = (Object) character0;
      objectArray0[6] = (Object) 0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[6], (-36));
      assertEquals(7, objectArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-334);
      shortArray0[1] = (short) (-45);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)794;
      shortArray0[4] = (short)9;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)5;
      shortArray0[7] = (short)843;
      shortArray0[8] = (short)80;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)93, 12);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-334), (short) (-45), (short)1, (short)794, (short)9, (short)2, (short)5, (short)843, (short)80}, shortArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = 'b';
      int int0 = ArrayUtils.indexOf(charArray0, '`', 7);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'`', '`', '`', '`', '`', '`', 'b'}, charArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 84;
      intArray0[1] = 84;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 84;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {84.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Double double0 = new Double(1271.8445409);
      assertNotNull(double0);
      assertEquals(1271.8445409, (double)double0, 0.01);
      
      Character character0 = new Character('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-1350));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(1482);
      assertNotNull(integer0);
      assertEquals(1482, (int)integer0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1438);
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      Double double0 = new Double(1438);
      assertNotNull(double0);
      assertEquals(1438.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Character character0 = new Character('&');
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      Character character1 = Character.valueOf('&');
      assertNotNull(character1);
      assertEquals('&', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Integer integer0 = new Integer((-2735));
      assertNotNull(integer0);
      assertEquals((-2735), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) integer0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2735);
      intArray0[1] = (int) '&';
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (int) '&';
      intArray0[5] = (-1);
      intArray0[6] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1482);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2735), 38, (-1), (-1), 38, (-1), 0}, intArray0);
      assertFalse(boolean0);
      
      Integer integer1 = new Integer(1438);
      assertNotNull(integer1);
      assertEquals(1438, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap((int[]) null, 347, 347, (-2652));
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(bitSet0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2652);
      doubleArray0[1] = (double) (-2652);
      doubleArray0[2] = 529.6502;
      ArrayUtils.swap(doubleArray0, (-112), (-1024), 1516);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2652.0), (-2652.0), 529.6502}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[3] = (double) (byte) (-117);
      doubleArray0[4] = (double) (byte) (-117);
      doubleArray0[5] = (double) (byte)56;
      doubleArray0[6] = (-1863.729780602);
      Float float0 = new Float((float) (byte)34);
      assertNotNull(float0);
      assertEquals(34.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(56.0);
      assertNotNull(float1);
      assertEquals(56.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(710.828F);
      assertNotNull(float2);
      assertEquals(710.828F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float2;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float2;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1390.53F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {710.828F, 34.0F, 34.0F, 710.828F, 34.0F, 34.0F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)56;
      longArray0[1] = (long) (byte)34;
      longArray0[2] = (long) (byte)56;
      longArray0[3] = (long) (byte) (-117);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte)56);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {56L, 34L, 56L, (-117L)}, longArray0);
      assertEquals(0, int0);
      
      ArrayUtils.swap(floatArray1, (-3875), (-1369), 56);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {710.828F, 34.0F, 34.0F, 710.828F, 34.0F, 34.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = '3';
      charArray0[2] = 'H';
      charArray0[3] = 'a';
      charArray0[4] = 'M';
      charArray0[5] = '_';
      charArray0[6] = 'X';
      charArray0[7] = 'P';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte) (-117));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -117, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)617);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)617, (short)91, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)91, 1981, (-1111.4));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)91;
      floatArray0[1] = (float) 1981;
      floatArray0[2] = (float) (short)617;
      floatArray0[3] = (float) (short)91;
      floatArray0[4] = (float) (short)91;
      floatArray0[5] = (float) 1981;
      floatArray0[6] = (float) (short)91;
      floatArray0[7] = (float) (short)91;
      floatArray0[8] = (float) 1981;
      ArrayUtils.shift(floatArray0, 86, 1173, 496);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {91.0F, 1981.0F, 617.0F, 91.0F, 91.0F, 1981.0F, 91.0F, 91.0F, 1981.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'Z';
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      assertTrue(character0.equals((Object)char0));
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertEquals(4, characterArray1.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      ArrayUtils.swap((Object[]) characterArray0, 1, (int) char0, (-4352));
      assertEquals(2, characterArray0.length);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'K';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-991.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-991.0F)}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      ArrayUtils.shift((int[]) null, 60, 138, (-1925));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1925);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1925L)}, longArray0);
      assertArrayEquals(new long[] {(-1925L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 175.54107531187714;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-58);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-58)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-58)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2983.936851856), 1335, (double) 1335);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {175.54107531187714, 625.701578154, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-94), (int) (byte) (-58));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-58)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-58)}, byteArray1);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1335, 1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {175.54107531187714, 625.701578154, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (short) (-4991);
      doubleArray1[2] = (-2983.936851856);
      doubleArray1[3] = (double) (byte)64;
      doubleArray1[4] = 175.54107531187714;
      doubleArray1[5] = (double) (byte) (-52);
      doubleArray1[6] = 625.701578154;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {175.54107531187714, 625.701578154, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-4991.0), (-2983.936851856), 64.0, 175.54107531187714, (-52.0), 625.701578154}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1436.9660037258445;
      doubleArray0[2] = (-956.0);
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-956.0), (int) (byte)0, (-1610.2));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, (-956.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-116), (int) (byte) (-52));
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1436.9660037258445, (int) (byte) (-116));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, (-956.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, (-956.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean boolean1 = false;
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((String) null);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean(boolean1);
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean((boolean) boolean5);
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean5.equals((Object)boolean6));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean2));
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf(boolean1);
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean7));
      
      booleanArray0[7] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2195.0);
      doubleArray0[1] = (-1324.283968746);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1117.394165807;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.1;
      doubleArray0[7] = (-2481.5486);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2195.0), (-1324.283968746), (-1.0), 0.0, 1117.394165807, (-1.0), 0.1, (-2481.5486)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)26;
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)26;
      intArray0[1] = (-863);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-863);
      longArray0[1] = (long) (-863);
      longArray0[2] = (long) (-863);
      longArray0[3] = (long) (short)26;
      longArray0[4] = 576L;
      ArrayUtils.shift(longArray0, (-863), 113, (-850));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-863L), (-863L), (-863L), 26L, 576L}, longArray0);
      
      Long long0 = new Long((short)26);
      assertNotNull(long0);
      assertEquals(26L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, 2, (Long) (-863L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-4.405891F);
      floatArray0[2] = (-2389.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-4.405891F), 0.0F, (-2389.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      ArrayUtils.shift(longArray0, 115);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MockRandom mockRandom0 = new MockRandom(1407L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1407L;
      ArrayUtils.shift(longArray0, (-850), 94, (-850));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1407L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Long long0 = new Long(294L);
      assertNotNull(long0);
      assertEquals(294L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, 2143019025, (Long) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'u';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockRandom mockRandom0 = new MockRandom(117L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ':'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-834);
      shortArray0[1] = (short) (-834);
      shortArray0[2] = (short) (byte)112;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-834), (short) (-834), (short)112}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 2039L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short) (-834);
      ArrayUtils.shift(longArray0, 1, 90, (-3284));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2039L, 0L, (-834L)}, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '4';
      characterArray0[1] = (Character) 'm';
      characterArray0[2] = (Character) '4';
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'm';
      longArray0[1] = (long) 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1458L));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {109L, 75L}, longArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 2688);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true, 2688);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(4, booleanArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)403;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)91;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {403, 403, 91, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean3 = ArrayUtils.contains(booleanArray1, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean3);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-63L);
      longArray0[1] = (long) (short)91;
      longArray0[2] = (long) (short)0;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-63L), 91L, 0L}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short) (-1), (int) (short)98, 2585);
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)98;
      intArray0[1] = (int) (short) (-3859);
      intArray0[2] = (int) (short)98;
      intArray0[3] = 2585;
      intArray0[4] = (int) (short)98;
      intArray0[5] = (int) (short)2;
      intArray0[6] = (-215);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1167), 2585);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1167, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short) (-1), (int) (short)98, (int) (short)2);
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)98;
      intArray0[1] = (int) (short) (-3859);
      intArray0[2] = (int) (short)98;
      intArray0[3] = (int) (short) (-3859);
      intArray0[4] = (int) (short)98;
      intArray0[5] = (int) (short)2;
      intArray0[6] = (-215);
      intArray0[7] = (int) (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 98, (int) (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)44;
      shortArray0[2] = (short)0;
      shortArray0[1] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)403, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)91;
      intArray0[3] = (int) (short)403;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0, 1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '=';
      charArray0[2] = '$';
      charArray0[3] = '\\';
      charArray0[4] = '\'';
      charArray0[5] = 'z';
      charArray0[6] = ']';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 403, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      ArrayUtils.swap((boolean[]) null, 5302, (-1));
      int int0 = 43;
      Integer integer0 = new Integer(43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      Integer integer1 = new Integer((-712));
      assertNotNull(integer1);
      assertEquals((-712), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = Integer.getInteger(">RHAUU4'8[;1", integer1);
      assertNotNull(integer2);
      assertEquals((-712), (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer2);
      assertEquals(3, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      charArray1[1] = '4';
      charArray1[2] = '&';
      charArray1[3] = 'K';
      charArray1[4] = 'K';
      charArray1[5] = '>';
      charArray1[6] = 'K';
      charArray1[7] = 'K';
      charArray1[8] = 'm';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'K', int0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(9, charArray1.length);
      assertNotNull(bitSet0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'K', '4', '&', 'K', 'K', '>', 'K', 'K', 'm'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("8lL");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean0);
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("8lL");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("8lL");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("8lL");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean6));
      
      booleanArray0[8] = boolean8;
      boolean boolean9 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean9);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      MockRandom mockRandom0 = new MockRandom(234L);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-1);
      ArrayUtils.shuffle(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short) (-1));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)2;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) (byte) (-2);
      longArray0[2] = (long) (byte)2;
      int int0 = ArrayUtils.indexOf(longArray0, (-52L), (int) (byte)2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2L, (-2L), 2L}, longArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '`', (-1315));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1436.9660037258445;
      doubleArray0[2] = (-956.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      doubleArray0[5] = (double) (byte) (-117);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-956.0), (int) (byte)0, (-1610.2));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, (-956.0), 0.0, 0.0, (-117.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-116), (int) (byte) (-52));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0}, byteArray1);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1), (int) (byte) (-116), (int) (byte) (-117));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2147483648L);
      longArray0[1] = (long) (byte) (-52);
      longArray0[2] = 1996L;
      longArray0[3] = (long) (byte) (-117);
      longArray0[4] = (long) (byte) (-116);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-116));
      assertEquals(4, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-2147483648L), (-52L), 1996L, (-117L)}, longArray1);
      assertArrayEquals(new long[] {(-2147483648L), (-52L), 1996L, (-117L), (-116L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Integer integer0 = new Integer(2819);
      assertNotNull(integer0);
      assertEquals(2819, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '^';
      longArray0[2] = (long) (-850);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (-2195);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {94L, 94L, (-850L), 0L, (-2195L), 0L, 0L}, longArray0);
      
      ArrayUtils.swap(doubleArray1, (-444), 1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 0, 0, 3693);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.reverse((Object[]) longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {94L, 94L, (-850L), 0L, (-2195L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 3, (-669));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1247L;
      floatArray0[1] = (float) (-669);
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 1247L;
      floatArray0[4] = (float) 841L;
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) (-3597L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-3597L), (-669));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1247.0F, (-669.0F), 3.0F, 1247.0F, 841.0F, 3.0F, (-3597.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 0L, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1594);
      shortArray0[1] = (short) (-1594);
      shortArray0[2] = (short) (-2389);
      shortArray0[3] = (short) (-2389);
      shortArray0[4] = (short) (-1594);
      shortArray0[5] = (short) (-1594);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1594));
      assertEquals("{0, 1, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1594), (short) (-1594), (short) (-2389), (short) (-2389), (short) (-1594), (short) (-1594)}, shortArray0);
      
      ArrayUtils.reverse((char[]) null, (-1277), (int) (short) (-29855));
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1460.58F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short) (-2389);
      floatArray0[3] = (float) (short) (-1594);
      floatArray0[4] = (float) (short) (-29855);
      floatArray0[5] = (float) (short) (-2389);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-390.9F), Integer.MAX_VALUE);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1460.58F, 0.0F, (-2389.0F), (-1594.0F), (-29855.0F), (-2389.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, (-1), (int) (short) (-1594));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '^';
      charArray0[2] = '^';
      charArray0[3] = 'D';
      charArray0[4] = '^';
      boolean boolean0 = ArrayUtils.contains(charArray0, '^');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'D', '^', '^', 'D', '^'}, charArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-2195), intArray0, (int[]) null);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) '^';
      ArrayUtils.shift(intArray2, (-2195), (-596), 64);
      assertEquals(1, intArray2.length);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {94}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 52, 52, 87);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) 87;
      longArray0[2] = 1429L;
      longArray0[3] = (long) 52;
      longArray0[4] = (long) 87;
      longArray0[5] = (long) 52;
      longArray0[6] = (long) 87;
      longArray0[7] = (long) 52;
      char[] charArray0 = new char[11];
      charArray0[0] = '|';
      charArray0[1] = 'O';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '|');
      assertEquals(11, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)0;
      ArrayUtils.reverse(byteArray0, (-215), (int) (byte)0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte)37, (byte)108, (byte)11, (byte)30, (byte) (-57), (byte)92, (byte)82, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = ArrayUtils.subarray((Boolean[]) null, (int) 58, (int) 58);
      assertNull(booleanArray0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (byte)0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      ArrayUtils.shift(byteArray0, (int) (byte)0, (-1196), 1337);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ';';
      charArray0[2] = ';';
      ArrayUtils.shift(charArray0, 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {')', ';', ';'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {')', ';', ';'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 625.701578154;
      int[] intArray0 = new int[4];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 0;
      longArray0[2] = (-2645L);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (-1549L);
      longArray0[7] = (-1549L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = Integer.MAX_VALUE;
      char[] charArray0 = new char[1];
      ArrayUtils.reverse(charArray0, Integer.MAX_VALUE, 0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MAX_VALUE, 8);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) '6';
      longArray0[2] = (long) '6';
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) '6';
      longArray0[6] = (long) 8;
      longArray0[7] = (long) 8;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)27689;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)9;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)27689, (short) (-1), (short)4, (short)9}, shortArray0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Double[]) null, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)1473;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1473;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-647), 101);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)1473, (short)2, (short)1473, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)1473, (short)2, (short)1473, (short)2, (short)2, (short)2}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 52);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2195);
      ArrayUtils.shift(intArray0, 86, (-2195), (-2195));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-2195), booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[6];
      booleanArray2[0] = boolean0;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = boolean0;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = boolean0;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2400;
      shortArray0[1] = (short)122;
      Short short0 = new Short((short) (-21844));
      assertNotNull(short0);
      assertEquals((short) (-21844), (short)short0);
      
      ArrayUtils.swap(intArray0, 1, 7);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)23;
      longArray0[2] = (long) (byte)44;
      longArray0[3] = 0L;
      longArray0[4] = (long) (byte)23;
      longArray0[5] = (long) (byte)23;
      longArray0[6] = 684L;
      longArray0[7] = (long) (byte)23;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1));
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 23L, 44L, 0L, 23L, 23L, 684L, 23L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character[] characterArray0 = new Character[26];
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      longArray0[5] = (long) (char)character0;
      Character character2 = Character.valueOf('i');
      assertNotNull(character2);
      assertEquals('i', (char)character2);
      assertTrue(character2.equals((Object)character0));
      
      ArrayUtils.swap((Object[]) characterArray0, 182, (-1506), 0);
      assertEquals(26, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '^';
      longArray0[2] = (long) (-850);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (-2195);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {94L, 94L, (-850L), 0L, (-2195L), 0L, 0L}, longArray0);
      
      ArrayUtils.swap(doubleArray1, (-444), 1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 94L;
      floatArray0[1] = (float) (-850);
      floatArray0[2] = 5217.41F;
      floatArray0[3] = (float) 94L;
      floatArray0[4] = (float) (-850L);
      floatArray0[5] = (float) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), (int) (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {94.0F, (-850.0F), 5217.41F, 94.0F, (-850.0F), 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1550);
      shortArray0[3] = (short)23683;
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-2219);
      shortArray1[1] = (short)1;
      shortArray1[2] = (short) (-1550);
      shortArray1[3] = (short) (-1550);
      shortArray1[4] = (short) (-2219);
      shortArray1[5] = (short) (-1550);
      shortArray1[6] = (short)23683;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)70;
      ArrayUtils.swap(byteArray0, 1, (-2084), (int) (byte) (-99));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)66, (byte)70}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)82);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)66, (byte)70}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)66, (byte)70}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) 0;
      longArray0[5] = (long) (byte)51;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (-42));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-2084));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap(booleanArray0, 57, 0, (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-660);
      shortArray0[3] = (short) (-24);
      shortArray0[4] = (short)400;
      shortArray0[5] = (short)10;
      shortArray0[6] = (short) (-23669);
      shortArray0[7] = (short)2;
      shortArray0[8] = (short)240;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2), (short)2, (short) (-660), (short) (-24), (short)400, (short)10, (short) (-23669), (short)2, (short)240}, shortArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 97);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-854.245237711652), 1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, (-2195.0), 0.0, 94.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 471, object1);
      assertEquals(4, objectArray0.length);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 471, object0);
      assertEquals(4, objectArray0.length);
      assertNotNull(object3);
      assertNotSame(object0, object1);
      assertSame(object0, object3);
      assertNotSame(object0, object2);
      assertNotSame(object3, object1);
      assertNotSame(object3, object2);
      assertSame(object3, object0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 471;
      doubleArray0[1] = (-3937.0);
      doubleArray0[2] = (double) 471;
      doubleArray0[3] = 2635.862;
      doubleArray0[4] = (double) 471;
      doubleArray0[5] = (double) 471;
      ArrayUtils.shift(doubleArray0, 471, (-1256), 64);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {471.0, (-3937.0), 471.0, 2635.862, 471.0, 471.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 471.0, (-1.0));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {471.0, (-3937.0), 471.0, 2635.862, 471.0, 471.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      int int0 = ArrayUtils.indexOf((char[]) null, 'b', (int) (byte)0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)51;
      intArray0[1] = (int) (byte)51;
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) 'b';
      ArrayUtils.swap((char[]) null, 98, (int) (byte)51, 11);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      Float float0 = new Float(3350.0F);
      assertNotNull(float0);
      assertEquals(3350.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(3350.0F);
      assertNotNull(float1);
      assertEquals(3350.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) (byte)26);
      assertNotNull(float2);
      assertEquals(26.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      Float float3 = new Float((double) floatArray0[0]);
      assertEquals(4, floatArray0.length);
      assertNotNull(float3);
      assertEquals(3350.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) float0, 1660);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)26;
      longArray0[1] = (long) 1660;
      longArray0[2] = (long) (-1);
      ArrayUtils.shift(longArray0, 1624, 1624, (-1));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {26L, 1660L, (-1L)}, longArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1490));
      assertNotNull(integer0);
      assertEquals((-1490), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1490));
      assertNotNull(integer1);
      assertEquals((-1490), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(4, integerArray0.length);
      assertNotNull(integer2);
      assertEquals((-1490), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1490));
      assertNotNull(integer3);
      assertEquals((-1490), (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1490), (-1490), (-1490), (-1490)}, intArray0);
      
      Float float0 = new Float((float) (-1490));
      assertNotNull(float0);
      assertEquals((-1490.0F), (float)float0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) integer2);
      assertEquals(4, integerArray0.length);
      assertEquals(0, int0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(8192);
      assertNotNull(integer1);
      assertEquals(8192, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-42));
      assertNotNull(integer2);
      assertEquals((-42), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2879));
      assertNotNull(integer3);
      assertEquals((-2879), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(12);
      assertNotNull(integer4);
      assertEquals(12, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer5);
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2879));
      assertNotNull(integer6);
      assertEquals((-2879), (int)integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(8192);
      assertNotNull(integer7);
      assertEquals(8192, (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[5]);
      assertEquals(9, integerArray0.length);
      assertNotNull(integer8);
      assertEquals(Integer.MAX_VALUE, (int)integer8);
      assertTrue(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer7));
      
      integerArray0[8] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {34, 8192, (-42), (-2879), 12, Integer.MAX_VALUE, (-2879), 8192, Integer.MAX_VALUE}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = ArrayUtils.get(doubleArray0, 1);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double2);
      assertEquals(2, doubleArray0.length);
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertTrue(object0.equals((Object)double0));
      assertTrue(object0.equals((Object)double1));
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) double2;
      int int0 = ArrayUtils.indexOf(doubleArray1, (-1.0));
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 1, (-2084), 1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '1';
      charArray0[3] = '1';
      charArray0[1] = 'o';
      Float float0 = new Float((float) '\u0000');
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object1);
      assertEquals(0.0F, object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertEquals(0.0F, object2);
      
      String string0 = ArrayUtils.toString(object2);
      assertNotNull(string0);
      assertEquals("0.0", string0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'o', '\u0000', '1'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'o', '\u0000', '1'}, charArray1);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Long long0 = new Long((-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Long long1 = new Long((-199L));
      assertNotNull(long1);
      assertEquals((-199L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-199L));
      assertNotNull(long2);
      assertEquals((-199L), (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      Long long3 = new Long(2330L);
      assertNotNull(long3);
      assertEquals(2330L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift((Object[]) booleanArray0, (-901), (-901), (-1786));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3375.6, (-154));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      Long long0 = new Long((-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Long long1 = new Long((-199L));
      assertNotNull(long1);
      assertEquals((-199L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-199L));
      assertNotNull(long2);
      assertEquals((-199L), (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      Long long3 = new Long(2330L);
      assertNotNull(long3);
      assertEquals(2330L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-774);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)91;
      shortArray0[7] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)91, (short)2, (short)1, (short)4, (short) (-774), (short)0, (short)15}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-199L);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-199L);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-199.0), (-1610612736));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-199.0), 0.0, (-199.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[4] = object3;
      Double double0 = new Double((-572));
      assertNotNull(double0);
      assertEquals((-572.0), (double)double0, 0.01);
      
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, (-572), (-1795), (-2879));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2879);
      doubleArray0[1] = (double) (-2879);
      doubleArray0[2] = (double) (-1795);
      doubleArray0[3] = (double) (-572);
      doubleArray0[4] = (double) (-1795);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2879.0), (-2879.0), (-1795.0), (-572.0), (-1795.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-119);
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      MutableInt mutableInt0 = new MutableInt((-214));
      assertEquals((-214.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-214", mutableInt0.toString());
      assertEquals((byte)42, mutableInt0.byteValue());
      assertEquals((-214.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-214), (int)mutableInt0.toInteger());
      assertEquals((-214), (int)mutableInt0.getValue());
      assertEquals((-214L), mutableInt0.longValue());
      assertEquals((short) (-214), mutableInt0.shortValue());
      assertEquals((-214), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) mutableInt0, 76);
      assertEquals((-214.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-214", mutableInt0.toString());
      assertEquals((byte)42, mutableInt0.byteValue());
      assertEquals((-214.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-214), (int)mutableInt0.toInteger());
      assertEquals((-214), (int)mutableInt0.getValue());
      assertEquals((-214L), mutableInt0.longValue());
      assertEquals((short) (-214), mutableInt0.shortValue());
      assertEquals((-214), mutableInt0.intValue());
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 1, 3012.276F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      Long long0 = new Long(3250);
      assertNotNull(long0);
      assertEquals(3250L, (long)long0);
      
      Long long1 = new Long((-1220L));
      assertNotNull(long1);
      assertEquals((-1220L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(121L);
      assertNotNull(long2);
      assertEquals(121L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long2);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-556), byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse((Object[]) null, (-2146816312), (-2146816312));
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 2146671744, 1633L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146671744, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '`', (-1));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      int[] intArray0 = new int[4];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 52);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (-2645L);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (-1549L);
      longArray0[7] = (-1549L);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1, (-42));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 52;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 52.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1236);
      intArray0[1] = (-1236);
      intArray0[2] = 494;
      intArray0[3] = (-3255);
      intArray0[4] = (-1236);
      intArray0[5] = (-1236);
      intArray0[6] = (-1236);
      intArray0[7] = (-1236);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1236));
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1236), (-1236), 494, (-3255), (-1236), (-1236), (-1236), (-1236)}, intArray0);
      assertArrayEquals(new int[] {(-1236), 494, (-3255), (-1236), (-1236), (-1236), (-1236)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 778;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 778, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1430;
      floatArray0[5] = (float) 962;
      Long[] longArray0 = new Long[3];
      Long long0 = Long.getLong("org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle", (-1779L));
      assertNotNull(long0);
      assertEquals((-1779L), (long)long0);
      
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      Long long1 = new Long(5693L);
      assertNotNull(long1);
      assertEquals(5693L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[2] = long1;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)127;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2, (-861));
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)108, (byte)40, (byte)31, (byte) (-31), (byte)20, (byte)7, (byte)127}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, (-1165), 13, 2);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (int) (short)91);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)91;
      shortArray1[1] = (short)91;
      shortArray1[2] = (short)91;
      shortArray1[3] = (short)91;
      shortArray1[4] = (short)91;
      shortArray1[5] = (short)91;
      shortArray1[6] = (short)91;
      shortArray1[7] = (short)91;
      ArrayUtils.reverse(shortArray1);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)91, (short)91, (short)91, (short)91, (short)91, (short)91, (short)91}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.indexOf((char[]) null, 'b', (int) (byte)0);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[8];
      Boolean boolean1 = Boolean.valueOf("bpLJl(In");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray1[0] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray1[1] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      
      booleanArray1[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      
      booleanArray1[3] = boolean4;
      Boolean boolean5 = new Boolean((String) null);
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      
      booleanArray1[4] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertNotNull(boolean6);
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      
      booleanArray1[5] = boolean6;
      Boolean boolean7 = Boolean.valueOf((String) null);
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean4));
      
      booleanArray1[6] = boolean7;
      Boolean boolean8 = new Boolean((boolean) boolean5);
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean7));
      assertFalse(boolean5.equals((Object)boolean6));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      
      booleanArray1[7] = boolean8;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'b';
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = 723L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 'b';
      ArrayUtils.shift(longArray0, (-1), (int) (byte)0, 124);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {98L, 0L, 0L, 0L, 723L, (-1L), (-1L), 98L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Short short0 = new Short((short)286);
      assertNotNull(short0);
      assertEquals((short)286, (short)short0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      ArrayUtils.shift(shortArray0, 1);
      assertEquals(19, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1457);
      floatArray0[1] = (float) (short) (-1457);
      ArrayUtils.swap(floatArray0, (int) (short) (-1457), 1, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1457.0F), (-1457.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[15];
      char char0 = 'B';
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('B');
      assertNotNull(character2);
      assertEquals('B', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      
      characterArray0[2] = character2;
      characterArray0[3] = (Character) char0;
      Character character3 = Character.valueOf((char) character1);
      assertNotNull(character3);
      assertEquals('B', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      
      characterArray0[4] = character3;
      Character character4 = new Character((char) character2);
      assertNotNull(character4);
      assertEquals('B', (char)character4);
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character3));
      
      characterArray0[5] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '<');
      assertEquals(15, charArray0.length);
      assertEquals(15, characterArray0.length);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2.146765606E9;
      doubleArray0[2] = 1242.0;
      doubleArray0[3] = (-4163.97749);
      doubleArray0[4] = (-2272.36244416763);
      doubleArray0[5] = (-2741.671793);
      doubleArray0[6] = 64.0;
      doubleArray0[7] = 1737.8125921504;
      ArrayUtils.shift(doubleArray0, (-660), (-660), 79);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 2.146765606E9, 1242.0, (-4163.97749), (-2272.36244416763), (-2741.671793), 64.0, 1737.8125921504}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ArrayUtils.shift((double[]) null, 2066);
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)403;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)91;
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'O');
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 91);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      short short0 = (short)58;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)961;
      shortArray0[1] = (short)621;
      shortArray0[2] = (short)58;
      shortArray0[3] = (short)621;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)621);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)961, (short)621, (short)58, (short)621}, shortArray0);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (short)621;
      floatArray0[2] = (float) 'm';
      floatArray0[3] = (float) (short)621;
      floatArray0[4] = (float) 'm';
      floatArray0[5] = (float) (short)961;
      floatArray0[6] = (float) (short)621;
      floatArray0[7] = (float) (short)621;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)621, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 621, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '6';
      charArray0[2] = '7';
      charArray0[3] = 'l';
      charArray0[4] = '%';
      charArray0[5] = '8';
      charArray0[6] = 'b';
      ArrayUtils.swap(charArray0, 378, 786, 378);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'S', '6', '7', 'l', '%', '8', 'b'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 2.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Double double0 = new Double(2.0F);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      Double double1 = new Double(2015.72263397845);
      assertNotNull(double1);
      assertEquals(2015.72263397845, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 3.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2015.72263397845, 2015.72263397845}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1}, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1;
      objectArray0[1] = (Object) 1.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 78.557, (-1), 78.557);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte) (-117), (-3287), (double) (byte) (-117));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[28];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      Object object1 = ArrayUtils.get(objectArray0, (-1));
      assertEquals(28, objectArray0.length);
      assertNull(object1);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (byte) (-117);
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (byte) (-117);
      Object object2 = ArrayUtils.get(objectArray0, (int)  (-117), object0);
      assertEquals(28, objectArray0.length);
      assertNotNull(object2);
      assertSame(object2, object0);
      assertSame(object0, object2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "IF_h'9pSpg`\"prYu";
      stringArray0[1] = "#b)H";
      stringArray0[2] = "Array and element cannot both be null";
      stringArray0[3] = "java.lang.Short";
      stringArray0[4] = "java.lang.Float";
      stringArray0[5] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      ArrayUtils.shift((double[]) null, 1820, (-749), (-88));
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1153.3742340371111), 472.0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The type must not be null";
      stringArray0[1] = " 'rH-|)HVx";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.lang3.ArrayUtils";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'u';
      charArray0[2] = 'W';
      charArray0[3] = '|';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '|';
      intArray0[1] = (int) 'u';
      intArray0[2] = (int) 'W';
      intArray0[3] = (int) '*';
      intArray0[4] = (int) '|';
      intArray0[5] = (int) ':';
      intArray0[6] = (int) ':';
      intArray0[7] = (int) '*';
      intArray0[8] = (int) ':';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {124, 117, 87, 42, 124, 58, 58, 42, 58}, intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 58, (int) (byte)112);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.contains(booleanArray1, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (-42));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 0L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      
      ArrayUtils.shift(byteArray0, 1, 1, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = (-1584L);
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1584L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1584L), 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2623.11219682622, 91.0}, doubleArray1, 0.01);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1584L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1584L), 0L, 0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      ArrayUtils.reverse((Object[]) doubleArray0, 0, 51);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) 0;
      longArray0[5] = (long) (byte)51;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (-42));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2623.11219682622, 91.0}, doubleArray1, 0.01);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, (-1549L), 0L, 0L, 51L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      
      ArrayUtils.shift(byteArray0, 1, 1, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      ArrayUtils.reverse((Object[]) doubleArray0, 0, 51);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("Array and element cannot both be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-660);
      shortArray0[3] = (short) (-24);
      shortArray0[4] = (short)400;
      shortArray0[5] = (short)10;
      shortArray0[6] = (short) (-23669);
      shortArray0[7] = (short)2;
      shortArray0[8] = (short)240;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2), (short)2, (short) (-660), (short) (-24), (short)400, (short)10, (short) (-23669), (short)2, (short)240}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)10);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'g');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'^'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[0] = boolean2;
      booleanArray0[1] = (Boolean) object0;
      booleanArray0[2] = (Boolean) object0;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = (Boolean) object0;
      booleanArray0[6] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 296;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2400), (-2119594249));
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, 296.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 296;
      longArray0[1] = (long) 296;
      longArray0[2] = (long) (-2400);
      longArray0[3] = (long) (-2400);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {296L, 296L, (-2400L), (-2400L)}, longArray0);
      assertArrayEquals(new long[] {296L, 296L, (-2400L), (-2400L), 296L, 296L, (-2400L), (-2400L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 52, 52, 87);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) 87;
      longArray0[2] = 1429L;
      longArray0[3] = (long) 52;
      longArray0[4] = (long) 87;
      longArray0[5] = (long) 52;
      longArray0[6] = (long) 87;
      longArray0[7] = (long) 52;
      longArray0[8] = (long) 87;
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'W';
      charArray0[2] = '[';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'W', '[', 'd'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'W';
      intArray0[1] = 52;
      intArray0[2] = (int) '[';
      intArray0[3] = (int) 'W';
      intArray0[4] = (int) 'W';
      intArray0[6] = (int) '[';
      intArray0[7] = (-84);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {87, 52, 91, 87, 87, 0, 91, (-84)}, intArray0);
      assertArrayEquals(new int[] {87, 52, 91, 87, 87, 91, (-84)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 270.23848277;
      doubleArray0[1] = (double) 91;
      doubleArray0[2] = (double) (-84);
      doubleArray0[3] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 87);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {270.23848277, 91.0, (-84.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-194.368827);
      doubleArray0[4] = 1.0;
      doubleArray0[1] = (-194.368827);
      doubleArray0[7] = (-1.0);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-194.368827), 0.0, (-194.368827), 1.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 2);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-194.368827), 0.0, (-194.368827), 1.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '^';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-63);
      byteArray0[6] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-63), (int) (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-63), (byte) (-1), (byte) (-1), (byte) (-63), (byte)0, (byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte) (-63);
      objectArray0[2] = (Object) (byte) (-63);
      objectArray0[3] = (Object) (byte) (-63);
      objectArray0[4] = (Object) 94L;
      objectArray0[5] = (Object) (byte) (-63);
      ArrayUtils.shift(objectArray0, (-850), (int) (short)0, (int) (short)0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-63);
      shortArray0[2] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-63), (short) (-1)}, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '=';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'^', '^', '=', '^', '^', '='}, charArray1);
      assertArrayEquals(new char[] {'^', '^', '='}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)109;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)53, (byte)87, (byte)109}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)53, (byte)87, (byte)109}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1909);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)84;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)84;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)84, (short)0, (short)84, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)84, (short)0, (short)84, (short)0, (short)84, (short)0, (short)84, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (int) (byte)0, 7);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0, (-1858), (int) (short)84);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true}, booleanArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (double) (-1858));
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'g');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'g';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)51;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {103, 0, 51, 0, 51}, intArray0);
      assertArrayEquals(new int[] {103, 0, 51, 0, 51, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)51;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      MockRandom mockRandom0 = new MockRandom(106L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      Long long0 = Long.getLong("af}pmju-kq$uPQy!8", (-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 'u';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 75, (-3146));
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'1', 'u', '1', '1', '1', '1'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'u';
      longArray0[1] = (long) (-3146);
      longArray0[2] = (long) '1';
      longArray0[3] = 40L;
      longArray0[4] = (long) '1';
      longArray0[5] = (long) '1';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 40L);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {117L, (-3146L), 49L, 49L, 49L}, longArray1);
      assertArrayEquals(new long[] {117L, (-3146L), 49L, 40L, 49L, 49L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap((boolean[]) null, (-3146), 2);
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray2);
      assertSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {117L, (-3146L), 49L, 40L, 49L, 49L}, longArray2);
      assertArrayEquals(new long[] {117L, (-3146L), 49L, 40L, 49L, 49L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2);
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short) (-2));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2195.0), 0.0, 94.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "java.lang.Character");
      assertEquals(0, floatArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'T');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray2.length);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'T', 'T'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      ArrayUtils.swap(doubleArray0, (int) character0, 120);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte)120;
      byteArray1[5] = (byte)120;
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)120);
      assertEquals(7, byteArray2.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)120, (byte)120, (byte)120, (byte)120, (byte)120, (byte)120}, byteArray2);
      assertArrayEquals(new byte[] {(byte)120, (byte)120, (byte)120, (byte)120, (byte)120, (byte)120}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'c';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      int int0 = ArrayUtils.indexOf(charArray0, 'S');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'c', '4', '&', 'K'}, charArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '4';
      characterArray0[1] = (Character) 'c';
      characterArray0[2] = (Character) '4';
      characterArray0[3] = (Character) '4';
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1880), (int) characterArray0[2]);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)51);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)0, (byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, 2, 679, (-164));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)44;
      shortArray0[1] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)403, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)91;
      intArray0[3] = (int) (short)403;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = (-1);
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0, 1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)403, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 403, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(1, int0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 'x';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) 2188;
      doubleArray0[6] = (double) 'x';
      doubleArray0[7] = (double) 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 709.5062680087245, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 120.0, 0.0, (-1.0), (-1.0), 2188.0, 120.0, 120.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(booleanArray0, 57, 0, (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-194.368827);
      doubleArray0[4] = (-194.368827);
      doubleArray0[5] = (-194.368827);
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3693, 3693);
      assertEquals(10, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), (-194.368827), (-194.368827), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(doubleArray1);
      assertEquals(10, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), (-194.368827), (-194.368827), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) (short)0);
      assertNull(intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      ArrayUtils.reverse((Object[]) longArray1, (int) (short)0, (int) (short)0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-895));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(10, doubleArray0.length);
      assertNotNull(bitSet0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), (-194.368827), (-194.368827), 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-43);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-5305), (-2123622717));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-40), (byte) (-109), (byte) (-43)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)1;
      objectArray0[2] = (Object) (byte)1;
      Object object0 = ArrayUtils.get(objectArray0, (int) 1);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertEquals((byte)1, object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)1;
      objectArray0[5] = (Object) (byte) (-40);
      objectArray0[6] = (Object) (byte) (-40);
      ArrayUtils.shift(objectArray0, (-2123622717), 329, 329);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 3, (-669));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 3;
      longArray1[1] = (-3597L);
      longArray1[2] = 841L;
      longArray1[3] = (long) (-1);
      longArray1[4] = 1247L;
      longArray1[5] = (long) (-1);
      ArrayUtils.swap(longArray1, 3931, 3250);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {3L, (-3597L), 841L, (-1L), 1247L, (-1L)}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)45;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)101);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)45}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte)45}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)101);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {101.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 175.54107531187714;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      ArrayUtils.swap(charArray0, (-2737), 2013, (int) (byte)120);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 625.701578154);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {175.54107531187714, 625.701578154, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {625.701578154, 175.54107531187714, 625.701578154, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 625.701578154;
      doubleArray2[1] = (Double) 175.54107531187714;
      doubleArray2[2] = (Double) 625.701578154;
      doubleArray2[3] = (Double) 625.701578154;
      doubleArray2[4] = (Double) 625.701578154;
      Double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(10, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 2.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'i';
      ArrayUtils.swap(charArray0, 84, 84);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'-', 'i'}, charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '-';
      longArray0[1] = 841L;
      longArray0[2] = (long) '-';
      longArray0[3] = (long) '-';
      longArray0[4] = (long) 84;
      longArray0[5] = (-3597L);
      longArray0[6] = (long) 84;
      longArray0[7] = (long) 'i';
      ArrayUtils.swap(longArray0, (-1), (-1));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {45L, 841L, 45L, 45L, 84L, (-3597L), 84L, 105L}, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)101;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-19));
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)11, (byte)92, (byte)35, (byte)45, (byte) (-19), (byte)101}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)11, (byte)92, (byte)35, (byte)45, (byte)101}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 380);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {380}, intArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-3483));
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-3483)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1L;
      ArrayUtils.reverse(objectArray0, 88, (-1795));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {380}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      MockRandom mockRandom0 = new MockRandom(3076);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      DoubleStream doubleStream1 = mockRandom0.doubles(1L);
      assertNotNull(doubleStream1);
      assertNotSame(doubleStream1, doubleStream0);
      assertFalse(doubleStream1.equals((Object)doubleStream0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1456;
      doubleArray0[1] = (double) (-3483);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1456;
      doubleArray0[4] = (double) 3076;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3483.0), 1.0, 1456.0, 3076.0, 1456.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 380);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3483.0), 1.0, 1456.0, 3076.0, 1456.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '5';
      charArray0[2] = 't';
      charArray0[3] = 'm';
      charArray0[4] = 'i';
      charArray0[5] = '|';
      charArray0[6] = '+';
      ArrayUtils.swap(charArray0, 1, 88);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'(', '5', 't', 'm', 'i', '|', '+'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-63), (int) (byte) (-63));
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-1);
      ArrayUtils.shift(objectArray0, (int) (short) (-1457), 329, (-976));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.reverse(shortArray0, (int) (byte) (-63), (-454));
      assertEquals(19, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-17);
      intArray0[1] = (-1);
      ArrayUtils.swap(intArray0, (-2652), (-1), (-2146765595));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-17), (-1), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, (-1), (int) (byte)11);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'E';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'E';
      ArrayUtils.reverse(doubleArray0, 1643, 2729);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {69.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1018), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1018, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)91;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (-2055.2807506);
      ArrayUtils.reverse(doubleArray0, (-531), 1643);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2055.2807506), 4.0, 91.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 4.0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) 4.0;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) 91.0;
      objectArray0[6] = (Object) (short)0;
      objectArray0[7] = (Object) (short)0;
      ArrayUtils.shift(objectArray0, (-287), (-215), (int) (short)0);
      assertEquals(8, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)91;
      intArray0[1] = (-531);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)91;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)91;
      intArray0[6] = (int) (short)403;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (-531);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 91, (-215));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[2] = '?';
      charArray0[2] = 'o';
      charArray0[3] = '?';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) 'm', 2);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'m', '\u0000', 'o', '?'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '+';
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1303));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(0, int0);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '?';
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, 2213, 1047L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2213, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-2146L);
      longArray0[2] = (-1907L);
      longArray0[3] = 3330L;
      longArray0[4] = 977L;
      longArray0[5] = (-284L);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 88, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap((int[]) null, 347, 347, (-2652));
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1131);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int1 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1131;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = (-1);
      intArray1[4] = 0;
      intArray1[5] = (-1);
      intArray1[6] = 1131;
      intArray1[7] = (-1);
      intArray1[8] = (-1);
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertEquals(18, intArray2.length);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1131, 0, 0, (-1), 0, (-1), 1131, (-1), (-1)}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      int int0 = (-1256);
      int int1 = 64;
      Long long0 = new Long(64);
      assertNotNull(long0);
      assertEquals(64L, (long)long0);
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(1673L);
      assertNotNull(long2);
      assertEquals(1673L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long long3 = new Long(1673L);
      assertNotNull(long3);
      assertEquals(1673L, (long)long3);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 64;
      intArray0[1] = (-1256);
      intArray0[2] = 64;
      intArray0[3] = 64;
      intArray0[4] = (-1256);
      intArray0[5] = 64;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146207661);
      ArrayUtils.shift(byteArray0, (-4269));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte0 = new Byte((byte)33);
      assertNotNull(byte0);
      assertEquals((byte)33, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)33, object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2146207661);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) (-2146207661);
      objectArray0[4] = (Object) (-2146207661);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)33);
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
      
      Byte byte1 = new Byte((byte)3);
      assertNotNull(byte1);
      assertEquals((byte)3, (byte)byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)33);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = (double) (byte)3;
      doubleArray0[2] = (double) (byte)33;
      doubleArray0[3] = (double) (-2146207661);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.1, 3.0, 33.0, (-2.146207661E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1, 3.0, 33.0, (-2.146207661E9), 0.1, 3.0, 33.0, (-2.146207661E9)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 2546, (-1805));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.1, 3.0, 33.0, (-2.146207661E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-117));
      assertNotNull(byte0);
      assertEquals((byte) (-117), (byte)byte0);
      
      Byte byte1 = new Byte((byte)96);
      assertNotNull(byte1);
      assertEquals((byte)96, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2, 8);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      Object[] objectArray0 = new Object[0];
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, 36);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int1);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1438.0;
      doubleArray0[2] = (-1610.2);
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      doubleArray0[5] = (-1610.2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.swap(charArray0, (-2195), (-2195), (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (-1), Integer.MAX_VALUE, (int) (byte)44);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)44, (byte) (-52), (byte) (-1)}, byteArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte) (-1));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)44, (byte) (-52), (byte) (-1)}, byteArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-2028));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2028, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '4';
      characterArray0[1] = (Character) 'm';
      characterArray0[2] = (Character) '4';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-54);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-54), (byte) (-54), (byte) (-39), (byte) (-54)}, byteArray0);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)52);
      assertNotNull(byte0);
      assertEquals((byte)52, (byte)byte0);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte) (-54);
      byteArray1[1] = (Byte) (byte) (-54);
      byteArray1[2] = (Byte) (byte) (-54);
      byteArray1[3] = byte0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-32));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-54), (byte) (-54), (byte)52}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-54);
      floatArray0[1] = (float) 'm';
      floatArray0[2] = (float) (byte) (-54);
      floatArray0[3] = (float) (char)characterArray0[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-54));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-54.0F), 109.0F, (-54.0F), 52.0F}, floatArray0, 0.01F);
      assertEquals(2, int0);
      
      ArrayUtils.swap((Object[]) characterArray0, (int) (byte)52, (-2872));
      assertEquals(4, characterArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'm', '4', '&', 'K'}, charArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-476.9271354095);
      doubleArray0[1] = 139.72;
      doubleArray0[2] = 3249.66893508878;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 139.72, 4037.0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-476.9271354095), 139.72, 3249.66893508878}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'L';
      charArray0[2] = '|';
      charArray0[3] = '~';
      charArray0[4] = 'i';
      charArray0[5] = 'I';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-674), (-674));
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'W', 'L', '|', '~', 'i', 'I'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'W', 'L', '|', '~', 'i', 'I'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertTrue(boolean1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '~';
      floatArray0[1] = 106.2F;
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'W';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-3112.0F));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {126.0F, 106.2F, 105.0F, 87.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((int[]) null, 1296, (-1925), (-1));
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-1303));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1303, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      ArrayUtils.swap(charArray0, (-2119594249), 1114111, 2447);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', '\u0000'}, charArray0);
      
      ArrayUtils.swap((byte[]) null, 1136, 2447, (int) (byte)0);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 778;
      intArray0[4] = 0;
      intArray0[5] = 988;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 778, 0, 988, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 988;
      floatArray0[7] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1430;
      floatArray0[5] = (float) 988;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-116), 0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray0);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-23);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)5, (int) (short)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)1, (byte) (-23)}, byteArray0);
      assertEquals((-1), int0);
      
      Double double0 = new Double((short)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((short)403);
      assertNotNull(double1);
      assertEquals(403.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      Double double2 = new Double(75.0);
      assertNotNull(double2);
      assertEquals(75.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[0] = double2;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      doubleArray0[7] = double1;
      doubleArray0[8] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {75.0, 403.0, 0.0, 0.0, 0.0, 0.0, 403.0, 403.0, 0.0}, doubleArray1, 0.01);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403}, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403, (short)91, (short)0, (short)0, (short)403}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse((double[]) null, (-2105376124), (int) (byte)51);
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(122, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1102;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 6;
      intArray0[3] = (-2147061675);
      intArray0[4] = 296;
      intArray0[5] = (-2400);
      intArray0[6] = 7;
      intArray0[7] = 1;
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 1102, (-2400));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      int int0 = ArrayUtils.indexOf((char[]) null, 'b', (int) (byte)0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)51;
      intArray0[1] = (int) (byte)51;
      intArray0[2] = (int) 'b';
      intArray0[3] = (int) 'b';
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {51, 51, 98, 98, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = ArrayUtils.toString((Object) integer0, "");
      assertNotNull(string0);
      assertEquals("-1", string0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long(101L);
      assertNotNull(long0);
      assertEquals(101L, (long)long0);
      
      Long[] longArray0 = new Long[8];
      longArray0[3] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-3818L));
      assertNotNull(long0);
      assertEquals((-3818L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-4485L));
      assertNotNull(long1);
      assertEquals((-4485L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-2169L));
      assertNotNull(long2);
      assertEquals((-2169L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray1, (Object) long2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(2, int0);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-2146034546);
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 2;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, (-2146034546), 2, 2, 2, 2, 2}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Boolean boolean0 = ArrayUtils.get((Boolean[]) null, (-2146034546));
      assertNull(boolean0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 2;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) 2;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) (-2146034546);
      Integer integer1 = new Integer((int) integerArray0[4]);
      assertEquals(6, integerArray0.length);
      assertNotNull(integer1);
      assertEquals((-2146034546), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[5] = integer1;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '+';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {')', '+'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (-213);
      shortArray0[3] = (short)2;
      shortArray0[5] = (short)1482;
      shortArray0[5] = (short)1078;
      ArrayUtils.swap(shortArray0, (-1399), (int) (short)1078, Integer.MAX_VALUE);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)18688, (short) (-213), (short)2, (short)0, (short)1078}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2995);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2995, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-30);
      ArrayUtils.swap(byteArray0, (-55), 7, 1068);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)80, (byte)36, (byte) (-30)}, byteArray0);
      
      double[] doubleArray1 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)36;
      longArray0[1] = 2147483647L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3396L));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {36L, 2147483647L}, longArray0);
      assertEquals((-1), int0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {36L, 2147483647L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (int) (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = ArrayUtils.subarray((Boolean[]) null, (int) 58, (int) 58);
      assertNull(booleanArray0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (byte)0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, ';', (-3459));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'q';
      charArray0[2] = 'p';
      int int0 = ArrayUtils.indexOf(charArray0, 'P', 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'q', 'p'}, charArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'P';
      floatArray0[1] = (float) 'p';
      floatArray0[2] = (-1592.8267F);
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) 'q';
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1367.9421F));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {80.0F, 112.0F, (-1592.8267F), 113.0F, 113.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(18, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 0L, 0);
      assertEquals((-1), int0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2118.3125260047873);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-271.23848277));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2118.3125260047873), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-2118.3125260047873)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 148, 498, 2525);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1102;
      intArray0[1] = Integer.MAX_VALUE;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2.147483647E9, Integer.MAX_VALUE);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 2.147483647E9}, doubleArray0, 0.01);
      
      ArrayUtils.swap(booleanArray0, 0, 48, 48);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      Integer integer0 = new Integer(2022);
      assertNotNull(integer0);
      assertEquals(2022, (int)integer0);
      
      Integer integer1 = new Integer(2022);
      assertNotNull(integer1);
      assertEquals(2022, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer2 = new Integer(87);
      assertNotNull(integer2);
      assertEquals(87, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[4]);
      assertEquals(5, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'B', (int) integerArray0[4]);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, integerArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertNotSame(integerArray0, integerArray1);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("8lL");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("8lL");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("8lL");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("8lL");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean3));
      
      booleanArray0[8] = boolean8;
      boolean boolean9 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean9);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      MockRandom mockRandom0 = new MockRandom(234L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = (boolean) boolean3;
      booleanArray1[1] = (boolean) boolean0;
      booleanArray1[2] = (boolean) boolean6;
      booleanArray1[3] = true;
      booleanArray1[4] = (boolean) boolean0;
      booleanArray1[5] = (boolean) boolean6;
      booleanArray1[6] = (boolean) boolean0;
      booleanArray1[7] = (boolean) boolean0;
      ArrayUtils.swap(booleanArray1, (-100), 2147483646);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, false}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer0);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-194.368827);
      doubleArray0[4] = (-194.368827);
      doubleArray0[5] = (-194.368827);
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3693, 3693);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), (-194.368827), (-194.368827), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), (-194.368827), (-194.368827), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)105;
      doubleArray0[5] = (double) (byte)63;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)2;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)120, (byte) (-1), (byte)0, (byte)105, (byte)36}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '1';
      charArray0[2] = 'm';
      charArray0[3] = '1';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-319), (-319));
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', '1', 'm', '1'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'o';
      charArray0[1] = 'o';
      longArray0[2] = (long) '1';
      longArray0[3] = (long) ':';
      longArray0[4] = (-118L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 49L);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {111L, 0L, 49L, 58L, (-118L)}, longArray0);
      assertArrayEquals(new long[] {111L, 0L, 58L, (-118L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float((-439.8597F));
      assertNotNull(float0);
      assertEquals((-439.8597F), (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object1);
      assertEquals((-439.8597F), object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertEquals((-439.8597F), object2);
      
      String string0 = ArrayUtils.toString(object2);
      assertNotNull(string0);
      assertEquals("-439.8597", string0);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray2.length);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {':', 'o', 'm', '1'}, charArray0);
      assertArrayEquals(new char[] {':', 'o', 'm', '1'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'P';
      charArray0[1] = 'u';
      char[] charArray1 = ArrayUtils.subarray(charArray0, Integer.MAX_VALUE, 1810);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'u'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)51;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) 'u';
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 882.90234F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(4, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Long long0 = new Long((-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Long long1 = new Long((-199L));
      assertNotNull(long1);
      assertEquals((-199L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-199L));
      assertNotNull(long2);
      assertEquals((-199L), (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      Long long3 = new Long(1L);
      assertNotNull(long3);
      assertEquals(1L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift((Object[]) booleanArray0, (-901), (-901), (-1786));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '^';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-63), (int) (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-63), (byte) (-1), (byte) (-1), (byte) (-63), (byte) (-1), (byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte) (-63);
      objectArray0[2] = (Object) (byte) (-63);
      objectArray0[3] = (Object) (byte) (-63);
      objectArray0[4] = (Object) 94L;
      objectArray0[5] = (Object) (byte) (-63);
      ArrayUtils.shift(objectArray0, (-850), (int) (short)0, (int) (short)0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1457);
      longArray0[1] = (long) (short) (-1457);
      longArray0[2] = (long) (short) (-1457);
      longArray0[3] = (long) (short) (-1457);
      longArray0[4] = (long) (short) (-1457);
      longArray0[5] = (long) (short) (-386);
      longArray0[6] = (long) (short) (-386);
      longArray0[7] = (long) (short) (-386);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1457L), (-1457L), (-1457L), (-1457L), (-1457L), (-386L), (-386L), (-386L)}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1457L);
      doubleArray0[1] = (double) (short) (-386);
      ArrayUtils.swap(doubleArray0, (int) (short) (-1457), 1450);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1457.0), (-386.0)}, doubleArray0, 0.01);
      
      ArrayUtils.swap((byte[]) null, (-1736), (-1177), (-529));
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)8);
      assertNull(byteArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt((-1457L));
      assertEquals((byte)79, mutableInt0.byteValue());
      assertEquals((-1457), (int)mutableInt0.getValue());
      assertEquals((short) (-1457), mutableInt0.shortValue());
      assertEquals("-1457", mutableInt0.toString());
      assertEquals((-1457L), mutableInt0.longValue());
      assertEquals((-1457.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1457), mutableInt0.intValue());
      assertEquals((-1457), (int)mutableInt0.toInteger());
      assertEquals((-1457.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((int) (short) (-1457));
      assertEquals((short) (-1457), mutableInt1.shortValue());
      assertEquals((-1457.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-1457", mutableInt1.toString());
      assertEquals((-1457L), mutableInt1.longValue());
      assertEquals((-1457), (int)mutableInt1.getValue());
      assertEquals((-1457), (int)mutableInt1.toInteger());
      assertEquals((-1457), mutableInt1.intValue());
      assertEquals((byte)79, mutableInt1.byteValue());
      assertEquals((-1457.0F), mutableInt1.floatValue(), 0.01F);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((-1736));
      assertEquals((byte)56, mutableInt2.byteValue());
      assertEquals((-1736), (int)mutableInt2.getValue());
      assertEquals((-1736), (int)mutableInt2.toInteger());
      assertEquals((-1736.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-1736L), mutableInt2.longValue());
      assertEquals((-1736), mutableInt2.intValue());
      assertEquals("-1736", mutableInt2.toString());
      assertEquals((-1736.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-1736), mutableInt2.shortValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt((-2921));
      assertEquals((-2921), (int)mutableInt3.getValue());
      assertEquals((byte) (-105), mutableInt3.byteValue());
      assertEquals((-2921), (int)mutableInt3.toInteger());
      assertEquals((-2921), mutableInt3.intValue());
      assertEquals((short) (-2921), mutableInt3.shortValue());
      assertEquals((-2921.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals("-2921", mutableInt3.toString());
      assertEquals((-2921L), mutableInt3.longValue());
      assertEquals((-2921.0), mutableInt3.doubleValue(), 0.01);
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((-4047));
      assertEquals((-4047), (int)mutableInt4.getValue());
      assertEquals((-4047), (int)mutableInt4.toInteger());
      assertEquals((byte)49, mutableInt4.byteValue());
      assertEquals((short) (-4047), mutableInt4.shortValue());
      assertEquals((-4047.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-4047L), mutableInt4.longValue());
      assertEquals((-4047), mutableInt4.intValue());
      assertEquals((-4047.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals("-4047", mutableInt4.toString());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(1450);
      assertEquals("1450", mutableInt5.toString());
      assertEquals(1450, mutableInt5.intValue());
      assertEquals(1450.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals((short)1450, mutableInt5.shortValue());
      assertEquals((byte) (-86), mutableInt5.byteValue());
      assertEquals(1450, (int)mutableInt5.toInteger());
      assertEquals(1450.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(1450, (int)mutableInt5.getValue());
      assertEquals(1450L, mutableInt5.longValue());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = null;
      try {
        mutableInt6 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 2690);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)91;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-1);
      longArray0[3] = (-2626L);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 2690;
      longArray0[6] = 117L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 2147483647L);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-2626L), (-1L), 2690L, 117L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-2626L), (-1L), 2690L, 117L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Float float0 = new Float((double) 117L);
      assertNotNull(float0);
      assertEquals(117.0F, (float)float0, 0.01F);
      
      Short short0 = new Short((short) (-2616));
      assertNotNull(short0);
      assertEquals((short) (-2616), (short)short0);
      
      boolean boolean0 = ArrayUtils.isSameType(float0, short0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = '\"';
      charArray0[2] = '$';
      charArray0[3] = 'H';
      charArray0[4] = '<';
      int int1 = ArrayUtils.indexOf(charArray0, 'H');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'^', '\"', '$', 'H', '<'}, charArray0);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      Long long0 = new Long(1247L);
      assertNotNull(long0);
      assertEquals(1247L, (long)long0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 294;
      ArrayUtils.shift(objectArray0, (-3800));
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '%';
      doubleArray0[1] = (double) '%';
      doubleArray0[2] = (double) '%';
      doubleArray0[3] = (double) (-3800);
      doubleArray0[4] = (double) 1247L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3800.0), 1.5);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {37.0, 37.0, 37.0, (-3800.0), 1247.0}, doubleArray0, 0.01);
      assertEquals(3, int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 37.0, (double) 1247L);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {37.0, 37.0, 37.0, (-3800.0), 1247.0}, doubleArray0, 0.01);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1583.47142));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-90), (int) (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-52), (byte) (-90), (byte) (-99), (byte)124, (byte) (-52), (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-99);
      intArray0[1] = (-2147060594);
      intArray0[2] = (int) (byte) (-52);
      intArray0[3] = (int) (byte) (-52);
      intArray0[5] = 138;
      intArray0[6] = (int) (byte)91;
      ArrayUtils.shift(intArray0, 56, (int) (byte) (-90), (-2147060594));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-99), (-2147060594), (-52), (-52), 0, 138, 91}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1289.565F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 75.0F;
      floatArray0[3] = 1624.9594F;
      floatArray0[4] = (-113.1F);
      floatArray0[5] = (-5602.3306F);
      floatArray0[6] = (-786.0885F);
      floatArray0[7] = 48.724F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1289.565F, (-1.0F), 75.0F, 1624.9594F, (-113.1F), (-5602.3306F), (-786.0885F), 48.724F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2739;
      shortArray0[1] = (short)525;
      shortArray0[2] = (short)2290;
      shortArray0[3] = (short) (-4);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2739, (short)525, (short)2290, (short) (-4)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 52, 52, 87);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) 87;
      longArray0[2] = 1429L;
      longArray0[3] = (long) 52;
      longArray0[4] = (long) 87;
      longArray0[6] = (long) 87;
      longArray0[7] = (long) 52;
      longArray0[8] = (long) 87;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {52L, 87L, 1429L, 52L, 87L, 0L, 87L, 52L, 87L}, longArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'W';
      charArray0[2] = '[';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'W', '[', 'd'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'W';
      intArray0[1] = 52;
      intArray0[2] = (int) '[';
      intArray0[3] = (int) 'W';
      intArray0[4] = (int) 'W';
      intArray0[5] = 87;
      intArray0[6] = (int) '[';
      intArray0[7] = (-84);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {87, 52, 91, 87, 87, 87, 91, (-84)}, intArray0);
      assertArrayEquals(new int[] {87, 52, 91, 87, 87, 87, 91, (-84)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 586.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 87L;
      floatArray0[3] = (float) 52L;
      floatArray0[4] = (float) 'd';
      floatArray0[5] = (float) (-84);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-4988.164F));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {586.0F, 0.0F, 87.0F, 52.0F, 100.0F, (-84.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '-';
      charArray0[2] = '@';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1236, 1236);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', '-', '@'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '@';
      ArrayUtils.swap((boolean[]) null, (-919), (-919), (-2175));
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '&';
      longArray0[2] = (long) 'K';
      longArray0[3] = (long) 'c';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)1087;
      shortArray0[2] = (short)56;
      shortArray0[3] = (short) (-11886);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)1087, (short)56, (short) (-11886)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 78.557, (-1), 78.557);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-2645L));
      assertNotNull(long0);
      assertEquals((-2645L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1688L);
      assertNotNull(long1);
      assertEquals(1688L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2645L), 1688L}, longArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "z");
      assertEquals(2, longArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-299));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-40.78854305512851));
      assertNotNull(float0);
      assertEquals((-40.788544F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-2541.8F));
      assertNotNull(float2);
      assertEquals((-2541.8F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float3);
      assertEquals((-40.788544F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-2541.8F));
      assertNotNull(float5);
      assertEquals((-2541.8F), (float)float5, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) floatArray0[2]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float6);
      assertEquals((-2541.8F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) floatArray0[4]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float7);
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      
      floatArray0[7] = float7;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[7];
      floatArray2[0] = (-2541.8F);
      floatArray2[1] = 2.0F;
      floatArray2[2] = (float) (-2645L);
      floatArray2[3] = (float) (long)longArray0[1];
      floatArray2[4] = (float) (-2645L);
      floatArray2[5] = (float) (-2645L);
      floatArray2[6] = (float) floatArray0[5];
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertEquals(7, floatArray3.length);
      assertEquals(7, floatArray2.length);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertArrayEquals(new float[] {(-2541.8F), 2.0F, (-2645.0F), 1688.0F, (-2645.0F), (-2645.0F), (-2541.8F)}, floatArray2, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146428521, 36);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2146428521;
      floatArray0[1] = (float) 36;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.14642854E9F, 36.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      Character character0 = new Character('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'B', 'B', 't', 'B'}, charArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, (String) null);
      assertEquals(4, characterArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 't';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {116}, intArray0);
      assertArrayEquals(new int[] {116}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      Character character0 = new Character('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      Character character0 = new Character('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'B', 'B', 't', 'B'}, charArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3167.3662F);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2891);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2891.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)394;
      shortArray0[2] = (short) (-950);
      shortArray0[3] = (short)3124;
      shortArray0[4] = (short)2625;
      shortArray0[5] = (short)6;
      shortArray0[6] = (short)380;
      ArrayUtils.swap(shortArray0, 1600, (int) (short)380);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short)394, (short) (-950), (short)3124, (short)2625, (short)6, (short)380}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1863);
      intArray0[1] = Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom(2167L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap((short[]) null, (-355), 1);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 559;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 'F';
      longArray0[3] = (long) 1;
      longArray0[4] = (long) (short)34;
      longArray0[5] = (long) (-211);
      longArray0[6] = (long) (-211);
      longArray0[7] = (long) 559;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '+';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-', '+'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short) (-213);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1482;
      shortArray0[5] = (short)1078;
      ArrayUtils.swap(shortArray0, (-1399), (int) (short)1078, Integer.MAX_VALUE);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)18688, (short) (-213), (short)2, (short)1482, (short)1078}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-956.0);
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      doubleArray0[5] = (-1610.2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      MockRandom mockRandom0 = new MockRandom(2167L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)34;
      ArrayUtils.swap(shortArray0, 559, 559);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)34}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1017L;
      longArray0[1] = (long) 559;
      longArray0[2] = (long) (short)34;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-211));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -211, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap((int[]) null, 347, 347, (-2652));
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2652);
      floatArray0[1] = (-2496.9014F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2652.0F), (-2496.9014F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)403;
      shortArray0[1] = (short)64;
      shortArray0[2] = (short)403;
      shortArray0[3] = (short)403;
      shortArray0[4] = (short)403;
      shortArray0[5] = (short)403;
      shortArray0[6] = (short)403;
      shortArray0[7] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)403, (short)64, (short)403, (short)403, (short)403, (short)403, (short)403, (short)403}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)403;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)403;
      intArray0[3] = (int) (short)403;
      intArray0[4] = (int) (short)403;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {403, 403, 403, 403, 403}, intArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)64, (int) (short)64);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean3 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
      assertTrue(boolean3);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)403;
      floatArray0[1] = (float) 403;
      floatArray0[2] = (float) (short)403;
      floatArray0[3] = (float) (short)403;
      floatArray0[4] = (float) 403;
      floatArray0[5] = (float) 403;
      boolean boolean4 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {403.0F, 403.0F, 403.0F, 403.0F, 403.0F, 403.0F}, floatArray0, 0.01F);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      ArrayUtils.swap(shortArray0, 0, 1471);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)403, (short)64, (short)403, (short)403, (short)403, (short)403, (short)403, (short)403}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1017.342);
      assertNotNull(double0);
      assertEquals(1017.342, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(125.839437327905);
      assertNotNull(double2);
      assertEquals(125.839437327905, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1882.69556466));
      assertNotNull(double3);
      assertEquals((-1882.69556466), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1017.342, 1.0, 125.839437327905, (-1882.69556466), 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) doubleArray0[3];
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = 0.1;
      doubleArray2[3] = (double) doubleArray0[4];
      doubleArray2[4] = 74.48586;
      doubleArray2[5] = (double) doubleArray0[2];
      doubleArray2[6] = (double) doubleArray0[4];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1017.342, 1.0, 125.839437327905, (-1882.69556466), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1882.69556466), 1.0, 0.1, 1.0, 74.48586, 125.839437327905, 1.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1662L;
      longArray0[1] = 1L;
      longArray0[2] = (-2147483648L);
      longArray0[3] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1662L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1662L, 1L, (-2147483648L), 1L}, longArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1436.9660037258445;
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (byte)0, (-1610.2));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-116), (int) (byte) (-52));
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, (int) (byte) (-116));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(byteArray1, (-1303), (-1), (-1303));
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 78.557, (-1), 78.557);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-2645L));
      assertNotNull(long0);
      assertEquals((-2645L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1688L);
      assertNotNull(long1);
      assertEquals(1688L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      ArrayUtils.swap((double[]) null, 3094, 102);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-108);
      ArrayUtils.swap(byteArray0, (-1), (int) (byte) (-1), 2227);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-1), (byte) (-1), (byte) (-108), (byte) (-1), (byte) (-108), (byte) (-108)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)longArray0[0];
      doubleArray0[1] = (double) (byte) (-108);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2645.0), (-108.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      long[] longArray1 = new long[7];
      longArray1[0] = (long) (byte) (-1);
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (byte) (-1);
      longArray1[3] = 1652L;
      longArray1[4] = (-2645L);
      longArray1[5] = (long) (-1);
      longArray1[6] = (long) 3094;
      int int0 = ArrayUtils.lastIndexOf(longArray1, 1652L);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 1652L, (-2645L), (-1L), 3094L}, longArray1);
      assertEquals(3, int0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 1652L, (-2645L), (-1L), 3094L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(2, int0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4396, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4396, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      long[] longArray0 = new long[22];
      Long long0 = new Long((-2583L));
      assertNotNull(long0);
      assertEquals((-2583L), (long)long0);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = long0;
      longArray1[1] = long0;
      longArray1[2] = long0;
      Long[] longArray2 = ArrayUtils.add(longArray1, longArray1[1]);
      assertEquals(3, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray3.length);
      assertNotNull(longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray3, longArray0);
      assertArrayEquals(new long[] {(-2583L), (-2583L), (-2583L)}, longArray3);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1392), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1392, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4969));
      assertNotNull(short0);
      assertEquals((short) (-4969), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4969)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)109;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)9;
      ArrayUtils.shift(byteArray0, (int) (byte)120);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)1, (byte)56, (byte)9, (byte)109, (byte)0, (byte)120, (byte)9}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short)10);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4969)}, shortArray1);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte)120);
      assertNotNull(long0);
      assertEquals(120L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.add(longArray0, longArray0[0]);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {120L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-943), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -943, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-11));
      assertNull(byteArray0);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'T';
      Character character0 = Character.valueOf('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('\"');
      assertNotNull(character1);
      assertEquals('\"', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('T');
      assertNotNull(character2);
      assertEquals('T', (char)character2);
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'T', '\"', 'T', 'T'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2039.9639437028);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-5.711724024));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-2039.9639437028), 844.4);
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.andNot(bitSet1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet1.set(87, 87);
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Character[] characterArray0 = new Character[6];
      char char0 = 'e';
      Character character0 = Character.valueOf('e');
      assertNotNull(character0);
      assertEquals('e', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('e');
      assertNotNull(character2);
      assertEquals('e', (char)character2);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('3');
      assertNotNull(character3);
      assertEquals('3', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('O');
      assertNotNull(character4);
      assertEquals('O', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      
      characterArray0[4] = character4;
      Character character5 = new Character('&');
      assertNotNull(character5);
      assertEquals('&', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(6, characterArray1.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)111);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 64;
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) (-1256);
      doubleArray0[3] = 8.826670143;
      doubleArray0[4] = (double) (-1256);
      ArrayUtils.shift(doubleArray0, (-1256), 64, 797);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {8.826670143, (-1256.0), 64.0, 64.0, (-1256.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-260.57228), 64.0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {8.826670143, (-1256.0), 64.0, 64.0, (-1256.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(3, int0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer((-4165));
      assertNotNull(integer1);
      assertEquals((-4165), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      int int0 = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 78.557, (-1), 78.557);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-2645L));
      assertNotNull(long0);
      assertEquals((-2645L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1691L);
      assertNotNull(long1);
      assertEquals(1691L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2645L), 1691L}, longArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "z");
      assertEquals(2, longArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short) (-299));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-40.78854305513));
      assertNotNull(float0);
      assertEquals((-40.788544F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-1));
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-2541.8F));
      assertNotNull(float2);
      assertEquals((-2541.8F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float3);
      assertEquals((-40.788544F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-2541.8F));
      assertNotNull(float5);
      assertEquals((-2541.8F), (float)float5, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) floatArray0[2]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float6);
      assertEquals((-2541.8F), (float)float6, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) floatArray0[4]);
      assertEquals(8, floatArray0.length);
      assertNotNull(float7);
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      
      floatArray0[7] = float7;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short) (-299));
      assertNotNull(integer0);
      assertEquals((-299), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("z");
      assertNull(integer1);
      
      integerArray0[1] = null;
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(7, integerArray0.length);
      assertNotNull(integer3);
      assertEquals((-299), (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertNotNull(integer4);
      assertEquals((-1), (int)integer4);
      assertTrue(int0 == int1);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)int1));
      assertTrue(integer4.equals((Object)integer2));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(88);
      assertNotNull(integer5);
      assertEquals(88, (int)integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1);
      assertNotNull(integer6);
      assertEquals(1, (int)integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-63), (int) (byte) (-63));
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-1);
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1457), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1457, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 152.3803551;
      doubleArray1[2] = 152.3803551;
      doubleArray1[3] = 152.3803551;
      doubleArray1[0] = 152.3803551;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) 152.3803551;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      ArrayUtils.reverse(doubleArray0, Integer.MAX_VALUE, 461);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {152.3803551, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      char char0 = '[';
      int int0 = 86;
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(86, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3797);
      assertNotNull(integer0);
      assertEquals(3797, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(332);
      assertNotNull(integer1);
      assertEquals(332, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = 'c';
      charArray0[2] = 'R';
      charArray0[3] = 'Z';
      charArray0[4] = '&';
      charArray0[5] = 'g';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-716), '&');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -716, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2316;
      shortArray0[1] = (short) (-1874);
      shortArray0[2] = (short)47;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2316);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2316, (short) (-1874), (short)47}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1874), (short)47}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (short)47);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {47.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '5';
      charArray0[2] = 't';
      charArray0[3] = 'M';
      charArray0[4] = '+';
      charArray0[5] = 'A';
      ArrayUtils.shift(charArray0, (int) (short)2316);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'9', '5', 't', 'M', '+', 'A'}, charArray0);
      
      ArrayUtils.shuffle(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '+';
      objectArray0[1] = (Object) 't';
      objectArray0[2] = (Object) '5';
      ArrayUtils.swap(objectArray0, (int) (short) (-1874), 1136, 182);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (short)47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Float float0 = new Float((-834.0F));
      assertNotNull(float0);
      assertEquals((-834.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[4];
      floatArray2[0] = (float) floatArray0[2];
      floatArray2[1] = (float) floatArray0[0];
      floatArray2[2] = (float) floatArray0[1];
      floatArray2[3] = (float) floatArray0[0];
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertEquals(4, floatArray2.length);
      assertEquals(4, floatArray3.length);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertArrayEquals(new float[] {(-834.0F), (-834.0F), (-834.0F), (-834.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 296;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2400), (-2119594259));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F, 296.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 296;
      longArray0[1] = (long) 296;
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)9, (-2119594259));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2, 1);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Long long0 = new Long(34);
      assertNotNull(long0);
      assertEquals(34L, (long)long0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "java.lang.Character");
      assertEquals(9, integerArray0.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 34;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) 34;
      floatArray0[4] = (float) int0;
      int int1 = ArrayUtils.indexOf(floatArray0, 34.0F, int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {34.0F, 34.0F, 34.0F, 34.0F, 34.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '<';
      charArray0[2] = 'u';
      charArray0[3] = '1';
      charArray0[4] = 'p';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'A', '<', 'u', '1', 'p'}, charArray0);
      assertArrayEquals(new char[] {'A', '<', 'u', '1', 'p', 'A', '<', 'u', '1', 'p'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-488.339544));
      assertNotNull(double0);
      assertEquals((-488.339544), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double1);
      assertEquals((-488.339544), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-488.339544));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-488.339544), (-488.339544)}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0, 21.5);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'K';
      doubleArray0[1] = (double) '4';
      doubleArray0[2] = 1.0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2035);
      shortArray0[1] = (short)1170;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-379);
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2035), (short)1170, (short)2, (short) (-379), (short)0}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short) (-379);
      floatArray0[2] = (float) 'm';
      floatArray0[3] = Float.NaN;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (short) (-2035), (float) (short)1170);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2035, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("8lL");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("8lL");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("8lL");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("8lL");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean3));
      
      booleanArray0[8] = boolean8;
      boolean boolean9 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean9);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      MockRandom mockRandom0 = new MockRandom(234L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = (boolean) boolean6;
      booleanArray1[2] = (boolean) boolean0;
      booleanArray1[3] = (boolean) boolean3;
      booleanArray1[4] = true;
      booleanArray1[5] = (boolean) boolean6;
      booleanArray1[6] = (boolean) boolean8;
      booleanArray1[7] = false;
      ArrayUtils.swap(booleanArray1, 2, 4, (int) (short) (-1));
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-194.368827);
      doubleArray0[4] = (-194.368827);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '~', 52);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((int[]) null, (-1609), 86, 86);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(86, booleanArray0, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3245);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)53;
      shortArray0[3] = (short) (-479);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)3035;
      shortArray0[6] = (short)252;
      shortArray0[7] = (short) (-829);
      shortArray0[8] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3245), (short)0, (short)53, (short) (-479), (short)1, (short)3035, (short)252, (short) (-829), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)3035;
      longArray0[1] = (long) (short)1;
      ArrayUtils.swap(longArray0, (-716), (-42));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3035L, 1L}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-1919), (int) (short)0, (int) (short)252);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-99));
      assertNotNull(byte1);
      assertEquals((byte) (-99), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Character character0 = new Character('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, (Object) character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146428521, 36);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte byte0 = new Byte((byte) (-104));
      assertNotNull(byte0);
      assertEquals((byte) (-104), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-104));
      assertNotNull(byte1);
      assertEquals((byte) (-104), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, (Object) byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "v;z*$Is%:ulF";
      stringArray0[2] = "o^+P-sM5nrt+AL}";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1408, '}');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1408, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2316;
      shortArray0[1] = (short) (-1874);
      shortArray0[2] = (short)47;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2316);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2316, (short) (-1874), (short)47}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1874), (short)47}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (short)47);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {47.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '5';
      charArray0[2] = 't';
      charArray0[3] = 'M';
      charArray0[4] = '+';
      charArray0[5] = 'A';
      ArrayUtils.shift(charArray0, (int) (short)2316);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'9', '5', 't', 'M', '+', 'A'}, charArray0);
      
      ArrayUtils.shuffle(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '+';
      objectArray0[1] = (Object) 't';
      objectArray0[2] = (Object) '9';
      ArrayUtils.swap(objectArray0, (int) (short) (-1874), 1136, 182);
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) 'M';
      longArray0[2] = 2147483647L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {43L, 77L, 2147483647L}, longArray0);
      assertArrayEquals(new long[] {43L, 77L, 2147483647L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-558.0F);
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 1, (-449), 1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-558.0F), (-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-558.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-558.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)73;
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0, (-881));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-2391));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short)0, (int) (byte) (-88));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 52);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2195);
      ArrayUtils.shift(intArray0, 86, (-2195), (-2195));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-2195), booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[6];
      booleanArray2[0] = boolean0;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = boolean0;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = boolean0;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2400;
      shortArray0[1] = (short)122;
      shortArray0[2] = (short)1824;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2400, (short)122, (short)1824}, shortArray0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) booleanArray2);
      assertEquals(6, objectArray0.length);
      assertEquals(6, booleanArray2.length);
      assertNotNull(objectArray0);
      assertSame(booleanArray2, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Double[]) null, (-685));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -685, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 329;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1669);
      doubleArray0[3] = 2699.173946958424;
      doubleArray0[4] = (double) 527;
      doubleArray0[5] = (double) (-792);
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-366), 2144747302);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {329.0, 0.0, (-1669.0), 2699.173946958424, 527.0, (-792.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {329.0, 0.0, (-1669.0), 2699.173946958424, 527.0, (-792.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      char[] charArray0 = new char[2];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 52.0F;
      floatArray0[1] = (float) 'D';
      floatArray0[2] = (float) 'D';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 91.0F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {52.0F, 68.0F, 68.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {52.0F, 68.0F, 68.0F, 91.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      ArrayUtils.shift(charArray0, (-2704), 78, (-2704));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-4.405891F);
      floatArray0[2] = (-2389.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 1129);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-4.405891F), 0.0F, (-2389.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-4.405891F), 0.0F, (-2389.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1129;
      intArray0[2] = 1129;
      intArray0[3] = 1129;
      intArray0[4] = 1129;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 90.0F);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-4.405891F), 0.0F, (-2389.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 1129);
      assertEquals(4, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(5, bitSet1.length());
      assertEquals("{1, 2, 3, 4}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(7, intArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new int[] {(-1), 1129, 1129, 1129, 1129, 0, 0}, intArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      ArrayUtils.swap(charArray0, 1129, (-1661), (-1));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1129;
      doubleArray0[1] = (double) 1129;
      doubleArray0[2] = (double) (-4.405891F);
      doubleArray0[3] = 586.0;
      doubleArray0[4] = (double) 1129;
      doubleArray0[5] = (double) (-4.405891F);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-2389.0F));
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1129.0, 1129.0, (-4.405890941619873), 586.0, 1129.0, (-4.405890941619873)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2389.0), 1129.0, 1129.0, (-4.405890941619873), 586.0, 1129.0, (-4.405890941619873)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '1';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short short0 = (short) (-1874);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)47;
      shortArray0[1] = (short)47;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1874));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)47, (short)47}, shortArray0);
      assertArrayEquals(new short[] {(short)47, (short)47}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.indexOf(charArray0, '`', (-1151));
      assertEquals(2, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'^', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (short)47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'p';
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-2803.0410606405));
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-2803.0410606405)}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, (-2613));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'q', 'q', 'p'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'p';
      objectArray0[2] = (Object) 'p';
      objectArray0[3] = (Object) 'p';
      ArrayUtils.swap(objectArray0, (-2613), 182, (int) 'p');
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'p';
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-2803.0410606405));
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-2803.0410606405)}, doubleArray0, 0.01);
      
      ArrayUtils.shift(charArray0, (-2613));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'q', 'q', 'p'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'p';
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) 'q';
      objectArray0[3] = (Object) 'p';
      ArrayUtils.swap(objectArray0, (-2613), 182, 1136);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-2195.0);
      objectArray0[2] = (Object) (-2195.0);
      ArrayUtils.swap(objectArray0, (-2195), (-2195), (-861));
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-871);
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)102;
      shortArray0[3] = (short) (-31);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2085));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-871), (short)76, (short)102, (short) (-31)}, shortArray0);
      assertEquals((-1), int0);
      
      Double double0 = new Double((short) (-31));
      assertNotNull(double0);
      assertEquals((-31.0), (double)double0, 0.01);
      
      Double double1 = new Double((short)76);
      assertNotNull(double1);
      assertEquals(76.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 64, (int) (short) (-31));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Short short0 = new Short((short)307);
      assertNotNull(short0);
      assertEquals((short)307, (short)short0);
      
      Short short1 = new Short((short)5);
      assertNotNull(short1);
      assertEquals((short)5, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-5305);
      longArray0[1] = (long) (short)307;
      longArray0[2] = (long) (short)5;
      longArray0[3] = (-3624L);
      longArray0[4] = (long) (short)5;
      longArray0[5] = (long) (short)5;
      longArray0[6] = (long) (short) (-5305);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-5305L), 307L, 5L, (-3624L), 5L, 5L, (-5305L)}, longArray0);
      assertArrayEquals(new long[] {(-5305L), 307L, 5L, (-3624L), 5L, 5L, (-5305L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (short) (-5305), 0, 36);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)1, (byte)0}, byteArray0);
      
      ArrayUtils.reverse((Object[]) null, (int) (byte)0, (int) (short)5);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 52);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (-2645L);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (-1549L);
      longArray0[7] = (-1549L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1, (-42));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double((-2055.2807506));
      assertNotNull(double0);
      assertEquals((-2055.2807506), (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 625.701578154;
      doubleArray1[2] = (Double) 152.3803551;
      Double double1 = new Double(1);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[3] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2055.2807506), 625.701578154, 152.3803551, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray2.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.7}, doubleArray1, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Long long0 = new Long((-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-2566.2), (int) (short) (-366), (double) (short) (-366));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 88L;
      longArray0[3] = 2147483647L;
      longArray0[4] = (-2645L);
      longArray0[5] = 0L;
      longArray0[6] = (-1409L);
      longArray0[7] = (-355L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-1L), 88L, 2147483647L, (-2645L), 0L, (-1409L), (-355L)}, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)668;
      shortArray0[1] = (short)120;
      shortArray0[2] = (short)308;
      shortArray0[3] = (short) (-152);
      shortArray0[4] = (short)55;
      shortArray0[5] = (short)617;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)125);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)125, (short)668, (short)120, (short)308, (short) (-152), (short)55, (short)617}, shortArray1);
      assertArrayEquals(new short[] {(short)668, (short)120, (short)308, (short) (-152), (short)55, (short)617}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-2907.4), 908, (double) (-1409L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 64;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1369.586391), (-1256), (-1369.586391));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 64;
      longArray0[1] = (long) 64;
      longArray0[2] = (long) 64;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {64L, 64L, 64L}, longArray0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, objectArray0.length);
      assertNotNull(objectArray0);
      assertSame(longArray1, objectArray0);
      assertArrayEquals(new long[] {64L, 64L, 64L}, longArray0);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)86);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '6';
      charArray0[2] = 'l';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'~', '6', 'l'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)109;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)9;
      ArrayUtils.shift(byteArray0, (int) (byte)120);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)1, (byte)56, (byte)9, (byte)109, (byte)0, (byte)120, (byte)9}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short)10);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)120);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte)120);
      assertNotNull(long0);
      assertEquals(120L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.add(longArray0, longArray0[0]);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)37);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)1, (byte)56, (byte)9, (byte)109, (byte)0, (byte)120, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)1, (byte)56, (byte)9, (byte)109, (byte)0, (byte)120, (byte)9}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int int0 = 4;
      int int1 = (-1);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("8lL");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("8lL");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("8lL");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("8lL");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean1));
      
      booleanArray0[8] = boolean8;
      boolean boolean9 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean9);
      
      double[] doubleArray0 = new double[1];
      ArrayUtils.reverse(doubleArray0, (-646), 91);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = ArrayUtils.insert(2517, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = (boolean) boolean4;
      booleanArray1[2] = true;
      booleanArray1[3] = (boolean) boolean8;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(91, booleanArray1, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      byteArray0[2] = (byte)0;
      shortArray0[5] = (short) (byte)0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      shortArray0[3] = (short) (byte)0;
      intArray0[6] = (int) (short)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertEquals(7, intArray0.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray1, (-1167), 355);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertEquals(7, intArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      int[] intArray0 = new int[6];
      intArray0[0] = (-2735);
      intArray0[1] = 0;
      intArray0[1] = (int) '&';
      intArray0[3] = (-1);
      intArray0[4] = (int) '&';
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '&';
      characterArray0[1] = (Character) '&';
      characterArray0[2] = (Character) '&';
      Character character0 = new Character((char) characterArray0[2]);
      assertEquals(3, characterArray0.length);
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      Character character1 = Character.valueOf((char) characterArray0[1]);
      assertEquals(3, characterArray0.length);
      assertNotNull(character1);
      assertEquals('&', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) character0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(3, characterArray0.length);
      assertNotNull(bitSet0);
      assertTrue(character0.equals((Object)character1));
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) characterArray0[1]);
      assertEquals(6, intArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new int[] {(-2735), 38, 0, (-1), 38, 0}, intArray0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-2735));
      assertNotNull(integer0);
      assertEquals((-2735), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 64;
      doubleArray0[2] = (double) (-1256);
      doubleArray0[3] = 8.826670143;
      doubleArray0[4] = (double) (-1256);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 64.0, (-1256.0), 8.826670143, (-1256.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 64.0, (-1256.0), 8.826670143, (-1256.0)}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      doubleArray0[3] = (double) (short)1;
      shortArray0[1] = (short)10348;
      shortArray0[2] = (short)104;
      shortArray0[3] = (short) (-791);
      shortArray0[4] = (short)102;
      shortArray0[6] = (short) (-3782);
      shortArray0[7] = (short) (-2031);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)10348, (short)104, (short) (-791), (short)102, (short)0, (short) (-3782), (short) (-2031)}, shortArray0);
      assertFalse(boolean0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)10348, (short)104, (short) (-791), (short)102, (short)0, (short) (-3782), (short) (-2031)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long[] longArray0 = ArrayUtils.removeAllOccurrences((Long[]) null, long0);
      assertNull(longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1919);
      intArray0[1] = (-14);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted((Long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte0, (int) (byte) (-119));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-2146509731), (float) (byte) (-119));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146509731, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-3006L));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 1686;
      intArray0[1] = 288;
      ArrayUtils.swap(intArray0, 1686, 653);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1686, 288}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2039.9639437028);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-5.711724024));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{0, 5}", bitSet1.toString());
      assertEquals(6, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(6, booleanArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true}, booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.andNot(bitSet1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{0, 5}", bitSet1.toString());
      assertEquals(6, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(1, doubleArray0.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true}, booleanArray0));
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.andNot(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      assertFalse(bitSet0.equals((Object)bitSet1));
      
      bitSet0.set(87, 87);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      assertFalse(bitSet0.equals((Object)bitSet1));
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 810, 908);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 90;
      longArray0[2] = (long) 1;
      longArray0[4] = (long) (-3284);
      longArray0[5] = (long) (-3284);
      longArray0[6] = (long) 90;
      longArray0[7] = (long) 90;
      ArrayUtils.shift(longArray0, 160, (-3284), (-3284));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1L, 90L, 1L, 0L, (-3284L), (-3284L), 90L, 90L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-186.2666F);
      floatArray0[2] = (-558.0F);
      floatArray0[3] = (-4451.45F);
      floatArray0[4] = (-2579.8818F);
      floatArray0[5] = (-54.0F);
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-551.337F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-2579.8818F));
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, (-186.2666F), (-558.0F), (-4451.45F), (-2579.8818F), (-54.0F), 1.0F, (-551.337F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, (-186.2666F), (-558.0F), (-4451.45F), (-2579.8818F), (-54.0F), 1.0F, (-551.337F), (-2579.8818F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      Double double0 = new Double(4220.49764);
      assertNotNull(double0);
      assertEquals(4220.49764, (double)double0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '7';
      charArray0[3] = '1';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '1');
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'1', '1', '7', '1'}, charArray0);
      assertArrayEquals(new char[] {'7'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((double[]) null, 3250);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'H';
      charArray0[2] = '_';
      charArray0[3] = 'h';
      charArray0[4] = '}';
      charArray0[5] = '\'';
      charArray0[6] = '$';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '_');
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'G', 'H', '_', 'h', '}', '\'', '$'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1191.121436506);
      doubleArray0[1] = (double) '_';
      doubleArray0[2] = (double) '$';
      doubleArray0[3] = (double) '$';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1191.121436506), 95.0, 36.0, 36.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'h';
      longArray0[1] = (long) '$';
      longArray0[2] = (long) '}';
      longArray0[3] = (long) '$';
      longArray0[4] = (long) '_';
      longArray0[5] = (long) '_';
      longArray0[6] = (long) '$';
      longArray0[7] = (long) 'G';
      long[] longArray1 = ArrayUtils.add(longArray0, 95L);
      assertEquals(9, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {104L, 36L, 125L, 36L, 95L, 95L, 36L, 71L, 95L}, longArray1);
      assertArrayEquals(new long[] {104L, 36L, 125L, 36L, 95L, 95L, 36L, 71L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shuffle(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'H', '_', 'h', '}', '\'', '$', 'G'}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte)36;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)2);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)84, (byte)2, (byte)22, (byte)84, (byte) (-37), (byte)85, (byte)84, (byte)36}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = (long) 51;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 51L, 0L, 0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)51);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0, (byte)0, (byte)51, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'H';
      charArray0[2] = '_';
      charArray0[3] = 'h';
      charArray0[4] = '}';
      charArray0[5] = '\'';
      charArray0[6] = '$';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '_');
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'G', 'H', '_', 'h', '}', '\'', '$'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1191.121436506);
      doubleArray0[1] = (double) '_';
      doubleArray0[2] = (double) '$';
      doubleArray0[3] = (double) '$';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1191.121436506), 95.0, 36.0, 36.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'h';
      longArray0[1] = (long) '$';
      longArray0[2] = (long) '}';
      longArray0[3] = (long) '$';
      longArray0[4] = (long) '_';
      longArray0[5] = (long) '_';
      longArray0[6] = (long) '$';
      longArray0[7] = (long) 'G';
      long[] longArray1 = ArrayUtils.add(longArray0, 95L);
      assertEquals(9, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {104L, 36L, 125L, 36L, 95L, 95L, 36L, 71L, 95L}, longArray1);
      assertArrayEquals(new long[] {104L, 36L, 125L, 36L, 95L, 95L, 36L, 71L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shuffle(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'H', '_', 'h', '}', '\'', '$', 'G'}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte)36;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)2);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)84, (byte)2, (byte)22, (byte) (-1), (byte) (-37), (byte)85, (byte)49, (byte)36}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Long long0 = new Long((-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[3] = (-773.0F);
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-773.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = (boolean) boolean0;
      boolean boolean4 = ArrayUtils.contains(booleanArray1, true);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(boolean4);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4565);
      shortArray0[1] = (short)76;
      shortArray0[2] = (short) (-1226);
      shortArray0[3] = (short) (-2345);
      shortArray0[4] = (short)254;
      shortArray0[5] = (short) (-1303);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1226));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4565), (short)76, (short) (-1226), (short) (-2345), (short)254, (short) (-1303)}, shortArray0);
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-2345), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2345, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2477);
      shortArray0[1] = (short) (-2477);
      shortArray0[2] = (short) (-2477);
      shortArray0[3] = (short) (-2477);
      shortArray0[4] = (short) (-2477);
      shortArray0[5] = (short) (-2477);
      shortArray0[6] = (short) (-2477);
      shortArray0[7] = (short) (-2477);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2477));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2477), (short) (-2477), (short) (-2477), (short) (-2477), (short) (-2477), (short) (-2477), (short) (-2477), (short) (-2477)}, shortArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-2477);
      floatArray0[1] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(216, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 216, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-936);
      intArray0[1] = (-988);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-936), (-988), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-936), (-988), 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = ArrayUtils.insert((-936), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)58);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)91);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (short)91;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)91;
      float[] floatArray1 = ArrayUtils.insert((int) (short)0, floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 91.0F, 0.0F, 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 91.0F, 0.0F, 91.0F, (-1.0F), 91.0F, 0.0F, 91.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 87;
      intArray0[1] = 2300;
      intArray0[2] = (-4238);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {87, 2300, (-4238)}, intArray0);
      assertArrayEquals(new int[] {87, 2300, (-4238)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 87;
      floatArray0[1] = (float) 87;
      floatArray0[2] = (float) 2300;
      floatArray0[3] = (float) 2300;
      floatArray0[4] = (float) 87;
      floatArray0[5] = (float) (-4238);
      floatArray0[6] = (float) (-4238);
      floatArray0[7] = (float) 87;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1659, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1659, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(1698.852656465727);
      assertNotNull(double0);
      assertEquals(1698.852656465727, (double)double0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1393;
      longArray0[1] = 2L;
      longArray0[2] = (long) (-2107715431);
      longArray0[3] = (long) 1393;
      longArray0[4] = (long) 1393;
      longArray0[5] = (long) 1393;
      longArray0[6] = 723L;
      longArray0[7] = (long) (-2107715431);
      longArray0[8] = (-1220L);
      ArrayUtils.shift(longArray0, 1288490189, 1393, 8);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1393L, 2L, (-2107715431L), 1393L, 1393L, 1393L, 723L, (-2107715431L), (-1220L)}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, (-21), (Long) (-1220L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -21, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 52, 52, 87);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) 87;
      longArray0[2] = 1429L;
      longArray0[3] = (long) 52;
      longArray0[4] = (long) 87;
      longArray0[5] = (long) 52;
      longArray0[6] = (long) 87;
      longArray0[7] = (long) 52;
      longArray0[8] = (long) 87;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {52L, 87L, 1429L, 52L, 87L, 52L, 87L, 52L, 87L}, longArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'W';
      charArray0[2] = '[';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'W', '[', 'd'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'W';
      intArray0[1] = 52;
      intArray0[2] = (int) '[';
      intArray0[3] = (int) 'W';
      intArray0[4] = (int) 'W';
      intArray0[5] = 87;
      intArray0[6] = (int) '[';
      intArray0[7] = (-84);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {87, 52, 91, 87, 87, 87, 91, (-84)}, intArray0);
      assertArrayEquals(new int[] {87, 52, 91, 87, 87, 87, 91, (-84)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1438.0;
      doubleArray0[2] = (-956.0);
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      doubleArray0[5] = (-1610.2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.swap(charArray0, (-2195), (-2195), (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)52;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 'F';
      floatArray0[2] = (float) (byte)9;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte)9;
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-2195), (-279));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 70.0F, 9.0F, (-1.0F), 9.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)52);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)9;
      shortArray0[1] = (short) (byte)9;
      shortArray0[2] = (short) (byte)52;
      shortArray0[3] = (short) (byte)52;
      shortArray0[4] = (short)120;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)52, (short)52, (short)120}, shortArray0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)52, (short)52, (short)120}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 84;
      intArray0[1] = 84;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 84, 84);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {84, 84}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertArrayEquals(new int[] {84, 84}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = ArrayUtils.addAll(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray3.length);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {84, 84}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {84, 84}, intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 84);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1438);
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      Double double0 = new Double(1438);
      assertNotNull(double0);
      assertEquals(1438.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      ArrayUtils.swap(doubleArray0, (-2573), 68);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-742.7964F));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("]");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-449);
      floatArray0[1] = (float) (-449);
      floatArray0[2] = (float) (-449);
      ArrayUtils.shift(floatArray0, (-2152), (-449), 97);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-850.90497F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), (-449.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-2152));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2152)}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 266, (-449));
      assertNull(byteArray0);
      
      ArrayUtils.shift((Object[]) null, 1, 266, (-109));
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 1271);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1271, (int) (byte) (-1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      Long long0 = new Long(1303L);
      assertNotNull(long0);
      assertEquals(1303L, (long)long0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1247L;
      floatArray0[1] = 1.0F;
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      
      long[] longArray1 = ArrayUtils.addFirst((long[]) null, 4298L);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4298L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-3006L));
      assertNull(longArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-703);
      intArray0[1] = 1602;
      intArray0[2] = (-1273);
      intArray0[3] = (-963);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1273));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-703), 1602, (-1273), (-963)}, intArray0);
      assertEquals(2, int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-63);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1273), (int) (byte) (-1));
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)50, (byte)117, (byte) (-85), (byte) (-42), (byte)50, (byte) (-1), (byte) (-63)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean1;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3167.3662F);
      ArrayUtils.swap(floatArray0, 7, 7);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 7;
      intArray0[6] = (-2904);
      intArray0[7] = 7;
      intArray0[8] = 7;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4226.917526269473);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2904), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2904, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-17);
      intArray0[1] = (-1);
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 152.3803551;
      doubleArray1[2] = 152.3803551;
      doubleArray1[3] = 152.3803551;
      doubleArray1[0] = 152.3803551;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) 152.3803551;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-20);
      shortArray0[1] = (short)56;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)1408;
      shortArray0[4] = (short)1087;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-20), (short)56, (short)2, (short)1408, (short)1087}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 84;
      intArray0[1] = 84;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 84, 84);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 84}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = ArrayUtils.addAll(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray3.length);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray3);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {0, 84}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 84}, intArray3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1727;
      ArrayUtils.swap(longArray0, (-991), (-991));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, 0L}, longArray0);
      
      short short0 = (short)51;
      Short short1 = new Short((short)51);
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-558));
      assertNotNull(short2);
      assertEquals((short) (-558), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short short3 = new Short((short) (-558));
      assertNotNull(short3);
      assertEquals((short) (-558), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51}, shortArray1);
      
      ArrayUtils.reverse(longArray0, (-991), (int) (short) (-558));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-991);
      floatArray0[1] = (float) (short) (-558);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 1727);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-991.0F), (-558.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-106));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((Object[]) shortArray0, (int) (byte) (-106));
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      Long long0 = new Long(795L);
      assertNotNull(long0);
      assertEquals(795L, (long)long0);
      
      Long long1 = new Long(691L);
      assertNotNull(long1);
      assertEquals(691L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long1;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      ArrayUtils.swap(byteArray0, Integer.MAX_VALUE, (-1880));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte)12, (byte)10, (byte) (-76), (byte)88, (byte)0, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 778;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 778, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1430;
      floatArray0[5] = (float) 962;
      Long[] longArray0 = new Long[3];
      Long long0 = Long.getLong("org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle", (-1779L));
      assertNotNull(long0);
      assertEquals((-1779L), (long)long0);
      
      longArray0[0] = long0;
      longArray0[1] = longArray0[0];
      Long long1 = new Long(5693L);
      assertNotNull(long1);
      assertEquals(5693L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[2] = long1;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((byte[]) null, 97, (-839));
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 682.3882647984;
      doubleArray0[1] = 782.765278;
      doubleArray0[2] = (-1502.0);
      doubleArray0[3] = 2415.972736814;
      doubleArray0[4] = 1256.62197;
      doubleArray0[5] = (-2681.890873196583);
      doubleArray0[6] = (-2039.9639437028);
      doubleArray0[7] = (-766.0);
      doubleArray0[8] = 3210.258648515;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {682.3882647984, 782.765278, (-1502.0), 2415.972736814, 1256.62197, (-2681.890873196583), (-2039.9639437028), (-766.0), 3210.258648515}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 3210.258648515;
      objectArray0[1] = (Object) 682.3882647984;
      objectArray0[2] = (Object) 3210.258648515;
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, objectArray0[0]);
      assertEquals(3, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 52);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (-2645L);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (-1549L);
      longArray0[7] = (-1549L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1, (-42));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((byte)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      shortArray0[0] = short0;
      short short1 = (short)0;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      Short short3 = new Short(short1);
      assertNotNull(short3);
      assertEquals((short)0, (short)short3);
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      shortArray0[2] = short3;
      Short short4 = new Short((byte)1);
      assertNotNull(short4);
      assertEquals((short)1, (short)short4);
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)100);
      assertNotNull(short5);
      assertEquals((short)100, (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-804));
      assertNotNull(short6);
      assertEquals((short) (-804), (short)short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      
      shortArray0[5] = short6;
      Short short7 = new Short((short) shortArray0[3]);
      assertEquals(8, shortArray0.length);
      assertNotNull(short7);
      assertEquals((short)1, (short)short7);
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short5));
      assertTrue(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short1));
      assertTrue(short7.equals((Object)short0));
      
      shortArray0[6] = short7;
      Short short8 = new Short((short) (-804));
      assertNotNull(short8);
      assertEquals((short) (-804), (short)short8);
      assertTrue(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short4));
      
      shortArray0[7] = short8;
      Short short9 = new Short((short)0);
      assertNotNull(short9);
      assertEquals((short)0, (short)short9);
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short6));
      assertTrue(short9.equals((Object)short3));
      assertTrue(short9.equals((Object)short2));
      assertTrue(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short8));
      
      Short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, short9);
      assertEquals(8, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short6));
      assertTrue(short9.equals((Object)short3));
      assertTrue(short9.equals((Object)short2));
      assertTrue(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short8));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-3006L));
      assertNull(longArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[4];
      intArray0[1] = 1602;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2027);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short) (-10);
      shortArray0[3] = (short) (-31);
      shortArray0[4] = (short)23;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)120, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('e');
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('e', (char)character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      int int0 = ArrayUtils.indexOf(charArray0, '+', 403);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {')', 'U', 'U'}, charArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)58, (-108), 3714);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)120, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '\'';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'k');
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'^', '\''}, charArray0);
      assertArrayEquals(new char[] {'k', '^', '\''}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '^';
      doubleArray0[1] = (double) '^';
      doubleArray0[2] = (double) 'k';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-514.4089));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {94.0, 94.0, 107.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.add(charArray1, 'W');
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(4, charArray2.length);
      assertNotNull(charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'^', '\''}, charArray0);
      assertArrayEquals(new char[] {'k', '^', '\''}, charArray1);
      assertArrayEquals(new char[] {'k', '^', '\'', 'W'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":*|)KuPcsb(pgww";
      stringArray0[1] = "v;z*$Is%:ulF";
      stringArray0[2] = "o^+P-sM5nrt+AL}";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-240), 1891);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      char[] charArray1 = ArrayUtils.add(charArray0, '\"');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      assertArrayEquals(new char[] {'V', '\"'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1101.07113;
      doubleArray0[6] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3693, 3693);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, 0.0, 1.0, 1.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1163);
      shortArray0[6] = (short)6;
      ArrayUtils.reverse((byte[]) null);
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)1721;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short) (-1163);
      longArray0[6] = (long) (short) (-1163);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2169L));
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 1721L, 0L, (-1163L), (-1163L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 1721L, 0L, (-1163L), (-1163L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'k';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '<';
      charArray0[5] = 't';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'t', 'k', '5', '5', '<', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 102;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 102}, intArray0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Double double0 = new Double((short)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Object object4 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object4);
      assertEquals(0.0, object4);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-584));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 102}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 'H';
      charArray0[2] = 'k';
      charArray0[3] = '5';
      charArray0[4] = 't';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {':', 'H', 'k', '5', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-907L);
      longArray0[1] = (-907L);
      longArray0[2] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-907L), (-907L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, false, false}, booleanArray0));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)721;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1564;
      shortArray0[4] = (short)802;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)46;
      MockRandom mockRandom0 = new MockRandom((short)721);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)1564, (short)802, (short)1, (short)46, (short)721}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      MockRandom mockRandom0 = new MockRandom(1831L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1831L;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2245;
      shortArray0[2] = (short)5;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2245, (short)5}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte) (-13), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty((Boolean[]) null, class0);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (short)5, (int) (short)2245);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1831.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals((-1), int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)0, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1), (short)2245, (short)5}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '^';
      charArray0[2] = '1';
      charArray0[3] = '[';
      charArray0[4] = ';';
      charArray0[5] = '@';
      ArrayUtils.reverse(charArray0, (int) (short) (-1), (-1));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'}', '^', '1', '[', ';', '@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap((int[]) null, 347, 347, (-2652));
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (-3167.3662F);
      floatArray0[2] = (float) 'x';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {120.0F, (-3167.3662F), 120.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean2 = Boolean.valueOf("java.lang.Short");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[6] = boolean2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'x';
      floatArray0[1] = (float) 2188;
      floatArray0[2] = (float) 2188;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {120.0F, 2188.0F, 2188.0F}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 0, 2);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      byte byte1 = (byte)94;
      byteArray0[1] = (byte)94;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 1058);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1058, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 75.0F;
      floatArray0[1] = 3223.71F;
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1101.0F));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {75.0F, 3223.71F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 0, 2, 899);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte)23);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Character[] characterArray0 = new Character[26];
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character((char) character0);
      assertNotNull(character2);
      assertEquals('i', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      
      ArrayUtils.swap((Object[]) characterArray0, 182, (-1506), (int) (byte)23);
      assertEquals(26, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-194.368827);
      doubleArray0[4] = 1.0;
      doubleArray0[1] = (-194.368827);
      byte byte0 = (byte)76;
      Byte byte1 = new Byte((byte)76);
      assertNotNull(byte1);
      assertEquals((byte)76, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)76, (byte)76, (byte)76, (byte)76, (byte)76}, byteArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (byte)76;
      floatArray0[3] = (float) byte0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-223.0F));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, 76.0F, 76.0F, 76.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) byteArray0, 1069, (int) byte0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 380);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {380}, intArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      ArrayUtils.reverse((Object[]) longArray1, 380, 1456);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 963.0F);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1574);
      shortArray0[1] = (short) (-2389);
      shortArray0[2] = (short) (-29855);
      shortArray0[3] = (short) (-1574);
      shortArray0[4] = (short) (-2389);
      shortArray0[5] = (short) (-2389);
      shortArray0[6] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)52);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1574), (short) (-2389), (short) (-29855), (short) (-1574), (short) (-2389), (short) (-2389), (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1574);
      doubleArray0[1] = (double) 963.0F;
      doubleArray0[2] = (double) (short) (-1574);
      doubleArray0[3] = (double) (short) (-1574);
      doubleArray0[4] = 0.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1574.0), 963.0, (-1574.0), (-1574.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(14, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1574), (short) (-2389), (short) (-29855), (short) (-1574), (short) (-2389), (short) (-2389), (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'x';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'x';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2169L));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {120L, 0L, 0L, 120L}, longArray0);
      assertArrayEquals(new long[] {120L, 0L, 0L, 120L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int1 = ArrayUtils.indexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2169L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 2316);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2169.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)67;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-126), (byte)82, (byte)116, (byte)14, (byte)67}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-242), 1891);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Float[] floatArray0 = new Float[1];
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.reverse((long[]) null, (-2145820948), (-850));
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '\'';
      long[] longArray0 = new long[17];
      longArray0[0] = (long) '\'';
      longArray0[1] = 1280L;
      longArray0[2] = (long) 'T';
      longArray0[3] = 0L;
      longArray0[4] = (long) '\'';
      longArray0[5] = 120L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(17, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      doubleArray0[4] = (-3391.97706540462);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'S';
      intArray0[1] = (int) 'S';
      intArray0[2] = (int) 'S';
      intArray0[3] = (int) 'S';
      intArray0[4] = (int) 'S';
      intArray0[5] = (int) 'S';
      intArray0[6] = (int) 'S';
      intArray0[7] = (int) 'S';
      ArrayUtils.shuffle(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {83, 83, 83, 83, 83, 83, 83, 83}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 83;
      floatArray0[1] = (float) 83;
      floatArray0[2] = 988.2F;
      floatArray0[3] = (float) 83;
      floatArray0[4] = (float) 'S';
      floatArray0[5] = (float) 83;
      floatArray0[6] = (float) 83;
      floatArray0[7] = (float) 83;
      ArrayUtils.shift(floatArray0, 83);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {83.0F, 83.0F, 83.0F, 83.0F, 83.0F, 988.2F, 83.0F, 83.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'S';
      longArray0[1] = (long) 83;
      longArray0[2] = (long) 83;
      longArray0[3] = (long) 'S';
      longArray0[4] = (long) 83;
      longArray0[5] = (long) 83;
      longArray0[6] = (long) 83;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {83L, 83L, 83L, 83L, 83L, 83L, 83L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-131.51913787);
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      int[] intArray0 = new int[6];
      intArray0[0] = (-2735);
      intArray0[1] = 0;
      intArray0[1] = (int) '&';
      intArray0[3] = (-1);
      intArray0[4] = (int) '&';
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '&';
      characterArray0[1] = (Character) '&';
      characterArray0[2] = (Character) '&';
      Character character0 = new Character((char) characterArray0[2]);
      assertEquals(3, characterArray0.length);
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 2375.902, 1, (double) (-1));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2375.902, 0.0, 0.0, (-131.51913787), 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) character0, (-1));
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, characterArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short)0, (int) (byte) (-88));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {266}, intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3441L;
      longArray0[1] = (-729L);
      longArray0[2] = 819L;
      longArray0[3] = (-729L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-1863L);
      ArrayUtils.shift(longArray0, 1497, 1497, 1497);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {3441L, (-729L), 819L, (-729L), 0L, 0L, (-1863L), 0L}, longArray0);
      
      char[] charArray0 = new char[9];
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '!';
      longArray1[1] = 819L;
      longArray1[2] = (long) '!';
      longArray1[3] = (-729L);
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {33L, 819L, 33L, (-729L)}, longArray1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MockRandom mockRandom0 = new MockRandom((-1855L));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-4183));
      assertNull(intArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1497;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 819L;
      ArrayUtils.reverse(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {819.0F, 0.0F, 1497.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-194.368827);
      doubleArray0[4] = (-194.368827);
      doubleArray0[5] = (-194.368827);
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3693, 3693);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), (-194.368827), (-194.368827), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), (-194.368827), (-194.368827), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      ArrayUtils.swap(doubleArray1, 11, (int) (short)0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), (-194.368827), (-194.368827), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ArrayUtils.swap(byteArray0, (int) (byte) (-126), 1635, (int) (byte) (-108));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)8);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)102;
      byteArray0[0] = (byte) (-16);
      byteArray0[4] = (byte) (-117);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)56, (byte)102, (byte)0, (byte) (-117)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)56, (byte)102, (byte)0, (byte) (-117)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-16);
      doubleArray0[1] = (double) (byte) (-117);
      doubleArray0[2] = (double) (byte) (-117);
      doubleArray0[3] = (double) (byte) (-16);
      doubleArray0[4] = (double) (byte) (-117);
      doubleArray0[5] = (double) (byte) (-16);
      doubleArray0[6] = (double) (byte)102;
      doubleArray0[7] = (double) (byte) (-16);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1863.7297806018), (int) (byte)56, (-16.0));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-16.0), (-117.0), (-117.0), (-16.0), (-117.0), (-16.0), 102.0, (-16.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-16.0);
      objectArray0[1] = (Object) (byte)102;
      objectArray0[2] = (Object) (byte) (-16);
      objectArray0[3] = (Object) (-16.0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (-117.0);
      objectArray0[6] = (Object) (-117.0);
      objectArray0[7] = (Object) (-16.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (int) (byte)102);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, objectArray0.length);
      assertNotNull(bitSet0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) " ?\"lv:");
      assertNotNull(object1);
      assertEquals(" ?\"lv:", object1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-117);
      intArray0[1] = (-878);
      intArray0[2] = (int) (byte)56;
      intArray0[3] = (int) (byte) (-16);
      intArray0[4] = (int) (byte) (-117);
      intArray0[5] = (int) (byte)56;
      intArray0[6] = (int) (byte) (-117);
      intArray0[7] = 1;
      intArray0[8] = (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-878), 56, (-16), (-117), 56, (-117), 1, (-1), (-117)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1438.0;
      doubleArray0[2] = (-956.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-956.0), (int) (byte) (-117), (-1610.2));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1610.2), 1438.0, (-956.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-116), (int) (byte) (-52));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117)}, byteArray1);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-558.0F);
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 1, (-449), 1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-558.0F), (-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-558.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-558.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      MockRandom mockRandom0 = new MockRandom(234L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 234L;
      doubleArray0[2] = (double) (-558.0F);
      doubleArray0[3] = (double) (-558.0F);
      doubleArray0[4] = (double) (-558.0F);
      doubleArray0[5] = (-2917.9934);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {234.0, (-558.0), (-558.0), (-558.0), (-2917.9934), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-449), 1765, (-1281));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)0, (byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (-150);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-13);
      intArray0[6] = (-150);
      intArray0[7] = (int) (byte) (-13);
      intArray0[8] = (int) (byte)0;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)40, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-150), 0, 0, 0, (-13), (-150), (-13), 0}, intArray0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = new boolean[1];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      ArrayUtils.swap(booleanArray1, 2597, (int) (byte)0);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "v;z*$Is%:ulF";
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 1768, 6, 2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-531);
      doubleArray0[1] = (double) (short)91;
      doubleArray0[2] = (double) 1643;
      doubleArray0[3] = (double) 4;
      ArrayUtils.reverse(doubleArray0, (-896), (-531));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-531.0), 91.0, 1643.0, 4.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(7, charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)91;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (-2055.2807506);
      ArrayUtils.reverse(doubleArray0, (-531), 1643);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2055.2807506), 4.0, 91.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      char[] charArray1 = ArrayUtils.insert((int) (short)0, charArray0, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertArrayEquals(new char[] {'[', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) 0;
      ArrayUtils.swap(byteArray0, 51, 2427, 0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-108);
      ArrayUtils.swap(byteArray0, 10, 3, (int) (byte) (-108));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-574.7905653));
      assertNotNull(double0);
      assertEquals((-574.7905653), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = Double.valueOf(339.32566709);
      assertNotNull(double1);
      assertEquals(339.32566709, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((byte) (-108));
      assertNotNull(double2);
      assertEquals((-108.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((byte) (-108));
      assertNotNull(double3);
      assertEquals((-108.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((byte) (-108));
      assertNotNull(double4);
      assertEquals((-108.0), (double)double4, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, Double.NaN);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-574.7905653), 339.32566709, (-108.0), (-108.0), (-108.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (-2311.870353722164));
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-574.7905653), 339.32566709, (-108.0), (-108.0), (-108.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-574.7905653), 339.32566709, (-108.0), (-108.0), (-108.0), (-2311.870353722164)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2392L));
      assertNotNull(long0);
      assertEquals((-2392L), (long)long0);
      
      longArray0[0] = long0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2392L);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2392.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-119));
      assertNotNull(byte0);
      assertEquals((byte) (-119), (byte)byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, (Object) longArray0[0], (int) (byte) (-119));
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-2206), (float) (byte) (-119));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2206, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2815;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)18688;
      ArrayUtils.swap(shortArray0, 5, (int) (short)0, (-99));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2815, (short)0, (short)18688}, shortArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)18688;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Long[] longArray0 = new Long[6];
      long long0 = 1L;
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      Long long2 = new Long((short)0);
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[1] = long2;
      Long long3 = new Long((-1863L));
      assertNotNull(long3);
      assertEquals((-1863L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[2] = long3;
      Long long4 = new Long((long) longArray0[2]);
      assertEquals(6, longArray0.length);
      assertNotNull(long4);
      assertEquals((-1863L), (long)long4);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      
      longArray0[3] = long4;
      Long long5 = new Long((short)2815);
      assertNotNull(long5);
      assertEquals(2815L, (long)long5);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      
      longArray0[4] = long5;
      Long long6 = new Long((-1943L));
      assertNotNull(long6);
      assertEquals((-1943L), (long)long6);
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) long0;
      floatArray0[1] = (float) 5;
      ArrayUtils.shift(floatArray0, 4);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 5.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "j9a0\":n,p?2.Al8");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-61));
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-61)}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      Long long0 = Long.getLong("u#0Lt5.wL9]UKZ_g8^", 0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((byte)0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long1;
      longArray0[4] = long0;
      longArray0[5] = long1;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'b';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'm');
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'<', 'b'}, charArray0);
      assertArrayEquals(new char[] {'<', 'b'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'u';
      charArray0[2] = 'W';
      charArray0[3] = '|';
      charArray0[4] = '*';
      charArray0[5] = 'm';
      charArray0[6] = 'b';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'O');
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', 'u', 'W', '|', '*', 'm', 'b'}, charArray0);
      assertArrayEquals(new char[] {':', 'u', 'W', '|', '*', 'm', 'b'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-3006L));
      assertNull(longArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-963);
      intArray0[1] = (-1273);
      intArray0[2] = 1602;
      intArray0[3] = (-1273);
      intArray0[4] = (-703);
      intArray0[5] = 1602;
      intArray0[6] = (-703);
      intArray0[7] = 1602;
      intArray0[8] = (-703);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 100);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-963), (-1273), 1602, (-1273), (-703), 1602, (-703), 1602, (-703)}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = 1430;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 0, 329, (-801));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      Long long0 = new Long((-1863L));
      assertNotNull(long0);
      assertEquals((-1863L), (long)long0);
      
      Long long1 = new Long((-1863L));
      assertNotNull(long1);
      assertEquals((-1863L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      longArray0[1] = long1;
      longArray0[3] = long0;
      longArray0[4] = long1;
      longArray0[6] = longArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'S';
      charArray0[2] = '&';
      charArray0[4] = 'U';
      int int0 = ArrayUtils.indexOf(charArray0, 'H');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'S', '&', '\u0000', 'U'}, charArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Short short0 = new Short((short) (-688));
      assertNotNull(short0);
      assertEquals((short) (-688), (short)short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-85);
      Byte byte1 = new Byte((byte) (-85));
      assertNotNull(byte1);
      assertEquals((byte) (-85), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-85));
      assertNotNull(byte2);
      assertEquals((byte) (-85), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)117;
      Byte byte4 = new Byte((byte)117);
      assertNotNull(byte4);
      assertEquals((byte)117, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[2] = byte4;
      Byte byte5 = Byte.valueOf((byte) (-85));
      assertNotNull(byte5);
      assertEquals((byte) (-85), (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      
      byteArray0[3] = byte5;
      byte byte6 = (byte)0;
      Byte byte7 = new Byte((byte)0);
      assertNotNull(byte7);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      
      byteArray0[4] = byte7;
      Byte byte8 = new Byte((byte) (-85));
      assertNotNull(byte8);
      assertEquals((byte) (-85), (byte)byte8);
      assertTrue(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      
      byteArray0[5] = byte8;
      Byte byte9 = new Byte(byte0);
      assertNotNull(byte9);
      assertEquals((byte) (-85), (byte)byte9);
      assertTrue(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte6);
      
      byteArray0[6] = byte9;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) byte6, (int) byte3);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(0, int0);
      assertFalse(byte6 == byte0);
      assertFalse(byte6 == byte3);
      assertFalse(byte3 == byte6);
      assertFalse(byte3 == byte0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean0;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[3] = boolean2;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-677);
      longArray0[1] = (long) (byte) (-16);
      longArray0[2] = (long) (byte) (-117);
      longArray0[3] = (long) (byte)102;
      ArrayUtils.reverse(longArray0, (-752), (-1188));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-677L), (-16L), (-117L), 102L}, longArray0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)102);
      assertNotNull(byte0);
      assertEquals((byte)102, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)52);
      assertNotNull(byte1);
      assertEquals((byte)52, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)85);
      assertNotNull(byte2);
      assertEquals((byte)85, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)85);
      assertNotNull(byte3);
      assertEquals((byte)85, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)102);
      assertNotNull(byte4);
      assertEquals((byte)102, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[4] = byte4;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1289.565F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 75.0F;
      floatArray0[3] = 1624.9594F;
      floatArray0[4] = (-113.1F);
      floatArray0[5] = (-5602.3306F);
      floatArray0[6] = (-786.0885F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1289.565F, (-1.0F), 75.0F, 1624.9594F, (-113.1F), (-5602.3306F), (-786.0885F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)525;
      shortArray0[2] = (short)2290;
      shortArray0[3] = (short) (-4);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)525, (short)2290, (short) (-4)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, (short)3084);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)525, (short)2290, (short) (-4)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = null;
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertSame(longArray1, objectArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Double[]) null, 1456);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1456, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.reverse((Object[]) longArray1, 2144210044, 1456);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (float) 2144210044);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2389);
      shortArray0[1] = (short) (-1574);
      shortArray0[2] = (short) (-29855);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2389));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-2389), (short) (-1574), (short) (-29855)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-194.368827);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-194.368827);
      doubleArray0[7] = (-1.0);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      ArrayUtils.reverse((Object[]) longArray1, 2526, (int) (short)0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 74.0F);
      assertNull(floatArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals(9, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (short)0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, true, false, true}, booleanArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      Long long0 = new Long((-1409L));
      assertNotNull(long0);
      assertEquals((-1409L), (long)long0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 294;
      ArrayUtils.shift(objectArray0, (-3800));
      assertEquals(2, objectArray0.length);
      
      Character[] characterArray0 = new Character[9];
      char char0 = '%';
      Character character0 = Character.valueOf('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertEquals('%', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('%', (char)character2);
      assertTrue(character2.equals((Object)character1));
      
      MockRandom mockRandom0 = new MockRandom(char0);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)5, (byte) (-63), (byte)114, (byte)48, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)5, (byte) (-63), (byte)114, (byte)48, (byte) (-1)}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'L';
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (byte)5);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {76.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {76.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)34;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[3] = (double) (byte) (-117);
      doubleArray0[4] = (double) (byte) (-117);
      doubleArray0[5] = (double) (byte)56;
      doubleArray0[6] = (-1863.729780602);
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (-1863.729780602);
      int int0 = ArrayUtils.indexOf(doubleArray0, 34.0, (int) (byte)0, (-31.5280061194));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {34.0, 34.0, 56.0, (-117.0), (-117.0), 56.0, (-1863.729780602), 0.0, (-1863.729780602)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (-117.0);
      Object object1 = ArrayUtils.get(objectArray0, (int) 34, object0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object1);
      assertSame(object1, object0);
      assertSame(object0, object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 56.0;
      objectArray0[6] = (Object) 56.0;
      objectArray0[7] = (Object) (-1863.729780602);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 52);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      Double double0 = new Double(52);
      assertNotNull(double0);
      assertEquals(52.0, (double)double0, 0.01);
      
      Byte byte0 = new Byte((byte)11);
      assertNotNull(byte0);
      assertEquals((byte)11, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) double0, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 152.3803551;
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '$');
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray0, (-1));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int[] intArray0 = new int[3];
      intArray0[0] = 2188;
      intArray0[1] = (int) '$';
      intArray0[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2188, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = Integer.MAX_VALUE;
      char[] charArray0 = new char[1];
      ArrayUtils.reverse(charArray0, Integer.MAX_VALUE, 0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MAX_VALUE, 8);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) '6';
      longArray0[2] = (long) '6';
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) '6';
      longArray0[6] = (long) 8;
      longArray0[7] = (long) 8;
      Short short0 = new Short((short)71);
      assertNotNull(short0);
      assertEquals((short)71, (short)short0);
      
      ArrayUtils.swap(intArray1, 7, 8);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short)91);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (float) (short)91;
      floatArray1[3] = (float) 99;
      floatArray1[4] = (float) (short)91;
      int int0 = ArrayUtils.indexOf(floatArray1, (float) (short)91);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 91.0F, 99.0F, 91.0F}, floatArray1, 0.01F);
      assertEquals(2, int0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray2);
      assertEquals(0, objectArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(objectArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-850.90497F);
      floatArray0[1] = (-850.90497F);
      floatArray0[2] = (float) 1438;
      floatArray0[3] = (float) 1438;
      floatArray0[4] = (float) 1438;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-850.90497F));
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-850.90497F), (-850.90497F), 1438.0F, 1438.0F, 1438.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-850.90497F), 1438.0F, 1438.0F, 1438.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift((long[]) null, 266, 266, 1450);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-757));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -757, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-558.0F);
      floatArray0[1] = (-1.0F);
      ArrayUtils.shift(floatArray0, 1, (-449), (-4183));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-558.0F), (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-449);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-558.0F);
      doubleArray0[5] = (double) (-449);
      doubleArray0[6] = 1.5;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-449.0), (-1.0), 1.0, (-1.0), (-558.0), (-449.0), 1.5}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-558.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-558.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-52);
      byteArray0[8] = (byte)100;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-52), 50);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)56, (byte)28, (byte) (-118), (byte)8, (byte)101, (byte)73, (byte)76, (byte) (-52), (byte)100}, byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1102;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 6;
      intArray0[3] = (-2147061675);
      intArray0[4] = 296;
      intArray0[5] = (-2400);
      intArray0[6] = 7;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1456;
      shortArray0[1] = (short)801;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1610);
      shortArray0[4] = (short)936;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1759);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1456, (short)801, (short)1, (short) (-1610), (short)936}, shortArray0);
      assertArrayEquals(new short[] {(short)1456, (short)801, (short)1, (short) (-1610), (short)936, (short)1759}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1610);
      doubleArray0[1] = (double) (short)1456;
      doubleArray0[2] = (double) (short)801;
      doubleArray0[3] = (double) (short)1759;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)936;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1456.0);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1610.0), 801.0, 1759.0, 1.0, 936.0, 1.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1610.0), 1456.0, 801.0, 1759.0, 1.0, 936.0, 1.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)1456;
      floatArray0[2] = (float) (short)801;
      floatArray0[3] = (float) (short)936;
      floatArray0[4] = (float) (short)1759;
      floatArray0[5] = (float) (short)936;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)1456;
      intArray0[1] = (int) (short)1456;
      intArray0[2] = (int) (short)936;
      intArray0[3] = (int) (short)801;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1456, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int[] intArray0 = new int[2];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)18;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)32, (byte) (-1), (byte)52, (byte)18}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = '|';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'J');
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'|'}, charArray1);
      assertArrayEquals(new char[] {'J', '|'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1438);
      shortArray0[1] = (short) (-1438);
      ArrayUtils.shift(shortArray0, 1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1438), (short) (-1438)}, shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte) (-88)}, byteArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2238), (-2146745482));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'U');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      double[] doubleArray0 = new double[3];
      MockRandom mockRandom0 = new MockRandom((short)91);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((short)403);
      IntStream intStream0 = mockRandom0.ints((-875), (-1));
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 'k';
      charArray0[2] = ':';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '/');
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'t', 'k', ':'}, charArray0);
      assertArrayEquals(new char[] {'t', 'k', ':'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      int[] intArray0 = new int[4];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)18;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)32, (byte) (-1), (byte)52, (byte)18}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = '|';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'J');
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'|'}, charArray1);
      assertArrayEquals(new char[] {'J', '|'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'D', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.swap((int[]) null, 347, 347, (-2652));
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-131.51913787);
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)98;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)98;
      shortArray0[5] = (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)98, (int) (short)98);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)98, (short) (-1), (short)98, (short)2}, shortArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short)2;
      longArray0[3] = 1984L;
      longArray0[4] = (long) (short)2;
      longArray0[5] = (long) (short)98;
      longArray0[6] = (long) (short)2;
      longArray0[7] = (long) (short) (-1);
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 2L, 1984L, 2L, 98L, 2L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 2L, 1984L, 2L, 98L, 2L, (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)98, (short) (-1), (short)98, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)98, (short) (-1), (short)98, (short)2}, shortArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-1);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)71, (int) (byte)95);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)95, (byte)1, (byte) (-100), (byte)14, (byte)65, (byte) (-1), (byte) (-93), (byte)9, (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)34;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 51);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {34}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 380);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {380}, intArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((Object[]) longArray1, 380, 1456);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 962.746F);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1574);
      shortArray0[1] = (short) (-2389);
      shortArray0[2] = (short) (-29855);
      shortArray0[3] = (short) (-1574);
      shortArray0[4] = (short) (-2389);
      shortArray0[5] = (short) (-2389);
      shortArray0[6] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)52);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1574), (short) (-2389), (short) (-29855), (short) (-1574), (short) (-2389), (short) (-2389), (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1574);
      doubleArray0[1] = (double) 962.746F;
      doubleArray0[2] = (double) (short) (-1574);
      doubleArray0[3] = (double) (short) (-1574);
      doubleArray0[4] = 0.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1574.0), 962.7459716796875, (-1574.0), (-1574.0), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(14, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1574), (short) (-2389), (short) (-29855), (short) (-1574), (short) (-2389), (short) (-2389), (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1438.0;
      doubleArray0[2] = (-956.0);
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      doubleArray0[5] = 1465.4;
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = 'k';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ' ');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'k', '\'', '\'', 'k'}, charArray0);
      assertArrayEquals(new char[] {' ', 'k', '\'', '\'', 'k'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1636;
      shortArray0[1] = (short)1088;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'k';
      intArray0[1] = (int) (short)1636;
      intArray0[2] = (int) (short)1636;
      intArray0[3] = (int) (short)1088;
      intArray0[4] = (int) 'k';
      intArray0[5] = (int) '\'';
      intArray0[6] = (int) 'k';
      intArray0[7] = (int) (short)1088;
      intArray0[8] = (int) '\'';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1636, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character character1 = Character.valueOf('e');
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Boolean[] booleanArray0 = null;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'e';
      intArray0[1] = (int) 'U';
      intArray0[2] = (int) (byte)51;
      intArray0[3] = (int) 'U';
      intArray0[4] = (int) (byte)0;
      intArray0[7] = 1072;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('e');
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('e', (char)character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertSame(characterArray0, objectArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = null;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'e';
      intArray0[1] = (int) 'U';
      intArray0[2] = (int) (byte)51;
      intArray0[3] = (int) 'U';
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)51;
      intArray0[7] = 1072;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      Integer integer0 = new Integer(3797);
      assertNotNull(integer0);
      assertEquals(3797, (int)integer0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[3] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[4] = double3;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)403;
      shortArray0[3] = (short)91;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)403, (short)91}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)91;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 91}, intArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)91;
      ArrayUtils.swap((byte[]) null, 14, 0, 1116);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)109;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)9;
      ArrayUtils.shift(byteArray0, (int) (byte)120);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)1, (byte)56, (byte)9, (byte)109, (byte)0, (byte)120, (byte)9}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short)10);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)120);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte)120);
      assertNotNull(long0);
      assertEquals(120L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.add(longArray0, longArray0[0]);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (byte)9, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      MockRandom mockRandom0 = new MockRandom(106L);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 3517, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3517, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      ArrayUtils.shift(shortArray0, 1);
      assertEquals(19, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1457);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-386);
      doubleArray0[3] = (double) (short) (-386);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1457.0), 0.0, (-386.0), (-386.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1457.0), (-386.0), (-386.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1457);
      floatArray0[1] = (float) (short) (-1457);
      ArrayUtils.swap(floatArray0, (int) (short) (-1457), 1, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1457.0F), (-1457.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[15];
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('B');
      assertNotNull(character2);
      assertEquals('B', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('B');
      assertNotNull(character3);
      assertEquals('B', (char)character3);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character1);
      assertNotNull(character4);
      assertEquals('B', (char)character4);
      assertTrue(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = new Character((char) character2);
      assertNotNull(character5);
      assertEquals('B', (char)character5);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character4));
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '<');
      assertEquals(15, characterArray0.length);
      assertEquals(15, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap((double[]) null, 0, (int) character2);
      assertTrue(character2.equals((Object)character5));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1457);
      doubleArray0[1] = (double) (short) (-1457);
      doubleArray0[2] = (double) (short) (-386);
      doubleArray0[3] = (double) (short) (-386);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1457.0));
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1457.0), (-1457.0), (-386.0), (-386.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-386.0), (-386.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-386);
      floatArray0[1] = (float) (short) (-386);
      ArrayUtils.swap(floatArray0, (int) (short) (-1457), 1, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-386.0F), (-386.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[15];
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1457.0), (-1457.0), (-386.0), (-386.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 2690);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)91;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)91;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      ArrayUtils.swap(objectArray0, (-861), (int) (byte)91, (-861));
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)91);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-977.5832032537958));
      assertNotNull(double1);
      assertEquals((-977.5832032537958), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (byte)0, 135, (-2335));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 51, (-13953));
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'm', '4', '&', 'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 51;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 51);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {51L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '5';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[3] = 'P';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-3680), (-3680));
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'u', '5', 'u', 'P', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) double1);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)403;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)91;
      intArray0[4] = (int) (short)91;
      intArray0[5] = (int) (short)91;
      intArray0[6] = (int) (short)403;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)403;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {403, 403, 0, 91, 91, 91, 403, 0, 403}, intArray0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)0);
      assertEquals(8, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {403, 403, 0, 91, 91, 91, 403, 0, 403}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.swap(charArray0, (-2195), (-2195), (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2593.9), (-2646.7938697421), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      Float float0 = new Float(3350.0F);
      assertNotNull(float0);
      assertEquals(3350.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(3350.0F);
      assertNotNull(float1);
      assertEquals(3350.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((float) (byte) (-117));
      assertNotNull(float2);
      assertEquals((-117.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte) (-117), 21, 321);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = 'w';
      charArray0[2] = 'G';
      ArrayUtils.shift(charArray0, 2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'w', 'G', '7'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'w', 'G', '7'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1514.67F);
      floatArray0[1] = 1165.9602F;
      floatArray0[2] = (-590.892F);
      floatArray0[3] = (-566.7F);
      floatArray0[4] = (-1.0F);
      ArrayUtils.swap(floatArray0, 767, 767, 767);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1514.67F), 1165.9602F, (-590.892F), (-566.7F), (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-566.7F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-566.7F);
      doubleArray0[3] = (double) (-1514.67F);
      doubleArray0[4] = (double) (-1514.67F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 1165.9602F;
      doubleArray0[7] = (double) (-1.0F);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0), (double) (-590.892F));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-566.7000122070312), (-1.0), (-566.7000122070312), (-1514.6700439453125), (-1514.6700439453125), (-1.0), 1165.960205078125, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((-2195));
      assertNotNull(long0);
      assertEquals((-2195L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short) (-2));
      assertNotNull(long1);
      assertEquals((-2L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(51L);
      assertNotNull(long2);
      assertEquals(51L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = new Long((-2195));
      assertNotNull(long3);
      assertEquals((-2195L), (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      
      longArray0[3] = long3;
      Double double0 = new Double(51L);
      assertNotNull(double0);
      assertEquals(51.0, (double)double0, 0.01);
      
      Double double1 = new Double(2714.442727605);
      assertNotNull(double1);
      assertEquals(2714.442727605, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      ArrayUtils.swap(doubleArray0, (-498), 1742);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2195.0), 0.0, 94.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2195.0), 0.0, 94.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Boolean boolean0 = Boolean.valueOf("}BM=F} 7+&");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("}BM=F} 7+&");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (-2195));
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2195.0), 0.0, 94.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 94.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Long long0 = new Long((-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Long long1 = new Long((-199L));
      assertNotNull(long1);
      assertEquals((-199L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = new Long((-199L));
      assertNotNull(long2);
      assertEquals((-199L), (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      Long long3 = new Long(2330L);
      assertNotNull(long3);
      assertEquals(2330L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long2;
      longArray0[1] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-199L), 2330L}, longArray1);
      
      boolean boolean3 = ArrayUtils.isSorted(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-199L), 2330L}, longArray1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((long[]) null, (-258), 88);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1727;
      ArrayUtils.swap(longArray0, (-991), (-991));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, 0L}, longArray0);
      
      short short0 = (short)51;
      Short short1 = new Short((short)51);
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-558));
      assertNotNull(short2);
      assertEquals((short) (-558), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short) (-558));
      assertNotNull(short3);
      assertEquals((short) (-558), (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51}, shortArray1);
      
      ArrayUtils.reverse(longArray0, (-991), (int) (short) (-558));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-991);
      floatArray0[1] = (float) (short) (-558);
      int int0 = ArrayUtils.indexOf(floatArray0, (-558.0F), 1727);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-991.0F), (-558.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-106));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      ArrayUtils.shift(byteArray0, 1727, (-1), (int) (short)51);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-106), (byte) (-106), (byte) (-106)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      ArrayUtils.swap(charArray0, (-2119594249), 1114111, 2447);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', 'F'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '$', 2447);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', 'F'}, charArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE, (int) (byte)9, 1114111);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte)9);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', 'F'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', 'F'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, int0);
      
      ArrayUtils.shift(intArray0, (int) (short)0, 0, (-2146816312));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[1] = false;
      boolean[] booleanArray2 = ArrayUtils.insert(2, booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 52);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2195);
      ArrayUtils.shift(intArray0, 86, (-2195), (-2195));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-2195), booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', (-2231));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.contains((float[]) null, 56.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '^', 1072);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2195);
      ArrayUtils.shift(intArray0, 86, (-2195), (-2195));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2195)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-2195), booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', (-2231));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'d'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'd';
      intArray0[2] = (-2231);
      intArray0[3] = (int) 'd';
      ArrayUtils.shift(intArray0, 108, 4653, (-1));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 100, (-2231), 100}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(5, booleanArray0, booleanArray0);
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 108;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, (-1.0), (-1.0), 108.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      ArrayUtils.shift(shortArray0, 1);
      assertEquals(19, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1457);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-386);
      doubleArray0[3] = (double) (short) (-386);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1457.0), 0.0, (-386.0), (-386.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1457.0), (-386.0), (-386.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1457);
      floatArray0[1] = (float) (short) (-1457);
      ArrayUtils.swap(floatArray0, (int) (short) (-1457), 1, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1457.0F), (-1457.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[15];
      char char0 = 'B';
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('B');
      assertNotNull(character2);
      assertEquals('B', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      characterArray0[3] = (Character) char0;
      Character character3 = Character.valueOf((char) character1);
      assertNotNull(character3);
      assertEquals('B', (char)character3);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      
      characterArray0[4] = character3;
      Character character4 = new Character((char) character2);
      assertNotNull(character4);
      assertEquals('B', (char)character4);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      
      characterArray0[5] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '<');
      assertEquals(15, characterArray0.length);
      assertEquals(15, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap((double[]) null, 0, (int) character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character4));
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      ArrayUtils.shift(shortArray0, 1734);
      assertEquals(19, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1457);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-386);
      doubleArray0[3] = (double) (short) (-386);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1457.0), 0.0, (-386.0), (-386.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1457.0), (-386.0), (-386.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (int) (short) (-1457), 1734, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[15];
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('B');
      assertNotNull(character2);
      assertEquals('B', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('B');
      assertNotNull(character3);
      assertEquals('B', (char)character3);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character1);
      assertNotNull(character4);
      assertEquals('B', (char)character4);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      
      characterArray0[4] = character4;
      Character character5 = new Character((char) character2);
      assertNotNull(character5);
      assertEquals('B', (char)character5);
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '<');
      assertEquals(15, characterArray0.length);
      assertEquals(15, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap((double[]) null, 0, (int) character2);
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character5));
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      Long long0 = new Long((-1863L));
      assertNotNull(long0);
      assertEquals((-1863L), (long)long0);
      
      Long long1 = new Long((-1863L));
      assertNotNull(long1);
      assertEquals((-1863L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      longArray0[1] = long1;
      longArray0[3] = long0;
      longArray0[4] = long1;
      longArray0[5] = long0;
      longArray0[6] = longArray0[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      Long long0 = Long.getLong("af}pmju-kq$uPQy!8", (-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Long long1 = new Long((-199L));
      assertNotNull(long1);
      assertEquals((-199L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[9];
      Long long2 = new Long(691L);
      assertNotNull(long2);
      assertEquals(691L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[0] = long2;
      longArray0[1] = long0;
      longArray0[2] = long1;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long1;
      longArray0[6] = long0;
      longArray0[7] = long1;
      longArray0[8] = long1;
      boolean boolean3 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean3);
      
      ArrayUtils.swap((byte[]) null, (-1526), 97);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      float[] floatArray0 = null;
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, Float.NaN);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {Float.NaN}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = (-1);
      ArrayUtils.swap((short[]) null, (-2565), 160, (-1));
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      byte byte0 = (byte)76;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2139273742, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2139273742, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-17);
      intArray0[1] = (-20);
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2815;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)18688;
      ArrayUtils.swap(shortArray0, 5, (int) (short)0, (-99));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2815, (short)0, (short)18688}, shortArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)18688;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-1863L));
      assertNotNull(long2);
      assertEquals((-1863L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertEquals(6, longArray0.length);
      assertNotNull(long3);
      assertEquals((-1863L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[3] = long3;
      Long long4 = new Long((short)2815);
      assertNotNull(long4);
      assertEquals(2815L, (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      
      longArray0[4] = long4;
      Long long5 = new Long((-1943L));
      assertNotNull(long5);
      assertEquals((-1943L), (long)long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      
      longArray0[5] = long5;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      Long long0 = Long.getLong("af}pmju-kq$uPQy!8", (-199L));
      assertNotNull(long0);
      assertEquals((-199L), (long)long0);
      
      Long long1 = new Long((-199L));
      assertNotNull(long1);
      assertEquals((-199L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[9];
      Long long2 = new Long(691L);
      assertNotNull(long2);
      assertEquals(691L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[1] = long0;
      longArray0[2] = long1;
      longArray0[4] = long0;
      longArray0[5] = long1;
      longArray0[6] = long0;
      longArray0[7] = long1;
      longArray0[8] = long1;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = 'u';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockRandom mockRandom0 = new MockRandom(117L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'u', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ':'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, Integer.MAX_VALUE);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-233));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(3, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Long long0 = Long.getLong("", 3958L);
      assertNotNull(long0);
      assertEquals(3958L, (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = new long[8];
      longArray1[0] = (long) '?';
      longArray1[1] = 3958L;
      longArray1[2] = (long) 'o';
      longArray1[3] = (long) 'm';
      longArray1[5] = (long) '?';
      longArray1[6] = (long) 'o';
      longArray1[7] = (long) 'm';
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {63L, 3958L, 111L, 109L, 0L, 63L, 111L, 109L}, longArray1);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 56.0, (double) 111L);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-660);
      short short0 = (short) (-24);
      shortArray0[3] = (short) (-24);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-2), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)617;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)617);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)617, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2011.522;
      doubleArray0[1] = (double) (short)617;
      doubleArray0[2] = (double) (short)617;
      doubleArray0[3] = (double) (short)617;
      doubleArray0[4] = (double) (short)617;
      doubleArray0[5] = (double) (short)617;
      doubleArray0[6] = (double) (short)617;
      doubleArray0[7] = (double) (short)617;
      doubleArray0[8] = (double) (short)617;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)617, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 617, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1471, 43);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('7');
      assertNotNull(character0);
      assertEquals('7', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('T');
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'7', 'T'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (char)character1;
      doubleArray0[1] = (double) (short)1471;
      doubleArray0[2] = (double) (short)1471;
      doubleArray0[3] = (double) '7';
      doubleArray0[4] = (double) '7';
      doubleArray0[5] = (double) 'T';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) character1, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (-3865.549071423241);
      ArrayUtils.reverse(doubleArray0, 17, 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, (-3865.549071423241)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-3865.549071423241));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {69.0, (-3865.549071423241)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3865.549071423241), 69.0, (-3865.549071423241)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(charArray1, 1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 69.0;
      objectArray0[1] = (Object) (-3865.549071423241);
      objectArray0[2] = (Object) 69.0;
      ArrayUtils.swap(objectArray0, 1, 576, 17);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)0, (byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty((Boolean[]) null, class0);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)0, (int) (short)0);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)0, (byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty((Boolean[]) null, class0);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)0, (int) (short)0);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long[] longArray0 = ArrayUtils.removeAllOccurrences((Long[]) null, long0);
      assertNull(longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1919);
      intArray0[1] = 0;
      intArray0[2] = 1189;
      ArrayUtils.swap(intArray0, (-1919), 3543);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1919), 0, 1189, 0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3254);
      intArray0[1] = (-46);
      intArray0[2] = 2;
      ArrayUtils.swap(intArray0, (-3254), 1292, 2146720879);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-3254), (-46), 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      long[] longArray0 = new long[8];
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2755));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)50;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1806), 36);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-85), (byte)50, (byte)117, (byte) (-56), (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte) (-85), (byte)50, (byte)117, (byte) (-56), (byte)50}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1806);
      ArrayUtils.reverse(longArray1);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1806L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)13;
      shortArray0[3] = (short)1430;
      shortArray0[4] = (short)1488;
      shortArray0[5] = (short)14;
      shortArray0[6] = (short) (-1610);
      shortArray0[7] = (short) (-1606);
      shortArray0[8] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, 2113);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)13, (short)1430, (short)1488, (short)14, (short) (-1610), (short) (-1606), (short)2}, shortArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1606);
      longArray0[1] = (-3606L);
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (-176L);
      longArray0[4] = (long) (short)2;
      longArray0[5] = (long) (short) (-1);
      longArray0[6] = (long) (short) (-1606);
      longArray0[7] = (long) (short) (-1);
      ArrayUtils.reverse(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1606L), (-1L), 2L, (-176L), (-1L), (-3606L), (-1606L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-1);
      MockRandom mockRandom0 = new MockRandom((byte) (-2));
      assertNotNull(mockRandom0);
      
      Double double0 = new Double((-417.9));
      assertNotNull(double0);
      assertEquals((-417.9), (double)double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom(1161L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom1);
      assertEquals(5, doubleArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 152.3803551}, doubleArray0, 0.01);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1549L);
      longArray0[3] = (long) (byte)51;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (-42));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      Double double0 = new Double(2623.11219682622);
      assertNotNull(double0);
      assertEquals(2623.11219682622, (double)double0, 0.01);
      
      Double double1 = new Double(91.0);
      assertNotNull(double1);
      assertEquals(91.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1549L);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1446.11F));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1549.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 52);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (-2645L);
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (-1549L);
      longArray0[7] = (-1549L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2645L), 1L, 0L, 0L, (-1549L), (-1549L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-54);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)24, (byte)50, (byte) (-21), (byte)9, (byte) (-54)}, byteArray0);
      assertTrue(boolean0);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)24;
      byteArray1[1] = (Byte) (byte)9;
      byteArray1[2] = (Byte) (byte)24;
      Byte byte0 = new Byte((byte) (-56));
      assertNotNull(byte0);
      assertEquals((byte) (-56), (byte)byte0);
      
      byteArray1[3] = byte0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-122));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)9, (byte)24, (byte) (-56)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap((int[]) null, 347, 347, (-2652));
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      BitSet bitSet0 = new BitSet(347);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(384, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2652);
      doubleArray0[1] = (double) (-2652);
      doubleArray0[2] = 529.6502;
      ArrayUtils.swap(doubleArray0, (-112), (-1024), 1516);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2652.0), (-2652.0), 529.6502}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)57);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 266.063F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {266.063F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1360);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1448);
      shortArray0[3] = (short)115;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)115, (short) (-1448), (short) (-1), (short) (-1360)}, shortArray0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-81);
      Byte byte1 = new Byte((byte) (-81));
      assertNotNull(byte1);
      assertEquals((byte) (-81), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-81));
      assertNotNull(byte2);
      assertEquals((byte) (-81), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertEquals((byte) (-81), (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertNotNull(byte4);
      assertEquals((byte) (-81), (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      byte byte5 = (byte) (-96);
      Byte byte6 = new Byte((byte) (-96));
      assertNotNull(byte6);
      assertEquals((byte) (-96), (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      
      byteArray0[4] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte5);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-81), (byte) (-81), (byte) (-81), (byte) (-81), (byte) (-96)}, byteArray1);
      assertFalse(byte5 == byte0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 266.063F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {266.063F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1360);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-96));
      assertNotNull(byte1);
      assertEquals((byte) (-96), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-96));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-2147483648L));
      assertNull(longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = '7';
      charArray0[2] = '6';
      charArray0[3] = '7';
      charArray0[4] = '=';
      charArray0[5] = 'N';
      charArray0[6] = 'K';
      charArray0[7] = 'w';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'v', '7', '6', '7', '=', 'N', 'K', 'w'}, charArray0);
      assertArrayEquals(new char[] {'v', '7', '6', '7', '=', 'N', 'K', 'w'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-58);
      Byte byte1 = new Byte((byte) (-58));
      assertNotNull(byte1);
      assertEquals((byte) (-58), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-58));
      assertNotNull(byte2);
      assertEquals((byte) (-58), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertEquals((byte) (-58), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-37));
      assertNotNull(byte4);
      assertEquals((byte) (-37), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertNotNull(byte5);
      assertEquals((byte) (-58), (byte)byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-101));
      assertNotNull(byte6);
      assertEquals((byte) (-101), (byte)byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-122));
      assertNotNull(byte7);
      assertEquals((byte) (-122), (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte) (-59));
      assertNotNull(byte8);
      assertEquals((byte) (-59), (byte)byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      
      byteArray0[7] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-113));
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-58), (byte) (-58), (byte) (-37), (byte) (-58), (byte) (-101), (byte) (-122), (byte) (-59)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)0;
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 99.0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (short)0, 1223.7080424);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-988);
      intArray0[1] = (-988);
      int int1 = 734;
      intArray0[2] = 734;
      int int2 = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-988), 734, Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      double[] doubleArray0 = null;
      double double0 = (-2.3010851885398744);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-355L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf((char[]) null, '.');
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 3062);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 1.0, (-1.0), 1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1438.0;
      doubleArray0[2] = (-956.0);
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      doubleArray0[5] = 1465.4;
      ArrayUtils.reverse(doubleArray0, (-1819), (-2195));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1610.2), 1438.0, (-956.0), (-2593.9), (-2646.7938697421), 1465.4}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3441L;
      longArray0[1] = (-731L);
      longArray0[2] = 819L;
      longArray0[3] = 1449L;
      longArray0[4] = (-247L);
      longArray0[5] = 1309L;
      longArray0[6] = (-1863L);
      ArrayUtils.shift(longArray0, 1497, 1497, 1497);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {3441L, (-731L), 819L, 1449L, (-247L), 1309L, (-1863L), 0L}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '.';
      charArray0[3] = '#';
      charArray0[4] = '6';
      charArray0[5] = 'u';
      charArray0[6] = 'P';
      charArray0[7] = '5';
      charArray0[8] = 'E';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1497, 1497);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'!', '!', '.', '#', '6', 'u', 'P', '5', 'E'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '6';
      objectArray0[1] = (Object) '5';
      objectArray0[2] = (Object) (-731L);
      objectArray0[3] = (Object) 3441L;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(4, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[4] = (double) (byte) (-117);
      doubleArray0[5] = (double) (byte)56;
      doubleArray0[6] = (-1863.729780602);
      Float float0 = new Float((float) (byte)34);
      assertNotNull(float0);
      assertEquals(34.0F, (float)float0, 0.01F);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, (-1), 1482, (int) (byte)51);
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)51);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-131.51913787);
      doubleArray0[4] = (-571.249602);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2375.902, 0.0, 0.0, (-131.51913787), (-571.249602)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-59);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)32);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)32, (byte)2, (byte) (-59)}, byteArray0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long[] longArray0 = ArrayUtils.removeAllOccurrences((Long[]) null, long0);
      assertNull(longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1919);
      intArray0[1] = (-14);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-801), (-14), (-1));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 54;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {54}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long[] longArray0 = ArrayUtils.removeAllOccurrences((Long[]) null, long0);
      assertNull(longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1919);
      intArray0[1] = 0;
      intArray0[2] = 1189;
      intArray0[3] = (-3102);
      intArray0[4] = (-1091);
      intArray0[5] = 54;
      intArray0[6] = Integer.MAX_VALUE;
      intArray0[7] = (-1369);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1919), 0, 1189, (-3102), (-1091), 54, Integer.MAX_VALUE, (-1369)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 0L, 0);
      assertEquals((-1), int0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2118.3125260047873);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-271.23848277));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2118.3125260047873), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (-1919), (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) (byte)112;
      ArrayUtils.swap(booleanArray0, (-847), (-1336), 521);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 0L, 0);
      assertEquals((-1), int0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2055.2807506);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-271.23848277));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2055.2807506), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1919);
      intArray0[1] = (-648);
      intArray0[2] = (-648);
      intArray0[3] = 148;
      int int1 = ArrayUtils.indexOf(intArray0, (-648), (-150));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1919), (-648), (-648), 148}, intArray0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (-1919), (-648));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146428521, 36);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Byte byte0 = new Byte((byte) (-104));
      assertNotNull(byte0);
      assertEquals((byte) (-104), (byte)byte0);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2146428521;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2146428521, 2146428521);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.14642854E9F}, floatArray0, 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)102;
      byteArray0[0] = (byte) (-16);
      byteArray0[4] = (byte) (-117);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)56, (byte)102, (byte)0, (byte) (-117)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)56, (byte)102, (byte)0, (byte) (-117)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-4068.3352F));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)102;
      longArray0[1] = (long) (byte) (-117);
      longArray0[2] = (long) (byte) (-16);
      longArray0[3] = (long) (byte) (-117);
      longArray0[4] = (long) (byte) (-117);
      longArray0[5] = (long) (byte) (-117);
      ArrayUtils.reverse(longArray0, (-677), (-752));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {102L, (-117L), (-16L), (-117L), (-117L), (-117L)}, longArray0);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      Float float0 = new Float((-1433.879F));
      assertNotNull(float0);
      assertEquals((-1433.879F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1433.879F));
      assertNotNull(float1);
      assertEquals((-1433.879F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-444.17F), 2199);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (-444.17F));
      assertNull(floatArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'q', 'q', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(booleanArray1, true);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertEquals(0, int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, '<');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray2.length);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertArrayEquals(new char[] {'T', 'T'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      ArrayUtils.swap(doubleArray0, (int) character0, 120);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (char)character0;
      longArray0[1] = (long) (byte)120;
      longArray0[2] = (long) (byte)120;
      longArray0[3] = (-3323L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {84L, 120L, 120L, (-3323L)}, longArray0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2391);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Short short0 = new Short((short)307);
      assertNotNull(short0);
      assertEquals((short)307, (short)short0);
      
      Short short1 = new Short((short)5);
      assertNotNull(short1);
      assertEquals((short)5, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-5305));
      assertNotNull(short2);
      assertEquals((short) (-5305), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[7];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      shortArray0[6] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)9;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)14);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte)14, (byte) (-109), (byte)47, (byte)9}, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[4] = object3;
      Double double0 = new Double((-572));
      assertNotNull(double0);
      assertEquals((-572.0), (double)double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (-572);
      intArray0[2] = (-572);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true}, booleanArray0));
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)3);
      assertNotNull(short0);
      assertEquals((short)3, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)5);
      assertNotNull(short1);
      assertEquals((short)5, (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)5);
      assertNotNull(short2);
      assertEquals((short)5, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertEquals((short)0, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      shortArray0[3] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146207661);
      ArrayUtils.shift(byteArray0, (-4269));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1577));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 2690);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)91;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)91;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      ArrayUtils.shift(byteArray0, (-861));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)91}, byteArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short) (-1577));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      ArrayUtils.reverse(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'i'}, charArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long long0 = new Long(2690);
      assertNotNull(long0);
      assertEquals(2690L, (long)long0);
      
      Long long1 = new Long(102L);
      assertNotNull(long1);
      assertEquals(102L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = ArrayUtils.add((Long[]) null, long0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertFalse(long0.equals((Object)long1));
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-861), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -861, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'g');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      assertEquals(1, int0);
      
      ArrayUtils.shift(byteArray0, 0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      ArrayUtils.swap(charArray1, (-756), 0, 2146685623);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int1 = ArrayUtils.indexOf(charArray1, 'b', (-258));
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertEquals((-1), int1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int1 == int0);
      
      ArrayUtils.shift(byteArray0, (-119), 0, 1194);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      char[] charArray2 = new char[0];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      ArrayUtils.shift(charArray2, (-258));
      assertEquals(0, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertTrue(boolean0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("8lL");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      Character character1 = Character.valueOf('i');
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('i');
      assertNotNull(character2);
      assertEquals('i', (char)character2);
      assertTrue(character2.equals((Object)character0));
      
      Character character3 = new Character(':');
      assertNotNull(character3);
      assertEquals(':', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      Character character4 = new Character('d');
      assertNotNull(character4);
      assertEquals('d', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      
      Character character5 = Character.valueOf('F');
      assertNotNull(character5);
      assertEquals('F', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      
      Character character6 = Character.valueOf('=');
      assertNotNull(character6);
      assertEquals('=', (char)character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'F';
      intArray0[1] = (int) '=';
      intArray0[2] = (int) ':';
      intArray0[3] = (int) '=';
      intArray0[4] = (int) 'd';
      intArray0[5] = (int) 'd';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2139439734, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2139439734, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      char[] charArray0 = new char[2];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (int) (short)4827;
      intArray0[2] = 69;
      intArray0[3] = (int) (short) (-334);
      intArray0[4] = (int) '&';
      intArray0[5] = (int) '&';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(69, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      MockRandom mockRandom0 = new MockRandom(106L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom(106L);
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      MockRandom mockRandom0 = new MockRandom(106L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 52, 52, 87);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) 87;
      longArray0[2] = 1429L;
      longArray0[3] = (long) 52;
      longArray0[4] = (long) 87;
      longArray0[5] = (long) 52;
      longArray0[6] = (long) 87;
      longArray0[7] = (long) 52;
      char[] charArray0 = new char[11];
      charArray0[0] = '|';
      charArray0[1] = 'O';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '|');
      assertEquals(11, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      float[] floatArray0 = new float[1];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2823);
      shortArray0[1] = (short) (-2823);
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2823), (short) (-2823)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-648);
      shortArray0[1] = (short) (-2920);
      shortArray0[2] = (short)88;
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (-116);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)74;
      ArrayUtils.reverse(shortArray0, (int) (short) (-648), (int) (short)74);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)74, (short)2, (short) (-116), (short)5, (short)88, (short) (-2920), (short) (-648)}, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)88;
      longArray0[1] = (long) (short) (-116);
      longArray0[2] = (long) (short)88;
      longArray0[3] = (long) (short) (-116);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-710L));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {88L, (-116L), 88L, (-116L)}, longArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((boolean[]) null, (-1277), (int) (short)2, (int) (short)88);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)74;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (short)88;
      floatArray0[4] = (float) (short)2;
      floatArray0[5] = (float) (short)2;
      floatArray0[6] = (float) (short)74;
      floatArray0[7] = (float) (short)2;
      floatArray0[8] = (float) (-116L);
      int int1 = ArrayUtils.indexOf(floatArray0, 265.97F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {74.0F, 2.0F, 0.0F, 88.0F, 2.0F, 2.0F, 74.0F, 2.0F, (-116.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      ArrayUtils.swap((int[]) null, 7, (int) (short) (-4991));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte) (-109);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-23), (byte)99, (byte) (-114), (byte) (-33), (byte) (-45), (byte) (-109), (byte) (-83)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      objectArray0[3] = object1;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[4] = object3;
      Double double0 = new Double((-572));
      assertNotNull(double0);
      assertEquals((-572.0), (double)double0, 0.01);
      
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, (-572), (-1795), (-2879));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)91;
      intArray0[2] = 0;
      Short short0 = new Short((short)71);
      assertNotNull(short0);
      assertEquals((short)71, (short)short0);
      
      ArrayUtils.swap(intArray0, 7, (-505));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 91, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("8lL");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("8lL");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("8lL");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("8lL");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean0));
      
      booleanArray0[8] = boolean8;
      boolean boolean9 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean9);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-1);
      ArrayUtils.swap(intArray0, 1, (-2033));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'c';
      ArrayUtils.swap(doubleArray0, 102, 3094);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-108);
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), 1116, 449);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-1), (byte) (-108)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'c';
      ArrayUtils.swap(doubleArray0, 102, 3094);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-108);
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), 1116, 449);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-108)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      Double double0 = new Double(2015.72263397845);
      assertNotNull(double0);
      assertEquals(2015.72263397845, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short)55);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 300;
      intArray0[1] = 91;
      intArray0[2] = (-633);
      intArray0[3] = (-2237);
      intArray0[4] = (-2146428519);
      intArray0[5] = (-2094);
      intArray0[6] = 486;
      intArray0[7] = (-2525);
      intArray0[8] = (-1024);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-2525));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {300, 91, (-633), (-2237), (-2146428519), (-2094), 486, (-2525), (-1024)}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-131.51913787);
      doubleArray0[4] = 0.0;
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      int[] intArray0 = new int[6];
      intArray0[0] = (-2735);
      intArray0[1] = 0;
      intArray0[2] = (int) '&';
      intArray0[3] = (-1);
      intArray0[4] = (int) '&';
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '&';
      characterArray0[1] = (Character) '&';
      characterArray0[2] = (Character) '&';
      Character character0 = new Character((char) characterArray0[2]);
      assertEquals(3, characterArray0.length);
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      Character character1 = ArrayUtils.get(characterArray0, (-1), character0);
      assertEquals(3, characterArray0.length);
      assertNotNull(character1);
      assertEquals('&', (char)character1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) character0);
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, characterArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) characterArray0[1]);
      assertEquals(6, intArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new int[] {(-2735), 0, 38, (-1), 38, 0}, intArray0);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) character1, (-2735));
      assertEquals(3, characterArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = 824.319665;
      doubleArray1[2] = 824.319665;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) doubleArray0[1];
      MockRandom mockRandom0 = new MockRandom(1831L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray1, (Random) mockRandom0);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {824.319665, 824.319665, 0.0, 824.319665, 0.0}, doubleArray1, 0.01);
      
      ArrayUtils.shuffle((Object[]) doubleArray0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2392L));
      assertNotNull(long0);
      assertEquals((-2392L), (long)long0);
      
      longArray0[0] = long0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2392L);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2392.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)59;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)122, 329, (int) (byte)122);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 0, 329, (-801));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2039.9639437028);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-5.711724024));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-2039.9639437028)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 0, (-801), (-2109));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MockRandom mockRandom0 = new MockRandom(1407L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-850));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, (-353), (-801), 329);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (-850));
      assertNotNull(float0);
      assertEquals((-850.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-850));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-850.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      Float float0 = new Float(3350.0F);
      assertNotNull(float0);
      assertEquals(3350.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[2]);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3350.0F, 3350.0F, 3350.0F, 3350.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)1;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)14, (byte)3, (byte) (-111), (byte)1, (byte) (-2), (byte) (-16), (byte)1}, byteArray0);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) floatArray0[2]);
      assertEquals(5, floatArray2.length);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {3350.0F, 3350.0F, 3350.0F, 3350.0F, 3350.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {3350.0F, 3350.0F, 3350.0F, 3350.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-787);
      shortArray0[1] = (short) (byte)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)128;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-787), (short)0, (short)0, (short) (-1), (short)1, (short)128, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-88), (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((-1115.63963));
      assertNotNull(float0);
      assertEquals((-1115.6396F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-573.894F));
      assertNotNull(float1);
      assertEquals((-573.894F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (short)0);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) (byte)0);
      assertNotNull(float3);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (short) (-1));
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(0.0F);
      assertNotNull(float5);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(1.0F);
      assertNotNull(float6);
      assertEquals(1.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(682.3882647984);
      assertNotNull(float7);
      assertEquals(682.38824F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((float) (byte)0);
      assertNotNull(float8);
      assertEquals(0.0F, (float)float8, 0.01F);
      assertEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float2, 0.01F);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1115.6396F), (-573.894F), 0.0F, 0.0F, (-1.0F), 0.0F, 1.0F, 682.38824F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 2267, (-445), 2267);
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-445);
      longArray0[1] = (long) 1727;
      ArrayUtils.swap(longArray0, (-991), (-991));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-445L), 1727L}, longArray0);
      
      short short0 = (short)51;
      Short short1 = new Short((short)51);
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short short3 = new Short((short) (-558));
      assertNotNull(short3);
      assertEquals((short) (-558), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51}, shortArray1);
      
      ArrayUtils.reverse((long[]) null, (int) short0, (-991));
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-991);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short) (-558), (-991));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-991.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-106));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1727;
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-991), (-991));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, 0L}, longArray0);
      
      short short0 = (short)51;
      Short short1 = new Short((short)51);
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-558));
      assertNotNull(short2);
      assertEquals((short) (-558), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short) (-558));
      assertNotNull(short3);
      assertEquals((short) (-558), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51}, shortArray1);
      
      ArrayUtils.reverse(longArray0, (-991), (int) (short) (-558));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-991);
      floatArray0[1] = (float) (short) (-558);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 1727);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-991.0F), (-558.0F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-106));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0}, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte)84);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2392L));
      assertNotNull(long0);
      assertEquals((-2392L), (long)long0);
      
      longArray0[0] = long0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2392L);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2392.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)59;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-100);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)122, (byte)59, (byte)0, (byte)0, (byte) (-100)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)122, (byte)59, (byte)0, (byte)0, (byte) (-100)}, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-2139566321));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2139566321, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-7);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-7);
      floatArray0[3] = (float) (byte) (-7);
      floatArray0[4] = (float) (byte) (-7);
      floatArray0[5] = (-1965.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-7.0F), 0.0F, (-7.0F), (-7.0F), (-7.0F), (-1965.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'r');
      assertNull(charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 'r';
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte) (-7);
      longArray0[4] = (long) (byte) (-7);
      ArrayUtils.shift(longArray0, (-1081), (int) (byte) (-7), (-1081));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 114L, 0L, (-7L), (-7L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1471, 43);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('7');
      assertNotNull(character0);
      assertEquals('7', (char)character0);
      
      characterArray0[0] = character0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shuffle((Object[]) characterArray0);
      assertEquals(2, characterArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.shift(longArray0, 43, (int) (short)1471, (int) (short)1471);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      int int0 = 52;
      int int1 = 87;
      ArrayUtils.shift((boolean[]) null, 52, 52, 87);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 52;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 87, 87);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 52L;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = null;
      objectArray0[7] = (Object) 52L;
      objectArray0[8] = null;
      try { 
        Byte.valueOf(":");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3441L;
      longArray0[1] = (-731L);
      longArray0[2] = 819L;
      longArray0[3] = 1449L;
      longArray0[4] = (-247L);
      longArray0[5] = 1309L;
      longArray0[6] = (-1863L);
      longArray0[7] = 243L;
      ArrayUtils.shift(longArray0, 1497, 1497, 1497);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {3441L, (-731L), 819L, 1449L, (-247L), 1309L, (-1863L), 243L}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '1';
      charArray0[2] = '.';
      charArray0[3] = '#';
      charArray0[4] = '6';
      charArray0[5] = 'u';
      charArray0[6] = 'P';
      charArray0[7] = '5';
      charArray0[8] = 'E';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1497, 1497);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'!', '1', '.', '#', '6', 'u', 'P', '5', 'E'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2044, 419);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'm', '4', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-1303));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = doubleArray0[1];
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      doubleArray0[4] = doubleArray0[3];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)403;
      shortArray0[3] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)403, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2307), (-4578));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character character0 = Character.valueOf('l');
      assertNotNull(character0);
      assertEquals('l', (char)character0);
      
      int int0 = ArrayUtils.indexOf((Object[]) doubleArray0, (Object) character0);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1438);
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 1438;
      doubleArray0[2] = (double) 1438;
      doubleArray0[3] = (double) 1438;
      doubleArray0[4] = (double) 1438;
      doubleArray0[5] = (double) 1438;
      doubleArray0[6] = (double) 1438;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2039.9639437028));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 1438.0, 1438.0, 1438.0, 1438.0, 1438.0, 1438.0}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1862.2297806018), 1.5);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {1.0, 1438.0, 1438.0, 1438.0, 1438.0, 1438.0, 1438.0}, doubleArray0, 0.01);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.andNot(bitSet1);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(7, doubleArray0.length);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {1.0, 1438.0, 1438.0, 1438.0, 1438.0, 1438.0, 1438.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.set(810, 810);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, doubleArray0.length);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new double[] {1.0, 1438.0, 1438.0, 1438.0, 1438.0, 1438.0, 1438.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "ME'\"<\"e<P", bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[3] = (double) (byte) (-117);
      doubleArray0[4] = (double) (byte)56;
      doubleArray0[5] = (double) (byte)56;
      doubleArray0[6] = (-1831.5075494912892);
      Float float0 = new Float((float) (byte)34);
      assertNotNull(float0);
      assertEquals(34.0F, (float)float0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 34.0, 56.0, (-117.0), 56.0, 56.0, (-1831.5075494912892), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 34.0, 56.0, (-117.0), 56.0, 56.0, (-1831.5075494912892), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)56;
      shortArray0[1] = (short)99;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-117);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -117, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      int int0 = ArrayUtils.indexOf((int[]) null, 55, (-3686));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 2147483647L;
      longArray0[1] = (long) '&';
      longArray0[2] = (long) '4';
      longArray0[3] = (long) 'm';
      longArray0[4] = (long) '&';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'q';
      doubleArray0[2] = (double) 'q';
      doubleArray0[3] = (double) 'k';
      doubleArray0[4] = (double) 'k';
      doubleArray0[5] = (double) 'k';
      doubleArray0[6] = (double) 'q';
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1949);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-787);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-787)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift(shortArray1, 500);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-787)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1727;
      longArray0[1] = 0L;
      longArray0[2] = (-535L);
      ArrayUtils.swap(longArray0, (-991), (-991));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, (-535L)}, longArray0);
      
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      Short short1 = new Short((short) (-558));
      assertNotNull(short1);
      assertEquals((short) (-558), (short)short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-558));
      assertNotNull(short2);
      assertEquals((short) (-558), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short[] shortArray0 = new Short[1];
      Character character0 = ArrayUtils.get((Character[]) null, 1727, (Character) null);
      assertNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) shortArray0, (Object) null);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'k');
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotNull(charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'k'}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'q';
      floatArray0[1] = (float) 'q';
      floatArray0[2] = 120.0F;
      floatArray0[3] = (float) 'k';
      floatArray0[4] = (float) 'k';
      floatArray0[5] = (float) 'q';
      floatArray0[6] = (float) 'q';
      floatArray0[7] = (float) 'k';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {113.0F, 113.0F, 120.0F, 107.0F, 107.0F, 113.0F, 113.0F, 107.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {113.0F, 113.0F, 120.0F, 107.0F, 107.0F, 113.0F, 113.0F, 107.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2705);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1, 0);
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-2705L), 1L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)91;
      doubleArray0[2] = (double) (short)91;
      doubleArray0[3] = (-3391.97706540462);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 91.0, (int) (short)91);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 91.0, 91.0, (-3391.97706540462)}, doubleArray0, 0.01);
      assertEquals(2, int0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-3391.97706540462), 91.0, 91.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1671);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1671), (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse((int[]) null);
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)40;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)40;
      doubleArray0[5] = (double) '&';
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 40.0, 38.0, 40.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((Object[]) longArray1, 1456, 3591);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.reverse((int[]) null);
      MockRandom mockRandom0 = new MockRandom((-2185L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1999.593717538), 3076);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1102;
      intArray0[6] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-802));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -802, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1438.0;
      doubleArray0[2] = (-956.0);
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      doubleArray0[5] = (-1610.2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.swap(charArray0, (-2195), (-2195), (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (-2195));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (-1), Integer.MAX_VALUE, (int) (byte)52);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9, (byte)52, (byte) (-52), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)812);
      assertNotNull(short0);
      assertEquals((short)812, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)812);
      assertNotNull(short1);
      assertEquals((short)812, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals(7, shortArray0.length);
      assertNotNull(short2);
      assertEquals((short)812, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals(7, shortArray0.length);
      assertNotNull(short3);
      assertEquals((short)812, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[2]);
      assertEquals(7, shortArray0.length);
      assertNotNull(short4);
      assertEquals((short)812, (short)short4);
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)43);
      assertNotNull(short5);
      assertEquals((short)43, (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)43);
      assertNotNull(short6);
      assertEquals((short)43, (short)short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)812, (short)812, (short)812, (short)812, (short)812, (short)43, (short)43}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      ArrayUtils.swap(charArray0, (-2119594249), 1114111, 2447);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'F', 'F'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1114111;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) 'F';
      intArray0[3] = (-2119594249);
      intArray0[4] = (int) 'F';
      intArray0[5] = (-2119594249);
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      ArrayUtils.swap(intArray0, 2447, 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1114111, 0, 70, (-2119594249), 70, (-2119594249), 0, 0}, intArray0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-2));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-74);
      ArrayUtils.shift(byteArray0, (int) (byte)1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)120, (byte)1, (byte)56, (byte)9, (byte)109, (byte) (-90), (byte)15}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray1, (short)10);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      short short0 = (short) (-4991);
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1863);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-355);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-2735);
      intArray0[6] = 97;
      Float float0 = new Float((double) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) float0;
      objectArray0[2] = (Object) float0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get(objectArray0, 155, object0);
      assertEquals(14, objectArray0.length);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Object[] objectArray1 = ArrayUtils.subarray(objectArray0, Integer.MAX_VALUE, 155);
      assertEquals(14, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.reverse(booleanArray0, (-2175), (-2175));
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, false, false, false}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-2175));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-7);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-7)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      
      mutableInt0.add(0);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34, mutableInt0.intValue());
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1863);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-355);
      intArray0[3] = 0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-355);
      longArray0[1] = (long) (-355);
      longArray0[2] = (long) (-355);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-1863);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-1863));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-355L), (-355L), (-355L), 0L, 0L, 0L, 0L, (-1863L)}, longArray0);
      assertEquals(7, int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-355L);
      floatArray0[1] = (float) (-355L);
      floatArray0[2] = (float) (-355L);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-355.0F), (-355.0F), (-355.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-355.0F), (-355.0F), (-355.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)18;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)32, (byte) (-1), (byte)52, (byte)18}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '2';
      charArray0[2] = 's';
      charArray0[3] = '0';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = '3';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'0', '2', 's', '0', 's', 's', '3'}, charArray1);
      assertArrayEquals(new char[] {'0', '2', 's', '0', 's', 's', '3'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)45;
      shortArray0[2] = (short) (byte)18;
      shortArray0[3] = (short) (byte)32;
      shortArray0[4] = (short)46;
      shortArray0[5] = (short) (byte)52;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)120;
      intArray0[1] = (int) 's';
      intArray0[2] = (int) (byte)52;
      intArray0[3] = (int) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      ArrayUtils.shift((boolean[]) null, (-3958));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-3958);
      floatArray0[1] = (float) (-3958);
      floatArray0[2] = (float) (-3958);
      floatArray0[3] = (float) (-3958);
      MockRandom mockRandom0 = new MockRandom((-3958));
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(484L);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-3958.0F), (-3958.0F), (-3958.0F), (-3958.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1671);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1671), (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty((Boolean[]) null, class0);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, 8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(13, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = new Boolean(";");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0, class0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 1.5);
      assertNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean[] booleanArray2 = new Boolean[6];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) true;
      booleanArray2[2] = (Boolean) false;
      booleanArray2[3] = (Boolean) true;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[5] = (Boolean) true;
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2, class0);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertSame(booleanArray2, booleanArray3);
      assertSame(booleanArray3, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      char[] charArray0 = new char[5];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '\u0000';
      ArrayUtils.swap(doubleArray0, 102, (int) '\u0000');
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short) (-1), (int) (short)98, 2585);
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)98;
      intArray0[1] = (int) (short) (-3859);
      intArray0[2] = (int) (short)98;
      intArray0[3] = 2585;
      intArray0[4] = (int) (short)98;
      intArray0[5] = (int) (short)2;
      intArray0[6] = (-215);
      intArray0[7] = (int) (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1167), 2585);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1167, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'c';
      charArray0[5] = 'I';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o^+P-sM5nrt+AL}";
      stringArray0[1] = "o^+P-sM5nrt+AL}";
      stringArray0[2] = "o^+P-sM5nrt+AL}";
      stringArray0[3] = "";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1), '}');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      MutableInt mutableInt0 = ArrayUtils.get((MutableInt[]) null, 1766);
      assertNull(mutableInt0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1766;
      doubleArray0[1] = (double) 1766;
      doubleArray0[2] = (double) 1766;
      doubleArray0[3] = (double) 1766;
      doubleArray0[4] = (double) 1766;
      doubleArray0[5] = (double) 1766;
      doubleArray0[6] = (double) 1766;
      doubleArray0[7] = (double) 1766;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1766.0, 1766.0, 1766.0, 1766.0, 1766.0, 1766.0, 1766.0, 1766.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      ArrayUtils.shift((Object[]) null, (-1131));
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-558.0F);
      floatArray0[1] = (-1.0F);
      char char0 = 'g';
      Character character0 = new Character('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      assertTrue(character0.equals((Object)char0));
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('|');
      assertNotNull(character2);
      assertEquals('|', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      
      Character[] characterArray0 = new Character[6];
      Character character3 = new Character('x');
      assertNotNull(character3);
      assertEquals('x', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[0] = character3;
      Character character4 = Character.valueOf('g');
      assertNotNull(character4);
      assertEquals('g', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      
      characterArray0[1] = character4;
      characterArray0[2] = character0;
      characterArray0[3] = character2;
      characterArray0[4] = character0;
      characterArray0[5] = character2;
      Character[] characterArray1 = new Character[4];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      characterArray1[0] = character2;
      characterArray1[1] = (Character) char0;
      characterArray1[2] = character0;
      characterArray1[3] = character4;
      Character[] characterArray2 = ArrayUtils.removeElements(characterArray0, characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(2, characterArray2.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray2);
      assertNotSame(characterArray1, characterArray2);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray0, characterArray2);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray0.equals((Object)characterArray1));
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-774));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[3] = (double) (byte) (-117);
      doubleArray0[4] = (double) (byte) (-117);
      doubleArray0[5] = (double) (byte)56;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-117);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (byte) (-117));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-117)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-42);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-1549L);
      floatArray0[3] = (float) (byte) (-117);
      floatArray0[4] = (float) (-1549L);
      floatArray0[5] = (float) (byte)34;
      floatArray0[6] = 2830.753F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-42.0F), 0.0F, (-1549.0F), (-117.0F), (-1549.0F), 34.0F, 2830.753F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      Long long0 = new Long(1247L);
      assertNotNull(long0);
      assertEquals(1247L, (long)long0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 294;
      ArrayUtils.shift(objectArray0, (-3800));
      assertEquals(2, objectArray0.length);
      
      MutableInt mutableInt0 = new MutableInt();
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) mutableInt0, 90);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Long long0 = new Long(13L);
      assertNotNull(long0);
      assertEquals(13L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-559);
      intArray0[1] = 90;
      intArray0[2] = 3355;
      int int0 = ArrayUtils.indexOf(intArray0, 2823, 651);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-559), 90, 3355}, intArray0);
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1));
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(90);
      assertNotNull(double2);
      assertEquals(90.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(3355);
      assertNotNull(double3);
      assertEquals(3355.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 90);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-1.0), 90.0, 3355.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1438);
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.reverse((long[]) null, 1438, 35);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1727;
      longArray0[1] = 0L;
      longArray0[2] = (-535L);
      ArrayUtils.swap(longArray0, (-991), (-991));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, (-535L)}, longArray0);
      
      short short0 = (short)51;
      Short short1 = new Short((short)51);
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-558));
      assertNotNull(short2);
      assertEquals((short) (-558), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short short3 = new Short((short) (-558));
      assertNotNull(short3);
      assertEquals((short) (-558), (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-4.405891F);
      floatArray0[2] = (-2389.0F);
      int[] intArray0 = new int[7];
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      ArrayUtils.shift(longArray0, 115);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = doubleArray0[1];
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)403;
      shortArray0[3] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)403, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)91;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)403, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-2030.390678));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, (-2030.390678));
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2030.390678)}, doubleArray1, 0.01);
      
      Long[] longArray0 = new Long[5];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      longArray0[1] = long2;
      Long long3 = new Long(0L);
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      
      longArray0[3] = long4;
      Long long5 = new Long(0L);
      assertNotNull(long5);
      assertEquals(0L, (long)long5);
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long2));
      
      longArray0[4] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int[] intArray0 = new int[7];
      intArray0[0] = 97;
      intArray0[1] = 97;
      intArray0[2] = 0;
      intArray0[3] = 3076;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      MockRandom mockRandom0 = new MockRandom(97);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)84;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)84;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)84;
      shortArray0[3] = (short) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)84, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((short)35, mutableInt0.shortValue());
      assertEquals(35.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(35.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(35, mutableInt0.intValue());
      assertEquals(35L, mutableInt0.longValue());
      assertEquals(35, (int)mutableInt0.toInteger());
      assertEquals((byte)35, mutableInt0.byteValue());
      assertEquals("35", mutableInt0.toString());
      assertEquals(35, (int)mutableInt0.getValue());
      assertEquals(34, int0);
      
      int int1 = mutableInt0.getAndAdd((Number) integer0);
      assertEquals(69, (int)mutableInt0.getValue());
      assertEquals(69, (int)mutableInt0.toInteger());
      assertEquals((byte)69, mutableInt0.byteValue());
      assertEquals((short)69, mutableInt0.shortValue());
      assertEquals(69.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(69L, mutableInt0.longValue());
      assertEquals(69, mutableInt0.intValue());
      assertEquals("69", mutableInt0.toString());
      assertEquals(69.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(35, int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      mutableInt0.add((-14));
      assertEquals(55, (int)mutableInt0.toInteger());
      assertEquals((byte)55, mutableInt0.byteValue());
      assertEquals(55.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(55, (int)mutableInt0.getValue());
      assertEquals("55", mutableInt0.toString());
      assertEquals((short)55, mutableInt0.shortValue());
      assertEquals(55, mutableInt0.intValue());
      assertEquals(55.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(55L, mutableInt0.longValue());
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      
      int int2 = new Integer((-14));
      assertEquals((-14), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-14));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 34, (short) (-3));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = (-1457);
      short short0 = (short) (-1358);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1457), (short) (-1358));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1457, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 625.701578154;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer((short) (-4991));
      assertNotNull(integer0);
      assertEquals((-4991), (int)integer0);
      
      Byte[] byteArray0 = new Byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int)  (-4991));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4991, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      Long[] longArray0 = new Long[7];
      long long0 = 2475L;
      Long long1 = new Long(2475L);
      assertNotNull(long1);
      assertEquals(2475L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      Long long2 = Long.valueOf((long) longArray0[0]);
      assertEquals(7, longArray0.length);
      assertNotNull(long2);
      assertEquals(2475L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      longArray0[1] = long2;
      Long long3 = new Long(2475L);
      assertNotNull(long3);
      assertEquals(2475L, (long)long3);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      
      longArray0[2] = long3;
      Long long4 = new Long(2475L);
      assertNotNull(long4);
      assertEquals(2475L, (long)long4);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      
      longArray0[3] = long4;
      long long5 = (-1409L);
      Long long6 = new Long((-1409L));
      assertNotNull(long6);
      assertEquals((-1409L), (long)long6);
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertTrue(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      
      longArray0[4] = long6;
      Long long7 = new Long((long) longArray0[0]);
      assertEquals(7, longArray0.length);
      assertNotNull(long7);
      assertEquals(2475L, (long)long7);
      assertFalse(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long4));
      assertTrue(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long6));
      assertTrue(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long2));
      
      longArray0[5] = long7;
      Long long8 = new Long(2475L);
      assertNotNull(long8);
      assertEquals(2475L, (long)long8);
      assertTrue(long8.equals((Object)long1));
      assertTrue(long8.equals((Object)long0));
      assertTrue(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long6));
      assertTrue(long8.equals((Object)long4));
      assertTrue(long8.equals((Object)long3));
      assertTrue(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long5));
      
      longArray0[6] = long8;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 1622);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1622, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-99));
      assertNotNull(byte1);
      assertEquals((byte) (-99), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 18);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)51;
      intArray0[1] = (-589);
      intArray0[2] = (int) (byte)51;
      intArray0[3] = (int) (byte)51;
      intArray0[4] = 1482;
      intArray0[5] = 1482;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 51, (-589));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "v;z*$Is%:ulF";
      stringArray0[2] = "o^+P-sM5nrt+AL}";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1408, '}');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1408, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('e');
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('e', (char)character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)51;
      doubleArray0[2] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 51.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertSame(characterArray0, objectArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = ArrayUtils.subarray((Boolean[]) null, 403, (int) 58);
      assertNull(booleanArray0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (byte)0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = 'U';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1408, 'U');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1408, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)58;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)51);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(5, byteArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)37, (byte)58}, byteArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character character1 = Character.valueOf('e');
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[0];
      Character character2 = ArrayUtils.get(characterArray0, 433, character0);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('U', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character0.equals((Object)character1));
      
      boolean boolean0 = ArrayUtils.isSameType(character1, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character2));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2);
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-2);
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      Character character1 = new Character('c');
      assertNotNull(character1);
      assertEquals('c', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (-2);
      ArrayUtils.reverse(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2.0F), 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-863), (-517));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2.0F), 0.0F}, floatArray1, 0.01F);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2)}, shortArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short) (-2));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1549L);
      longArray0[1] = (-355L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2L);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1549L), (-355L)}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (-927L);
      longArray0[1] = (-927L);
      longArray0[2] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(22, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2028L, (-3218));
      assertEquals(22, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertEquals((-1), int0);
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1393;
      longArray0[1] = 1L;
      int int0 = ArrayUtils.indexOf(longArray0, 1L, 1393);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1393L, 1L}, longArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-919);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1409));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-919)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-919), (short) (-1409)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Character character0 = new Character('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      Character character1 = new Character('R');
      assertNotNull(character1);
      assertEquals('R', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('$');
      assertNotNull(character2);
      assertEquals('$', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      Character character3 = new Character('f');
      assertNotNull(character3);
      assertEquals('f', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      
      Character character4 = Character.valueOf('[');
      assertNotNull(character4);
      assertEquals('[', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      
      Character character5 = Character.valueOf(')');
      assertNotNull(character5);
      assertEquals(')', (char)character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      
      Character character6 = Character.valueOf('');
      assertNotNull(character6);
      assertEquals('', (char)character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character5;
      characterArray0[1] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-1409), 1210);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1393L, 1L}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object[] objectArray1 = new Object[9];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray1[1] = object1;
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      long long0 = (-1549L);
      longArray0[1] = (-1549L);
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 234L);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-1549L), 0L, (-1L)}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 658;
      doubleArray0[1] = (double) 658;
      doubleArray0[2] = (double) 658;
      doubleArray0[3] = (double) (-1549L);
      doubleArray0[4] = (double) 0L;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (-1549L));
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{3}", bitSet1.toString());
      assertEquals(4, bitSet1.length());
      assertEquals(5, doubleArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new double[] {658.0, 658.0, 658.0, (-1549.0), 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.andNot(bitSet1);
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{3}", bitSet1.toString());
      assertEquals(4, bitSet1.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(4, longArray0.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new long[] {0L, (-1549L), 0L, (-1L)}, longArray0);
      assertArrayEquals(new double[] {658.0, 658.0, 658.0, (-1549.0), 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(bitSet0.equals((Object)bitSet1));
      
      // Undeclared exception!
      try { 
        bitSet0.set(658, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 658 > toIndex: 5
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2418.0;
      doubleArray0[1] = (-1332.9784625);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2418.0, (-1332.9784625)}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 0L, 0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, '`', 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1863);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-355);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-2735);
      intArray0[6] = 97;
      intArray0[7] = 0;
      intArray0[8] = 3076;
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {3076, 0, 97, (-2735), (-1), 0, (-355), Integer.MAX_VALUE, (-1863)}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-355);
      doubleArray0[1] = (double) (-355);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 2592.97963028602;
      doubleArray0[5] = (double) (-2735);
      doubleArray0[6] = (double) 0;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.0), 2.147483647E9, 0.0, 2592.97963028602, (-2735.0), 0.0, (-355.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.0), 2.147483647E9, 0.0, 2592.97963028602, (-2735.0), 0.0, (-355.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'm';
      longArray0[1] = (long) 'D';
      longArray0[2] = (long) 'D';
      longArray0[3] = (long) 'm';
      longArray0[4] = (long) 'D';
      longArray0[5] = (long) 'm';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {109L, 68L, 68L, 109L, 68L, 109L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) 68L;
      doubleArray0[2] = (double) 68L;
      doubleArray0[3] = (double) 109L;
      doubleArray0[4] = (double) 109L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 109L, (double) 68L);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {109.0, 68.0, 68.0, 109.0, 109.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse((int[]) null, 3216, 3216);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2, (-2145995439));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-3859);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (-2109808495);
      intArray0[3] = (int) (short)98;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(boolean0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.add(stringArray0, "java.lang.Float");
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2952);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4226.917526269473);
      doubleArray0[4] = (-3391.97706540462);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4226.917526269473), 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, (-4226.917526269473), (-3391.97706540462)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.5;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1163);
      shortArray0[3] = (short)1721;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)4924;
      shortArray0[6] = (short)1721;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1163), (short)1721, (short)2, (short)4924, (short)1721, (short)0, (short)0, (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)992);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1163), (short)1721, (short)2, (short)4924, (short)1721, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1163), (short)1721, (short)2, (short)4924, (short)1721, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-457), 152.3803551);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -457, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = '9';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      int int0 = ArrayUtils.indexOf(charArray0, 'S');
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'c', '9', '4', '&', 'K'}, charArray0);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '4';
      characterArray0[1] = (Character) '9';
      characterArray0[2] = (Character) '4';
      characterArray0[3] = (Character) '4';
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1880), (int) characterArray0[2]);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)0;
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'q');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-956.0);
      doubleArray0[3] = (-2593.9);
      doubleArray0[4] = (-2646.7938697421);
      doubleArray0[5] = (-1610.2);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)1, 1164);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-131.51913787);
      doubleArray0[4] = (-571.249602);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2375.902, 0.0, 0.0, (-131.51913787), (-571.249602)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      int[] intArray0 = new int[6];
      intArray0[0] = (-2735);
      intArray0[1] = 0;
      intArray0[2] = (int) '&';
      intArray0[3] = (-1);
      intArray0[4] = (int) '&';
      intArray0[5] = (-1);
      ArrayUtils.reverse(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), 38, (-1), 38, 0, (-2735)}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1549L));
      assertNotNull(mockRandom0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-571.249602);
      doubleArray1[1] = (double) '&';
      ArrayUtils.shuffle(doubleArray1, (Random) mockRandom0);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {38.0, (-571.249602)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1863);
      intArray0[1] = (-1863);
      intArray0[2] = (-355);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-2735);
      intArray0[6] = 97;
      intArray0[7] = 0;
      intArray0[8] = 3076;
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {3076, 0, 97, (-2735), (-1), 0, (-355), (-1863), (-1863)}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-355);
      doubleArray0[1] = (double) (-355);
      doubleArray0[2] = (double) (-1863);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 2592.97963028602;
      doubleArray0[5] = (double) (-2735);
      doubleArray0[6] = (double) 0;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      mockRandom0.nextBytes(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-355.0), (-355.0), 0.0, 2592.97963028602, (-2735.0), 0.0, (-1863.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      doubleArray0[4] = (-3391.97706540462);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, 0.0, (-3391.97706540462)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 625.701578154;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-4226.917526269473);
      doubleArray1[3] = (double) (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 625.701578154;
      objectArray0[1] = (Object) 625.701578154;
      objectArray0[2] = (Object) 152.3803551;
      Byte byte0 = new Byte((byte) (-119));
      assertNotNull(byte0);
      assertEquals((byte) (-119), (byte)byte0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) byte0, (int) (byte) (-119));
      assertEquals(3, objectArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (byte) (-119), 1.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -119, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-131.51913787);
      doubleArray0[4] = (-571.249602);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2375.902, 0.0, 0.0, (-131.51913787), (-571.249602)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-2573));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2573, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1671);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1671), (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 279);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 279, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      Character character0 = Character.valueOf('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      Character character1 = new Character('>');
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1101.07113;
      doubleArray0[6] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3693, 3693);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, 0.0, 1.0, 1.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1163);
      shortArray0[6] = (short)6;
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 84;
      intArray0[1] = 84;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 84, 84);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {84, 84}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {84, 84}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = ArrayUtils.addAll(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray3.length);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertArrayEquals(new int[] {84, 84}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {84, 84}, intArray3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'e';
      charArray0[2] = '*';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'*', 'e', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "j9a0\":n,p?2.Al8");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-61));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-61)}, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-61);
      shortArray0[1] = (short) (byte) (-61);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-61);
      shortArray0[4] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-61), (short) (-61), (short)0, (short) (-61), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-61), (short)0, (short) (-61), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-61);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-61), (short)0, (short) (-61), (short)0, (short) (-61)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\'';
      charArray0[2] = 'O';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'O', '\'', '\"'}, charArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[0] = double3;
      Double double4 = new Double(0.0);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 824.319665);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 824.319665, 0.0, 824.319665, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("', is neither of type Map.Entry nor an Array");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) "T<Q}S)q");
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double1, (-95));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-95), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -95, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)52;
      double[] doubleArray0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte)52;
      objectArray0[3] = (Object) (byte)52;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte) (-1);
      objectArray0[6] = (Object) (byte)32;
      objectArray0[7] = (Object) (byte)32;
      objectArray0[8] = (Object) (byte)32;
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, objectArray0[6]);
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals("{6, 7, 8}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(9, bitSet1.length());
      assertEquals(9, objectArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.andNot(bitSet1);
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals("{6, 7, 8}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(9, bitSet1.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(9, objectArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(bitSet0.equals((Object)bitSet1));
      
      // Undeclared exception!
      try { 
        bitSet1.set(34, (-5247));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -5247
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) "java.lang.Character", 90);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, (-572));
      assertEquals(8, objectArray0.length);
      assertNull(object3);
      
      objectArray0[3] = null;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) character0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, objectArray0.length);
      assertNotNull(bitSet0);
      
      Object object5 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, objectArray0.length);
      assertNull(object5);
      
      objectArray0[5] = null;
      Double double0 = new Double((-572));
      assertNotNull(double0);
      assertEquals((-572.0), (double)double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'c';
      intArray0[1] = (-572);
      intArray0[2] = (-572);
      intArray0[3] = (-572);
      intArray0[4] = (int) 'c';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(3797);
      assertNotNull(integer0);
      assertEquals(3797, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(332);
      assertNotNull(integer1);
      assertEquals(332, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) integerArray0[1];
      intArray0[1] = 3797;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 332);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {332, 3797}, intArray0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-936);
      int int0 = (-988);
      intArray0[1] = (-988);
      intArray0[2] = 734;
      int int1 = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-936), (-988), 734, Integer.MAX_VALUE}, intArray0);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom((-2346L));
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 255, (int) (short)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'j';
      charArray0[2] = 'O';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'w', (int) (short)0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'w', 'j', 'O'}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (-1236);
      intArray0[2] = 494;
      intArray0[3] = (-3255);
      intArray0[4] = (-1236);
      intArray0[5] = (-1236);
      intArray0[6] = (-1236);
      intArray0[7] = (-1236);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1236));
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1236), 494, (-3255), (-1236), (-1236), (-1236), (-1236)}, intArray0);
      assertArrayEquals(new int[] {0, 494, (-3255), (-1236), (-1236), (-1236), (-1236)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, 0L, 0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      int[] intArray0 = new int[8];
      intArray0[0] = 1238;
      intArray0[1] = (-446);
      intArray0[2] = 15;
      intArray0[3] = (-841);
      intArray0[4] = 11;
      intArray0[5] = 22;
      intArray0[6] = (-2146745482);
      intArray0[7] = 17;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 11);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1238, (-446), 15, (-841), 11, 22, (-2146745482), 17}, intArray0);
      assertArrayEquals(new int[] {1238, (-446), 15, (-841), 22, (-2146745482), 17}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      Character character0 = Character.valueOf('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      Character character1 = new Character('~');
      assertNotNull(character1);
      assertEquals('~', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character('~');
      assertNotNull(character2);
      assertEquals('~', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character2;
      Character character3 = new Character('*');
      assertNotNull(character3);
      assertEquals('*', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      
      characterArray0[1] = character3;
      characterArray0[2] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'~', '*', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {Float.NaN}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Character character0 = Character.valueOf('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      Character character1 = new Character('c');
      assertNotNull(character1);
      assertEquals('c', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      ArrayUtils.reverse((float[]) null);
      int int0 = ArrayUtils.indexOf((float[]) null, Float.NaN, (int) (byte)56);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)56;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1816);
      shortArray0[1] = (short) (-1816);
      shortArray0[2] = (short) (byte)51;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-2089));
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1816), (short) (-1816), (short)51}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1816), (short) (-1816), (short)51, (short) (-2089)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)51;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-11));
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51, (byte)51}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = '?';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '4';
      intArray0[1] = (int) '&';
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {52, 38}, intArray0);
      assertArrayEquals(new int[] {52, 38, 52, 38}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '?';
      objectArray0[1] = (Object) '?';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "org.apache.commons.lang3.ClassUtils", 2);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      Character character0 = Character.valueOf('4');
      assertNotNull(character0);
      assertEquals('4', (char)character0);
      
      Character character1 = new Character('|');
      assertNotNull(character1);
      assertEquals('|', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 52, (-546));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)867;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)867}, shortArray0);
      assertArrayEquals(new short[] {(short)867}, shortArray1);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray1, (int) (short)0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray2.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {52, 38}, intArray0);
      assertArrayEquals(new int[] {52, 38, 52, 38}, intArray2);
      assertArrayEquals(new int[] {52, 38, 52, 38}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)2;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte) (-2);
      intArray0[3] = (int) (byte) (-2);
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte) (-2);
      intArray0[6] = (int) (byte) (-2);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2, (-2), (-2), 2, (-2), (-2)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3167.3662F);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2624.3F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Character character0 = Character.valueOf('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      Character character1 = new Character('0');
      assertNotNull(character1);
      assertEquals('0', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'0', '0', '0'}, charArray0);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-2624.3F), 718);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertSame(floatArray1, floatArray2);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 778;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 778, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 962.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(intArray0, 2, 962, (-1190));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 778, 0, 962, 0, 1430, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      Character[] characterArray0 = new Character[23];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 2267, (-445), 2267);
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-445);
      floatArray0[1] = (float) (-445);
      floatArray0[2] = (float) (-445);
      floatArray0[3] = 1.0F;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      int int0 = Integer.MAX_VALUE;
      int int1 = (-2896);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean1, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-30);
      shortArray0[1] = (short) (-30);
      shortArray0[2] = (short) (-30);
      shortArray0[3] = (short) (-30);
      shortArray0[4] = (short) (-30);
      shortArray0[5] = (short) (-30);
      shortArray0[6] = (short) (-30);
      shortArray0[7] = (short) (-30);
      shortArray0[8] = (short) (-30);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30), (short) (-30)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 2267, (-445), 2267);
      MockRandom mockRandom0 = new MockRandom((-445));
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Character character0 = Character.valueOf('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      Character character1 = new Character('0');
      assertNotNull(character1);
      assertEquals('0', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.indexOf(floatArray1, 0.0F, (-1964));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals((-1), int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray0, floatArray2);
      assertSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-679);
      shortArray0[1] = (short)4955;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-679), (short)4955}, shortArray0);
      assertArrayEquals(new short[] {(short) (-679), (short)4955}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'E';
      charArray0[2] = 'm';
      charArray0[3] = 'n';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'E';
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {69L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 2267, (-445), 2267);
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-445);
      floatArray0[1] = (float) (-445);
      floatArray0[2] = (float) (-445);
      floatArray0[3] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1367.9421F));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-445.0F), (-445.0F), (-445.0F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-445.0F), (-445.0F), (-445.0F), 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Character[] characterArray0 = new Character[2];
      char char0 = '0';
      Character character0 = Character.valueOf('0');
      assertNotNull(character0);
      assertEquals('0', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertEquals('0', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-445.0F), (-445.0F), (-445.0F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-445.0F), (-445.0F), (-445.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, 0);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-445.0F), (-445.0F), (-445.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(3, int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (-1367.9421F);
      floatArray2[1] = (float) (char)character1;
      floatArray2[2] = 1.0F;
      floatArray2[3] = 2082.0F;
      floatArray2[4] = 1.0F;
      float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray3.length);
      assertNotNull(floatArray3);
      assertSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertSame(floatArray3, floatArray2);
      assertArrayEquals(new float[] {(-1367.9421F), 48.0F, 1.0F, 2082.0F, 1.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-1367.9421F), 48.0F, 1.0F, 2082.0F, 1.0F}, floatArray3, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4955;
      shortArray0[1] = (short) (-679);
      shortArray0[2] = (short)2125;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)4955, (short) (-679), (short)2125}, shortArray0);
      assertArrayEquals(new short[] {(short)4955, (short) (-679), (short)2125}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 120L;
      longArray0[1] = (-2147483648L);
      longArray0[2] = (-692L);
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2147483648L);
      longArray1[1] = (-2147483648L);
      longArray1[2] = (-2147483648L);
      longArray1[3] = (-2147483648L);
      longArray1[4] = (-2147483648L);
      longArray1[5] = (-692L);
      longArray1[6] = (-2147483648L);
      longArray1[7] = (-2147483648L);
      longArray1[8] = (-692L);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotNull(longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {120L, (-2147483648L), (-692L)}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L), (-2147483648L), (-2147483648L), (-2147483648L), (-2147483648L), (-692L), (-2147483648L), (-2147483648L), (-692L)}, longArray1);
      assertArrayEquals(new long[] {120L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 4451);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-907L);
      longArray0[1] = (-1245L);
      longArray0[2] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-907L), (-1245L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, false, false}, booleanArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)403;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)91;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)403;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {403, 403, 91, 0, 0, 403}, intArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 91);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {91.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean3 = ArrayUtils.contains(booleanArray1, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean3);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)91);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {403, 403, 0, 0, 403}, intArray1);
      assertArrayEquals(new int[] {403, 403, 91, 0, 0, 403}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1436.9660037258445;
      doubleArray0[2] = (-956.0);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-956.0), (int) (byte)0, (-1610.2));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, (-956.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-116), (int) (byte) (-52));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.indexOf(intArray0, (-99), (-99));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-956.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1376.182177);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1465.4;
      doubleArray0[6] = (-1917.3767069);
      doubleArray0[7] = (-1065.6436827296);
      doubleArray0[8] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-682.3882647984));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-956.0), 0.0, (-1376.182177), 0.0, 0.0, 1465.4, (-1917.3767069), (-1065.6436827296), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 102;
      intArray0[1] = (-1132);
      intArray0[2] = 590;
      intArray0[3] = (-1919);
      intArray0[4] = 0;
      intArray0[5] = 1875;
      intArray0[6] = 566;
      int int0 = ArrayUtils.indexOf(intArray0, (-660), (-648));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {102, (-1132), 590, (-1919), 0, 1875, 566}, intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Double double0 = new Double(2015.72263397845);
      assertNotNull(double0);
      assertEquals(2015.72263397845, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 0.0F);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2015.72263397845, 2015.72263397845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1718.9742473354));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 824.319665);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 824.319665, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1727;
      ArrayUtils.swap(longArray0, (-991), (-991));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L}, longArray0);
      
      short short0 = (short)51;
      Short short1 = new Short((short)51);
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-558));
      assertNotNull(short2);
      assertEquals((short) (-558), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short short3 = new Short((short) (-558));
      assertNotNull(short3);
      assertEquals((short) (-558), (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51}, shortArray1);
      
      ArrayUtils.reverse(longArray0, (-991), (int) (short) (-558));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L}, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-991);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ArrayUtils.swap(byteArray0, (int) (byte)85, (int) (byte)85, 160);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (int) (byte)85, 160, 1408);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'Q';
      charArray0[2] = 'n';
      charArray0[3] = '\\';
      charArray0[4] = 'M';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '=');
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'?', 'Q', 'n', '\\', 'M'}, charArray0);
      assertArrayEquals(new char[] {'?', 'Q', 'n', '\\', 'M'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1151));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1151);
      longArray0[1] = (long) (short) (-1151);
      longArray0[2] = (long) (short) (-1151);
      longArray0[3] = (long) (short) (-1151);
      longArray0[4] = (long) (short) (-1151);
      longArray0[5] = (long) (short) (-1151);
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      ArrayUtils.reverse(longArray0, 47, (-1312));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1151L), (-1151L), (-1151L), (-1151L), (-1151L), (-1151L), 1L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1151));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1151)}, shortArray1);
      
      ArrayUtils.swap(intArray0, (-1177), 32);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '9', 2690);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-99);
      longArray0[1] = (long) (byte) (-99);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-99L), (-99L)}, longArray0);
      assertTrue(boolean0);
      
      ArrayUtils.swap(longArray0, 57, 99, 57);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-99L), (-99L)}, longArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 57);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-3847L);
      longArray0[2] = 1220L;
      longArray0[3] = 0L;
      longArray0[4] = (-535L);
      longArray0[5] = (-1650L);
      ArrayUtils.swap(longArray0, 1727, 1727);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-3847L), 1220L, 0L, (-535L), (-1650L)}, longArray0);
      
      Short[] shortArray0 = new Short[4];
      short short0 = (short)51;
      Short short1 = new Short((short)51);
      assertNotNull(short1);
      assertEquals((short)51, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)51);
      assertNotNull(short2);
      assertEquals((short)51, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      Short short3 = new Short(short0);
      assertNotNull(short3);
      assertEquals((short)51, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertEquals((short)51, (short)short4);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      
      shortArray0[3] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51, (short)51}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1727;
      ArrayUtils.swap(longArray0, (-991), (-991));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1727L, 0L, 0L}, longArray0);
      
      Short short0 = new Short((short)51);
      assertNotNull(short0);
      assertEquals((short)51, (short)short0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)51;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)51}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((Short[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2637.362;
      doubleArray0[1] = (-668.429809);
      doubleArray0[2] = 3528.0;
      doubleArray0[3] = 1295.340237314;
      doubleArray0[4] = (-884.0);
      doubleArray0[5] = 2.147483647E9;
      doubleArray0[6] = 3287.8;
      doubleArray0[7] = 558.8037;
      doubleArray0[8] = 3.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 309.93, 835, 558.8037);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2637.362, (-668.429809), 3528.0, 1295.340237314, (-884.0), 2.147483647E9, 3287.8, 558.8037, 3.0}, doubleArray0, 0.01);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1712);
      shortArray0[1] = (short) (-1712);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1756, (int) (short) (-1712));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1712), (short) (-1712)}, shortArray0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)4670);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1712), (short) (-1712)}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1.5);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1143;
      shortArray0[1] = (short) (-332);
      shortArray0[2] = (short) (-2573);
      shortArray0[3] = (short) (-1004);
      shortArray0[4] = (short) (-3859);
      shortArray0[5] = (short) (-183);
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)2;
      shortArray0[8] = (short)98;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short) (-1004));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(9, shortArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1143, (short) (-332), (short) (-2573), (short) (-1004), (short) (-3859), (short) (-183), (short)2, (short)2, (short)98}, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)98;
      longArray0[1] = (long) (short) (-3859);
      longArray0[2] = (long) (short) (-332);
      longArray0[3] = (long) (short)1143;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short) (-183);
      intArray0[2] = (int) (short) (-3859);
      intArray0[3] = (int) (short) (-3859);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -183, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("8lL");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("8lL");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("8lL");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean6));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("8lL");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean0));
      
      booleanArray0[8] = boolean8;
      boolean boolean9 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean9);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-1);
      MockRandom mockRandom0 = new MockRandom((short) (-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("8lL");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertNotNull(boolean5);
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("8lL");
      assertNotNull(boolean6);
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("8lL");
      assertNotNull(boolean7);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean6));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("8lL");
      assertNotNull(boolean8);
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean5));
      
      booleanArray0[8] = boolean8;
      boolean boolean9 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean9);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-657);
      shortArray0[2] = (short) (-414);
      short short0 = (short)1713;
      shortArray0[3] = (short)1713;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1713, 0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-657), (short) (-414), (short)1713}, shortArray0);
      assertEquals(3, int0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((short) (-657));
      assertNotNull(long0);
      assertEquals((-657L), (long)long0);
      
      longArray0[0] = long0;
      String string0 = "className";
      try { 
        Long.valueOf("className", (int) (short)1713);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1713 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4226.917526269473);
      doubleArray0[4] = (-3391.97706540462);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, (-4226.917526269473), (-3391.97706540462)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom(3283L);
      assertNotNull(mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)32;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-956.0), 0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = Short.valueOf((short)115);
      assertNotNull(short0);
      assertEquals((short)115, (short)short0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object1);
      assertEquals((short)115, object1);
      
      Byte byte0 = new Byte((byte) (-119));
      assertNotNull(byte0);
      assertEquals((byte) (-119), (byte)byte0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) integer0, 580);
      assertEquals((-1), int1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-119);
      floatArray0[1] = (float) '#';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), 1365.5186F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 100.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 100.0}, doubleArray0, 0.01);
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 23);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-476.9271354095), (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {100.0, 100.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, (-3524), object1);
      assertEquals(4, objectArray0.length);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertNotSame(object1, object0);
      assertSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, (-3524), object0);
      assertEquals(4, objectArray0.length);
      assertNotNull(object3);
      assertNotSame(object0, object1);
      assertNotSame(object0, object2);
      assertSame(object0, object3);
      assertSame(object3, object0);
      assertNotSame(object3, object2);
      assertNotSame(object3, object1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3524);
      intArray0[1] = (-442);
      intArray0[2] = (-3524);
      intArray0[3] = (-3524);
      intArray0[4] = (-3524);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-3524));
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-3524), (-3524), (-442), (-3524), (-3524), (-3524)}, intArray1);
      assertArrayEquals(new int[] {(-3524), (-442), (-3524), (-3524), (-3524)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-194.368827);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-194.368827);
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3693, 3693);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), 1.0, (-194.368827), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, (-194.368827), 1.0, (-194.368827), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      ArrayUtils.reverse((Object[]) longArray1, 2526, (int) (short)0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4226.917526269473);
      doubleArray0[4] = (-3391.97706540462);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {152.3803551, 625.701578154, 0.0, (-4226.917526269473), (-3391.97706540462)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.5;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-4226.917526269473);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) (-1);
      ArrayUtils.reverse(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), (-4226.917526269473), 0.0, 1.5}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 6;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertEquals(5, intArray1.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 6, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 6, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3245);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)53;
      shortArray0[3] = (short) (-479);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)3035;
      shortArray0[6] = (short)252;
      shortArray0[7] = (short) (-829);
      shortArray0[8] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-3245), (short)0, (short)53, (short) (-479), (short)1, (short)3035, (short)252, (short) (-829), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)3035;
      longArray0[1] = (long) (short)1;
      ArrayUtils.swap(longArray0, (-716), (-42));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3035L, 1L}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)53;
      doubleArray0[5] = (double) (short) (-479);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1669), 512);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 53.0, (-479.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 53.0, (-479.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      ArrayUtils.shift(shortArray0, 1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-386), (short) (-1457)}, shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte) (-88)}, byteArray0);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2238), (-2146745482));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'U');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = ',';
      charArray0[2] = '3';
      charArray0[3] = 'b';
      charArray0[4] = '#';
      charArray0[5] = 's';
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)6, (short)0, (short)2, (short)6}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-840), (-840));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Float float0 = new Float((double) (-840));
      assertNotNull(float0);
      assertEquals((-840.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 266);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {266}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '^';
      longArray0[1] = (long) '^';
      longArray0[2] = (long) (-850);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (-2195);
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {94L, 94L, (-850L), 0L, (-2195L), 0L, 0L}, longArray0);
      
      ArrayUtils.swap(doubleArray1, (-444), 1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 0, 0, 3693);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)8);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2815;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)18688;
      ArrayUtils.swap(shortArray0, 5, (int) (short)0, (-99));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2815, (short)0, (short)18688}, shortArray0);
      
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-194.368827);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1101.07113;
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3693, 3693);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-194.368827), 0.0, 0.0, 1.0, 1.0, 1101.07113, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1721;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1163);
      shortArray0[6] = (short)6;
      shortArray0[7] = (short)2;
      shortArray0[8] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1721, (short)0, (short) (-1163), (short)6, (short)2, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      ArrayUtils.reverse(charArray0, (-3857), (-3857));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2375.902;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-131.51913787);
      doubleArray0[4] = (-571.249602);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2375.902, 0.0, 0.0, (-131.51913787), (-571.249602)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      ArrayUtils.reverse(charArray0, (-3857), (-3857));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[1] = object1;
      long[] longArray0 = new long[4];
      long long0 = 0L;
      longArray0[0] = 0L;
      long long1 = (-1549L);
      longArray0[1] = (-1549L);
      longArray0[2] = (-1549L);
      longArray0[3] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 234L);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-1549L), (-1549L), (-1L)}, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L, (-1549L), (-1549L), (-1L)}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      IntStream intStream0 = bitSet1.stream();
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(4, longArray0.length);
      assertNotNull(intStream0);
      assertNotSame(bitSet1, bitSet0);
      assertArrayEquals(new long[] {0L, (-1549L), (-1549L), (-1L)}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      int int0 = (-1060);
      // Undeclared exception!
      try { 
        bitSet1.flip(254, (-1060));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex < 0: -1060
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object[] objectArray1 = new Object[9];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray1[1] = object1;
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1549L);
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 234L);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-1549L), 0L, (-1L)}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1343.5;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2208;
      intArray0[2] = 0;
      intArray0[3] = 64;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2208, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 418.4;
      int int0 = ArrayUtils.indexOf(doubleArray0, 418.4);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)84;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)84;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)84, (short)0, (short)84, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)84, (short)0, (short)84, (short)0, (short)84, (short)0, (short)84, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (int) (byte)0, 7);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-2195);
      doubleArray0[3] = (double) '^';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2);
      Float[] floatArray0 = new Float[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2195.0), 0.0, 94.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = '?';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '4';
      intArray0[1] = (int) '&';
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {52, 38}, intArray0);
      assertArrayEquals(new int[] {52, 38, 52, 38}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '?';
      objectArray0[1] = (Object) '?';
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "org.apache.commons.lang3.ClassUtils", 2);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)21, (byte)2, (byte)21, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)21, (byte)2, (byte)2}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)80;
      shortArray0[2] = (short) (byte)23;
      shortArray0[3] = (short) (byte)23;
      shortArray0[4] = (short)3044;
      shortArray0[5] = (short) (byte)23;
      shortArray0[6] = (short)80;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)17, 2377);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)80, (short)23, (short)23, (short)3044, (short)23, (short)80}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)23, 471);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)80, (short)23, (short)23, (short)3044, (short)23, (short)80}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shuffle(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)80, (short)23, (short)23, (short)3044, (short)23, (short)80}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      Double double0 = new Double(2015.72263397845);
      assertNotNull(double0);
      assertEquals(2015.72263397845, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)777);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)777}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1516;
      shortArray0[2] = (short)102;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1516, (short)102, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      short[] shortArray0 = new short[4];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.subarray((Boolean[]) null, (-2146814440), 2140204070);
      assertNull(booleanArray0);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 1.5;
      doubleArray1[1] = (Double) 1.5;
      doubleArray1[2] = (Double) 1.5;
      doubleArray1[3] = (Double) 1.5;
      doubleArray1[4] = (Double) 1.5;
      doubleArray1[5] = (Double) 1.5;
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Boolean boolean0 = new Boolean("H=K>.]F1LtN{.S6S?");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("H=K>.]F1LtN{.S6S?");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Object object0 = ArrayUtils.get((Object[]) null, 2140204070, (Object) boolean1);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertTrue(object0.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 2140204070);
      assertEquals((-1), int0);
      assertTrue(object0.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)1516;
      shortArray0[2] = (short)102;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1090);
      shortArray0[5] = (short) (-1192);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2652);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-2652), 15);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)1516, (short)102, (short)0, (short) (-1090), (short) (-1192), (short)0, (short) (-2652)}, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)1516, (short)102, (short)0, (short) (-1090), (short) (-1192), (short)0, (short) (-2652)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertNotNull(shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short)6, (short)1516, (short)102, (short)0, (short) (-1090), (short) (-1192), (short)0, (short) (-2652)}, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)1516, (short)102, (short)0, (short) (-1090), (short) (-1192), (short)0, (short) (-2652)}, shortArray1);
      assertArrayEquals(new short[] {(short)6, (short)1516, (short)102, (short)0, (short) (-1090), (short) (-1192), (short)0, (short) (-2652)}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, (int) (short) (-1090));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-1090), 1393);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray3 = ArrayUtils.add(shortArray0, (short)0);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray3.length);
      assertNotNull(shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)1516, (short)102, (short)0, (short) (-1090), (short) (-1192), (short)0, (short) (-2652)}, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short)1516, (short)102, (short)0, (short) (-1090), (short) (-1192), (short)0, (short) (-2652), (short)0}, shortArray3);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      Character[] characterArray0 = new Character[7];
      char char0 = 'm';
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      assertTrue(character0.equals((Object)char0));
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertEquals('m', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('m');
      assertNotNull(character2);
      assertEquals('m', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertNotNull(character3);
      assertEquals('m', (char)character3);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character3);
      assertNotNull(character4);
      assertEquals('m', (char)character4);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertNotNull(character5);
      assertEquals('m', (char)character5);
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character3));
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('');
      assertNotNull(character6);
      assertEquals('', (char)character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)80;
      shortArray0[2] = (short) (byte)23;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short)3044;
      shortArray0[5] = (short) (byte)23;
      shortArray0[6] = (short)80;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)17, 2377);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)80, (short)23, (short) (-1), (short)3044, (short)23, (short)80}, shortArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), 471);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)80, (short)23, (short) (-1), (short)3044, (short)23, (short)80}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)80, (short)23, (short) (-1), (short)3044, (short)23, (short)80}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)80, (-231));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      intArray0[5] = (int) '#';
      intArray0[6] = (int) '#';
      intArray0[7] = (int) '#';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 45L;
      Short short0 = new Short((short)6322);
      assertNotNull(short0);
      assertEquals((short)6322, (short)short0);
      
      boolean boolean0 = ArrayUtils.isEquals(short0, short0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)6322);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1560), (-2739), 2180);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.shift((char[]) null, (-88));
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 2188);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = 2188;
      intArray0[1] = 0;
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) 'x';
      intArray0[4] = 2188;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2188, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'D');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.swap((int[]) null, 347, 347, (-2652));
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      char[] charArray0 = new char[3];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-716);
      doubleArray0[2] = (double) (-716);
      doubleArray0[3] = (double) (-716);
      doubleArray0[4] = (double) (-716);
      doubleArray0[5] = (double) (-716);
      doubleArray0[6] = (double) (-716);
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-716.0), (-716.0), (-716.0), (-716.0), (-716.0), (-716.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {1.0, (-716.0), (-716.0), (-716.0), (-716.0), (-716.0), (-716.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Object[] objectArray0 = new Object[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2146428504, 36);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-4991));
      assertNotNull(short0);
      assertEquals((short) (-4991), (short)short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4991)}, shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'T');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray2.length);
      assertNotNull(charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertArrayEquals(new char[] {'T', 'T'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-4991));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {625.701578154, 0.0, 0.0, 0.0, 152.3803551}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      assertNotNull(double1);
      assertEquals(824.319665, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(5, doubleArray0.length);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      ArrayUtils.swap(doubleArray1, (-2573), 68);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1102;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 6;
      intArray0[3] = (-2147061675);
      intArray0[4] = 296;
      intArray0[6] = (-2147061675);
      intArray0[7] = 296;
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 1102, (-2400));
      assertNull(floatArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '1';
      charArray0[2] = 'V';
      charArray0[3] = 'b';
      charArray0[4] = 'j';
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, '[');
      assertNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 1472);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.removeElement((float[]) null, 3077.0F);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 698;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {698}, intArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ArrayUtils.swap((byte[]) null, 1116, (-2146234547), (-986));
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 698;
      integerArray0[1] = (Integer) 698;
      integerArray0[2] = (Integer) 698;
      integerArray0[3] = (Integer) 698;
      integerArray0[4] = (Integer) 698;
      integerArray0[5] = (Integer) 698;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      ArrayUtils.shift((short[]) null, 82);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-1457);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1457);
      doubleArray0[1] = (double) (short) (-1457);
      doubleArray0[2] = (double) (short) (-1457);
      doubleArray0[3] = (double) (short) (-1457);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1457.0));
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1457.0), (-1457.0), (-1457.0), (-1457.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Character[] characterArray0 = new Character[15];
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1457.0), (-1457.0), (-1457.0), (-1457.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 625.701578154;
      int[] intArray0 = new int[4];
      intArray0[1] = (-1);
      Boolean boolean0 = new Boolean("%>]i&LDwFc_j_5]fL~");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      Boolean boolean2 = new Boolean("java.lang.Float");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[5] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3167.3662F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3167.3662F);
      ArrayUtils.swap(floatArray0, (-1483), 293);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-3167.3662F), 0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F), (-3167.3662F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      Character character1 = new Character('@');
      assertNotNull(character1);
      assertEquals('@', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '/');
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'/', '/', '/', '/'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap((double[]) null, (-1112), (-1112));
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 295.8345774147603;
      doubleArray0[1] = 98.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 98.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {295.8345774147603, 98.0, 1.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {295.8345774147603, 1.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      ArrayUtils.shift(shortArray0, 1734);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1457), (short) (-386)}, shortArray0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 1.0F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)617);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)617, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)104;
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-1375), 83);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 52, 52, 87);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) 87;
      longArray0[2] = 1429L;
      longArray0[3] = (long) 52;
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-2038), 561, 87);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Character character0 = Character.valueOf('(');
      assertNotNull(character0);
      assertEquals('(', (char)character0);
      
      Character character1 = new Character('?');
      assertNotNull(character1);
      assertEquals('?', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('?');
      assertNotNull(character2);
      assertEquals('?', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      Character character3 = new Character('B');
      assertNotNull(character3);
      assertEquals('B', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      
      Character character4 = Character.valueOf('m');
      assertNotNull(character4);
      assertEquals('m', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      
      Character character5 = new Character('>');
      assertNotNull(character5);
      assertEquals('>', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character3;
      characterArray0[1] = character0;
      characterArray0[2] = character1;
      characterArray0[3] = character4;
      characterArray0[4] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'b');
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'B', '(', '?', 'm', '?'}, charArray0);
      
      ArrayUtils.swap((double[]) null, 120, 1823);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      ArrayUtils.shift(shortArray0, 1734);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1457), (short) (-386)}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1457);
      doubleArray0[1] = (double) (short) (-1457);
      doubleArray0[2] = (double) (short) (-386);
      doubleArray0[3] = (double) (short) (-386);
      doubleArray0[4] = (double) (short) (-1457);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1457.0));
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1457.0), (-1457.0), (-386.0), (-386.0), (-1457.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-386.0), (-386.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-386);
      floatArray0[1] = (float) (short) (-386);
      ArrayUtils.swap(floatArray0, (int) (short) (-1457), 1734, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-386.0F), (-386.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = Character.valueOf('B');
      assertNotNull(character0);
      assertEquals('B', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('B');
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('B');
      assertNotNull(character2);
      assertEquals('B', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('B');
      assertNotNull(character3);
      assertEquals('B', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character1);
      assertNotNull(character4);
      assertEquals('B', (char)character4);
      assertTrue(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = new Character((char) character2);
      assertNotNull(character5);
      assertEquals('B', (char)character5);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character3));
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '<');
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', 'B', 'B'}, charArray0);
      
      ArrayUtils.swap((double[]) null, 0, (int) character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character5));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character1));
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Double double0 = new Double(int0);
      assertNotNull(double0);
      assertEquals(34.0, (double)double0, 0.01);
      
      Double double1 = new Double(34);
      assertNotNull(double1);
      assertEquals(34.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 34, 68);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Boolean boolean0 = Boolean.valueOf("}BM=F} 7+&");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("java.lang.Long");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray1, (double) 68);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-2030.390678));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, (-2030.390678));
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2030.390678)}, doubleArray1, 0.01);
      
      ArrayUtils.swap((float[]) null, 0, 0);
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-2896);
      intArray0[3] = (-2896);
      intArray0[4] = 1172;
      intArray0[5] = 0;
      intArray0[6] = (-2896);
      intArray0[7] = (-2896);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-2030.390678));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, (-2030.390678));
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2030.390678)}, doubleArray1, 0.01);
      
      Long[] longArray0 = new Long[5];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) long0;
      floatArray0[2] = (float) long0;
      floatArray0[3] = 2902.7F;
      ArrayUtils.swap(floatArray0, 13, 13);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2902.7F}, floatArray0, 0.01F);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 13;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 13;
      intArray0[3] = 1072;
      intArray0[4] = 13;
      intArray0[5] = 13;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3167.3662F);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1L));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, boolean1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean4));
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      booleanArray0[8] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      String string0 = "af}pmju-kq$uPQy!8";
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertNotNull(boolean3);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3167.3662F);
      ArrayUtils.swap(floatArray0, 0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3167.3662F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[5];
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertTrue(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = (-2896);
      intArray0[6] = (-2896);
      intArray0[7] = 0;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean4, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)23;
      longArray0[2] = (long) (byte)44;
      longArray0[4] = (long) (byte)23;
      longArray0[5] = (long) (byte)23;
      longArray0[6] = 684L;
      longArray0[7] = (long) (byte)23;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1));
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 23L, 44L, 0L, 23L, 23L, 684L, 23L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character[] characterArray0 = new Character[26];
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      characterArray0[0] = character0;
      longArray0[5] = (long) (char)character0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Double[]) null, (int) 44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)44, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[2] = (long) (byte)44;
      longArray0[4] = (long) (byte)23;
      longArray0[5] = (long) (byte)23;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1L));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 44L, 0L, 23L, 23L, 0L, 0L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 255, (int) (short)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 255;
      longArray0[3] = 732L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, 2301);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 255L, 732L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 255L, 732L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1583.47142));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-90), (int) (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-52), (byte) (-90), (byte) (-99), (byte)124, (byte)9, (byte) (-1)}, byteArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-99);
      intArray0[1] = (-2147060594);
      intArray0[2] = (int) (byte) (-52);
      intArray0[3] = (int) (byte) (-52);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = 138;
      intArray0[6] = (int) (byte)91;
      ArrayUtils.shift(intArray0, 56, (int) (byte) (-90), (-2147060594));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-99), (-2147060594), (-52), (-52), (-1), 138, 91}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 152.3803551;
      doubleArray0[1] = 625.701578154;
      doubleArray0[4] = (-3391.97706540462);
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      Character character1 = new Character(';');
      assertNotNull(character1);
      assertEquals(';', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character(';');
      assertNotNull(character2);
      assertEquals(';', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      Character character3 = Character.valueOf(';');
      assertNotNull(character3);
      assertEquals(';', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      
      Character character4 = Character.valueOf('H');
      assertNotNull(character4);
      assertEquals('H', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character2;
      characterArray0[1] = character4;
      characterArray0[2] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 586.0F);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      long[] longArray0 = new long[5];
      longArray0[0] = 116L;
      longArray0[1] = (long) (byte)51;
      longArray0[2] = (long) (byte)51;
      longArray0[3] = 4832L;
      longArray0[4] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)51, (int) (byte)51);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {116L, 51L, 51L, 4832L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      Character character1 = Character.valueOf('i');
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character('i');
      assertNotNull(character2);
      assertEquals('i', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 51L;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) 116L;
      objectArray0[3] = (Object) character1;
      objectArray0[4] = (Object) character0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertEquals(6, objectArray0.length);
      assertNotNull(object0);
      assertEquals('i', object0);
      assertTrue(object0.equals((Object)character2));
      assertTrue(object0.equals((Object)character1));
      
      objectArray0[5] = object0;
      ArrayUtils.swap(objectArray0, 2, 925, (int) (byte)51);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      doubleArray0[2] = doubleArray0[1];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[3] = double0;
      ArrayUtils.shuffle((Object[]) doubleArray0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte)23}, byteArray0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)23;
      longArray0[2] = (long) (byte)51;
      longArray0[3] = 0L;
      longArray0[4] = (long) (byte)23;
      longArray0[5] = (long) 0;
      longArray0[6] = 684L;
      longArray0[7] = (long) (byte)23;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1));
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 23L, 51L, 0L, 23L, 0L, 684L, 23L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character[] characterArray0 = new Character[7];
      char char0 = 'u';
      Character character0 = new Character('u');
      assertNotNull(character0);
      assertEquals('u', (char)character0);
      assertTrue(character0.equals((Object)char0));
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('j');
      assertNotNull(character1);
      assertEquals('j', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('u');
      assertNotNull(character2);
      assertEquals('u', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertNotNull(character3);
      assertEquals('u', (char)character3);
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertNotNull(character4);
      assertEquals('u', (char)character4);
      assertTrue(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)char0));
      assertFalse(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('F');
      assertNotNull(character5);
      assertEquals('F', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('V');
      assertNotNull(character6);
      assertEquals('V', (char)character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2688;
      shortArray0[1] = (short)2688;
      shortArray0[2] = (short)961;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)97);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2688, (short)2688, (short)961}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Double double0 = new Double(4371.725791050785);
      assertNotNull(double0);
      assertEquals(4371.725791050785, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(4371.725791050785, object0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 1252L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1252L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1252L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      MockRandom mockRandom0 = new MockRandom(106L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = '1';
      charArray0[2] = 'o';
      charArray0[3] = '#';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1654.4095F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1654.4095F));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1654.4095F)}, floatArray0, 0.01F);
      assertEquals(0, int0);
      
      Integer[] integerArray0 = new Integer[0];
      try { 
        Integer.valueOf("onG(aNCp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"onG(aNCp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 34;
      Integer integer0 = new Integer(34);
      assertNotNull(integer0);
      assertEquals(34, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt(34);
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.add(0);
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34, (int)mutableInt0.getValue());
      
      int int1 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) int0);
      assertEquals(9, integerArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      Long long0 = new Long((-1215L));
      assertNotNull(long0);
      assertEquals((-1215L), (long)long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'q';
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 'q';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-1.0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {113.0, (-1.0), 113.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray1, false, (-648));
      assertEquals(2, bitSet1.length());
      assertEquals("{0, 1}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, booleanArray1.length);
      assertNotNull(bitSet1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 148);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'q';
      intArray0[2] = (int) 'q';
      intArray0[3] = (int) 'q';
      intArray0[4] = (int) 'q';
      intArray0[5] = (int) 'q';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[0] = (byte)0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)91;
      intArray0[2] = 86;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)91;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 1;
      intArray0[8] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1173);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 91, 86, 0, 91, 0, 0, 1, 0}, intArray0);
      assertArrayEquals(new int[] {0, 91, 86, 0, 91, 0, 0, 1, 0, 1173}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)91;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), (-345));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {91L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      Long long0 = new Long((-1409L));
      assertNotNull(long0);
      assertEquals((-1409L), (long)long0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) 294;
      ArrayUtils.shift(objectArray0, (-3800));
      assertEquals(2, objectArray0.length);
      
      Character[] characterArray0 = new Character[9];
      char char0 = '%';
      Character character0 = Character.valueOf('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('L');
      assertNotNull(character1);
      assertEquals('L', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('%', (char)character2);
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('I');
      assertNotNull(character3);
      assertEquals('I', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      
      characterArray0[3] = character3;
      char char1 = '@';
      Character character4 = Character.valueOf('@');
      assertNotNull(character4);
      assertEquals('@', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      
      characterArray0[4] = character4;
      Character character5 = new Character('%');
      assertNotNull(character5);
      assertEquals('%', (char)character5);
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char1));
      
      characterArray0[5] = character5;
      Character character6 = new Character(char1);
      assertNotNull(character6);
      assertEquals('@', (char)character6);
      assertFalse(char1 == char0);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('|');
      assertNotNull(character7);
      assertEquals('|', (char)character7);
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)char1));
      assertFalse(character7.equals((Object)character6));
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('@');
      assertNotNull(character8);
      assertEquals('@', (char)character8);
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character3));
      assertTrue(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)char0));
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)76;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((byte)76);
      assertNotNull(double0);
      assertEquals(76.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)22);
      assertNotNull(double1);
      assertEquals(22.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(64.0);
      assertNotNull(double2);
      assertEquals(64.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1126.6581291);
      assertNotNull(double3);
      assertEquals(1126.6581291, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1126.6581291);
      assertNotNull(double4);
      assertEquals(1126.6581291, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {76.0, 22.0, 64.0, 1126.6581291, 1126.6581291}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)76;
      longArray0[1] = (long) (byte)22;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {76L, 22L}, longArray1);
      assertArrayEquals(new long[] {76L, 22L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (byte)22, 567);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 2147483620;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1277);
      longArray0[2] = (long) (-1277);
      longArray0[3] = (long) (-1277);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1277));
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-1277L), (-1277L), (-1277L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1277L), (-1277L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf((char[]) null, '4');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1277), (-1277));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Character character0 = ArrayUtils.get((Character[]) null, (-1277), (Character) null);
      assertNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) null);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)240;
      shortArray0[1] = (short)240;
      shortArray0[2] = (short)240;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)240, (short)240, (short)240}, shortArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)240;
      intArray0[1] = (int) (short)240;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {240, 240}, intArray0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)240);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {240, 240}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1277), 0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1277);
      longArray0[2] = (long) (-1277);
      longArray0[3] = (long) (-1277);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1277));
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, (-1277L), (-1277L), (-1277L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1277L), (-1277L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1277L);
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (-1277L);
      objectArray0[3] = (Object) 0L;
      Long long0 = new Long((-1277L));
      assertNotNull(long0);
      assertEquals((-1277L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-1277L), object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) (-1277L);
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1277);
      intArray0[1] = 0;
      intArray0[2] = (-1277);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1277);
      intArray0[6] = (-1277);
      intArray0[7] = 294;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 45L;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-319), (-319));
      assertNull(charArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2147483648L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {45L}, longArray0);
      assertArrayEquals(new long[] {45L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-1141), (-1141), (-1141));
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)51}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('e');
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 51, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('e', (char)character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)51;
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertSame(characterArray0, objectArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray0 = ArrayUtils.subarray((Boolean[]) null, (int) 58, (int) 58);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ':';
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 305, (int) (byte)112);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains(booleanArray1, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)112);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)112;
      intArray0[1] = (int) (byte)112;
      intArray0[2] = (int) (byte)112;
      intArray0[3] = (int) (byte)112;
      intArray0[4] = (int) (byte)112;
      intArray0[5] = (int) (byte)112;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 112, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 108;
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(108);
      assertNotNull(integer1);
      assertEquals(108, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertEquals(108, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertEquals(108, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)124;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)32);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-94), (byte)86, (byte)32, (byte)122, (byte) (-85), (byte)124}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Short[] shortArray0 = new Short[0];
      Short short0 = ArrayUtils.get(shortArray0, 8);
      assertEquals(0, shortArray0.length);
      assertNull(short0);
      
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(long0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character character1 = Character.valueOf('e');
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = ArrayUtils.get(characterArray0, (int) 0, character1);
      assertEquals(0, characterArray0.length);
      assertNotNull(character2);
      assertEquals('e', (char)character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character2);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)51;
      doubleArray0[2] = (double) (byte)51;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 51.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      assertSame(characterArray0, objectArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1930;
      shortArray0[1] = (short) (-1759);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1712), (int) (short)1930);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1930, (short) (-1759)}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)13;
      shortArray0[3] = (short)1430;
      shortArray0[4] = (short)1488;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1610);
      shortArray0[7] = (short) (-1606);
      shortArray0[8] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, 2113);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)13, (short)1430, (short)1488, (short)0, (short) (-1610), (short) (-1606), (short)2}, shortArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)403;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)91;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {403, 403, 91, 0, 0, 0}, intArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 91);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {91.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)403, (short)91}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)44;
      shortArray0[2] = (short)0;
      shortArray0[1] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)403, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.contains(booleanArray1, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      Character[] characterArray0 = new Character[4];
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertEquals('y', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('1');
      assertNotNull(character2);
      assertEquals('1', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('1');
      assertNotNull(character3);
      assertEquals('1', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, 0, (-2804));
      assertEquals(4, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1247L);
      assertNull(longArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":*|)KuPcsb(pgww";
      stringArray0[1] = "v;z*$Is%:ulF";
      stringArray0[2] = "o^+P-sM5nrt+AL}";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-240), 1891);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.subarray((Short[]) null, 1051, 99);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-730);
      intArray0[1] = 2158;
      intArray0[2] = 0;
      intArray0[3] = (-1610);
      intArray0[4] = 2746;
      intArray0[5] = (-5247);
      intArray0[6] = 1423;
      intArray0[7] = (-2260);
      intArray0[8] = (-2467);
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-730), 2158, 0, (-1610), 2746, (-5247), 1423, (-2260), (-2467)}, intArray0);
      assertArrayEquals(new int[] {2158, 0, (-1610), 2746, (-5247), 1423, (-2260), (-2467)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-5247);
      intArray2[1] = 100;
      intArray2[2] = 1423;
      intArray2[3] = 2746;
      intArray2[4] = 2746;
      intArray2[5] = 2158;
      int[] intArray3 = ArrayUtils.removeAllOccurrences(intArray2, 1964);
      assertEquals(6, intArray3.length);
      assertEquals(6, intArray2.length);
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {(-5247), 100, 1423, 2746, 2746, 2158}, intArray3);
      assertArrayEquals(new int[] {(-5247), 100, 1423, 2746, 2746, 2158}, intArray2);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      boolean boolean0 = ArrayUtils.isSorted(intArray4);
      assertEquals(0, intArray4.length);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertArrayEquals(new int[] {}, intArray4);
      assertTrue(boolean0);
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)55);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Boolean[] booleanArray0 = ArrayUtils.removeElement((Boolean[]) null, (Object) character0);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'L');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'g');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'g'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'g';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)51;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)51;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {103, 0, 51, 0, 51}, intArray0);
      assertArrayEquals(new int[] {103, 0, 51, 0, 51, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)51;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte)51;
      longArray0[4] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 0, 103);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {51L, 0L, 0L, 51L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1891, 2242);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3.2074008F;
      floatArray0[1] = 3.2074008F;
      floatArray0[2] = 3.2074008F;
      floatArray0[3] = 3.2074008F;
      floatArray0[4] = 3.2074008F;
      floatArray0[5] = 3.2074008F;
      floatArray0[6] = 3.2074008F;
      floatArray0[7] = 3.2074008F;
      floatArray0[8] = 3.2074008F;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-14));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2392L));
      assertNotNull(long0);
      assertEquals((-2392L), (long)long0);
      
      longArray0[0] = long0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2392L);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2392.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-119));
      assertNotNull(byte0);
      assertEquals((byte) (-119), (byte)byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, (Object) longArray0[0], (int) (byte) (-119));
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (int) (byte) (-119), (float) (byte) (-119));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -119, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)13;
      shortArray0[3] = (short)1430;
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('&');
      assertNotNull(character0);
      assertEquals('&', (char)character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, 2141434398, (int) 1430);
      assertEquals(1, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)403;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)91, (short)0, (short)0, (short)403}, shortArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)403;
      intArray0[1] = (int) (short)403;
      intArray0[2] = (int) (short)91;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)403;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {403, 403, 91, 0, 0, 403}, intArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 91);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {91.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-67));
      assertNull(byteArray0);
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      Boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray2, 0, (-1113));
      assertEquals(2, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2392L));
      assertNotNull(long0);
      assertEquals((-2392L), (long)long0);
      
      longArray0[0] = long0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146207661);
      ArrayUtils.shift(byteArray0, (-2146207661));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1577));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1577));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte) (-1));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146207661);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 2147483646;
      intArray0[3] = 9;
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, (-669));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2146207661), Integer.MAX_VALUE, 2147483646, 9}, intArray0);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-2392L));
      assertNotNull(long0);
      assertEquals((-2392L), (long)long0);
      
      longArray0[0] = long0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2392L);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2392.0)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-100);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88, (byte)122, (byte)59, (byte)0, (byte)0, (byte) (-100), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-449);
      floatArray0[1] = (float) (-449);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (byte)0);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-449.0F), (-449.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-449.0F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)51;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 0);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "java.lang.Character");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1151));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1151)}, shortArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1151);
      longArray0[1] = (long) (short) (-1151);
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 340.5);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 1771.4, 2015.72263397845);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-1151));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-1151)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 279;
      longArray0[1] = (long) 279;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      ArrayUtils.reverse(byteArray0, (int) (short)0, 621);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)11, (byte)11}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "j9a0\":n,p?2.Al8");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-61));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-61)}, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-61);
      shortArray0[1] = (short) (byte) (-61);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-61);
      shortArray0[4] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-61), (short) (-61), (short)0, (short) (-61), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-61), (short)0, (short) (-61), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-61);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      ArrayUtils.reverse(byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "j9a0\":n,p?2.Al8");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-61);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-61));
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-61)}, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-61);
      shortArray0[1] = (short) (byte) (-61);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte) (-61);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-61), (short) (-61), (short)0, (short) (-61), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-61), (short)0, (short) (-61), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-61);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      ArrayUtils.reverse(byteArray1);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (-927L);
      longArray0[1] = (-927L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(22, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(longArray1, (-2668), 243);
      assertEquals(22, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-1876L);
      longArray0[2] = 1L;
      longArray0[3] = (-1L);
      longArray0[4] = 1110L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1876L), 1L, (-1L), 1110L}, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)23;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23}, byteArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-117);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)56, (byte)102, (byte) (-16), (byte) (-117)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)56, (byte)102, (byte) (-16), (byte) (-117)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)84;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)58, 0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0, (byte)84, (byte)0}, byteArray0);
      
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)84;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)84;
      shortArray0[3] = (short) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)84, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1436.9660037258445;
      doubleArray0[2] = (-956.0);
      byte[] byteArray0 = new byte[13];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-956.0), (int) (byte)0, (-1610.2));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, (-956.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte) (-116), (int) (byte) (-52));
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, (int) (byte) (-116));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(6, doubleArray0.length);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, (-956.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1610.2), 1436.9660037258445, (-956.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)83);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)83, (byte)83, (byte)83}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)83;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-14), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -14, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2118.3125260047873);
      doubleArray0[1] = (-1287.2431255854);
      doubleArray0[2] = (-1287.2431255854);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2081.13644645);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2118.3125260047873), (-1287.2431255854), (-1287.2431255854)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2118.3125260047873), (-1287.2431255854), (-1287.2431255854)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1457);
      shortArray0[1] = (short) (-386);
      ArrayUtils.shift(shortArray0, 1734);
      assertArrayEquals(new short[] {(short) (-1457), (short) (-386)}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-1457);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-1));
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 1.0F);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      short[] shortArray0 = new short[4];
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      ArrayUtils.indexesOf(floatArray0, 0.0F);
      ArrayUtils.removeElements(shortArray0, shortArray0);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-841L));
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2635.862;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2635.862);
      assertArrayEquals(new double[] {2635.862, 2635.862}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-3443);
      shortArray0[0] = (short) (-3443);
      short short1 = (short) (-1214);
      shortArray0[1] = (short) (-1214);
      shortArray0[2] = (short) (-1);
      ArrayUtils.removeElements(shortArray0, shortArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.add(booleanArray0, true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      ArrayUtils.contains(doubleArray0, 1538.474111383242);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1214), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1214, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer.getInteger("The type must not be null");
      integerArray0[0] = null;
      Float float0 = new Float(0.0F);
      MutableInt mutableInt0 = new MutableInt(float0);
      Integer integer0 = mutableInt0.toInteger();
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((-3110));
      integerArray0[2] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, 0, integerArray0[2]);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1671);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (byte)0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-99));
      Character character0 = new Character('[');
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((byte) (-99));
      doubleArray0[0] = double0;
      Double double1 = new Double((-3715.4224138));
      doubleArray0[1] = double1;
      Double double2 = new Double(658.0);
      doubleArray0[2] = double2;
      int[] intArray0 = new int[7];
      intArray0[0] = (-418);
      intArray0[1] = (-2145960608);
      intArray0[2] = (int) '[';
      intArray0[3] = (int) (byte) (-99);
      intArray0[4] = (int) '[';
      intArray0[5] = (int) '[';
      intArray0[6] = (-1176);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      Object[] objectArray0 = new Object[1];
      ArrayUtils.get(objectArray0, 102);
      objectArray0[0] = null;
      ArrayUtils.reverse(objectArray0, 102, 434);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = 48;
      ArrayUtils.get(objectArray0, 48, (Object) "");
      objectArray0[0] = (Object) "";
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      intArray0[1] = 48;
      intArray0[2] = 48;
      intArray0[3] = 48;
      int int1 = (-2953);
      intArray0[4] = (-2953);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 625.701578154;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.indexOf(charArray1, 'n', (-2161));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = ',';
      charArray0[2] = '3';
      charArray0[3] = 'b';
      charArray0[4] = '#';
      charArray0[5] = 's';
      charArray0[6] = 'i';
      charArray0[7] = '0';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(8, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      ArrayUtils.lastIndexOf(charArray0, 'x');
      ArrayUtils.shift(charArray0, 2188);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 52.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      Double double0 = new Double(2015.72263397845);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 2015.72263397845, Double.NaN);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(824.319665);
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = 824.319665;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      ArrayUtils.shuffle(shortArray0);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (int) (short)0, (double) (short)2);
      assertArrayEquals(new double[] {2.0, 0.0, 824.319665, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      char[] charArray0 = new char[11];
      ArrayUtils.shift(charArray0, (-1127));
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.FALSE;
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      Long long0 = new Long((-180L));
      Boolean boolean3 = Boolean.TRUE;
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.toPrimitive((Object) boolean2);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) boolean3;
      ArrayUtils.swap(objectArray0, (-1159), 2411, 1335);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1159), (byte)14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1159, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)127;
      ArrayUtils.add(byteArray0, (int) (byte)0, (byte)127);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (byte)127;
      doubleArray0[3] = (double) (byte) (-85);
      ArrayUtils.indexesOf(doubleArray0, (-632.375889142), 407, (double) (byte)127);
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'i';
      charArray0[2] = 'k';
      charArray0[3] = '`';
      charArray0[4] = '+';
      charArray0[5] = '7';
      charArray0[6] = '/';
      ArrayUtils.shift(charArray0, 391, (int) (byte) (-85), (int) (byte) (-85));
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Character character0 = new Character('I');
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1610.2);
      doubleArray0[1] = 1438.0;
      doubleArray0[2] = (-956.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      ArrayUtils.clone(byteArray0);
      ArrayUtils.indexOf(doubleArray0, (-956.0), (int) (byte) (-117), (-1610.2));
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Character character0 = Character.valueOf('4');
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) character0, 23);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2039.9639437028);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-5.711724024));
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-2039.9639437028), 844.4);
      bitSet0.andNot(bitSet1);
      int int0 = 810;
      bitSet1.set(87, 87);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      ArrayUtils.removeElement((long[]) null, 1247L);
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2.0F;
      Double double0 = new Double(2015.72263397845);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 2.0F);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 2015.72263397845, Double.NaN);
      assertArrayEquals(new double[] {2015.72263397845, 2015.72263397845}, doubleArray1, 0.01);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      long[] longArray0 = null;
      ArrayUtils.indexOf((long[]) null, 0L, 0);
      Object[] objectArray0 = new Object[5];
      Long long0 = new Long(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2055.2807506);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 0;
      int int0 = 1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1312.01, 1, 1.0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-706);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1603;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1420;
      shortArray0[5] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      MockRandom mockRandom0 = new MockRandom(1L);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '^';
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 56.0;
      doubleArray0[4] = (double) '^';
      doubleArray0[5] = (double) '^';
      doubleArray0[6] = (double) '^';
      doubleArray0[7] = (double) 234L;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {1.0, 1.0, 56.0, 94.0, 94.0, 94.0, 234.0, 94.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-850), (-850));
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse(doubleArray1);
      MockRandom mockRandom0 = new MockRandom(1407L);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1357), (-850));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)51;
      doubleArray0[1] = (double) (byte)51;
      ArrayUtils.shift(doubleArray0, 287);
      assertArrayEquals(new double[] {51.0, 51.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-926.59113863429);
      doubleArray0[1] = (-2698.6886861);
      doubleArray0[2] = (-1797.39);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 4350.574598481;
      doubleArray0[5] = (-3950.124565928611);
      doubleArray0[6] = 1000.226;
      doubleArray0[7] = (-2231.401838591);
      doubleArray0[8] = 0.0;
      MockRandom mockRandom0 = new MockRandom(2284L);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-2698.6886861), (-1797.39), (-1.0), 4350.574598481, (-3950.124565928611), 1000.226, (-2231.401838591), 0.0, (-926.59113863429)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = Integer.MAX_VALUE;
      char[] charArray0 = new char[1];
      ArrayUtils.reverse(charArray0, Integer.MAX_VALUE, 0);
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MAX_VALUE, 4);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) '6';
      longArray0[2] = (long) '6';
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) '6';
      longArray0[6] = (long) 4;
      longArray0[7] = (long) 4;
      longArray0[8] = (-1549L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 773;
      intArray0[1] = (-1);
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = 608;
      intArray0[4] = (-613);
      int int1 = 100;
      intArray0[5] = 100;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 100, 3910);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray1, (-1), (-2436));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1167), (-1502));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1167, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      charArray0[2] = '4';
      charArray0[3] = '&';
      charArray0[4] = 'K';
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '4';
      characterArray0[1] = (Character) 'm';
      characterArray0[2] = (Character) '4';
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (char)characterArray0[1];
      floatArray0[1] = (float) '4';
      floatArray0[2] = (float) '4';
      floatArray0[3] = (float) 'm';
      ArrayUtils.shift(floatArray0, (int) 'K');
      assertArrayEquals(new float[] {52.0F, 52.0F, 109.0F, 109.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[2] = '?';
      charArray0[2] = 'o';
      charArray0[3] = '?';
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'm';
      floatArray0[1] = (float) 'o';
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (float) 'o';
      floatArray0[4] = (float) '?';
      floatArray0[5] = (float) 'o';
      floatArray0[6] = (float) '?';
      floatArray0[7] = (float) 'm';
      floatArray0[8] = (float) 'o';
      ArrayUtils.shift(floatArray0, (-4145));
      assertArrayEquals(new float[] {111.0F, 63.0F, 109.0F, 111.0F, 109.0F, 111.0F, 111.0F, 111.0F, 63.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.shift((float[]) null, 588);
      ArrayUtils.indexOf((float[]) null, (-139.0F));
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.7;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.7);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      Long long0 = new Long((byte)58);
      Long long1 = new Long((-3527L));
      Long long2 = new Long(2660L);
      Long long3 = new Long((byte)0);
      Long long4 = new Long((-3527L));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)51;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, (int) (byte)51);
      assertArrayEquals(new float[] {51.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2331);
      intArray0[1] = (-1038);
      intArray0[2] = 2146617727;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146617727, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-449);
      floatArray0[1] = (float) (-449);
      floatArray0[2] = (float) (-449);
      ArrayUtils.shift(floatArray0, (-2152), (-449), 97);
      ArrayUtils.removeElement(floatArray0, (-850.90497F));
      ArrayUtils.shift((long[]) null, 266, 97, (-2152));
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-2152));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2152, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1430;
      intArray0[1] = 1430;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {1430, 1430}, intArray0);
      
      float[] floatArray0 = new float[8];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 1430);
      assertArrayEquals(new long[] {1430L}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.FALSE;
      Boolean boolean2 = new Boolean("af}pmju-kq$uPQy!8");
      Long long0 = new Long((-199L));
      Boolean boolean3 = Boolean.TRUE;
      Object object0 = new Object();
      float[] floatArray0 = new float[5];
      floatArray0[3] = (-773.0F);
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-773.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean4 = ArrayUtils.contains(booleanArray0, false);
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      
      boolean boolean5 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-4437.8926F));
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 778;
      intArray0[4] = 0;
      intArray0[5] = 962;
      intArray0[6] = 0;
      intArray0[7] = 1430;
      intArray0[8] = 0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), 0, 778, 0, 962, 0, 1430, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 962;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1430;
      floatArray0[5] = (float) 962;
      floatArray0[6] = (float) 962;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      ArrayUtils.shift(floatArray0, 101);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 962.0F, (-1.0F), 0.0F, 1430.0F, 962.0F, 962.0F}, floatArray0, 0.01F);
  }
}
