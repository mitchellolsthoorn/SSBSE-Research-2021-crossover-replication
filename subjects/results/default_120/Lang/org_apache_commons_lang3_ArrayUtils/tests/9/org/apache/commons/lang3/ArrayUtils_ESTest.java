/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:38:35 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-16);
      longArray0[1] = 1L;
      long[] longArray1 = ArrayUtils.insert((-16), longArray0, (long[]) null);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-16L), 1L}, longArray0);
      assertArrayEquals(new long[] {(-16L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)368;
      shortArray0[1] = (short)194;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1062;
      shortArray0[4] = (short) (-7);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)90;
      shortArray0[7] = (short)1904;
      shortArray0[8] = (short) (-20724);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)194);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)368, (short)194, (short)1, (short)1062, (short) (-7), (short) (-1), (short)90, (short)1904, (short) (-20724)}, shortArray0);
      assertArrayEquals(new short[] {(short)368, (short)194, (short)1, (short)1062, (short) (-7), (short) (-1), (short)90, (short)1904, (short) (-20724), (short)194}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1262);
      floatArray0[1] = (float) (short) (-1262);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1262.0F), (-1262.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1262.0F), (-1262.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[8];
      MutableInt mutableInt0 = new MutableInt((int) (short) (-1262));
      assertEquals((-1262L), mutableInt0.longValue());
      assertEquals("-1262", mutableInt0.toString());
      assertEquals((short) (-1262), mutableInt0.shortValue());
      assertEquals((-1262), mutableInt0.intValue());
      assertEquals((-1262.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)18, mutableInt0.byteValue());
      assertEquals((-1262), (int)mutableInt0.getValue());
      assertEquals((-1262.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1262), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1005.0F, (int) (short) (-1262));
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1262.0F), (-1262.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      
      MutableInt mutableInt1 = new MutableInt((Number) (-1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals("-1", mutableInt1.toString());
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((-1262.0F));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertEquals((-1262.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-1262), mutableInt2.intValue());
      assertEquals("-1262", mutableInt2.toString());
      assertEquals((short) (-1262), mutableInt2.shortValue());
      assertEquals((-1262L), mutableInt2.longValue());
      assertEquals((-1262), (int)mutableInt2.toInteger());
      assertEquals((-1262.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((byte)18, mutableInt2.byteValue());
      assertEquals((-1262), (int)mutableInt2.getValue());
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt((int) (short) (-1262));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertEquals((-1262.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((-1262), (int)mutableInt3.getValue());
      assertEquals((-1262), (int)mutableInt3.toInteger());
      assertEquals((byte)18, mutableInt3.byteValue());
      assertEquals("-1262", mutableInt3.toString());
      assertEquals((short) (-1262), mutableInt3.shortValue());
      assertEquals((-1262L), mutableInt3.longValue());
      assertEquals((-1262.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-1262), mutableInt3.intValue());
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(1);
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertEquals(1, (int)mutableInt4.getValue());
      assertEquals(1.0, mutableInt4.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt4.shortValue());
      assertEquals(1.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(1L, mutableInt4.longValue());
      assertEquals("1", mutableInt4.toString());
      assertEquals(1, mutableInt4.intValue());
      assertEquals(1, (int)mutableInt4.toInteger());
      assertEquals((byte)1, mutableInt4.byteValue());
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(mutableInt1);
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertTrue(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short) (-1), mutableInt5.shortValue());
      assertEquals((byte) (-1), mutableInt5.byteValue());
      assertEquals((-1.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt5.toInteger());
      assertEquals((-1), (int)mutableInt5.getValue());
      assertEquals((-1L), mutableInt5.longValue());
      assertEquals("-1", mutableInt5.toString());
      assertEquals((-1), mutableInt5.intValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals("-1", mutableInt1.toString());
      assertNotNull(mutableInt5);
      
      int int1 = mutableInt4.incrementAndGet();
      assertEquals(2, int1);
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt5));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(int1 == int0);
      assertEquals(2, (int)mutableInt4.getValue());
      assertEquals(2.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(2.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals((short)2, mutableInt4.shortValue());
      assertEquals(2L, mutableInt4.longValue());
      assertEquals("2", mutableInt4.toString());
      assertEquals(2, mutableInt4.intValue());
      assertEquals(2, (int)mutableInt4.toInteger());
      assertEquals((byte)2, mutableInt4.byteValue());
      assertNotSame(mutableInt4, mutableInt0);
      assertNotSame(mutableInt4, mutableInt5);
      assertNotSame(mutableInt4, mutableInt1);
      assertNotSame(mutableInt4, mutableInt2);
      assertNotSame(mutableInt4, mutableInt3);
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt((-119));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertEquals((-119L), mutableInt6.longValue());
      assertEquals((-119.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((byte) (-119), mutableInt6.byteValue());
      assertEquals("-119", mutableInt6.toString());
      assertEquals((-119), (int)mutableInt6.toInteger());
      assertEquals((-119), (int)mutableInt6.getValue());
      assertEquals((-119.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((short) (-119), mutableInt6.shortValue());
      assertEquals((-119), mutableInt6.intValue());
      assertNotNull(mutableInt6);
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt mutableInt7 = new MutableInt((-119));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertTrue(mutableInt7.equals((Object)mutableInt6));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertEquals((-119.0), mutableInt7.doubleValue(), 0.01);
      assertEquals((short) (-119), mutableInt7.shortValue());
      assertEquals((-119.0F), mutableInt7.floatValue(), 0.01F);
      assertEquals((-119L), mutableInt7.longValue());
      assertEquals((-119), mutableInt7.intValue());
      assertEquals((-119), (int)mutableInt7.toInteger());
      assertEquals((byte) (-119), mutableInt7.byteValue());
      assertEquals("-119", mutableInt7.toString());
      assertEquals((-119), (int)mutableInt7.getValue());
      assertNotNull(mutableInt7);
      
      mutableIntArray0[7] = mutableInt7;
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(org.apache.commons.lang3.mutable.MutableInt.class) , any(org.apache.commons.lang3.mutable.MutableInt.class));
      boolean boolean1 = ArrayUtils.isSorted(mutableIntArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(8, mutableIntArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-2649.1631212467883), (double) (short)0);
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockRandom0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0;
      objectArray0[5] = (Object) 0.0;
      objectArray0[6] = (Object) 0.0;
      objectArray0[7] = (Object) 0.0;
      objectArray0[8] = (Object) 0;
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) long0);
      assertFalse(boolean0);
      assertEquals(9, objectArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-815), 3376);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '@';
      charArray0[2] = 'v';
      charArray0[3] = 'x';
      charArray0[4] = 'a';
      charArray0[5] = '~';
      charArray0[6] = ';';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new char[] {'@', 'v', 'x', 'a', '~', ';'}, charArray1);
      assertArrayEquals(new char[] {'X', '@', 'v', 'x', 'a', '~', ';'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = (-1);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-1));
      assertEquals(9, objectArray0.length);
      assertNull(object1);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(9, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-1));
      assertEquals(9, objectArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1912);
      assertEquals(1912, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      long long0 = (-536L);
      Long long1 = new Long((-536L));
      assertEquals((-536L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Object[]) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "java.lang.Boolean";
      stringArray0[2] = "";
      stringArray0[3] = "Locale must not be null";
      stringArray0[4] = "gq!FB+q+";
      stringArray0[5] = "java.lang.Class";
      stringArray0[6] = "m/]QbM/{s%;)s~_z";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-1158.3379F));
      assertEquals(6, floatArray0.length);
      assertEquals(13, floatArray2.length);
      assertEquals(12, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(13, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertEquals(12, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1158.3379F)}, floatArray3, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotNull(floatArray3);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.swap(floatArray3, 1499, (-23), 58);
      assertEquals(6, floatArray0.length);
      assertEquals(13, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertEquals(12, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1158.3379F)}, floatArray3, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1586);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1072, 2145950769);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short) (-1586)}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, (-762));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 3);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-762);
      doubleArray0[1] = (double) 2145950769;
      doubleArray0[2] = (double) (short) (-1586);
      doubleArray0[3] = (double) (short) (-1586);
      doubleArray0[4] = (double) (short)1072;
      doubleArray0[5] = (double) (short)7;
      doubleArray0[6] = (double) (short)7;
      doubleArray0[7] = (double) (short)7;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1171.518));
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-762.0), 2.145950769E9, (-1586.0), (-1586.0), 1072.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1171.518), (-762.0), 2.145950769E9, (-1586.0), (-1586.0), 1072.0, 7.0, 7.0, 7.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(class0, boolean0);
      assertFalse(boolean1);
      assertSame(class0, class1);
      assertSame(class0, class2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-1586);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (int) (short)7);
      assertEquals(5, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-1586), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      MutableInt mutableInt0 = new MutableInt((-1586.0));
      assertEquals((short) (-1586), mutableInt0.shortValue());
      assertEquals((-1586), (int)mutableInt0.getValue());
      assertEquals((-1586), (int)mutableInt0.toInteger());
      assertEquals((byte) (-50), mutableInt0.byteValue());
      assertEquals((-1586), mutableInt0.intValue());
      assertEquals((-1586.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1586.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1586", mutableInt0.toString());
      assertEquals((-1586L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) classArray0, (Object) mutableInt0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.lang3.mutable.MutableInt
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-2649.16312125), (double) (short)0);
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      int int0 = new Short((short)0);
      assertEquals((short)0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'E', 0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = 1414.37775;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1850.99813));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 119.0, 1414.37775}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 'w';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 119L}, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, (-1), 0, 0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 119L}, longArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertEquals(0, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 119L}, longArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertArrayEquals(new char[] {'w', 'w', 'w', 'w', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((short) (-1256));
      assertEquals((short) (-1256), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-1256), (short)short1);
      assertEquals(9, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short) (-1256), (short)short2);
      assertEquals(9, shortArray0.length);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1256));
      assertEquals((short) (-1256), (short)short3);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1805));
      assertEquals((short) (-1805), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1805));
      assertEquals((short) (-1805), (short)short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) (-2089));
      assertEquals((short) (-2089), (short)short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short)1433);
      assertEquals((short)1433, (short)short7);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short6));
      assertNotNull(short7);
      
      shortArray0[7] = short7;
      Short short8 = new Short((short)1779);
      assertEquals((short)1779, (short)short8);
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short0));
      assertNotNull(short8);
      
      shortArray0[8] = short8;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(shortArray0, 172);
      assertFalse(boolean1);
      assertEquals(9, shortArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(4555.984);
      assertEquals(4555.984, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 172;
      intArray0[2] = 172;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-62);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)56);
      assertEquals(4, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte) (-26), (byte) (-62)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)15, (byte)56, (byte)56, (byte)56, (byte)15, (byte) (-26), (byte) (-62)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-26);
      longArray0[1] = (long) (byte)56;
      longArray0[2] = (long) (byte)15;
      longArray0[3] = (long) (byte)101;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 172;
      longArray0[6] = (long) (byte)56;
      ArrayUtils.shuffle(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {56L, 15L, 101L, 2L, 172L, 56L, (-26L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {10, 172, 172, 0, 0}, intArray0);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 101L;
      Long long0 = new Long((byte)15);
      assertEquals(15L, (long)long0);
      assertNotNull(long0);
      
      longArray1[1] = long0;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1000;
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1;
      shortArray1[1] = (short)1000;
      shortArray1[2] = (short)1000;
      shortArray1[3] = (short)1000;
      shortArray1[4] = (short)1000;
      shortArray1[5] = (short)1000;
      shortArray1[6] = (short)1;
      short[] shortArray2 = ArrayUtils.insert(0, shortArray0, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertArrayEquals(new short[] {(short)1, (short)1000}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1000, (short)1000, (short)1000, (short)1000, (short)1000, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1000, (short)1000, (short)1000, (short)1000, (short)1000, (short)1, (short)1, (short)1000}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-951));
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)1000, (short)1000, (short)1000, (short)1000, (short)1000, (short)1}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1000;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1000;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)1000;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1421.6087992098935);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1000.0, 1.0, 1000.0, 0.0, 1000.0, 1421.6087992098935}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1000.0, 1.0, 1000.0, 0.0, 1000.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = (short)360;
      Short short1 = new Short((short)360);
      assertEquals((short)360, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) ';';
      longArray0[1] = (long) (short)1284;
      longArray0[2] = (long) ';';
      longArray0[3] = (-75L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1284, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1284, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-2649.1631212467883), (double) (short)0);
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = 8.005477462;
      doubleArray0[3] = (-3178.159431490309);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)0;
      doubleArray1[1] = 8.005477462;
      doubleArray1[2] = (double) (short)0;
      double[] doubleArray2 = ArrayUtils.insert(0, doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 8.005477462, (-3178.159431490309)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 8.005477462, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 8.005477462, 0.0, 0.0, 0.0, 8.005477462, (-3178.159431490309)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 39);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)100;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(11L);
      assertEquals(11L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) long0);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)100;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-2475.16F);
      floatArray0[3] = (float) (-1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (short)100;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 100.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1398, (-1));
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 100.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      int int2 = ArrayUtils.indexOf(doubleArray2, (double) (-2475.16F), (-1), (double) (-2475.16F));
      assertEquals((-1), int2);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 1.0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1271);
      intArray0[1] = 0;
      intArray0[2] = (-1271);
      intArray0[3] = (-1271);
      intArray0[4] = 1774;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-1271);
      intArray1[2] = 1774;
      intArray1[3] = (-1271);
      intArray1[4] = 0;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(1, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1271)}, intArray2);
      assertArrayEquals(new int[] {(-1271), 0, (-1271), (-1271), 1774}, intArray0);
      assertArrayEquals(new int[] {0, (-1271), 1774, (-1271), 0}, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
      
      ArrayUtils.shift(intArray1, (-786));
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1271), 1774, (-1271), 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-786);
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, (-786L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-786L), 0L, (-786L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      try { 
        Integer.valueOf((String) null, (-2146162931));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = 1;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1271);
      intArray0[3] = 1;
      intArray0[5] = 1;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1, 1, (-1271), 1, 0, 1}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      ArrayUtils.shift(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1, 1, (-1271), 1, 0, 1}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1271);
      longArray0[5] = (long) 1;
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertArrayEquals(new long[] {1L, 1L, 1L, 0L, (-1271L), 1L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1271);
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) (-1271);
      integerArray0[3] = (Integer) (-1271);
      integerArray0[4] = (Integer) 1;
      integerArray0[5] = (Integer) 0;
      try { 
        Integer.valueOf((String) null, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(0, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Boolean boolean0 = Boolean.valueOf("java.lang.Boolean");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      
      char[] charArray1 = ArrayUtils.add((char[]) null, 0, 'i');
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'i'}, charArray1);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (-2147483646), 1815, 82);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, 0);
      assertNull(intArray1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, 1.0F);
      assertNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, '}', (-1490));
      assertEquals((-1), int0);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'i'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer integer0 = new Integer(2146940120);
      assertEquals(2146940120, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) integer0);
      assertEquals(0, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (-1363L));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'K';
      charArray0[2] = '_';
      charArray0[3] = 'W';
      charArray0[4] = 'g';
      charArray0[5] = 'm';
      charArray0[6] = 'J';
      char[] charArray1 = ArrayUtils.add(charArray0, '_');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'k', 'K', '_', 'W', 'g', 'm', 'J'}, charArray0);
      assertArrayEquals(new char[] {'k', 'K', '_', 'W', 'g', 'm', 'J', '_'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      ArrayUtils.swap((boolean[]) null, (-1), 451, (-1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(0, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-62);
      ArrayUtils.shift(byteArray0, (-2134));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-62), (byte) (-1)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-62), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'v', (-656));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-26);
      shortArray0[1] = (short) (-26);
      shortArray0[2] = (short) (-26);
      shortArray0[3] = (short) (-26);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-26), (short) (-26), (short) (-26), (short) (-26)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-26), 1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-26), (short) (-26), (short) (-26), (short) (-26)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      char[] charArray1 = new char[5];
      charArray1[0] = '#';
      charArray1[1] = 'X';
      charArray1[2] = 'e';
      charArray1[3] = 'O';
      charArray1[4] = 'X';
      char[] charArray2 = ArrayUtils.addAll((char[]) null, charArray1);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'#', 'X', 'e', 'O', 'X'}, charArray2);
      assertArrayEquals(new char[] {'#', 'X', 'e', 'O', 'X'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((char[]) null, 'F', (int) (short) (-26));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      ArrayUtils.shift(longArray0, 2, (-2251), 1026);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 37;
      intArray0[1] = (-2756);
      intArray0[2] = 2209;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 88);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {37, (-2756), 2209}, intArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-3696);
      intArray0[2] = 1967;
      ArrayUtils.swap(intArray0, (-3696), (-2674));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-3696), 1967}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Float float0 = new Float((double) 1967);
      assertEquals(1967.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (-3696));
      assertEquals((-3696.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[1];
      Float float2 = new Float((float) (-3696));
      assertEquals((-3696.0F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[0] = float2;
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.swap(intArray0, 1967, 1117, (-2207));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-3696), 1967}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (-1132.3081979123076));
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'G';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'w', 'w', 'w', 'w', 'G'}, charArray0);
      
      ArrayUtils.shift((byte[]) null, 2, (int) (byte)32, (int) (byte) (-15));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-102);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-15));
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-15), (byte)32, (byte) (-102)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)32, (byte) (-102)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'w';
      intArray0[1] = (int) 'w';
      intArray0[2] = (int) (byte) (-60);
      intArray0[3] = (int) (byte) (-15);
      intArray0[4] = 675;
      intArray0[5] = (int) 'w';
      intArray0[6] = 2;
      intArray0[7] = (int) 'w';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-60), 7);
      assertEquals(2, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {119, 119, (-60), (-15), 675, 119, 2, 119}, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)3379);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      ArrayUtils.shift(longArray0, (int) (short)0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray3.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray3);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotNull(charArray3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 0L;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 4180);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 3259L;
      longArray1[1] = (long) (short)1;
      longArray1[2] = (long) 4180;
      longArray1[3] = (long) 'E';
      longArray1[4] = (long) (short)0;
      int int1 = ArrayUtils.lastIndexOf(longArray1, 0L, 3);
      assertEquals((-1), int1);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {3259L, 1L, 4180L, 69L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1262);
      floatArray0[1] = (float) (short) (-1262);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1262.0F), (-1262.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1262.0F), (-1262.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertArrayEquals(new float[] {(-1262.0F), (-1262.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1262.0F), (-1262.0F), (-1262.0F), (-1262.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)100);
      assertEquals((short)100, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1262));
      assertEquals((short) (-1262), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      Short short3 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-51));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)100, (short) (-1262), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) short2;
      longArray0[1] = (long) (short)100;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (-1476L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 71L);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 100L, (-1L), 0L, (-1L), (-1476L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 100L, (-1L), 0L, (-1L), (-1476L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-695));
      assertEquals(0, int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-695);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1031.885903713);
      doubleArray0[4] = (double) (-695);
      doubleArray0[5] = (double) (-695);
      doubleArray0[6] = (double) (-695);
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) (-695);
      int int1 = ArrayUtils.indexOf(doubleArray0, 1023.282533114, 3, 1023.282533114);
      assertEquals(7, int1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-695.0), 0.0, (-1031.885903713), (-695.0), (-695.0), (-695.0), 0.0, (-695.0)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      Object[] objectArray0 = new Object[8];
      objectArray0[4] = (Object) (byte) (-60);
      objectArray0[1] = (Object) (byte) (-60);
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-60));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(7, int0);
      assertEquals(8, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) '1';
      floatArray0[4] = (float) '1';
      floatArray0[5] = (float) 7;
      ArrayUtils.swap(floatArray0, 144, (int) (byte) (-60), (-102));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 7.0F, 49.0F, 49.0F, 7.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[17];
      shortArray0[0] = (short) (byte) (-60);
      shortArray0[1] = (short) (byte) (-60);
      shortArray0[2] = (short) (byte) (-60);
      shortArray0[3] = (short) (byte) (-60);
      shortArray0[4] = (short) (byte) (-60);
      shortArray0[5] = (short) (byte) (-60);
      shortArray0[6] = (short) (-695);
      shortArray0[7] = (short) (byte) (-60);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-60));
      assertEquals(16, shortArray1.length);
      assertEquals(17, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 7.0F, 49.0F, 49.0F, 7.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      objectArray0[2] = (Object) (short) (-60);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-2245), (int) (short) (-2245));
      assertEquals(16, shortArray1.length);
      assertEquals(17, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      
      byte[] byteArray2 = ArrayUtils.removeElements((byte[]) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte)0}, byteArray0);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-803.0);
      doubleArray0[2] = (-1210.72027);
      doubleArray0[3] = (-1928.6883016);
      doubleArray0[4] = 1590.0693295;
      doubleArray0[5] = 57.83298721;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2475.159912109375);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-803.0), (-1210.72027), (-1928.6883016), 1590.0693295, 57.83298721, 0.0, (-2475.159912109375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-803.0), (-1210.72027), (-1928.6883016), 1590.0693295, 57.83298721, 0.0, (-2475.159912109375)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1768L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1768L}, longArray0);
      assertNotNull(longArray0);
      
      Character character0 = Character.valueOf('#');
      assertEquals('#', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('#');
      assertEquals('#', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('g');
      assertEquals('g', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, 770, character2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 770, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = (-6L);
      longArray0[1] = (-6L);
      longArray0[2] = 4L;
      longArray0[3] = 4L;
      longArray0[4] = (-6L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-6L));
      assertTrue(boolean0);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {(-6L), (-6L), 4L, 4L, (-6L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[3] = (byte) (-111);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-111), 2);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117), (byte)0, (byte) (-111)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-111);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "~A=y\";=n");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = ':';
      charArray0[2] = 'A';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)6;
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 264, (int) (short)6);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'H', 'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)6;
      floatArray0[1] = (float) (short)6;
      floatArray0[2] = (float) 'H';
      floatArray0[3] = 3397.344F;
      floatArray0[4] = (float) 'H';
      floatArray0[5] = (float) 'H';
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) 264;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 2);
      assertEquals(8, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {6.0F, 6.0F, 72.0F, 3397.344F, 72.0F, 72.0F, 2.0F, 264.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F, 6.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1414.37775;
      doubleArray0[1] = (double) 'R';
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = (double) 72.0F;
      doubleArray0[5] = (double) 'Q';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (-2141616206));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1414.37775, 82.0, 0.0, 81.0, 72.0, 81.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      ArrayUtils.shift(booleanArray2, 4, (-3856), (-3856));
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'b';
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('b', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 256, 256, (int) char0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (-190.9385560757986);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3856), 4);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {4.0, (-190.9385560757986)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, (-190.9385560757986)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)74, (byte)56, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)74, (byte)56, (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-555);
      shortArray0[2] = (short)322;
      shortArray0[3] = (short)8192;
      shortArray0[4] = (short)1215;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short) (-555), (short)322, (short)8192, (short)1215}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-555), (short)322, (short)8192, (short)1215, (short)2, (short) (-555), (short)322, (short)8192, (short)1215}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      char[] charArray1 = ArrayUtils.add(charArray0, '%');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'v'}, charArray0);
      assertArrayEquals(new char[] {'v', '%'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '%';
      doubleArray0[1] = (double) '%';
      doubleArray0[2] = (double) 'v';
      doubleArray0[3] = (double) (short) (-555);
      doubleArray0[4] = (double) (short) (-555);
      doubleArray0[5] = (double) 'v';
      doubleArray0[6] = (double) (short)8192;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (short) (-555));
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {37.0, 37.0, 118.0, (-555.0), (-555.0), 118.0, 8192.0, (-555.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {37.0, 37.0, 118.0, (-555.0), (-555.0), 118.0, 8192.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {37.0, 37.0, 118.0, (-555.0), (-555.0), 118.0, 8192.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)8192);
      assertEquals(8192, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf((int) (short)8192);
      assertEquals(8192, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2522;
      shortArray0[1] = (short) (-142);
      shortArray0[2] = (short) (-142);
      shortArray0[3] = (short) (-142);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)2522, (short) (-142), (short) (-142), (short) (-142)}, shortArray0);
      
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      ArrayUtils.swap(booleanArray1, (int) (short) (-142), (int) (short) (-142), (-1));
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      char[] charArray1 = ArrayUtils.add(charArray0, 'b');
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'L', 'L', 'b'}, charArray1);
      assertArrayEquals(new char[] {'L', 'L'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      char[] charArray2 = new char[5];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'L';
      charArray2[1] = 'b';
      charArray2[2] = 'b';
      charArray2[3] = 'b';
      charArray2[4] = 'b';
      boolean boolean1 = ArrayUtils.contains(charArray2, 'b');
      assertTrue(boolean1);
      assertEquals(5, charArray2.length);
      assertArrayEquals(new char[] {'L', 'b', 'b', 'b', 'b'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertEquals(6, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray1, true);
      assertEquals(4, booleanArray3.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {';', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', ';'}, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) ';';
      int int0 = ArrayUtils.indexOf(intArray0, 59);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {59, 59}, intArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = Boolean.valueOf("java.lang.Class");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 59;
      longArray0[1] = (long) 59;
      longArray0[2] = (long) 59;
      longArray0[3] = (long) ';';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) ';';
      ArrayUtils.swap(longArray0, 6, 6, 9);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {59L, 59L, 59L, 59L, 0L, 59L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 2922.0396F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-345.58F);
      floatArray0[6] = 1.0F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1040.0F));
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 2922.0396F, 1.0F, (-345.58F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1040.0F), 1.0F, 0.0F, 1.0F, 2922.0396F, 1.0F, (-345.58F), 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 1.0F, 2922.0396F, 1.0F, (-345.58F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1040.0F), 1.0F, 0.0F, 1.0F, 2922.0396F, 1.0F, (-345.58F), 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-803.0);
      doubleArray0[2] = (-1210.72027);
      doubleArray0[3] = (-1928.6883016);
      doubleArray0[4] = 1590.0693295;
      doubleArray0[5] = 57.83298721;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2475.159912109375);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-803.0), (-1210.72027), (-1928.6883016), 1590.0693295, 57.83298721, 0.0, (-2475.159912109375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-803.0), (-1210.72027), (-1928.6883016), 1590.0693295, 57.83298721, 0.0, (-2475.159912109375)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-364.20926F));
      assertEquals((-364.20926F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2536);
      doubleArray0[3] = (double) 0;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.1, 0.0, (-2536.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(floatArray0, 0, Integer.MAX_VALUE, (int) (short)0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) 0.0F);
      assertEquals(4, int0);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.1, 0.0, (-2536.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-7), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-7)}, byteArray0);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) (byte) (-7);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-7);
      floatArray0[4] = (float) (byte) (-7);
      floatArray0[5] = (float) (byte) (-7);
      floatArray0[6] = (float) (byte) (-7);
      floatArray0[7] = (float) (byte) (-7);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte) (-60));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-7);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-7), (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-7)}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-7);
      longArray0[1] = (long) (byte) (-7);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte) (-7);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte) (-7);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-7L), (-7L), 0L, (-7L), 0L, (-7L)}, longArray0);
      assertArrayEquals(new long[] {(-7L), (-7L), (-7L), 0L, (-7L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X'}, charArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2839.8200752835));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      Character character0 = Character.valueOf('X');
      assertEquals('X', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-186), 3051);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (int) (short) (-186));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-186);
      shortArray0[1] = (short) (-12135);
      shortArray0[2] = (short) (-859);
      shortArray0[3] = (short) (-186);
      shortArray0[4] = (short) (-186);
      shortArray0[5] = (short) (-186);
      shortArray0[6] = (short) (-186);
      shortArray0[7] = (short) (-186);
      shortArray0[8] = (short) (-186);
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short)470);
      assertEquals((-1), int2);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-186), (short) (-12135), (short) (-859), (short) (-186), (short) (-186), (short) (-186), (short) (-186), (short) (-186), (short) (-186)}, shortArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 21);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 7, 21);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      float[] floatArray0 = new float[2];
      ArrayUtils.swap(floatArray0, 250, 419);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-46);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap(charArray0, (int) (byte) (-46), (int) (byte) (-128), 160);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)0, 6);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-128);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, (-3457));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-128.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ';', (-3457));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Float[] floatArray1 = new Float[7];
      Float float0 = new Float(0.7);
      assertEquals(0.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      Float float1 = new Float((-3716.1821F));
      assertEquals((-3716.1821F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray1[1] = float1;
      Float float2 = new Float((-1115.90873));
      assertEquals((-1115.9087F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray1[2] = float2;
      Float float3 = Float.valueOf((float) floatArray1[1]);
      assertEquals((-3716.1821F), (float)float3, 0.01F);
      assertEquals(7, floatArray1.length);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray1[3] = float3;
      Float float4 = new Float((-1115.90873));
      assertEquals((-1115.9087F), (float)float4, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      
      floatArray1[4] = float4;
      Float float5 = new Float((-1639.99296));
      assertEquals((-1639.9929F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      
      floatArray1[5] = float5;
      Float float6 = new Float((-1.0));
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      
      floatArray1[6] = float6;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-1611.66F));
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.7F, (-3716.1821F), (-1115.9087F), (-3716.1821F), (-1115.9087F), (-1639.9929F), (-1.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) 'G';
      longArray0[2] = (long) 'G';
      longArray0[3] = (long) 'G';
      longArray0[4] = (long) 'G';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 482L, 4);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, 71L, 71L, 71L, 71L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[9];
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte byte0 = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, (int) (byte)0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      Byte[] byteArray0 = new Byte[7];
      try { 
        Byte.decode("yes");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yes\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Short short0 = new Short((short) (-1715));
      assertEquals((short) (-1715), (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer(160);
      assertEquals(160, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(", Length: ");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, (int) (byte)0, 'k');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (int) (short) (-1715), (int) (byte)0, 10);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-2049));
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '}', 160);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2609L);
      long long0 = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 90L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 90L, 13);
      assertEquals(2, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2609L), 1L, 90L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)360;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)360;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)360;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      shortArray0[0] = (short)360;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)360, (short)2455);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 360, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '.';
      charArray0[2] = 'r';
      charArray0[3] = 'j';
      charArray0[4] = 'a';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'Y', '.', 'r', 'j', 'a'}, charArray0);
      assertArrayEquals(new char[] {'Y', '.', 'r', 'j', 'a', 'Y', '.', 'r', 'j', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2366);
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) '.';
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = (long) 'a';
      longArray0[6] = (long) 'j';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2366), 1341);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2366L), 89L, 46L, (-1L), (-1L), 97L, 106L}, longArray1);
      assertArrayEquals(new long[] {(-2366L), 89L, 46L, (-1L), (-1L), 97L, 106L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), 1341);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'a', (-2146));
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'Y', '.', 'r', 'j', 'a'}, charArray0);
      assertArrayEquals(new char[] {'Y', '.', 'r', 'j', 'a', 'Y', '.', 'r', 'j', 'a'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals("{4, 9}", bitSet0.toString());
      assertEquals(10, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2366L);
      floatArray0[1] = (float) 'Y';
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-2745.4395F), 1967);
      assertEquals((-1), int1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2366.0F), 89.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 36;
      Object[] objectArray0 = new Object[9];
      Object object0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('t');
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('n');
      assertEquals('n', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, 2, 1840700269, 1840700269);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      
      Double double0 = new Double(94.136106883085);
      assertEquals(94.136106883085, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'', ''}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift(doubleArray0, 116, 2, (int) (byte) (-1));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (-2964), (byte) (-106));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2964, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2132;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-1038);
      shortArray0[3] = (short) (-3357);
      shortArray0[4] = (short)81;
      ArrayUtils.reverse(shortArray0, (int) (short)2132, (-1565));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2132, (short)1, (short) (-1038), (short) (-3357), (short)81}, shortArray0);
      
      ArrayUtils.reverse((double[]) null, (int) (short)2132, (-894));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)81;
      longArray0[1] = (long) (-894);
      longArray0[2] = (long) (-1641);
      longArray0[3] = (long) (-894);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {81L, (-894L), (-1641L), (-894L)}, longArray0);
      assertArrayEquals(new long[] {81L, (-894L), (-1641L), (-894L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(116L);
      assertEquals(116L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-218L));
      assertEquals((-218L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(116L);
      assertEquals(116L, (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long1;
      Long long3 = new Long((long) longArray0[2]);
      assertEquals((-218L), (long)long3);
      assertEquals(4, longArray0.length);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {116L, (-218L), (-218L), (-218L)}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-64);
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1055L;
      longArray2[1] = 2831L;
      boolean boolean0 = ArrayUtils.isSorted(longArray2);
      assertTrue(boolean0);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {1055L, 2831L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-131), (int) (byte) (-64));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-64)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(intArray0, (int) (byte) (-64), (int) (short) (-64), 4);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Character character0 = new Character('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ']');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) '8';
      doubleArray0[2] = (double) ']';
      doubleArray0[3] = (double) ']';
      doubleArray0[4] = (double) '8';
      doubleArray0[5] = (double) ']';
      doubleArray0[6] = (double) '8';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 56.0, 93.0, 93.0, 56.0, 93.0, 56.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte2;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)360, object0);
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2636L, 2421);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = boolean0;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-70.1664F));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-70.1664F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 2, 6, 3263);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[1] = "java.lang.Boolean";
      stringArray0[2] = "%Ic7+I\".6'#V0";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[5] = ", Length: 0";
      stringArray0[6] = "Bk1] Ld";
      stringArray0[7] = "java.lang.Class";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SJ";
      stringArray0[1] = "^-\"#";
      stringArray0[2] = "^-\"#";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2731.519F;
      floatArray0[1] = 349.9133F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 2536.1663F;
      floatArray0[4] = 2547.135F;
      floatArray0[5] = 1439.0F;
      floatArray0[6] = 903.34F;
      floatArray0[7] = (-35.4586F);
      floatArray0[8] = 2279.0F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 2731.519F);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2731.519F, 2731.519F, 349.9133F, 1.0F, 2536.1663F, 2547.135F, 1439.0F, 903.34F, (-35.4586F), 2279.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2731.519F, 349.9133F, 1.0F, 2536.1663F, 2547.135F, 1439.0F, 903.34F, (-35.4586F), 2279.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertEquals(10, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2731.519F, 2731.519F, 349.9133F, 1.0F, 2536.1663F, 2547.135F, 1439.0F, 903.34F, (-35.4586F), 2279.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2731.519F, 349.9133F, 1.0F, 2536.1663F, 2547.135F, 1439.0F, 903.34F, (-35.4586F), 2279.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 53, 53, (-6));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-2);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)5, (byte) (-2)}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-2);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-2), (int) (byte) (-1));
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2)}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte) (-2));
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {(-2.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)2);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)5, (byte) (-2), (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)5, (byte) (-2)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, 91.0F, (int) (byte) (-1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Short short0 = new Short((short) (-1715));
      assertEquals((short) (-1715), (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer(160);
      assertEquals(160, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(", Length: ");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, (int) (byte)0, 'k');
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (int) (short) (-1715), (int) (byte)0, 10);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(3, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) (short) (-1715));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      char[] charArray0 = new char[4];
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("MV&I[F%.~S'>Qc=RI");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1216.2053486));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1216.2053486), (-919.37)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 831.7061F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'p', (-365));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-99));
      assertNull(byteArray0);
      
      ArrayUtils.swap(floatArray1, (-1), (-1823), (-2575));
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (-2575));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, 3376);
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0;
      ArrayUtils.shift(intArray0, 3376);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      ArrayUtils.shift((Object[]) null, (-2146368071), 3376, (-2146368071));
      Map<Object, Object> map0 = ArrayUtils.toMap(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (short)0, 1.0);
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1586);
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)7;
      longArray0[1] = (long) (short)7;
      longArray0[2] = 0L;
      longArray0[3] = (long) (short)7;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {7L, 7L, 0L, 7L}, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) (short)7;
      longArray2[1] = (long) (short)7;
      longArray2[2] = (long) (short) (-1586);
      ArrayUtils.shift(longArray2, (-1053), 12, Integer.MAX_VALUE);
      assertEquals(3, longArray2.length);
      assertArrayEquals(new long[] {(-1586L), 7L, 7L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray2);
      assertTrue(boolean0);
      assertEquals(3, longArray2.length);
      assertArrayEquals(new long[] {(-1586L), 7L, 7L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      
      ArrayUtils.reverse(booleanArray0, (int) (short)7, 1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((short)7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      try { 
        Integer.decode("0g'*}E{nvw{R");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"g'*}E{nvw{R\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = (-2609L);
      longArray0[0] = (-2609L);
      long long1 = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 90L;
      int int0 = 2;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 90L, 2);
      assertEquals(2, int1);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2609L), 1L, 90L}, longArray0);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = 'u';
      charArray0[2] = 'V';
      charArray0[3] = 'T';
      charArray0[4] = 's';
      charArray0[5] = 'o';
      charArray0[6] = 't';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'r');
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {',', 'u', 'V', 'T', 's', 'o', 't'}, charArray0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) 't';
      intArray0[2] = 1;
      intArray0[3] = (int) 'r';
      intArray0[4] = (int) 'T';
      intArray0[5] = (int) 'T';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 69);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {111, 116, 1, 114, 84, 84}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 114;
      longArray0[1] = (long) 111;
      longArray0[2] = (long) 'V';
      longArray0[3] = (long) (-1);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {114L, 111L, 86L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {114L, 111L, 86L, (-1L), 114L, 111L, 86L, (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {',', 'u', 'V', 'T', 's', 'o', 't'}, charArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {111, 116, 1, 114, 84, 84}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short) (-1146));
      assertEquals((short) (-1146), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-427));
      assertEquals((short) (-427), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-427));
      assertEquals((short) (-427), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      try { 
        Short.valueOf("Index: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Index: \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[7];
      intArray0[0] = 2146458183;
      intArray0[1] = 76;
      intArray0[2] = 2475;
      intArray0[3] = (-186);
      intArray0[4] = 23;
      intArray0[5] = (-2577);
      intArray0[6] = (-1491);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-186));
      assertEquals(3, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2146458183, 76, 2475, (-186), 23, (-2577), (-1491)}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)220;
      shortArray0[1] = (short) (-2245);
      shortArray0[2] = (short) (-721);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1680, (-186));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)220, (short) (-2245), (short) (-721)}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shift((boolean[]) null, 10, 6, 49);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-197);
      shortArray0[1] = (short)126;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1081);
      shortArray0[4] = (short) (-30798);
      shortArray0[5] = (short) (-885);
      shortArray0[6] = (short)5285;
      shortArray0[7] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 49, (short) (-885));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '.';
      charArray0[2] = 'r';
      byte byte0 = (byte)35;
      Byte byte1 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-41));
      assertEquals((byte) (-41), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte3;
      Byte byte5 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[1] = byte5;
      byteArray0[2] = byte4;
      byteArray0[3] = byte2;
      byteArray0[4] = byte3;
      byteArray0[5] = byte2;
      byteArray0[6] = byte3;
      byteArray0[7] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)35);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte) (-57), (byte) (-41), (byte)94, (byte)35, (byte)94, (byte)35, (byte)35}, byteArray1);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte) (-57));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, (int) byte0, 5, (-444));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-919.37);
      doubleArray0[1] = (-919.37);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-919.37), 0.0);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37), (-919.37)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-2014));
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1}, intArray0);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1846;
      shortArray0[1] = (short) (-1848);
      shortArray0[2] = (short)5;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1846, (short) (-1848), (short)5, (short)1846, (short) (-1848), (short)5}, shortArray1);
      assertArrayEquals(new short[] {(short)1846, (short) (-1848), (short)5}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)888;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short)10;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)83;
      longArray0[1] = (long) (short)10;
      longArray0[2] = (long) (short)83;
      longArray0[3] = (long) (short)10;
      longArray0[4] = (long) (short)83;
      longArray0[5] = (long) (short)83;
      longArray0[6] = (long) (short)10;
      longArray0[7] = (long) (short)888;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (short)83);
      assertTrue(boolean0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {83L, 10L, 83L, 10L, 83L, 83L, 10L, 888L}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-111);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 156, 2);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)22, (byte) (-111)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2242));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)888, (short)83, (short)10}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[23];
      intArray0[2] = (int) (byte) (-64);
      intArray0[4] = (int) '1';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = (int) 's';
      intArray1[2] = (int) 's';
      intArray0[15] = (int) (byte) (-64);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(23, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(19, intArray2.length);
      assertArrayEquals(new int[] {0, 115, 115, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift((boolean[]) null, (int) 's', 1184, (int) (byte)0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-64);
      shortArray0[1] = (short) (byte) (-64);
      shortArray0[2] = (short) (-12397);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-64);
      ArrayUtils.swap(shortArray0, (-14), (int) (byte) (-64), 49);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-64), (short) (-64), (short) (-12397), (short)0, (short)0, (short)0, (short) (-64)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray2, 115);
      assertFalse(boolean0);
      assertEquals(23, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(19, intArray2.length);
      assertArrayEquals(new int[] {0, 115, 115, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      int[] intArray3 = ArrayUtils.insert(115, (int[]) null, intArray0);
      assertEquals(23, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNull(intArray3);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) doubleArray1);
      assertTrue(boolean1);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)88;
      ArrayUtils.reverse(byteArray0, 98, 2209);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)115, (byte)118, (byte)67, (byte)88}, byteArray0);
      
      Character character0 = Character.valueOf('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) character0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.insert((int) (byte)88, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Character character1 = Character.valueOf('&');
      assertEquals('&', (char)character1);
      assertNotNull(character1);
      
      ArrayUtils.shift((int[]) null, 776);
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2209;
      ArrayUtils.shift(longArray0, (int) (byte)115, (-794), 776);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2209L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'E'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, (Object) "");
      assertEquals(0, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 698;
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 69;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 645.1937804429498;
      doubleArray0[1] = (double) 69L;
      doubleArray0[2] = (double) (-1191);
      doubleArray0[3] = 46.0;
      doubleArray0[4] = 62.0;
      doubleArray0[5] = (double) 69L;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {645.1937804429498, 69.0, (-1191.0), 46.0, 62.0, 69.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 1.5);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[] floatArray0 = new float[24];
      floatArray0[0] = (-3003.5938F);
      floatArray0[1] = (-1504.4F);
      floatArray0[2] = 1645.69F;
      floatArray0[3] = 0.0F;
      floatArray0[5] = 0.0F;
      ArrayUtils.reverse(floatArray0, 812, 1524);
      assertEquals(24, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) boolean0, 1524);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) boolean0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 1524);
      assertEquals(24, floatArray0.length);
      assertEquals(24, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) boolean0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1524;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)100;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(11L);
      assertEquals(11L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) long0);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)100;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-2475.16F);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (short)100;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (short)100;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 100.0F);
      assertEquals(1, int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 100.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1398, 1);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 100.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1188.065636;
      int int2 = ArrayUtils.indexOf(doubleArray2, (double) (-2475.16F), 82, (double) (-2475.16F));
      assertEquals((-1), int2);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1188.065636}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-346);
      shortArray0[2] = (short) (-1395);
      shortArray0[3] = (short) (-1151);
      shortArray0[4] = (short) (-5442);
      shortArray0[5] = (short)16799;
      shortArray0[6] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-346), (short) (-1395), (short) (-1151), (short) (-5442), (short)16799, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(0, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-2575);
      longArray0[7] = (long) (-2575);
      longArray0[8] = 88L;
      ArrayUtils.swap(longArray0, (-2329), 0, 12);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-2575L), (-2575L), 88L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'G';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'w', 'w', 'w', 'w', 'G'}, charArray0);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)119, 2124910897, (-392));
      assertEquals(20, byteArray0.length);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-15));
      assertEquals(20, byteArray0.length);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-1922.7));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1922.7)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, objectArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertSame(longArray1, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)97;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)246);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)97}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)97}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-417);
      longArray0[1] = (long) (short)246;
      longArray0[2] = (long) (short)97;
      longArray0[3] = (long) (short)97;
      longArray0[4] = (long) (short)97;
      ArrayUtils.shift(longArray0, (int) (short)0, (int) (short)0, (int) (short)97);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-417L), 246L, 97L, 97L, 97L}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)116;
      ArrayUtils.swap(byteArray0, (-4453), (-44), 3179);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte)116}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1586);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1586));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1586)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (-4191);
      shortArray0[2] = (short)1554;
      shortArray0[3] = (short) (-761);
      shortArray0[4] = (short)1673;
      shortArray0[5] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1955);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-4191), (short)1554, (short) (-761), (short)1673, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)1955, (short)0, (short) (-4191), (short)1554, (short) (-761), (short)1673, (short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1955;
      doubleArray0[1] = (double) (short)1554;
      doubleArray0[2] = (double) (short) (-4191);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-4191);
      doubleArray0[5] = (double) (-1586);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1955.0, 1554.0, (-4191.0), (-1.0), (-4191.0), (-1586.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)32, (int) (short)32);
      assertEquals((-1), int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-4191), (short)1554, (short) (-761), (short)1673, (short) (-1)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) (-4191.0);
      doubleArray1[1] = (Double) (-4191.0);
      Double double0 = new Double((-1586));
      assertEquals((-1586.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) (-1586.0);
      doubleArray1[4] = (Double) (-4191.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 3599.1159528);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-4191.0), (-4191.0), (-1586.0), (-1586.0), (-4191.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)32;
      ArrayUtils.reverse(byteArray0, 2649, (int) (short) (-1));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte) (-96), (byte)19, (byte) (-1), (byte)21, (byte)32}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int[] intArray0 = new int[23];
      intArray0[2] = (int) (byte) (-64);
      intArray0[4] = (int) '1';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = (int) 's';
      intArray1[2] = (int) 's';
      intArray0[15] = (int) (byte) (-64);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(23, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(19, intArray2.length);
      assertArrayEquals(new int[] {0, 115, 115, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift((boolean[]) null, (int) 's', 1184, (int) (byte)0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-64);
      shortArray0[1] = (short) (byte) (-64);
      shortArray0[2] = (short) (-12397);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-64);
      ArrayUtils.swap(shortArray0, (-14), (int) (byte) (-64), 49);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-64), (short) (-64), (short) (-12397), (short)0, (short)0, (short)0, (short) (-64)}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Index: ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-64));
      assertEquals(6, int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-64), (short) (-64), (short) (-12397), (short)0, (short)0, (short)0, (short) (-64)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[1] = booleanArray0[0];
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[4] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[5] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'X';
      floatArray0[1] = (float) 'X';
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {88.0F, 88.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {88.0F, 88.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((long[]) null, 0, (-2575), 0);
      ArrayUtils.shuffle(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'X'}, charArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2044;
      shortArray0[1] = (short) (-1543);
      shortArray0[2] = (short) (-59);
      shortArray0[3] = (short)152;
      shortArray0[4] = (short) (-391);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)2044, (short) (-1543), (short) (-59), (short)152, (short) (-391)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Integer integer0 = new Integer((int) character0);
      assertEquals(39, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {39, 39}, intArray0);
      assertNotNull(intArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("b)%75");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short) (-1262);
      shortArray0[2] = (short) (-3101);
      shortArray0[3] = (short)1;
      boolean boolean3 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean3);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)3, (short) (-1262), (short) (-3101), (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (char)character0;
      floatArray0[1] = (float) (char)character0;
      floatArray0[2] = (float) (int)integerArray0[1];
      floatArray0[3] = 39.0F;
      floatArray0[4] = (float) (short) (-1262);
      floatArray0[5] = (float) (char)character0;
      floatArray0[6] = (float) '\'';
      floatArray0[7] = (float) (short)3;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {39.0F, 39.0F, 39.0F, 39.0F, (-1262.0F), 39.0F, 39.0F, 3.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {39.0F, 39.0F, 39.0F, 39.0F, (-1262.0F), 39.0F, 39.0F, 3.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1455);
      assertEquals(5, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, true}, booleanArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = '{';
      ArrayUtils.swap(charArray0, 2063, 2063, 3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'c', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-269);
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      ArrayUtils.swap(charArray0, 3683, (-482), 10);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray1, (-448), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -448, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2107715431), (-773));
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'.', '.', '?'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '.';
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 3130, (-2117), 3130);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray0, (long) (-2107715431));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1922.7);
      doubleArray0[1] = 3599.1159528;
      doubleArray0[2] = 2.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3599.1159528, (-1922.7));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1922.7), 3599.1159528, 2.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-55);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[] floatArray0 = new float[24];
      floatArray0[0] = (-3003.5938F);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      ArrayUtils.shift(longArray0, (-682));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '4';
      charArray0[2] = 'C';
      charArray0[3] = '|';
      charArray0[4] = 'G';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'i', '4', 'C', '|', 'G'}, charArray1);
      assertArrayEquals(new char[] {'i', '4', 'C', '|', 'G'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 73, 725, (-2146368071));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 179);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[1] = booleanArray0[0];
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[4] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[5] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'X';
      floatArray0[1] = (float) 'X';
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {88.0F, 88.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {88.0F, 88.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((long[]) null, 0, (-2575), 0);
      int int1 = ArrayUtils.indexOf((long[]) null, (long) (-2575), 1990);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, 3376);
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0;
      ArrayUtils.shift(intArray0, 3376);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      ArrayUtils.shift((Object[]) null, (-2146368071), 3376, (-2146368071));
      Map<Object, Object> map0 = ArrayUtils.toMap(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 110);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 5.0, (int) (short)0, 1.0);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)256;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {256.0, 1.0, 1.0, 2.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) false;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 256.0;
      objectArray0[5] = (Object) 256.0;
      objectArray0[6] = (Object) false;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-35));
      assertEquals(0, int0);
      assertEquals(7, objectArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)962, 579, (-5230));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 579;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (int) (short)2;
      intArray1[3] = 1;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(1, intArray2.length);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {579}, intArray2);
      assertArrayEquals(new int[] {0, 579}, intArray0);
      assertArrayEquals(new int[] {0, 0, 2, 1}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      
      ArrayUtils.swap((boolean[]) null, 90, 1612, 15);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (long) 15;
      longArray0[2] = (long) (short)427;
      longArray0[3] = (long) (short)1136;
      longArray0[5] = (long) 1612;
      longArray0[6] = (long) (short)1136;
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)13;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1724), 1612);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)22, (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)13}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1136);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 1, (Object) null);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      MutableInt mutableInt0 = new MutableInt((int) (short)1136);
      assertEquals(1136L, mutableInt0.longValue());
      assertEquals(1136, (int)mutableInt0.getValue());
      assertEquals(1136.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1136, (int)mutableInt0.toInteger());
      assertEquals((byte)112, mutableInt0.byteValue());
      assertEquals(1136.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1136, mutableInt0.intValue());
      assertEquals("1136", mutableInt0.toString());
      assertEquals((short)1136, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[4];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 43, (-4));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1903), (-4));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[3];
      doubleArray0[0] = (double) (short) (-437);
      shortArray0[1] = (short) (-1696);
      shortArray0[2] = (short)2639;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1696), (short)2639}, shortArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1696), (short)2639}, shortArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D&\"z";
      stringArray0[1] = "";
      stringArray0[2] = "%0+%";
      stringArray0[3] = " is not in the range '0' - '9'";
      stringArray0[4] = "";
      stringArray0[5] = "java.lang.Boolean";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(6, stringArray1.length);
      assertEquals(6, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-1696);
      shortArray1[1] = (Short) (short) (-1696);
      boolean boolean3 = ArrayUtils.isArrayIndexValid(shortArray1, (int)  (-437));
      assertFalse(boolean3);
      assertEquals(2, shortArray1.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)2639;
      intArray0[1] = (-4);
      intArray0[2] = (int) (short)2639;
      intArray0[3] = (int) (short) (-1696);
      intArray0[4] = (-1903);
      intArray0[5] = (int) (short) (-1696);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2639, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = 3376;
      long long0 = 1L;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = 1L;
      longArray0[2] = 838L;
      longArray0[3] = (long) 3376;
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 838L;
      longArray1[1] = (long) (byte) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 1L, 838L, 3376L}, longArray0);
      assertArrayEquals(new long[] {838L, (-14L)}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(386, booleanArray0, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 386, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)2;
      ArrayUtils.shift(byteArray0, (int) (byte)18, (-2118397518), (-1728));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)41, (byte) (-29), (byte) (-5), (byte)2}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)41, (byte) (-29), (byte) (-5), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)41, (byte) (-29), (byte) (-5), (byte)2}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)18;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-29);
      intArray0[4] = (int) (byte) (-29);
      intArray0[5] = (int) (byte) (-5);
      intArray0[6] = (int) (byte) (-29);
      intArray0[7] = (int) (byte)18;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-5), 29);
      assertEquals(5, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {18, 0, 0, (-29), (-29), (-5), (-29), 18}, intArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1));
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.clone((int[]) null);
      assertNull(intArray1);
      
      ArrayUtils.shift((int[]) null, 486);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'X';
      doubleArray0[0] = (double) (-2475.16F);
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[4] = short1;
      Short short2 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[5] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)108);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 501.9953);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-2475.159912109375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2475.159912109375)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 100.0F;
      floatArray0[3] = 2536.1663F;
      floatArray0[4] = (float) 0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Uq/U|8^SHn%Vb`C";
      stringArray0[1] = "The String did not match either specified value";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(4, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2536.1663F);
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 100.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 100.0F, 2536.1663F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short) (-2132));
      assertEquals((short) (-2132), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = ArrayUtils.removeAllOccurences((Short[]) null, short0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      char[] charArray0 = new char[4];
      Character character0 = Character.valueOf('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("MV&I[F%.~S'>Qc=RI");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1216.2053486));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1216.2053486), (-919.37)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'Y';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 831.7061F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {89.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {89.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'p', (-365));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-99));
      assertNull(byteArray0);
      
      ArrayUtils.swap(floatArray1, (-1), (-1823), (-2575));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {89.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {89.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1586);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1072, 2145950769);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short) (-1586)}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, (-762));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 3);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-762);
      doubleArray0[1] = (double) 2145950769;
      doubleArray0[2] = (double) (short) (-1586);
      doubleArray0[3] = (double) (short) (-1586);
      doubleArray0[4] = (double) (short)1072;
      doubleArray0[5] = (double) (short)7;
      doubleArray0[6] = (double) (short)7;
      doubleArray0[7] = (double) (short)7;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1171.518));
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-762.0), 2.145950769E9, (-1586.0), (-1586.0), 1072.0, 7.0, 7.0, 7.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1171.518), (-762.0), 2.145950769E9, (-1586.0), (-1586.0), 1072.0, 7.0, 7.0, 7.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(class0, boolean0);
      assertFalse(boolean1);
      assertSame(class0, class2);
      assertSame(class0, class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('t');
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('n');
      assertEquals('n', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)384;
      shortArray0[0] = (short)1;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)384);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)384, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)384, (short)1, (short)384, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.shift(charArray0, (int) (short)0, (-736), (-1648));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertEquals(32, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2231);
      assertEquals(2231, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((short)0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) integer1;
      ArrayUtils.shift(objectArray0, (-2015), 97, 32);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-2015);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 32.0, 0.0, (-2015.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = 'k';
      charArray0[4] = ';';
      charArray0[5] = ';';
      charArray0[6] = ';';
      charArray0[7] = ';';
      charArray0[8] = ';';
      ArrayUtils.shift(charArray0, 0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {';', ';', ';', 'k', ';', ';', ';', ';', ';'}, charArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)747;
      shortArray0[1] = (short)2836;
      shortArray0[2] = (short)1072;
      shortArray0[3] = (short) (-1084);
      shortArray0[4] = (short)65;
      shortArray0[5] = (short)7;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1750;
      shortArray0[8] = (short) (-5011);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)747, (short)2836, (short)1072, (short) (-1084), (short)65, (short)7, (short) (-1), (short)1750, (short) (-5011)}, shortArray1);
      assertArrayEquals(new short[] {(short)747, (short)2836, (short)1072, (short) (-1084), (short)65, (short)7, (short) (-1), (short)1750, (short) (-5011)}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short) (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 383.0F;
      floatArray0[1] = 2922.0396F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 86.0F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[2] = 4L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 4L, (-2117));
      assertEquals((-1), int0);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 4L);
      assertEquals(4.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 4L);
      assertEquals(4.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals(4.0F, (float)float2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-919.37), (-1.0));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals(7, int1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-3603);
      byte byte0 = (byte) (-85);
      Byte byte1 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85)}, byteArray1);
      assertNotNull(byteArray1);
      
      int int2 = ArrayUtils.indexOf(shortArray0, (short)5, (int) (short)2);
      assertEquals(2, int2);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-1), (short)5, (short) (-3603), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) byte0;
      int int3 = ArrayUtils.lastIndexOf(longArray0, 90L, (-2117));
      assertEquals((-1), int3);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-85L)}, longArray0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)119);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-85), (byte) (-85), (byte) (-85), (byte) (-85)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1569);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 300.7491);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {300.7491}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((short[]) null, 0, 18);
      ArrayUtils.reverse(doubleArray0, (-1641), (-1641));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 18;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {18L}, longArray0);
      assertArrayEquals(new long[] {18L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-112);
      Byte byte1 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-112), (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 53, 53, (-6));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)91);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)112, (int) (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean[] booleanArray0 = null;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[2];
      int int0 = 32;
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertEquals(32, (int)integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2231);
      assertEquals(2231, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((short)0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '.';
      charArray0[2] = 'r';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Uq/U|8^SHn%Vb`C";
      stringArray0[1] = "?f:1$|";
      stringArray0[2] = "Locale must not be null";
      stringArray0[3] = "?f:1$|";
      stringArray0[4] = "Y";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)92;
      ArrayUtils.swap(byteArray0, 2, (int) (byte)19, (int) (byte) (-13));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-105), (byte)92, (byte)0, (byte) (-13), (byte) (-19), (byte)19, (byte)92}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-61);
      ArrayUtils.swap(byteArray0, (-621), (int) (byte)117, 2245);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)117, (byte)117, (byte) (-61)}, byteArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)2);
      assertEquals((-1), int1);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (float) (-621));
      assertEquals((-1), int2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = (-392);
      intArray0[1] = 49;
      intArray0[2] = 1022;
      int int0 = ArrayUtils.indexOf(intArray0, 1022);
      assertEquals(2, int0);
      assertEquals(12, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Float float0 = new Float((double) 1022);
      assertEquals(1022.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-392);
      doubleArray0[1] = (double) 1022;
      doubleArray0[2] = (double) 49;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-392.0), 1022.0, 49.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)4, (int) (short)4);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-28);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1022, 2146955751);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)31, (byte) (-28)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-392);
      intArray0[1] = 49;
      intArray0[2] = 1022;
      int int0 = ArrayUtils.indexOf(intArray0, 1022);
      assertEquals(2, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-392), 49, 1022}, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Float float0 = new Float((double) 1022);
      assertEquals(1022.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-392);
      doubleArray0[1] = (double) 1022;
      doubleArray0[2] = (double) 49;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 2);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-392.0), 1022.0, 49.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)4, (int) (short)4);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-28);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1022, 2146955751);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-70), (byte)31, (byte) (-28)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((short)1284);
      assertEquals(1284L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1284L}, longArray1);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1284;
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = 0.1;
      doubleArray0[3] = (double) (short)360;
      doubleArray0[4] = (double) (short)360;
      doubleArray0[5] = (double) (long)longArray0[0];
      doubleArray0[6] = (-883.3492425043149);
      doubleArray0[7] = (double) ';';
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1284L}, longArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 65, 4);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(intArray0, 1814, 1073741824, 1073741824);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)962;
      shortArray0[1] = (short) (-3853);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-3853);
      shortArray0[4] = (short) (-3853);
      shortArray0[5] = (short)962;
      shortArray0[6] = (short)290;
      shortArray0[7] = (short)256;
      shortArray0[8] = (short)972;
      ArrayUtils.shift(shortArray0, (int) (short)256, (int) (short) (-3853), (-895));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)962, (short) (-3853), (short)2, (short) (-3853), (short) (-3853), (short)962, (short)290, (short)256, (short)972}, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap((char[]) null, (int) (short)256, 784, (int) (short) (-3853));
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)290;
      objectArray0[1] = (Object) (short) (-3853);
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) (short) (-3853);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (short) (-3853);
      Long long0 = new Long((short) (-3853));
      assertEquals((-3853L), (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0);
      assertEquals((-1), int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double((-1817.4976009));
      assertEquals((-1817.4976009), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-1817.4976009));
      assertEquals((-1817.4976009), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[4];
      Double double4 = new Double((-1922.7));
      assertEquals((-1922.7), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      doubleArray0[2] = double2;
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-33.94333));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1922.7), (-1.0), (-1817.4976009), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-2740));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long long0 = 116L;
      Long long1 = new Long(116L);
      assertEquals(116L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-218L));
      assertEquals((-218L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(116L);
      assertEquals(116L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertEquals(116L, (long)long4);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {116L, (-218L), 116L, 116L}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-64);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(2935, charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray0, 'o');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      char[] charArray3 = ArrayUtils.clone(charArray1);
      assertEquals(0, charArray3.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray3);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray3);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-64);
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-64));
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-64)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-64), (short) (-64)}, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      ArrayUtils.shift(charArray3, 2852, 2935, 2852);
      assertEquals(0, charArray3.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray3);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray3));
      assertFalse(charArray1.equals((Object)charArray2));
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.7);
      assertEquals(0.7, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3309.3611138727);
      assertEquals(3309.3611138727, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2283.329));
      assertEquals((-2283.329), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      assertEquals((-2283.329), (double)double4, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1370.31889));
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.7, 3309.3611138727, (-2283.329), (-1.0), (-2283.329)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'E';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {69.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 69.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (byte) (-19);
      shortArray0[2] = (short) (byte) (-13);
      shortArray0[4] = (short) (byte) (-19);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-19), (short) (-13), (short)0, (short) (-19), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-19), (short) (-13), (short)0, (short) (-19), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(charArray0, (-1648), (-247), (int) (short) (-19));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1216.2053486));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1216.2053486), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 629;
      floatArray0[1] = (float) 'V';
      floatArray0[2] = (float) 'X';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 4598.0F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {629.0F, 86.0F, 88.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {629.0F, 86.0F, 88.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'p', 629);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse((Object[]) booleanArray0, 629, 0);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)59);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {(short)59}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.shift(doubleArray0, (-515), 0, 1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, (-2275), 0, (-7));
      int[] intArray0 = new int[8];
      intArray0[0] = (-2275);
      intArray0[1] = 43;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 2200;
      intArray0[5] = (-2275);
      intArray0[6] = 2;
      intArray0[7] = 3131;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(16, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2275), 43, 0, 2, 2200, (-2275), 2, 3131}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2275);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 833.0F, (-1899));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2275.0F)}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1161.700059);
      doubleArray0[1] = 1186.47;
      doubleArray0[2] = (-56.0);
      doubleArray0[3] = 2108.39711863396;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 449);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1161.700059), 1186.47, (-56.0), 2108.39711863396, Double.NaN, (-1.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 449;
      intArray0[3] = 449;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      ArrayUtils.shift(intArray0, (-1), 83, (-1));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), 449, 449, (-1), (-1), (-1), (-1), (-1)}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, 100);
      assertNull(intArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1161.700059), 1186.47, (-56.0), 2108.39711863396, Double.NaN, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 449;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 100;
      longArray0[3] = (-1L);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 83;
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 0;
      int int1 = ArrayUtils.indexOf(longArray0, 449L);
      assertEquals(0, int1);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {449L, (-1L), 100L, (-1L), (-1L), 83L, (-1L), 0L}, longArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      int[] intArray0 = new int[8];
      intArray0[1] = (int) ';';
      intArray0[2] = (int) ';';
      intArray0[3] = 2118850532;
      intArray0[4] = 468;
      intArray0[5] = (int) ';';
      intArray0[6] = (int) ';';
      intArray0[7] = (int) ';';
      ArrayUtils.shift(intArray0, (-1897), 59, 2147007804);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {468, 59, 59, 59, 0, 59, 59, 2118850532}, intArray0);
      
      ArrayUtils.shift(intArray0, 98);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {59, 2118850532, 468, 59, 59, 59, 0, 59}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 468;
      doubleArray0[1] = (double) 468;
      doubleArray0[2] = (double) ';';
      doubleArray0[3] = (double) 468;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 59.0, (-2.0));
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {468.0, 468.0, 59.0, 468.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = (Boolean) false;
      int[] intArray0 = new int[4];
      intArray0[0] = 98;
      intArray0[1] = 2484;
      intArray0[2] = 2484;
      ArrayUtils.shift(intArray0, 2484);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {98, 2484, 2484, 0}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 98;
      doubleArray0[1] = (double) 2484;
      doubleArray0[2] = (double) 2484;
      doubleArray0[3] = (double) 2484;
      doubleArray0[4] = (-2.0);
      doubleArray0[5] = (double) (-941);
      doubleArray0[6] = (-2.0);
      doubleArray0[7] = 3339.377;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 2484.0, (double) 2484);
      assertTrue(boolean1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {98.0, 2484.0, 2484.0, 2484.0, (-2.0), (-941.0), (-2.0), 3339.377}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 1, (-26));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet0.and(bitSet1);
      assertEquals(1, booleanArray0.length);
      assertEquals(3, longArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-1670));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) bitSet0;
      objectArray1[1] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(boolean0);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-1670);
      intArray0[6] = (-1670);
      intArray0[7] = (-1670);
      intArray0[8] = 1;
      ArrayUtils.shift(intArray0, (-1670), 2118850532, 468);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 0, 1, 1, (-1670), (-1670), (-1670), 1}, intArray0);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 0, 1, 1, (-1670), (-1670), (-1670), 1}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 1, 0.0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      Object object0 = ArrayUtils.get((Object[]) null, 1488);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)7;
      intArray0[1] = 1488;
      intArray0[2] = (-1670);
      intArray0[3] = (-1);
      intArray0[4] = (-1670);
      intArray0[5] = 1488;
      intArray0[6] = (int) (byte)7;
      ArrayUtils.shift(intArray0, (-2448), (-1670), (-773));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {7, 1488, (-1670), (-1), (-1670), 1488, 7}, intArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-53);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-53), (int) (byte) (-53));
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-53), (byte) (-53), (byte) (-1), (byte) (-53), (byte) (-1), (byte) (-53)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.ArrayUtils");
      assertEquals("9", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-53));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-53), (byte) (-53), (byte) (-1), (byte) (-53), (byte) (-1), (byte) (-53)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 107.0;
      doubleArray0[2] = (double) (byte) (-53);
      doubleArray0[3] = (double) (byte) (-53);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-53);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 107.0, (int) (byte) (-1), (double) (byte) (-1));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5.0, 107.0, (-53.0), (-53.0), (-1.0), (-53.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (byte) (-1));
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5.0, 107.0, (-53.0), (-53.0), (-1.0), (-53.0)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2339));
      assertEquals((short) (-2339), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)2);
      assertEquals((short)2, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1903));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-2339), (short)2}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-28);
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'y'}, charArray0);
      
      ArrayUtils.shift(byteArray0, 1, (int) (byte) (-13), (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-53), (byte) (-13), (byte) (-53), (byte) (-28), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (-2120971503));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte) (-53), (byte) (-13), (byte) (-53), (byte) (-28), (byte)0, (byte)0}, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-13);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (-2120971503);
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte)46;
      longArray0[6] = (long) (byte)46;
      longArray0[7] = (long) (byte)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-13L), 0L, (-2120971503L), 2L, 46L, 46L, 0L}, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte) (-53), (byte) (-13), (byte) (-53), (byte) (-28), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1281.083763454883);
      doubleArray0[1] = (double) 46L;
      doubleArray0[2] = (double) (byte) (-28);
      doubleArray0[3] = (double) 46L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) (byte) (-13);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1281.083763454883), 46.0, (-28.0), 46.0, 0.0, 0.0, 0.0, 0.0, (-13.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      float[] floatArray0 = new float[2];
      ArrayUtils.swap(floatArray0, 274, 419);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-46);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap(charArray0, (int) (byte) (-46), (int) (byte) (-128), 160);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (int) (byte) (-46), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -46, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)100;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(11L);
      assertEquals(11L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) long0);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)100;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-2475.16F);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (short)100;
      ArrayUtils.shift(floatArray0, (-1742), (int) (short)100, (-1742));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2475.16F), (-1.0F), 100.0F, 100.0F, (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (short)100;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1.0F));
      assertEquals(0, int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 100.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1398, 0);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 100.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3376;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-2536);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (-1L);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?f:1$|";
      stringArray0[1] = "Y";
      stringArray0[2] = "The String did not match either specified value";
      stringArray0[3] = "Uq/U|8^SHn%Vb`C";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(8, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3376;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)79);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3376;
      longArray0[1] = (long) (short)79;
      longArray0[2] = (long) (-2536);
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?f:1$|";
      stringArray0[1] = "Y";
      stringArray0[2] = "The String did not match either specified value";
      stringArray0[3] = "Uq/U|8^SHn%Vb`C";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '\'';
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap(charArray0, 0, (-698), 9);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'%', '\''}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-818), (-698), 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (-2102);
      floatArray0[2] = (float) (-2102);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-818);
      floatArray0[5] = (float) '%';
      floatArray0[6] = (float) (-698);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'E'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, (Object) "");
      assertEquals(0, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true, false}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'E';
      intArray0[1] = (int) 'E';
      intArray0[2] = 2;
      intArray0[3] = (int) 'E';
      intArray0[4] = (int) 'E';
      intArray0[5] = 2145873778;
      intArray0[6] = (int) 'E';
      intArray0[7] = (int) 'E';
      intArray0[8] = (int) 'E';
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {69, 69, 2, 69, 69, 2145873778, 69, 69, 69}, intArray0);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-6));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) ';';
      longArray0[1] = 377L;
      longArray0[2] = (long) ';';
      longArray0[3] = (long) ';';
      longArray0[4] = (long) ';';
      longArray0[5] = (long) ';';
      longArray0[6] = (long) ';';
      longArray0[7] = (-1051L);
      longArray0[8] = (long) ';';
      ArrayUtils.swap(longArray0, 4314, 2146618131);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {59L, 377L, 59L, 59L, 59L, 59L, 59L, (-1051L), 59L}, longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 115;
      intArray0[1] = 4314;
      intArray0[2] = 2146618131;
      intArray0[3] = 2146618131;
      intArray0[4] = 2146618131;
      ArrayUtils.reverse(intArray0, (-714), 2146618131);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2146618131, 2146618131, 2146618131, 4314, 115}, intArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long long0 = new Long(116L);
      assertEquals(116L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float(88.0F);
      assertEquals(88.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (-1363L));
      assertEquals((-1363.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) Float.NaN);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-1363L));
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 4L;
      longArray0[3] = 4L;
      longArray0[4] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 4L, 4L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-111);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-111), 2);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)37, (byte)22, (byte) (-111)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)37}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)22;
      shortArray0[1] = (short) (byte)22;
      shortArray0[2] = (short) (byte) (-117);
      shortArray0[3] = (short) (byte)37;
      shortArray0[4] = (short) (byte) (-117);
      shortArray0[5] = (short) (byte)22;
      Float float0 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2.14656627E9F);
      assertEquals(2.14656627E9F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) 4L);
      assertEquals(4.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 0.0F);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, 81, 6232);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      org.evosuite.runtime.Random.setNextRandom(81);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6232;
      doubleArray0[1] = (double) 6232;
      doubleArray0[2] = (double) 6232;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {6232.0, 6232.0, 6232.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, 81);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(booleanArray1, (-2739), 89, (-392));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-392);
      intArray0[1] = 49;
      intArray0[2] = 1022;
      int int0 = ArrayUtils.indexOf(intArray0, 1022);
      assertEquals(2, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-392), 49, 1022}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (float)floatArray0[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 636, 19);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = (Short) (short)0;
      shortArray1[3] = short0;
      shortArray1[4] = (Short) (short)0;
      shortArray1[5] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)9);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-269);
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '_');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short) (-269);
      shortArray1[1] = (Short) (short) (-269);
      shortArray1[2] = (Short) (short) (-269);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-1580));
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-269), (short) (-269), (short) (-269)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(104, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '\u0016';
      short[] shortArray0 = new short[15];
      shortArray0[0] = (short)336;
      shortArray0[1] = (short)336;
      shortArray0[2] = (short) (-1848);
      shortArray0[3] = (short)336;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(15, shortArray0.length);
      assertEquals(30, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)64;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-90), (byte)7, (byte)8, (byte)64}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-919.37), (-1.0));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals(7, int1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-3603);
      shortArray0[4] = (short)1846;
      shortArray0[5] = (short)336;
      shortArray0[6] = (short) (-1397);
      shortArray0[7] = (short) (-1848);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-1), (short)5, (short) (-3603), (short)1846, (short)336, (short) (-1397), (short) (-1848)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 4L;
      longArray0[3] = 4L;
      longArray0[4] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 4L, 4L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      ArrayUtils.swap(longArray0, 383, (-13));
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 4L, 4L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)77);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 4L);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '%';
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Long long0 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long0);
      assertNotNull(long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1L);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2935, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2935, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = true;
      booleanArray1[1] = boolean0;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Byte byte0 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-48));
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)8}, byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte)8}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '5';
      intArray0[1] = (int) (byte)53;
      intArray0[2] = (int) (byte)8;
      intArray0[3] = (int) (byte) (-94);
      intArray0[4] = (int) (byte) (-48);
      intArray0[5] = (int) (byte) (-60);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertEquals((-1), int1);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 53;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '5';
      doubleArray0[3] = (double) (-60);
      doubleArray0[4] = (double) (-60);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 53.0, (-1.0), 53.0, (-60.0), (-60.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {53.0, (-1.0), 53.0, (-60.0), (-60.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(719);
      assertEquals(719, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(101);
      assertEquals(101, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(101);
      assertEquals(101, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(101);
      assertEquals(101, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.getInteger("Array element ", Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 12, (-4));
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1915.1F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-4), (-1903));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {1915.1F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1915.1F;
      doubleArray0[1] = (double) (-4);
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) (-4);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1915.0999755859375, (-4.0), 12.0, 2.147483647E9, (-4.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer4;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 719);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 12, (-2117237399), (-2136517954));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)79;
      Byte byte1 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      byte byte5 = (byte)87;
      Byte byte6 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray0[3] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      
      byteArray0[4] = byte7;
      Byte byte8 = new Byte(byte5);
      assertEquals((byte)87, (byte)byte8);
      assertFalse(byte5 == byte3);
      assertFalse(byte5 == byte0);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertNotNull(byte8);
      
      byteArray0[5] = byte8;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) byte3;
      floatArray0[1] = (float) byte5;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 87.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 2100799220, (int) byte0);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte5);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertEquals(32, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2231);
      assertEquals(2231, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((short)0);
      assertEquals(0, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer3;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.reverse((Object[]) integerArray0, 383, (-3114));
      assertEquals(1, integerArray0.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 377.43735F, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      
      Short short0 = new Short((short)111);
      assertEquals((short)111, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((short)1136);
      assertEquals(1136, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short)111);
      assertEquals(111, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer[] integerArray1 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)427;
      longArray0[1] = (-4076L);
      longArray0[2] = (long) (int)integerArray0[1];
      longArray0[3] = (long) (short)1136;
      longArray0[4] = (long) (short)111;
      longArray0[5] = (long) (short)427;
      longArray0[6] = (long) (short)427;
      ArrayUtils.swap(longArray0, (int) (short)427, (int) integerArray0[2], (int) integerArray0[1]);
      assertEquals(3, integerArray0.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {427L, (-4076L), 111L, 1136L, 111L, 427L, 427L}, longArray0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.45405958165974764, 1488);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The type must not be null";
      stringArray0[1] = "VGi";
      stringArray0[2] = ".YpQx";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 1488, 36);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 36;
      longArray0[1] = (long) 1488;
      longArray0[2] = (long) 1488;
      long[] longArray1 = bitSet0.toLongArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      String[] stringArray2 = ArrayUtils.toStringArray((Object[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      
      ArrayUtils.shift((float[]) null, 1488, 1488, 36);
      boolean boolean0 = ArrayUtils.contains(longArray1, 1598L);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(36);
      assertEquals(36, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Object[]) stringArray1, (Object) integer0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)90);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) (byte) (-60);
      intArray0[2] = (int) (byte) (-60);
      intArray0[3] = (int) (byte)90;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (int) (byte) (-60);
      intArray0[7] = (int) (byte) (-60);
      intArray0[8] = (int) (byte) (-60);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-60), (-364));
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-60), (-60), (-60), 90, Integer.MAX_VALUE, Integer.MAX_VALUE, (-60), (-60), (-60)}, intArray0);
      
      ArrayUtils.reverse(doubleArray0, (-2274), 2505);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 3.0, (-1.0), 100.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-60);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 84.53192F, Integer.MAX_VALUE);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-60.0F)}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = 'v';
      charArray0[2] = 'C';
      charArray0[3] = 'r';
      charArray0[4] = '1';
      charArray0[5] = '\"';
      charArray0[6] = 'n';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'', 'v', 'C', 'r', '1', '\"', 'n'}, charArray0);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '';
      floatArray0[1] = 4.781F;
      floatArray0[2] = (float) 'C';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 4.781F, 1126);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {127.0F, 4.781F, 67.0F}, floatArray0, 0.01F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-14);
      ArrayUtils.shift(intArray0, (int) (byte) (-14));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-14)}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-14.0F)}, floatArray0, 0.01F);
      
      Float float0 = new Float(3085.26F);
      assertEquals(3085.26F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray1 = new Float[7];
      floatArray1[0] = (Float) (-14.0F);
      floatArray1[1] = float0;
      Float float1 = new Float((double) floatArray1[1]);
      assertEquals(3085.26F, (float)float1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray1[2] = float1;
      floatArray1[3] = float0;
      floatArray1[4] = float0;
      floatArray1[5] = float0;
      floatArray1[6] = float0;
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, float2);
      assertEquals(7, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'I';
      charArray0[2] = 's';
      charArray0[3] = 'x';
      charArray0[4] = 'g';
      charArray0[5] = '+';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {'q', 'I', 's', 'x', 'g', '+'}, charArray0);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MutableInt mutableInt0 = new MutableInt((-1834));
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.decrement();
      assertEquals((-1835.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1835.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1835", mutableInt0.toString());
      assertEquals((-1835), mutableInt0.intValue());
      assertEquals((short) (-1835), mutableInt0.shortValue());
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals((-1835), (int)mutableInt0.toInteger());
      assertEquals((-1835L), mutableInt0.longValue());
      assertEquals((-1835), (int)mutableInt0.getValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-1835), int0);
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      
      int int1 = mutableInt0.addAndGet(69);
      assertEquals((-1765), int1);
      assertFalse(int1 == int0);
      assertEquals((-1765), (int)mutableInt0.toInteger());
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1765L), mutableInt0.longValue());
      assertEquals((byte)27, mutableInt0.byteValue());
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765), mutableInt0.intValue());
      assertEquals((short) (-1765), mutableInt0.shortValue());
      
      Object[] objectArray1 = new Object[9];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) mutableInt0;
      objectArray1[1] = (Object) mutableInt0;
      objectArray1[2] = (Object) mutableInt0;
      objectArray1[3] = (Object) mutableInt0;
      objectArray1[4] = (Object) mutableInt0;
      objectArray1[5] = (Object) mutableInt0;
      objectArray1[6] = (Object) mutableInt0;
      objectArray1[8] = (Object) mutableInt0;
      Object object0 = ArrayUtils.get(objectArray1, (-1834));
      assertEquals(9, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNull(object0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals((-1), int2);
      assertEquals(0, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(objectArray0, objectArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1834);
      floatArray0[1] = (float) (-1835);
      floatArray0[2] = (float) (-1765);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1834);
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'b';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'[', 'b'}, charArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1834.0F), (-1835.0F), (-1765.0F), (-1.0F), (-1834.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'b';
      charArray1[1] = 'b';
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, charArray1);
      assertTrue(boolean1);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'b', 'b'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'G';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-15));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-15));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'w';
      longArray0[1] = (long) 'w';
      longArray0[2] = (long) 'w';
      longArray0[3] = (long) 'w';
      long[] longArray1 = ArrayUtils.add(longArray0, 119L);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {119L, 119L, 119L, 119L}, longArray0);
      assertArrayEquals(new long[] {119L, 119L, 119L, 119L, 119L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(20, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 20;
      longArray0[1] = (long) 20;
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short) (-26);
      shortArray0[1] = (short) (-26);
      shortArray0[2] = (short) (-26);
      shortArray0[3] = (short) (-26);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(11, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-26), 725);
      assertEquals(11, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      char[] charArray1 = new char[5];
      charArray1[0] = '#';
      charArray1[1] = 'X';
      charArray1[2] = 'e';
      charArray1[3] = 'O';
      charArray1[4] = 'X';
      char[] charArray2 = ArrayUtils.addAll((char[]) null, charArray1);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'#', 'X', 'e', 'O', 'X'}, charArray2);
      assertArrayEquals(new char[] {'#', 'X', 'e', 'O', 'X'}, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) (-26));
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {20L, 20L, 0L}, longArray0);
      assertArrayEquals(new long[] {20L, 20L, 0L, (-26L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) '#';
      doubleArray0[2] = (double) 'X';
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (short) (-26);
      doubleArray0[5] = (double) 'O';
      doubleArray0[6] = (double) 'X';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertArrayEquals(new double[] {88.0, 35.0, 88.0, 0.0, (-26.0), 79.0, 88.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, (-64L), (-64L), (-64L), (-64L)}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-64);
      intArray0[1] = 2831;
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) (byte) (-64);
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 3642);
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean1);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(intArray0, 962, (-64), 129);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-64), 2831, 71, (-64), 0, 0, 0}, intArray0);
      
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, (-64), 2831, 71, (-64), 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'G';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {71.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray0, (-1687));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {71.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-697);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1930);
      shortArray0[5] = (short) (-14);
      shortArray0[7] = (short) (-597);
      ArrayUtils.shift(shortArray0, 0, (int) (short)0, 2);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)121, (short) (-1), (short) (-1930), (short)0, (short)0, (short) (-14), (short)0, (short) (-597)}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-697);
      doubleArray0[1] = (double) (short) (-14);
      doubleArray0[2] = (-2165.75178888);
      doubleArray0[3] = (double) (-697);
      doubleArray0[4] = (double) (short) (-1930);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short)121;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 818.325, (int) (short) (-14));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-697.0), (-14.0), (-2165.75178888), (-697.0), (-1930.0), (-1.0), 121.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2610.8245F;
      ArrayUtils.shift(floatArray0, (-641));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2610.8245F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2610.8245F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1049);
      shortArray0[1] = (short)962;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)256;
      shortArray0[4] = (short) (-3853);
      shortArray0[4] = (short)972;
      shortArray0[6] = (short)290;
      ArrayUtils.shift(shortArray0, (int) (short) (-1049), (int) (short)0, (int) (short)256);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1049), (short)962, (short)2, (short)256, (short)972, (short)0, (short)290}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)962, (int) (short)290);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1216.2053486));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1216.2053486), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Integer integer0 = new Integer((-109));
      assertEquals((-109), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("Array element ", 0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1175);
      assertEquals(1175, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap((char[]) null, 0, 126, 69);
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-109), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -109, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-919.9879471021725);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.9879471021725));
      assertEquals(0, int0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.9879471021725), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      ArrayUtils.swap(charArray0, 0, 1465);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'S';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'S';
      longArray0[3] = (long) 1465;
      longArray0[4] = 2088L;
      longArray0[5] = (long) 'S';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {83L, 0L, 83L, 1465L, 2088L, 83L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Double double0 = new Double(83L);
      assertEquals(83.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      try { 
        Double.valueOf("d0f2hDz+75AC<qM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(719);
      assertEquals(719, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(101);
      assertEquals(101, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(101);
      assertEquals(101, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(101);
      assertEquals(101, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.getInteger("Array element ", Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'm';
      charArray0[2] = '<';
      charArray0[3] = 'E';
      charArray0[4] = 's';
      charArray0[5] = 'H';
      charArray0[6] = '\'';
      charArray0[7] = '1';
      ArrayUtils.swap(charArray0, (-698), 719, 9);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'%', 'm', '<', 'E', 's', 'H', '\'', '1'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 9, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1191.0F);
      floatArray0[2] = (-484.68365F);
      floatArray0[3] = (-70.1664F);
      floatArray0[4] = (-1074.02F);
      floatArray0[5] = (-3530.368F);
      int int0 = ArrayUtils.indexOf(floatArray0, (-3530.368F));
      assertEquals(5, int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1191.0F), (-484.68365F), (-70.1664F), (-1074.02F), (-3530.368F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      int int1 = (-2729);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-2729));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2729, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)962;
      shortArray0[1] = (short) (-3853);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-3853);
      shortArray0[4] = (short) (-3853);
      shortArray0[5] = (short)962;
      shortArray0[6] = (short)290;
      shortArray0[7] = (short)256;
      shortArray0[8] = (short)972;
      ArrayUtils.shift(shortArray0, (int) (short) (-3853), (int) (short) (-3853), (int) (short)962);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)962, (short) (-3853), (short)2, (short) (-3853), (short) (-3853), (short)962, (short)290, (short)256, (short)972}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-353.94827F), (-3621));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) long1);
      assertEquals((-1), int0);
      assertFalse(long1.equals((Object)long0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      byteArray0[1] = (byte)0;
      longArray0[2] = (-557L);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (-1494);
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (-557L);
      longArray0[7] = (long) 0;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (byte)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "gd{8[Q?b2L/");
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.swap(byteArray1, 64, (-3457), (int) (byte)0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3730.8772F;
      floatArray0[2] = 350.6557F;
      floatArray0[3] = 1356.25F;
      floatArray0[4] = (-1126.8381F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3730.8772F, 350.6557F, 1356.25F, (-1126.8381F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'f';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '3');
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'3', 'f'}, charArray0);
      assertArrayEquals(new char[] {'3', '3', 'f'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      ArrayUtils.shift((boolean[]) null, (int) '1', (int) '1', 27);
      int[] intArray0 = new int[10];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 's';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-64);
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-64)}, shortArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-64);
      intArray1[1] = (int) (short)634;
      intArray1[2] = (int) '1';
      intArray1[3] = (int) '#';
      intArray1[4] = (int) (short) (-64);
      intArray1[5] = (int) 's';
      intArray1[6] = (int) '#';
      ArrayUtils.reverse(intArray1);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {35, 115, (-64), 35, 49, 634, (-64)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(9, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-1670));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) bitSet0;
      objectArray1[1] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(boolean0);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1670);
      intArray0[3] = 1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1670));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 1, 1, 0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
      
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) (-1670);
      longArray2[1] = (long) 1;
      longArray2[2] = (long) 0;
      boolean boolean1 = ArrayUtils.isSorted(longArray2);
      assertFalse(boolean1);
      assertEquals(3, longArray2.length);
      assertArrayEquals(new long[] {(-1670L), 1L, 0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(longArray2, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\'';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-184), (-184));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '\u0000';
      floatArray0[1] = (float) '\'';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-184), 12);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 39.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 39.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) '\u0000';
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[1] = (float) (-184);
      floatArray2[2] = (float) '\'';
      floatArray2[3] = 1011.43F;
      floatArray2[4] = (float) '%';
      floatArray2[6] = (float) '\u0000';
      floatArray2[7] = (float) 12;
      floatArray2[8] = (float) '\'';
      boolean boolean0 = ArrayUtils.isSorted(floatArray2);
      assertFalse(boolean0);
      assertEquals(9, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, (-184.0F), 39.0F, 1011.43F, 37.0F, 0.0F, 0.0F, 12.0F, 39.0F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1726L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Long[] longArray2 = new Long[9];
      Long long0 = new Long((-184));
      assertEquals((-184L), (long)long0);
      assertNotNull(long0);
      
      longArray2[0] = long0;
      String string0 = "N:AV";
      try { 
        Long.valueOf("N:AV", (-2990));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -2990 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-392);
      ArrayUtils.reverse((short[]) null, Integer.MAX_VALUE, 573);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-392);
      Object object0 = ArrayUtils.get(objectArray0, (-1137), (Object) "Index: ");
      assertEquals("Index: ", object0);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[1] = (Object) "Index: ";
      objectArray0[2] = (Object) (-392);
      objectArray0[3] = (Object) (-392);
      objectArray0[4] = (Object) (-392);
      objectArray0[5] = (Object) (-392);
      objectArray0[6] = (Object) (-392);
      ArrayUtils.swap(objectArray0, 2, (-392), 91);
      assertEquals(7, objectArray0.length);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('!');
      assertEquals('!', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('!', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('~');
      assertEquals('~', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(3, characterArray1.length);
      assertEquals(3, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      
      ArrayUtils.reverse((short[]) null, (-1), 573);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8047);
      shortArray0[1] = (short) (-695);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short) (-695);
      floatArray0[2] = (float) (short) (-8047);
      ArrayUtils.reverse(floatArray0, (int) (short) (-695), (-3071));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-695.0F), (-8047.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-3071), (-29));
      assertEquals((-1), int1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-695.0F), (-8047.0F)}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3951);
      short short0 = (short) (-1254);
      shortArray0[1] = (short) (-1254);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-3951), (short) (-1254)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3951), (short) (-1254)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2514));
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3951), (short) (-1254)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)28;
      byteArray0[0] = (byte)28;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-77));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)28}, byteArray0);
      assertArrayEquals(new byte[] {(byte)28}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1081.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2277.65141418);
      doubleArray0[3] = (-919.37);
      doubleArray0[4] = 1055.0;
      doubleArray0[5] = 144.0;
      doubleArray0[6] = 2916.11069781704;
      doubleArray0[7] = 65.0;
      doubleArray0[8] = 144.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-2277.65141418), (-919.37), 1055.0, 144.0, 2916.11069781704, 65.0, 144.0, (-1081.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'C';
      charArray0[2] = 'n';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'C';
      longArray0[1] = (long) 'C';
      longArray0[2] = (long) 'C';
      longArray0[3] = (long) 'C';
      ArrayUtils.swap(longArray0, 783, (-2147483638));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {67L, 67L, 67L, 67L}, longArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-2147483638), 783);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 67L;
      doubleArray0[1] = (double) 'n';
      doubleArray0[2] = (double) 'E';
      doubleArray0[3] = (double) (-2147483638);
      doubleArray0[4] = (double) 67L;
      doubleArray0[5] = (double) (-2147483638);
      doubleArray0[6] = (double) 67L;
      ArrayUtils.swap(doubleArray0, (-2147483638), (-63), 783);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {67.0, 110.0, 69.0, (-2.147483638E9), 67.0, (-2.147483638E9), 67.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-2);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-2), 11);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)0, (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)0, (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character character0 = Character.valueOf('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "byte");
      assertEquals("0", string0);
      assertNotNull(string0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 11);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)0, (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte)0, (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-714.1439446);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) (byte) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-395.2);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-2), 2, (-53.0));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-714.1439446), 11.0, (-2.0), (-1.0), (-395.2)}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse((float[]) null);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-44));
      assertEquals(0, int1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'E';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {69.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 69.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (byte)111;
      shortArray0[2] = (short) (byte) (-13);
      shortArray0[4] = (short) (byte) (-19);
      shortArray0[5] = (short) (byte)111;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)111, (short) (-13), (short)0, (short) (-19), (short)111}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)111, (short) (-13), (short)0, (short) (-19), (short)111}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(charArray0, (-1648), (-247), (int) (short) (-19));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'X';
      doubleArray0[0] = (double) (-2475.16F);
      floatArray0[2] = 883.3695F;
      ArrayUtils.shift(floatArray0, (-2242), Integer.MAX_VALUE, (-2242));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 883.3695F, 88.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1676.8240624249304));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2475.159912109375)}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-2242);
      intArray0[4] = 1879048192;
      intArray0[5] = (int) 'X';
      intArray0[6] = (-2242);
      intArray0[7] = (int) 'X';
      intArray0[8] = (int) 'X';
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-2987), 1879048192);
      assertEquals((-1), int2);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, (-1), (-1), (-2242), 1879048192, 88, (-2242), 88, 88}, intArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ArrayUtils.swap((long[]) null, 1073741824, 978, 1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-26);
      shortArray0[1] = (short) (-26);
      shortArray0[2] = (short) (-26);
      shortArray0[3] = (short) (-26);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-26), (short) (-26), (short) (-26), (short) (-26)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-26), 1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-26), (short) (-26), (short) (-26), (short) (-26)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      char[] charArray1 = new char[5];
      charArray1[0] = '#';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)1;
      ArrayUtils.reverse(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-76)}, byteArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences((char[]) null, '`');
      assertNull(charArray2);
      
      char[] charArray3 = ArrayUtils.add((char[]) null, '`');
      assertEquals(1, charArray3.length);
      assertArrayEquals(new char[] {'`'}, charArray3);
      assertFalse(charArray3.equals((Object)charArray1));
      assertNotSame(charArray3, charArray1);
      assertNotNull(charArray3);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'E');
      assertNull(charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      ArrayUtils.shift(longArray0, (-1928));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 725;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (short)0;
      ArrayUtils.swap(doubleArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {725.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-53);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-6), 56);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-53), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-53), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) character0, (String) null);
      assertEquals("9", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-6);
      floatArray0[2] = (float) (byte) (-6);
      floatArray0[3] = (float) (byte) (-6);
      floatArray0[4] = (float) '9';
      floatArray0[5] = (float) 56;
      floatArray0[6] = (-395.2835F);
      floatArray0[7] = (float) 56;
      floatArray0[8] = (float) 56;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-6.0F), 0.0F, (-6.0F), (-6.0F), 57.0F, 56.0F, (-395.2835F), 56.0F, 56.0F}, floatArray0, 0.01F);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-53);
      byteArray0[1] = (byte) (-6);
      byteArray2[2] = (byte) (-6);
      byteArray2[3] = (byte) (-53);
      byteArray2[4] = (byte) (-53);
      byteArray2[5] = (byte) (-53);
      byteArray2[6] = (byte) (-6);
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertFalse(boolean0);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)0, (byte) (-6), (byte) (-53), (byte) (-53), (byte) (-53), (byte) (-6), (byte)0}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-6);
      doubleArray0[1] = (double) (byte) (-53);
      doubleArray0[2] = (double) 56.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0.0F, 2, (double) 56.0F);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-6.0), (-53.0), 56.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2536);
      doubleArray0[3] = (double) 0;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      ArrayUtils.shift((Object[]) booleanArray0, (-55), 36, (int) (short)0);
      assertEquals(0, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = ArrayUtils.add((Object[]) null, (Object) mockRandom0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = Float.NaN;
      floatArray0[8] = Float.NaN;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)82;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)82);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82}, byteArray0);
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)82;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4247));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)82}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)107);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)107, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82}, byteArray1);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)82, (int) (byte)82);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82, (byte)82}, byteArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, (-6), (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-6);
      longArray0[3] = (long) (-6);
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2536.0F);
      ArrayUtils.swap((short[]) null, (-76), 53);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2536.0F);
      doubleArray0[1] = 360.0;
      doubleArray0[2] = (double) '3';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-2536.0), 360.0, 51.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)46);
      assertNull(byteArray0);
      
      MutableInt mutableInt0 = new MutableInt(3598);
      assertEquals((short)3598, mutableInt0.shortValue());
      assertEquals(3598L, mutableInt0.longValue());
      assertEquals("3598", mutableInt0.toString());
      assertEquals(3598.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3598.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3598, mutableInt0.intValue());
      assertEquals(3598, (int)mutableInt0.getValue());
      assertEquals(3598, (int)mutableInt0.toInteger());
      assertEquals((byte)14, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(360.0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(360, mutableInt1.intValue());
      assertEquals(360, (int)mutableInt1.toInteger());
      assertEquals(360, (int)mutableInt1.getValue());
      assertEquals((byte)104, mutableInt1.byteValue());
      assertEquals((short)360, mutableInt1.shortValue());
      assertEquals("360", mutableInt1.toString());
      assertEquals(360.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(360.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(360L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      mutableIntArray0[0] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(2, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {(-2536.0), 360.0, 51.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = 'p';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      charArray0[7] = '3';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '3', 3598);
      assertEquals(7, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', 'p', '3', '3', '3', '3', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Float float0 = new Float((-64.0));
      assertEquals((-64.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2589;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)2589}, shortArray0);
      assertArrayEquals(new short[] {(short)2589}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short)2589;
      boolean boolean2 = ArrayUtils.isSorted(shortArray2);
      assertTrue(boolean2);
      assertEquals(1, shortArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)2589;
      floatArray0[1] = (-85.0F);
      floatArray0[2] = 1919.768F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {2589.0F, (-85.0F), 1919.768F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (byte) (-64);
      intArray0[4] = (int) '1';
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The Integer did not match any specified value";
      stringArray0[1] = "The character ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte) (-64));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-64.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-64);
      floatArray1[1] = (-2041.3224F);
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.0F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertEquals(0, floatArray2.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-64.0F), (-2041.3224F), 1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-1192);
      floatArray0[1] = (float) (short) (-1192);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (short) (-1192);
      floatArray0[4] = (float) 12;
      floatArray0[5] = (float) 12;
      floatArray0[6] = (float) (short) (-1192);
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-1192), (-2738));
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {(-1192.0F), (-1192.0F), (-1.0F), (-1192.0F), 12.0F, 12.0F, (-1192.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2227.0;
      doubleArray0[1] = (double) (-2738);
      doubleArray0[2] = (double) 12;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2227.0, (-2738.0), 12.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '\'';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-184), (-184));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', '\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '%';
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-14);
      shortArray0[1] = (short)401;
      shortArray0[2] = (short)401;
      shortArray0[3] = (short)401;
      shortArray0[4] = (short)401;
      shortArray0[5] = (short)401;
      shortArray0[6] = (short)401;
      shortArray0[7] = (short)4;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-14), (short)401, (short)401, (short)401, (short)401, (short)401, (short)401, (short)4}, shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-14), (short)401, (short)401, (short)401, (short)401, (short)401, (short)401, (short)4}, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)109;
      byte[] byteArray1 = ArrayUtils.insert((int) (short)4, (byte[]) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte)1, (byte) (-71), (byte) (-43), (byte)109}, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = 2861L;
      longArray0[3] = 3395L;
      longArray0[4] = 2861L;
      longArray0[5] = 2861L;
      longArray0[6] = 2861L;
      ArrayUtils.reverse(longArray0, 2, 2);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 2861L, 3395L, 2861L, 2861L, 2861L}, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-9);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-94));
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)16, (byte) (-83), (byte) (-111), (byte)17, (byte) (-9)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-94), (byte)16, (byte) (-83), (byte) (-111), (byte)17, (byte) (-9)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      Long[] longArray1 = ArrayUtils.subarray((Long[]) null, (int) 17, (int)  (-76));
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      ArrayUtils.shift(byteArray0, (-6), (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)0}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)0}, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-6);
      longArray0[3] = (long) (-6);
      longArray0[4] = (long) (byte) (-14);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)0, (byte) (-14)}, byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, (int) (byte)0, '');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {''}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-14);
      doubleArray0[1] = (double) (byte) (-14);
      doubleArray0[2] = (double) (byte) (-14);
      doubleArray0[3] = (double) (-14L);
      doubleArray0[4] = (double) (-6L);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-14);
      intArray0[1] = (-6);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 91;
      intArray0[4] = (int) (byte) (-14);
      intArray0[5] = (-6);
      intArray0[6] = (int) (byte) (-14);
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) '';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, (-64L), (-64L), (-64L), 0L}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-64);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 3642;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-64);
      floatArray0[4] = (float) (-64);
      floatArray0[5] = 2042.4551F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, (-64L), (-64L), (-64L), (-64L)}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 71L;
      ArrayUtils.swap(doubleArray0, 3642, Integer.MIN_VALUE, (-987));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {71.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 71.0;
      doubleArray1[1] = (Double) 71.0;
      doubleArray1[2] = (Double) 71.0;
      doubleArray1[3] = (Double) 71.0;
      ArrayUtils.shift((short[]) null, Integer.MIN_VALUE, 2154, Integer.MIN_VALUE);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 71L, 3642);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {71.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((short)0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = ArrayUtils.get((Double[]) null, (-16), double1);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-2632L);
      longArray0[1] = (long) (short)0;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short)0, (int) (short)0);
      assertEquals(1, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-2632L), 0L}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1428);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-720.2188);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-2632L);
      doubleArray0[6] = (double) (-2632L);
      doubleArray0[7] = (double) (-2632L);
      doubleArray0[8] = (double) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1428.0), 0.0, (-720.2188), 0.0, 0.0, (-2632.0), (-2632.0), (-2632.0), 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2632.0));
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2632.0), (-1428.0), 0.0, (-720.2188), 0.0, 0.0, (-2632.0), (-2632.0), (-2632.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1428.0), 0.0, (-720.2188), 0.0, 0.0, (-2632.0), (-2632.0), (-2632.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift((short[]) null, (-1428), 1, (-16));
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = new Boolean("Am.*ECdR~9+l:)e4");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = 1264;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1264;
      doubleArray0[1] = 76.0;
      doubleArray0[2] = 76.0;
      doubleArray0[3] = (double) 1264;
      doubleArray0[3] = (double) 1264;
      doubleArray0[5] = (double) 1264;
      doubleArray0[6] = (-4970.3203);
      doubleArray0[7] = 76.0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1264, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1264, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) long1);
      assertEquals((-1), int0);
      assertFalse(long1.equals((Object)long0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      byteArray0[1] = (byte)0;
      longArray0[2] = (-557L);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (-1494);
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (-557L);
      ArrayUtils.shift((Object[]) null, (-888), (-1), (-1));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1095.216;
      doubleArray0[2] = (double) (-557L);
      doubleArray0[3] = (double) (-557L);
      doubleArray0[4] = (double) (-557L);
      doubleArray0[5] = (double) (-317);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2112336616, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2112336616, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2536.0F);
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 425);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) "gd{8[Q?b2L/";
      objectArray0[2] = (Object) (-2536.0F);
      objectArray0[3] = (Object) (-2536.0F);
      objectArray0[4] = (Object) (-2536.0F);
      objectArray0[5] = (Object) (-2536.0F);
      Object object1 = ArrayUtils.get(objectArray0, 425);
      assertEquals(7, objectArray0.length);
      assertNull(object1);
      
      objectArray0[6] = null;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1288;
      intArray0[1] = (int) (short)1288;
      intArray0[2] = (int) (short)1288;
      intArray0[3] = (int) (short)1288;
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'M';
      charArray0[2] = 'R';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'4', 'M', 'R'}, charArray0);
      assertArrayEquals(new char[] {'M', 'R'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.clone(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray2.length);
      assertArrayEquals(new char[] {'4', 'M', 'R'}, charArray0);
      assertArrayEquals(new char[] {'4', 'M', 'R'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      Float[] floatArray0 = ArrayUtils.clone((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2536.0F);
      ArrayUtils.swap((short[]) null, (-76), 53);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2536.0F);
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.swap(doubleArray0, 0, 3657, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('o');
      assertEquals('o', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('^');
      assertEquals('^', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('-');
      assertEquals('-', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('F');
      assertEquals('F', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertArrayEquals(new char[] {'^', 'o', '^', '-', 'F'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      Object[] objectArray0 = new Object[8];
      objectArray0[4] = (Object) (byte) (-60);
      objectArray0[1] = (Object) (byte) (-60);
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-60));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(7, int0);
      assertEquals(8, objectArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) '1';
      floatArray0[4] = (float) '1';
      floatArray0[5] = (float) 2054;
      ArrayUtils.swap(floatArray0, 144, (int) (byte) (-60), (-102));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 7.0F, 7.0F, 49.0F, 49.0F, 2054.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-60);
      shortArray0[1] = (short) (byte) (-60);
      shortArray0[2] = (short) (byte) (-60);
      shortArray0[3] = (short) (byte) (-60);
      shortArray0[4] = (short) (byte) (-60);
      shortArray0[5] = (short) (byte) (-60);
      shortArray0[6] = (short) (-695);
      shortArray0[7] = (short) (byte) (-60);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2696);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-60), (short) (-60), (short) (-60), (short) (-60), (short) (-60), (short) (-60), (short) (-695), (short) (-60)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-60), (short) (-60), (short) (-60), (short) (-60), (short) (-60), (short) (-60), (short) (-695), (short) (-60)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 7.0F, 7.0F, 49.0F, 49.0F, 2054.0F}, floatArray0, 0.01F);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-60);
      doubleArray0[1] = (double) 49.0F;
      doubleArray0[2] = (double) 49.0F;
      doubleArray0[3] = (double) (short) (-60);
      doubleArray0[4] = (double) '1';
      doubleArray0[5] = (double) 144;
      doubleArray0[6] = (double) '#';
      doubleArray0[7] = (double) (short)2696;
      doubleArray0[8] = (double) (short) (-60);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.1, (-102));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-60.0), 49.0, 49.0, (-60.0), 49.0, 144.0, 35.0, 2696.0, (-60.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'L';
      charArray0[3] = 'm';
      charArray0[4] = 'I';
      charArray0[5] = '9';
      charArray0[6] = 'm';
      charArray0[7] = '1';
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (-1126.838134765625);
      doubleArray0[2] = (double) '1';
      doubleArray0[3] = (double) 'I';
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 'm';
      doubleArray0[6] = (double) 'L';
      doubleArray0[7] = (double) 'L';
      doubleArray0[8] = (double) 'I';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1126.838134765625));
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {109.0, (-1126.838134765625), 49.0, 73.0, 1.0, 109.0, 76.0, 76.0, 73.0, (-1126.838134765625)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {109.0, (-1126.838134765625), 49.0, 73.0, 1.0, 109.0, 76.0, 76.0, 73.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-118), (byte) (-64), (byte) (-64), (byte) (-1), (byte) (-64), (byte)59, (byte)1, (byte) (-1)}, byteArray0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'q');
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.add(charArray1, 'E');
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(4, charArray2.length);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'E', '\u0000', '\u0000', 'E'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-280.12289090824));
      assertEquals((-280.12289090824), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)36;
      shortArray0[1] = (short) (-907);
      shortArray0[2] = (short)2850;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)37;
      shortArray0[5] = (short) (-3070);
      shortArray0[6] = (short)1558;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-868), (int) (short) (-3070));
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)36, (short) (-907), (short)2850, (short)1, (short)37, (short) (-3070), (short)1558}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = true;
      booleanArray1[1] = boolean0;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4091);
      shortArray0[1] = (short) (byte)53;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-4091), (short)53}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-2859), (int) (byte) (-111));
      assertEquals(0, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-4091), (short)53}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Y';
      charArray1[1] = '5';
      charArray1[2] = '5';
      charArray1[3] = '5';
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(7, charArray2.length);
      assertArrayEquals(new char[] {'5', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'Y', '5', '5', '5'}, charArray1);
      assertArrayEquals(new char[] {'5', '\u0000', '\u0000', 'Y', '5', '5', '5'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte)53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'W';
      charArray0[2] = 'j';
      charArray0[3] = '&';
      charArray0[4] = '#';
      charArray0[5] = 'a';
      charArray0[6] = 'm';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'k', 'W', 'j', '&', '#', 'a', 'm'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Object[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap(byteArray0, (-2107715431), 3130, 2726);
      assertEquals(15, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-802L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '|';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2107715431), (-773));
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'.', '|', '?'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '.';
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short) (-1);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals((short) (-1), object0);
      assertEquals(9, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short) (-1);
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) (short) (-1);
      objectArray0[5] = (Object) (short) (-1);
      objectArray0[6] = (Object) (short) (-1);
      objectArray0[7] = (Object) (short) (-1);
      objectArray0[8] = (Object) (short) (-1);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(9, objectArray0.length);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(0, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-374.3501410598943));
      assertEquals((-374.3501410598943), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-374.3501410598943));
      assertEquals((-374.3501410598943), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short) (-1));
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(0);
      assertEquals(0.0, (double)double6, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(344.0);
      assertEquals(344.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(1296.319);
      assertEquals(1296.319, (double)double8, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, (-64L), (-64L), (-64L), (-64L)}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-64);
      intArray0[1] = 2831;
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) (byte) (-64);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), 421);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-53);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-6);
      floatArray0[1] = (float) (byte) (-6);
      floatArray0[2] = (float) (byte) (-6);
      floatArray0[3] = (float) (byte) (-6);
      floatArray0[5] = (float) 56;
      floatArray0[6] = (-395.2835F);
      floatArray0[7] = (float) 56;
      floatArray0[3] = (float) 56;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-6.0F), (-6.0F), (-6.0F), 56.0F, 0.0F, 56.0F, (-395.2835F), 56.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-53);
      byteArray0[1] = (byte) (-6);
      byteArray2[2] = (byte) (-6);
      byteArray2[3] = (byte) (-53);
      byteArray2[4] = (byte) (-53);
      byteArray2[5] = (byte) (-53);
      byteArray2[6] = (byte) (-6);
      byteArray2[7] = (byte) (-53);
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertFalse(boolean0);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)0, (byte) (-6), (byte) (-53), (byte) (-53), (byte) (-53), (byte) (-6), (byte) (-53)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-6);
      doubleArray0[1] = (double) (byte) (-53);
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-6.0F), 2, (double) 56.0F);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-6.0), (-53.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1834);
      doubleArray0[2] = (double) (-1834);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 2, Integer.MAX_VALUE, 2431.377834800778);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-1834.0), (-1834.0)}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[1] = booleanArray0[0];
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(360.0);
      assertEquals(360.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(5934.357293);
      assertEquals(5934.3574F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'X';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'X'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte)93;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-54), (byte)10, (byte)118, (byte)58, (byte)4, (byte) (-122), (byte)93, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-54), (byte)10, (byte)118, (byte)58, (byte)4, (byte) (-122), (byte)93}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Double double0 = new Double((-1507.096178668065));
      assertEquals((-1507.096178668065), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ArrayUtils.get((Double[]) null, 1126, double0);
      assertEquals((-1507.096178668065), (double)double1, 0.01);
      assertNotNull(double1);
      
      Float float0 = new Float((float) 1126);
      assertEquals(1126.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ArrayUtils.toString((Object) float0, "");
      assertEquals("1126.0", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2121610351);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2121610351)}, intArray0);
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) (-2121610351);
      floatArray0[1] = (float) (-2121610351);
      floatArray0[2] = (float) (-2121610351);
      floatArray0[3] = (float) (-2121610351);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(10, floatArray0.length);
      assertArrayEquals(new float[] {(-2.12161037E9F), (-2.12161037E9F), (-2.12161037E9F), (-2.12161037E9F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1134.7);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-2.12161037E9F);
      doubleArray0[3] = (double) (-2.12161037E9F);
      doubleArray0[4] = (-1507.096178668065);
      doubleArray0[5] = (double) (-2121610351);
      doubleArray0[6] = (double) (-2.12161037E9F);
      doubleArray0[7] = (double) (-2121610351);
      doubleArray0[8] = (double) (-2.12161037E9F);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1134.7), (-1.0), (-2.121610368E9), (-2.121610368E9), (-1507.096178668065), (-2.121610351E9), (-2.121610368E9), (-2.121610351E9), (-2.121610368E9)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1134.7), (-1.0), (-2.121610368E9), (-2.121610368E9), (-1507.096178668065), (-2.121610351E9), (-2.121610368E9), (-2.121610351E9), (-2.121610368E9)}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      charArray0[3] = 'p';
      charArray0[4] = 's';
      charArray0[5] = 'o';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertArrayEquals(new char[] {'1', 's', '#', 'p', 's', 'o'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("^ez");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("$");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("$");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean3;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (-1192), 89, 943);
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.insert(274, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2315));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Double[] doubleArray1 = new Double[7];
      Double double0 = new Double((-1192));
      assertEquals((-1192.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-1678.380332541));
      assertEquals((-1678.380332541), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(2681.716);
      assertEquals(2681.716, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray1[2] = double2;
      Double double3 = new Double(943);
      assertEquals(943.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray1[3] = double3;
      Double double4 = new Double(943);
      assertEquals(943.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray1[4] = double4;
      Double double5 = new Double((-919.37));
      assertEquals((-919.37), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray1[5] = double5;
      Double double6 = new Double((-2089.15682995455));
      assertEquals((-2089.15682995455), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      
      doubleArray1[6] = double6;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-1192.0), (-1678.380332541), 2681.716, 943.0, 943.0, (-919.37), (-2089.15682995455)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1769.033F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1769.033F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {1769.033F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((int[]) null, 6415, 6415, 56);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1034;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short) (-209);
      shortArray0[3] = (short)88;
      shortArray0[4] = (short) (-1721);
      shortArray0[5] = (short)31;
      shortArray0[6] = (short)2092;
      shortArray0[7] = (short)3386;
      shortArray0[8] = (short)5735;
      ArrayUtils.shift(shortArray0, (-1049), 11, 59);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1721), (short)31, (short)2092, (short)3386, (short)5735, (short)1034, (short)7, (short) (-209), (short)88}, shortArray0);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short)88;
      shortArray1[1] = (Short) (short)31;
      shortArray1[2] = (Short) (short)31;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(3, shortArray2.length);
      assertEquals(3, shortArray1.length);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)31;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) (short)1034;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (int) (short)31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      Short short0 = new Short((short)868);
      assertEquals((short)868, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((short)868);
      assertEquals(868, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(868, object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.insert((int) (short)0, booleanArray0, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "OX;q";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'X', 'X', 'X', 'X', 'X', 'X'}, charArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-186);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)2589;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)4;
      shortArray0[7] = (short) (-186);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short)4, (short) (-186), (short) (-1), (short)2589, (short) (-1), (short)4, (short) (-186)}, shortArray1);
      assertArrayEquals(new short[] {(short)4, (short)4, (short) (-186), (short) (-1), (short)2589, (short) (-1), (short)4, (short) (-186)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short)4;
      boolean boolean1 = ArrayUtils.isSorted(shortArray2);
      assertTrue(boolean1);
      assertEquals(1, shortArray2.length);
      assertTrue(boolean1 == boolean0);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3376;
      longArray0[1] = (long) 3376;
      longArray0[2] = (long) 3376;
      longArray0[3] = (long) 3376;
      longArray0[4] = 1L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {3376L, 3376L, 3376L, 3376L, 1L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3376, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3376, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-269);
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '_');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean4 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean4);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-269);
      longArray0[1] = (-40L);
      longArray0[2] = 1687L;
      longArray0[3] = (long) 'E';
      longArray0[4] = 0L;
      longArray0[5] = (long) 'E';
      longArray0[6] = (long) (short) (-269);
      longArray0[7] = (long) (short) (-269);
      longArray0[8] = (long) '\'';
      boolean boolean5 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean5);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-269L), (-40L), 1687L, 69L, 0L, 69L, (-269L), (-269L), 39L}, longArray0);
      assertTrue(boolean5 == boolean4);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = Float.NaN;
      floatArray0[8] = Float.NaN;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, (-64));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, Float.NaN, Float.NaN, (-1.0F), Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4862);
      shortArray0[1] = (short)11;
      shortArray0[2] = (short)2034;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-948), (short)11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -948, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)50;
      ArrayUtils.swap(byteArray0, (int) (byte)7, (int) (byte) (-28), (-2128677852));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-53), (byte) (-13), (byte) (-53), (byte) (-28), (byte)7, (byte)50, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'G';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'w', 'w', 'w', 'w', 'G'}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-15));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-15));
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 737.5402F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[2];
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((short)1284);
      assertEquals(1284L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1284L}, longArray1);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1284;
      doubleArray0[1] = (double) ';';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1284;
      shortArray0[1] = (short)360;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)1284, (short)360}, shortArray0);
      assertArrayEquals(new short[] {(short)1284, (short)360, (short)1284, (short)360}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)100;
      long[] longArray0 = new long[1];
      longArray0[0] = 4L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {4L}, longArray0);
      
      ArrayUtils.swap(longArray0, (-343), (int) (short)100);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {4L}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)77);
      assertFalse(boolean1);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      
      ArrayUtils.swap((boolean[]) null, 90, 1612, 15);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (long) 15;
      longArray0[2] = (long) (short)427;
      longArray0[3] = (long) (short)1136;
      longArray0[4] = (long) (short)1136;
      longArray0[5] = (long) 1612;
      longArray0[6] = (long) (short)1136;
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap(longArray0, 2, (int) (short)1136);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {1136L, 15L, 427L, 1136L, 1136L, 1612L, 1136L, 0L}, longArray0);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) 1136L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {1136L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte)78);
      assertFalse(boolean2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      short[] shortArray0 = new short[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Short short0 = new Short((short)471);
      assertEquals((short)471, (short)short0);
      assertNotNull(short0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)471, object1);
      assertNotNull(object1);
      
      objectArray0[2] = (Object) short0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      ArrayUtils.shift(objectArray0, (int) (short)471);
      assertEquals(7, objectArray0.length);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      objectArray0[6] = (Object) (short)471;
      shortArray1[1] = (short)471;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)471}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
      
      short[] shortArray3 = ArrayUtils.removeAllOccurrences(shortArray1, (short)2439);
      assertEquals(2, shortArray3.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)471}, shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)471}, shortArray1);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray3);
      
      short[] shortArray4 = ArrayUtils.subarray(shortArray1, 8, (-1448));
      assertEquals(0, shortArray4.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray4);
      assertArrayEquals(new short[] {(short)0, (short)471}, shortArray1);
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray3));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray4);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray4);
      
      ArrayUtils.hashCode(object1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      
      ArrayUtils.swap((boolean[]) null, 90, 1612, 15);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (long) 15;
      longArray0[2] = (long) (short)427;
      longArray0[3] = (long) (short)1136;
      longArray0[4] = (long) (short)1136;
      longArray0[5] = (long) 1612;
      longArray0[6] = (long) (short)1136;
      longArray0[7] = (long) 15;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1136L;
      objectArray0[1] = (Object) 1136L;
      objectArray0[2] = (Object) 15L;
      objectArray0[3] = (Object) 15L;
      objectArray0[4] = (Object) 1136L;
      ArrayUtils.shift(objectArray0, (int) (short)1136);
      assertEquals(5, objectArray0.length);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1136;
      shortArray1[1] = (short)427;
      shortArray1[2] = (short)1136;
      shortArray1[3] = (short)1030;
      shortArray1[4] = (short)1136;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1030, (short)1136}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      ArrayUtils.shift((float[]) null, (int) (short)1136, 2145254392, (int) (short)1136);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'C';
      charArray0[2] = 'n';
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) 'n';
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {69.0F, 110.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {69.0F, 69.0F, 110.0F, 110.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) double0, (-2145465952));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2536.0F);
      ArrayUtils.swap((short[]) null, (-76), 53);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2536.0F);
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1126.8381F);
      floatArray0[1] = (-1126.8381F);
      floatArray0[2] = (-1126.8381F);
      floatArray0[3] = (float) (short) (-1191);
      floatArray0[4] = (-1126.8381F);
      floatArray0[5] = (float) (short) (-1191);
      floatArray0[6] = (float) (short) (-1191);
      floatArray0[7] = (float) (short) (-1191);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1126.8381F));
      assertEquals(4, int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1126.8381F), (-1126.8381F), (-1126.8381F), (-1191.0F), (-1126.8381F), (-1191.0F), (-1191.0F), (-1191.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1126.8381F);
      doubleArray0[1] = (double) (-1126.8381F);
      doubleArray0[2] = (double) 4;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2088.15682995455), (int) (short) (-1191), (-1.0));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1126.838134765625), (-1126.838134765625), 4.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1191);
      shortArray0[1] = (short) (-1191);
      shortArray0[2] = (short) (-4180);
      shortArray0[3] = (short) (-1191);
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1288;
      intArray0[1] = (int) (short)1288;
      intArray0[2] = (int) (short)1288;
      intArray0[3] = (int) (short)1288;
      intArray0[4] = (int) (short)1288;
      intArray0[5] = (int) (short)1288;
      intArray0[6] = (int) (short)1288;
      intArray0[7] = (int) (short)1288;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new int[] {1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288}, intArray0);
      assertNotNull(integerArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) null, 1288);
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new int[] {1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288}, intArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short)1, (int) (short)1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1020);
      shortArray0[1] = (short)1284;
      shortArray0[2] = (short)360;
      shortArray0[3] = (short)360;
      shortArray0[4] = (short)360;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)1;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1020), (short)1284, (short)360, (short)360, (short)360, (short) (-1), (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2610.8245F;
      ArrayUtils.shift(floatArray0, (-641));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2610.8245F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2610.8245F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1049);
      shortArray0[1] = (short)962;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)256;
      shortArray0[4] = (short) (-3853);
      shortArray0[5] = (short)972;
      shortArray0[6] = (short)290;
      ArrayUtils.shift(shortArray0, (int) (short) (-1049), (int) (short)962, (int) (short)256);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)256, (short) (-3853), (short)972, (short)290, (short) (-1049), (short)962, (short)2}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)962, (int) (short)290);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)962, (int) (short)2);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)127);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)127}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, (Object) "");
      assertEquals(0, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      double[] doubleArray0 = new double[0];
      Character character0 = Character.valueOf('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 3376.0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((char[]) null);
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      ArrayUtils.reverse(charArray0, (-965), (-965));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 1095, (-1));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      
      Character character1 = Character.valueOf('x');
      assertEquals('x', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)116;
      intArray0[1] = (int) (byte)116;
      intArray0[2] = (int) (byte)116;
      intArray0[3] = (int) (byte)116;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {116, 116, 116, 116}, intArray0);
      assertArrayEquals(new int[] {116, 116, 116, 116}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 116;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 116;
      floatArray0[3] = (float) 116;
      floatArray0[4] = (float) 116;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-299.9587F));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {116.0F, 1.0F, 116.0F, 116.0F, 116.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {116.0F, 1.0F, 116.0F, 116.0F, 116.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-392);
      intArray0[1] = 49;
      intArray0[2] = 1022;
      int int0 = ArrayUtils.indexOf(intArray0, 1022);
      assertEquals(2, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-392), 49, 1022}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1620;
      shortArray0[1] = (short)1775;
      shortArray0[2] = (short)84;
      shortArray0[3] = (short)3460;
      shortArray0[4] = (short)809;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)84, 5);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1620, (short)1775, (short)84, (short)3460, (short)809}, shortArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-269);
      int int0 = ArrayUtils.lastIndexOf(intArray1, 36);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      Character character0 = new Character('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('r');
      assertEquals('r', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('\'');
      assertEquals('\'', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('E');
      assertEquals('E', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      boolean boolean4 = ArrayUtils.contains(byteArray0, (byte) (-104));
      assertTrue(boolean4);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray2);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1531.49654));
      assertEquals((-1531.4966F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (byte) (-104));
      assertEquals((-104.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals((-1531.4966F), (float)float4, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float(1.0F);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-1.0));
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float(1670.0F);
      assertEquals(1670.0F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      
      floatArray0[7] = float7;
      Float float8 = new Float((float) 36);
      assertEquals(36.0F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotNull(float8);
      
      Float float9 = ArrayUtils.get(floatArray0, (-1), float8);
      assertEquals(36.0F, (float)float9, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotNull(float9);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) character0, (Object) float9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2536.0F);
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = '3';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'H';
      charArray0[5] = '3';
      charArray0[6] = 'H';
      charArray0[7] = '>';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H');
      assertEquals(6, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'H', '3', '>', '>', 'H', '3', 'H', '>'}, charArray0);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, 2557L);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2536.0F);
      ArrayUtils.swap(floatArray0, 1779, 1791, Integer.MAX_VALUE);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2536.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(booleanArray0, 1, 7);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short) (-2521);
      shortArray0[3] = (short)82;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-3), (short) (-2521), (short)0, (short)82}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2536.0F);
      ArrayUtils.swap(floatArray0, 1779, 1791, Integer.MAX_VALUE);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2536.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(booleanArray0, 1, 7);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short) (-2539);
      shortArray0[2] = (short)82;
      shortArray0[3] = (short)1009;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-3), (short) (-2539), (short)82, (short)1009}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[20];
      stringArray0[0] = ";";
      String[] stringArray1 = ArrayUtils.add(stringArray0, ";");
      assertEquals(20, stringArray0.length);
      assertEquals(21, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 0;
      int int0 = (-392);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-392), floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -392, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte) (-14)}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte) (-14));
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte) (-14)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1374, 0, 321);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (-2357), 1967);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-64.0F);
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1967;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 1L);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-64.0F), 1.0F, 1.0F, 1967.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-64.0F), 1.0F, 1.0F, 1967.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)67;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-111), (int) (byte) (-13));
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)126, (byte)62, (byte)22, (byte) (-13), (byte)111, (byte)67}, byteArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (byte)22, (-1), 321);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'E';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {69.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 69.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-13);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, 1136);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte) (-19), (byte)111, (byte)126, (byte) (-13)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 0, (-2102), (int) (byte) (-13));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1834));
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1834), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.decrement();
      assertEquals((-1835.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals((-1835), (int)mutableInt0.getValue());
      assertEquals((-1835), (int)mutableInt0.toInteger());
      assertEquals((-1835L), mutableInt0.longValue());
      assertEquals((-1835), mutableInt0.intValue());
      assertEquals((-1835.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1835), mutableInt0.shortValue());
      assertEquals("-1835", mutableInt0.toString());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-1835), int0);
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1834), mutableInt0.intValue());
      
      int int1 = mutableInt0.addAndGet(69);
      assertEquals((-1765), int1);
      assertFalse(int1 == int0);
      assertEquals((byte)27, mutableInt0.byteValue());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1765), mutableInt0.shortValue());
      assertEquals((-1765), mutableInt0.intValue());
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765), (int)mutableInt0.toInteger());
      assertEquals((-1765L), mutableInt0.longValue());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mutableInt0;
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 613;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {613}, intArray0);
      assertArrayEquals(new int[] {613, 613}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('Y');
      assertEquals('Y', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\'');
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'\'', 'Y', '\''}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'V', '%', 'Y'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'l');
      assertNull(charArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'l';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'V';
      ArrayUtils.shift(floatArray0, 0, 0, 1284);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {108.0F, 0.0F, 86.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '%';
      doubleArray1[1] = (double) '%';
      doubleArray1[2] = (double) 108.0F;
      doubleArray1[3] = (double) 1284;
      floatArray0[0] = (float) '%';
      doubleArray1[5] = (double) 'l';
      doubleArray1[6] = 1126.5863;
      doubleArray1[7] = (double) 1284;
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 4807.53492731);
      assertEquals((-1), int1);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {37.0, 37.0, 108.0, 1284.0, 0.0, 108.0, 1126.5863, 1284.0}, doubleArray1, 0.01);
      assertFalse(int1 == int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) 37.0F;
      floatArray1[1] = (Float) 0.0F;
      floatArray1[2] = (Float) 86.0F;
      floatArray1[3] = (Float) 0.0F;
      floatArray1[4] = (Float) 0.0F;
      floatArray1[5] = (Float) 86.0F;
      floatArray1[6] = (Float) 86.0F;
      Float float0 = new Float((-919.37));
      assertEquals((-919.37F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[7] = float0;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(8, floatArray2.length);
      assertEquals(8, floatArray1.length);
      assertSame(floatArray2, floatArray1);
      assertSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int[] intArray0 = new int[23];
      intArray0[2] = (int) (byte) (-64);
      intArray0[4] = (int) '1';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = (int) 's';
      intArray1[2] = (int) 's';
      intArray0[15] = (int) (byte) (-64);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(23, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(19, intArray2.length);
      assertArrayEquals(new int[] {0, 115, 115, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, (-64));
      assertFalse(boolean0);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 115, 115, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '1';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 49L);
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {49L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      assertNotNull(mockRandom0);
      
      Integer integer0 = new Integer((-3187));
      assertEquals((-3187), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3187));
      assertEquals((-3187), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-3187));
      assertEquals((-3187), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract(34);
      assertEquals((-33.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-33), mutableInt0.shortValue());
      assertEquals((-33.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-33), mutableInt0.byteValue());
      assertEquals((-33), (int)mutableInt0.toInteger());
      assertEquals((-33), (int)mutableInt0.getValue());
      assertEquals((-33), mutableInt0.intValue());
      assertEquals((-33L), mutableInt0.longValue());
      assertEquals("-33", mutableInt0.toString());
      
      int int0 = mutableInt0.getAndAdd((Number) integer0);
      assertEquals((-33), int0);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertEquals((-3220), mutableInt0.intValue());
      assertEquals((-3220.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3220L), mutableInt0.longValue());
      assertEquals((short) (-3220), mutableInt0.shortValue());
      assertEquals((-3220), (int)mutableInt0.getValue());
      assertEquals((-3220), (int)mutableInt0.toInteger());
      assertEquals((byte)108, mutableInt0.byteValue());
      assertEquals((-3220.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-3220", mutableInt0.toString());
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals((-3220), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-3220), mutableInt0.intValue());
      assertEquals((-3220.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3220L), mutableInt0.longValue());
      assertEquals((short) (-3220), mutableInt0.shortValue());
      assertEquals((-3220), (int)mutableInt0.getValue());
      assertEquals((-3220), (int)mutableInt0.toInteger());
      assertEquals((byte)108, mutableInt0.byteValue());
      assertEquals((-3220.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-3220", mutableInt0.toString());
      assertNotNull(integer3);
      
      Integer integer4 = Integer.getInteger("FB", (-3187));
      assertEquals((-3187), (int)integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-3187);
      longArray0[1] = (long) (-3187);
      longArray0[2] = 4L;
      longArray0[3] = (long) (-3187);
      longArray0[4] = (-101L);
      longArray0[5] = (long) (-3187);
      longArray0[6] = (long) (-3187);
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-3187);
      longArray1[1] = 4L;
      longArray1[2] = 0L;
      longArray1[3] = 2206L;
      longArray1[4] = (long) (-3187);
      longArray1[5] = (-101L);
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(13, longArray2.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-3187L), 4L, 0L, 2206L, (-3187L), (-101L)}, longArray1);
      assertArrayEquals(new long[] {(-3187L), (-3187L), 4L, (-3187L), (-101L), (-3187L), (-3187L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      
      int int1 = ArrayUtils.lastIndexOf(longArray2, (-3187L));
      assertEquals(11, int1);
      assertEquals(6, longArray1.length);
      assertEquals(13, longArray2.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-3187L), 4L, 0L, 2206L, (-3187L), (-101L)}, longArray1);
      assertArrayEquals(new long[] {(-3187L), (-3187L), 4L, (-3187L), (-101L), (-3187L), (-3187L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 4L;
      Float float0 = new Float((double) 0L);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 4L);
      assertEquals(4.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) 0L);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 0L;
      floatArray1[1] = (float) 0L;
      floatArray1[2] = (float) 0L;
      floatArray1[3] = 2645.7F;
      floatArray1[4] = (float) 4L;
      floatArray1[5] = (float) 0L;
      floatArray1[6] = (float) 4L;
      floatArray1[7] = (float) floatArray0[0];
      floatArray1[8] = 883.3695F;
      ArrayUtils.shift(floatArray1, (-1), (-2242), (-1));
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2645.7F, 4.0F, 0.0F, 4.0F, 4.0F, 883.3695F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 4.0F;
      doubleArray0[5] = (double) 4.0F;
      doubleArray0[6] = (double) (float)floatArray0[0];
      doubleArray0[7] = (double) 883.3695F;
      doubleArray0[8] = (double) 2645.7F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) floatArray0[0]);
      assertEquals(6, int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new double[] {4.0, 0.0, 0.0, 0.0, 4.0, 4.0, 4.0, 883.3695068359375, 2645.699951171875}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {4.0, 0.0, 0.0, 0.0, 4.0, 4.0, 4.0, 883.3695068359375, 2645.699951171875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 0.0, 0.0, 0.0, 4.0, 4.0, 4.0, 883.3695068359375, 2645.699951171875}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L, 4);
      assertEquals(4, int1);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2609L);
      longArray0[2] = 90L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 90L, 2);
      assertEquals(2, int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2609L), 0L, 90L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 53, 53, (-6));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-2);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)5, (byte) (-2)}, byteArray0);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-2);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-2), (int) (byte) (-1));
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2)}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)5, (byte) (-2)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)2, (byte)5, (byte) (-2)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = (-782);
      intArray0[2] = (-6);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte) (-2);
      intArray0[6] = (int) (byte) (-2);
      intArray0[7] = (-6);
      int[] intArray1 = ArrayUtils.insert((int) (byte)5, intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertArrayEquals(new int[] {5, (-782), (-6), (-1), 2, (-2), (-2), (-6)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.removeAllOccurrences(objectArray0, (Object) bitSet0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)5, (byte) (-2)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-60));
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-60), (-3357));
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'L';
      charArray0[3] = 'm';
      charArray0[4] = 'I';
      charArray0[5] = '9';
      charArray0[6] = 'm';
      charArray0[7] = '1';
      charArray0[8] = 'b';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(1876L, 0L, 835L);
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs();
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      assertNotNull(longStream1);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'0', 'L', 'm', 'I', '9', 'm', '1', 'b', '0'}, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) '9';
      intArray0[3] = (int) 'm';
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 73, 57, 109}, intArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte) (-53);
      Byte byte1 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)89;
      Byte byte3 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte2);
      assertEquals((byte)89, (byte)byte6);
      assertFalse(byte2 == byte0);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = ';';
      charArray0[2] = 'Y';
      charArray0[3] = 'T';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'K', ';', 'Y', 'T'}, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'Y';
      floatArray0[1] = (float) 'K';
      floatArray0[2] = (float) byte0;
      floatArray0[3] = 88.0F;
      floatArray0[4] = (float) (byte) (-53);
      ArrayUtils.swap(floatArray0, (-2648), (int) (byte) (-53), 537);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {89.0F, 75.0F, (-53.0F), 88.0F, (-53.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-53), (int) (byte) (-53));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) boolean1, "org.apache.commons.lang3.ArrayUtils");
      assertEquals("true", string0);
      assertTrue(boolean1.equals((Object)boolean3));
      assertNotNull(string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) (byte) (-53);
      floatArray0[2] = (float) '9';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1116.3253F));
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {69.0F, (-53.0F), 57.0F}, floatArray0, 0.01F);
      
      boolean boolean4 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean4);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.1, (int) (byte) (-53), (double) 2);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(shortArray0, 0, (int) (short)1205);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) (-1641);
      ArrayUtils.reverse(doubleArray0, 110, 122);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, (-1641.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)27;
      intArray0[1] = (int) (short)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertEquals(1, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.45405958165974764, 1488);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The type must not be null";
      stringArray0[1] = "VGi";
      stringArray0[2] = ".YpQx";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 1488, 36);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 36;
      longArray0[1] = (long) 1488;
      longArray0[2] = (long) 1488;
      long[] longArray1 = bitSet0.toLongArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray1);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1488;
      intArray0[1] = 36;
      intArray0[2] = 101;
      intArray0[3] = 4544;
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (-2357), 1967);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-64.0F);
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      char[] charArray1 = ArrayUtils.removeAllOccurences((char[]) null, 'G');
      assertNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {(-64.0F), 1.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) 0;
      floatArray0[2] = 100.0F;
      floatArray0[3] = 2536.1663F;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 100.0F;
      floatArray1[1] = 2536.1663F;
      floatArray1[2] = (float) 0;
      floatArray1[3] = 2536.1663F;
      floatArray1[4] = 297.05457F;
      floatArray1[5] = 2536.1663F;
      floatArray1[6] = 100.0F;
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray1);
      assertEquals(12, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 100.0F, 2536.1663F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {100.0F, 2536.1663F, 0.0F, 2536.1663F, 297.05457F, 2536.1663F, 100.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "\"~L\n Js>k'%");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 2536.1663F;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertEquals(12, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertEquals(12, floatArray3.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 100.0F, 2536.1663F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {100.0F, 2536.1663F, 0.0F, 2536.1663F, 297.05457F, 2536.1663F, 100.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray3);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray1);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Byte byte0 = Byte.valueOf((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("92", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2146368071);
      intArray0[1] = (-2146368071);
      intArray0[2] = (int) (byte)92;
      intArray0[3] = (int) (byte)92;
      intArray0[4] = (int) (byte)92;
      ArrayUtils.shift(intArray0, 3404);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2146368071), 92, 92, 92, (-2146368071)}, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-695.0), Integer.MAX_VALUE, 2584.060730959);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      int[] intArray0 = new int[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-2649.1631212467883), (double) (short)0);
      assertNotNull(doubleStream0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0;
      ArrayUtils.shift(intArray0, 3376);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (short) (-1192);
      floatArray0[3] = (float) (short) (-1192);
      floatArray0[5] = (float) (short)401;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1192.0F), (-1192.0F), 0.0F, 401.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)256;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2109135724), (int) (short) (-1192));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {256.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1192);
      shortArray0[1] = (short) (-1192);
      shortArray0[2] = (short)401;
      shortArray0[3] = (short)401;
      shortArray0[4] = (short)256;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1192));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1192), (short) (-1192), (short)401, (short)401, (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1192), (short) (-1192), (short) (-1192), (short)401, (short)401, (short)256}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte)8, (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)100;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(11L);
      assertEquals(11L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2581));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)100;
      doubleArray0[1] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) (short)100);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0, 0.0, 100.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (double) (short)0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0, 0.0, 100.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {100.0, 100.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short) (-1);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals((short) (-1), object0);
      assertEquals(9, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short) (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'h';
      objectArray0[0] = (Object) 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-1), 579);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'q', 'h', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'q', 'h', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {'q', 'h', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'q', 'h', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1288;
      shortArray0[1] = (short)1284;
      shortArray0[2] = (short) (-1020);
      shortArray0[3] = (short)1;
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '4';
      charArray0[2] = '?';
      charArray0[3] = ';';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-434), (int) (short)1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'?', '4', '?', ';'}, charArray0);
      assertArrayEquals(new char[] {'?'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1288, (short)1284, (short) (-1020), (short)1, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(5, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {5L, 5L}, longArray0);
      assertArrayEquals(new long[] {5L, 5L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2536.0F);
      ArrayUtils.swap((short[]) null, (-76), 53);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2536.0F);
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (-2279));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 1L);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-1289), (-1289));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) long0, (-6));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1289);
      intArray0[1] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Long long0 = new Long((-1429L));
      assertEquals((-1429L), (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertEquals((-1429L), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0, (-1));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-35);
      byteArray0[8] = (byte)89;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)5, (-879));
      assertEquals(6, int1);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-27), (byte) (-1), (byte) (-5), (byte) (-119), (byte) (-70), (byte)5, (byte) (-35), (byte)89}, byteArray0);
      assertFalse(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-70));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-27), (byte) (-1), (byte) (-5), (byte) (-119), (byte) (-70), (byte)5, (byte) (-35), (byte)89}, byteArray0);
      assertEquals(6, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)94);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-27), (byte) (-1), (byte) (-5), (byte) (-119), (byte) (-70), (byte)5, (byte) (-35), (byte)89}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-27), (byte) (-1), (byte) (-5), (byte) (-119), (byte) (-70), (byte)5, (byte) (-35), (byte)89}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(4, int2);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte) (-14)}, byteArray0);
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) (byte) (-14);
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'n';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2973), (-2973));
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'n', 'h', 'h', 'h', 'n'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[25];
      shortArray0[0] = (short) (byte) (-14);
      shortArray0[1] = (short) (byte) (-14);
      shortArray0[2] = (short)6;
      shortArray0[3] = (short) (byte) (-14);
      shortArray0[4] = (short) (-4);
      shortArray0[5] = (short) (byte) (-14);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(25, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      charArray0[2] = '?';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2107715431), (-773));
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '?'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'S', (-734));
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '?'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      
      ArrayUtils.swap((boolean[]) null, 90, 1612, 15);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (long) 15;
      longArray0[2] = (long) (short)427;
      longArray0[3] = (long) (short)1136;
      longArray0[4] = (long) (short)1136;
      longArray0[5] = (long) 1612;
      longArray0[6] = (long) (short)1136;
      longArray0[7] = (long) 15;
      ArrayUtils.reverse(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {15L, 1136L, 1612L, 1136L, 1136L, 427L, 15L, 1136L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)59;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-142);
      shortArray0[3] = (short)2522;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)59, (short)1, (short) (-142), (short)2522}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, (-993), 15, (int) (short)1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.add((char[]) null, 'L');
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'L'}, charArray1);
      assertNotNull(charArray1);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'L');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-576.25F);
      ArrayUtils.swap(floatArray0, 256, 419);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-576.25F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift((int[]) null, 1844);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      AbstractMap.SimpleEntry<Integer, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 6);
      Integer integer0 = new Integer((-1242));
      assertEquals((-1242), (int)integer0);
      assertNotNull(integer0);
      
      Character character0 = Character.valueOf('2');
      assertEquals('2', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleEntry<Integer, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Character>(integer0, character0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry3;
      Integer integer1 = new Integer((short)1136);
      assertEquals(1136, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertNotNull(abstractMap_SimpleEntry4);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, character0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry5);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry5;
      Byte byte0 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, byte0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertNotNull(abstractMap_SimpleEntry6);
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry6;
      AbstractMap.SimpleEntry<Integer, Object>[] abstractMap_SimpleEntryArray1 = ArrayUtils.add(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntry6);
      assertEquals(6, abstractMap_SimpleEntryArray0.length);
      assertEquals(7, abstractMap_SimpleEntryArray1.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry3);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry5);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry4);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotNull(abstractMap_SimpleEntryArray1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)888;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short)10;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)888, (short)83, (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short)888, (short)83, (short)10}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      AbstractMap.SimpleEntry<Integer, Object>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Object>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 6);
      Integer integer0 = new Integer((-1242));
      assertEquals((-1242), (int)integer0);
      assertNotNull(integer0);
      
      Character character0 = Character.valueOf('2');
      assertEquals('2', (char)character0);
      assertNotNull(character0);
      
      AbstractMap.SimpleEntry<Integer, Character> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Character>(integer0, character0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry3);
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry3;
      Integer integer1 = new Integer((short)1136);
      assertEquals(1136, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertNotNull(abstractMap_SimpleEntry4);
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, character0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertNotNull(abstractMap_SimpleEntry5);
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry5;
      Byte byte0 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, byte0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertNotNull(abstractMap_SimpleEntry6);
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry6;
      AbstractMap.SimpleEntry<Integer, Object>[] abstractMap_SimpleEntryArray1 = ArrayUtils.add(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntry6);
      assertEquals(6, abstractMap_SimpleEntryArray0.length);
      assertEquals(7, abstractMap_SimpleEntryArray1.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry5);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry3);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry4);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotNull(abstractMap_SimpleEntryArray1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[1] = booleanArray0[0];
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[4] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[5] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, (String) null);
      assertEquals(6, stringArray0.length);
      assertEquals(6, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) long1);
      assertEquals((-1), int0);
      assertFalse(long1.equals((Object)long0));
      
      float[] floatArray0 = new float[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      byteArray0[1] = (byte)0;
      longArray0[2] = (-557L);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (-1494);
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (-557L);
      longArray0[7] = (long) 0;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) (byte)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "gd{8[Q?b2L/");
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-114.748121094);
      doubleArray0[6] = 2293.691633576896;
      doubleArray0[7] = 91.44177807536421;
      ArrayUtils.swap(doubleArray0, (-987), (-987), (-987));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, (-1.0), 3.0, Double.NaN, 0.0, (-114.748121094), 2293.691633576896, 91.44177807536421}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-987);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 3.0;
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 0.0);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {(-987.0), Double.NaN, 3.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-987.0), Double.NaN, 3.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (-987);
      floatArray0[2] = (float) (-987);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-987.0F), (-987));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, (-987.0F), (-987.0F)}, floatArray0, 0.01F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{1, 2}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-987);
      longArray0[1] = (long) (-987);
      longArray0[2] = (long) (-987);
      longArray0[3] = (long) (-987);
      longArray0[4] = (long) (-987);
      longArray0[5] = (long) (-987);
      ArrayUtils.reverse(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-987L), (-987L), (-987L), (-987L), (-987L), (-987L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)45;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-101), (int) (byte)45);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)44, (byte)33, (byte)46, (byte) (-101), (byte) (-24), (byte)111, (byte)45}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte)23;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)64, (byte) (-23), (byte)104, (byte) (-1), (byte)105, (byte)0, (byte) (-36), (byte)23}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'S';
      charArray0[2] = '?';
      charArray0[3] = 's';
      charArray0[4] = ',';
      charArray0[5] = 'V';
      charArray0[6] = 'S';
      charArray0[7] = '5';
      charArray0[8] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '5');
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'t', 'S', '?', 's', ',', 'V', 'S', '5', 'B'}, charArray0);
      assertEquals("{7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2555.3374F;
      ArrayUtils.shift(floatArray0, (-641));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2555.3374F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[2] = 'z';
      charArray0[3] = '?';
      charArray0[4] = 'w';
      charArray0[5] = 't';
      charArray0[6] = '.';
      int int0 = ArrayUtils.indexOf(charArray0, '?');
      assertEquals(3, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'.', '\u0000', 'z', '?', 'w', 't', '.', '\u0000', '\u0000'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("hE|ewE'@i=8[]keb?J");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf(true);
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.valueOf(false);
      assertFalse(boolean8);
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean0));
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1250.9F;
      floatArray0[1] = (float) (-2242);
      floatArray0[2] = 883.3695F;
      floatArray0[3] = 883.3695F;
      floatArray0[4] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-2242));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {883.3695F, 883.3695F, (-1.0F), 1250.9F, (-2242.0F)}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 'X';
      longArray0[5] = (-2240L);
      longArray0[6] = (long) 'X';
      longArray0[7] = (long) 'X';
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 88L, (-2240L), 88L, 88L, 88L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long long0 = 116L;
      Long long1 = new Long(116L);
      assertEquals(116L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-218L));
      assertEquals((-218L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(116L);
      assertEquals(116L, (long)long3);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertEquals(116L, (long)long4);
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {116L, (-218L), 116L, 116L}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-64);
      shortArray0[1] = (short) (byte) (-64);
      shortArray0[2] = (short) (byte) (-64);
      shortArray0[3] = (short) (byte) (-64);
      shortArray0[4] = (short) (byte) (-64);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-64), (short) (-64), (short) (-64), (short) (-64), (short) (-64)}, shortArray0);
      
      Integer integer0 = new Integer((short) (-64));
      assertEquals((-64), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) long3);
      assertEquals(4, longArray0.length);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long4));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom((-218L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)2;
      ArrayUtils.shift(byteArray0, (-392), 1224, (int) (byte)32);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte)2, (byte)2, (byte)0, (byte) (-102)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-102));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte) (-102), (byte)46, (byte)2}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1224;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1224L}, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Character character0 = new Character('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ']');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-392));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-3590);
      intArray0[4] = 4719;
      intArray0[5] = (-690);
      intArray0[6] = (-534);
      intArray0[7] = (-2238);
      int int0 = ArrayUtils.indexOf(intArray0, 107, (-189));
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1, (-1), (-1), (-3590), 4719, (-690), (-534), (-2238)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-1670));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) bitSet0;
      objectArray1[1] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(boolean0);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-923);
      shortArray0[1] = (short) (-2568);
      shortArray0[2] = (short) (-3188);
      shortArray0[3] = (short) (-269);
      shortArray0[4] = (short) (-2568);
      shortArray0[5] = (short)3422;
      shortArray0[6] = (short) (-2568);
      shortArray0[7] = (short)3422;
      shortArray0[8] = (short) (-269);
      ArrayUtils.swap(shortArray0, (int) (short)3422, (-483), 2126221433);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-923), (short) (-2568), (short) (-3188), (short) (-269), (short) (-2568), (short)3422, (short) (-2568), (short)3422, (short) (-269)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 725.7912605296542, 8, 2908.96218006);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[2] = 'Z';
      charArray0[3] = 'd';
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 'd';
      floatArray0[4] = (float) 8;
      floatArray0[5] = (float) 'd';
      floatArray0[6] = (float) 8;
      floatArray0[7] = (float) '\u0000';
      floatArray0[8] = (float) 'o';
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 'd');
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 8.0F, 100.0F, 0.0F, 8.0F, 100.0F, 8.0F, 0.0F, 111.0F}, floatArray0, 0.01F);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(8);
      assertEquals(8L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(8);
      assertEquals(8L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1522L));
      assertEquals((-1522L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'd', 'Z', '\u0000', '!'}, charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'o';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) '\u0000';
      intArray0[3] = (int) 'd';
      intArray0[4] = (int) '\u0000';
      intArray0[5] = (int) 'd';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 111);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {111, 100, 0, 100, 0, 100}, intArray0);
      assertArrayEquals(new int[] {111, 111, 100, 0, 100, 0, 100}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2536);
      doubleArray0[3] = (double) 0;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.1, 0.0, (-2536.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-720.08611911938), 0, (-792.918));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 100.0F;
      floatArray0[3] = 2536.1663F;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 100.0F;
      floatArray1[1] = 2536.1663F;
      floatArray1[2] = (float) 0;
      floatArray1[3] = 2536.1663F;
      floatArray1[4] = 297.05457F;
      floatArray1[5] = 2536.1663F;
      floatArray1[6] = 100.0F;
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray1);
      assertEquals(12, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 100.0F, 2536.1663F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {100.0F, 2536.1663F, 0.0F, 2536.1663F, 297.05457F, 2536.1663F, 100.0F}, floatArray1, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "\"~L}n Js>k'%}");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 100.0F;
      doubleArray1[1] = (double) 2536.1663F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = 1587.1057;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) 2536.1663F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) 100.0F, 0, 0.0);
      assertEquals(0, int0);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {100.0, 2536.166259765625, 0.0, 1587.1057, 1.0, 2536.166259765625}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'C';
      charArray0[2] = 'n';
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'E';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'n';
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 'n';
      doubleArray0[4] = (double) 'E';
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {110.0, 1.0, 1.0, 110.0, 69.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-6830), 238);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {110.0, 1.0, 1.0, 110.0, 69.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {110.0, 1.0, 1.0, 110.0, 69.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'E', 'C', 'n'}, charArray0);
      assertArrayEquals(new char[] {'E', 'C', 'n'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2339);
      doubleArray2[1] = (double) (-2339);
      doubleArray2[2] = 645.1937804429498;
      double[] doubleArray3 = ArrayUtils.removeElement(doubleArray2, (-1242.8854398780777));
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {(-2339.0), (-2339.0), 645.1937804429498}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2339.0), (-2339.0), 645.1937804429498}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      
      int int0 = ArrayUtils.indexOf(charArray1, 'Y', 21);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'E', 'C', 'n'}, charArray0);
      assertArrayEquals(new char[] {'E', 'C', 'n'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray3, 0.7, (-2339));
      assertEquals((-1), int1);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {(-2339.0), (-2339.0), 645.1937804429498}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2339.0), (-2339.0), 645.1937804429498}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long long0 = 116L;
      Long long1 = new Long(116L);
      assertEquals(116L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-218L));
      assertEquals((-218L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(116L);
      assertEquals(116L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertEquals(116L, (long)long4);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {116L, (-218L), 116L, 116L}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-64);
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 11, (int) (byte) (-2));
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) long0, "byte");
      assertEquals("116", string0);
      assertNotNull(string0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 11);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 116L, (int) (byte) (-2), (double) 1.0F);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-53);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-6), 56);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-53), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-53), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      String string0 = ArrayUtils.toString((Object) character0, (String) null);
      assertEquals("9", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-6);
      floatArray0[1] = (float) (byte) (-6);
      floatArray0[2] = (float) (byte) (-6);
      floatArray0[3] = (float) (byte) (-6);
      floatArray0[4] = (float) '9';
      floatArray0[5] = (float) 56;
      floatArray0[6] = (-395.2835F);
      floatArray0[7] = (float) 56;
      floatArray0[8] = (float) 56;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-6.0F), (-6.0F), (-6.0F), (-6.0F), 57.0F, 56.0F, (-395.2835F), 56.0F, 56.0F}, floatArray0, 0.01F);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-53);
      byteArray2[1] = (byte) (-6);
      byteArray2[2] = (byte) (-6);
      byteArray2[3] = (byte) (-53);
      byteArray2[4] = (byte) (-53);
      byteArray2[5] = (byte) (-53);
      byteArray2[6] = (byte) (-6);
      byteArray2[7] = (byte) (-53);
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertFalse(boolean0);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-6), (byte) (-6), (byte) (-53), (byte) (-53), (byte) (-53), (byte) (-6), (byte) (-53)}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-6);
      doubleArray0[1] = (double) (byte) (-53);
      doubleArray0[2] = (double) 56.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-6.0F), 2, (double) 56.0F);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-6.0), (-53.0), 56.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      short[] shortArray0 = null;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1569);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 300.7491);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {300.7491}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((short[]) null, 0, 18);
      ArrayUtils.reverse(doubleArray0, (-1641), (-1641));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 18;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {18L}, longArray0);
      assertArrayEquals(new long[] {18L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-112);
      Byte byte1 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)8;
      Byte byte4 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte) (-112), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte0 == byte3);
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte0);
      assertEquals((byte) (-112), (byte)byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte0 == byte3);
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 4917.0F;
      floatArray0[1] = (-1460.64F);
      floatArray0[2] = 84.53192F;
      floatArray0[3] = 5746.4F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1465.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) ';';
      intArray0[2] = (int) ';';
      intArray0[3] = (int) 'k';
      intArray0[4] = (int) ';';
      intArray0[5] = (int) ';';
      intArray0[6] = (int) ';';
      intArray0[7] = (int) ';';
      boolean boolean0 = ArrayUtils.contains(intArray0, 53);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {59, 59, 59, 107, 59, 59, 59, 59}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 107, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-269);
      shortArray0[1] = (short)114;
      shortArray0[2] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short) (-269), (-115), (-2146448955));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-269), (short)114, (short)0}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-2536));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Character character0 = new Character('U');
      assertEquals('U', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('U');
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('F');
      assertEquals('F', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('(');
      assertEquals('(', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)962;
      shortArray0[1] = (short) (-3853);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-3853);
      shortArray0[4] = (short) (-3853);
      shortArray0[5] = (short)962;
      shortArray0[6] = (short)290;
      shortArray0[7] = (short)256;
      shortArray0[8] = (short)972;
      ArrayUtils.shift(shortArray0, (int) (short)256, (int) (short) (-3853), (-895));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)962, (short) (-3853), (short)2, (short) (-3853), (short) (-3853), (short)962, (short)290, (short)256, (short)972}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)256;
      doubleArray0[1] = (double) (short) (-3853);
      doubleArray0[2] = (double) (short) (-3853);
      doubleArray0[3] = 1043.2288564;
      doubleArray0[4] = (double) 1L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)256, (int) (short)2);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {256.0, (-3853.0), (-3853.0), 1043.2288564, 1.0}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 4675L, (-270));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, 0L}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      Integer[] integerArray0 = new Integer[7];
      try { 
        Integer.valueOf("&r", (-895));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -895 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertEquals('', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('');
      assertEquals('', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('6');
      assertEquals('6', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('N');
      assertEquals('N', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1881), 22);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[1] = booleanArray0[0];
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[3] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[4] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[5] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'X';
      floatArray0[1] = (float) 'X';
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {88.0F, 88.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {88.0F, 88.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((long[]) null, 0, (-2575), 1532);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 72.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {72.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {72.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long long0 = 116L;
      Long long1 = new Long(116L);
      assertEquals(116L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-218L));
      assertEquals((-218L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2074.4814F;
      floatArray0[1] = (float) 116L;
      floatArray0[2] = (float) (-1363L);
      floatArray0[3] = (float) (-1363L);
      floatArray0[4] = (float) long0;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-1049);
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-1049));
      assertEquals(5, int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {2074.4814F, 116.0F, (-1363.0F), (-1363.0F), 116.0F, 0.0F, (-1049.0F)}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer((byte) (-64));
      assertEquals((-64), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = ArrayUtils.indexOf((Object[]) longArray0, (Object) null);
      assertEquals(2, int1);
      assertEquals(4, longArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-3696);
      intArray0[2] = 1967;
      ArrayUtils.swap(intArray0, (-3696), (-2674));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-3696), 1967}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1898);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, (-3696), 1967}, intArray0);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-18L));
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'c');
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray2.length);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertArrayEquals(new char[] {'c'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)70;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)98);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)98, (byte)70}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-269);
      ArrayUtils.shift(shortArray0, (-1912), 1, (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-269)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 36);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      Character character0 = new Character('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('r');
      assertEquals('r', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('\'');
      assertEquals('\'', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('E');
      assertEquals('E', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
      
      boolean boolean4 = ArrayUtils.contains(byteArray0, (byte) (-104));
      assertTrue(boolean4);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = 'k';
      charArray0[4] = ';';
      charArray0[5] = ';';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ';';
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {59.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)9364;
      shortArray0[1] = (short)646;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)365;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)391, (-2));
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)9364, (short)646, (short)48, (short)365}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3376;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)79);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 3376;
      longArray0[1] = (long) (short)79;
      longArray0[2] = (long) (-2536);
      longArray0[3] = (long) 0;
      longArray0[4] = (-1L);
      longArray0[5] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2366), (int) (short)79);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {3376L, 79L, (-2536L), 0L, (-1L), 0L}, longArray1);
      assertArrayEquals(new long[] {3376L, 79L, (-2536L), 0L, (-1L), 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3376.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)79, (-1));
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1687;
      shortArray0[1] = (short)1687;
      shortArray0[2] = (short)1687;
      shortArray0[3] = (short)1687;
      shortArray0[4] = (short)1687;
      shortArray0[5] = (short)1687;
      shortArray0[6] = (short)1687;
      shortArray0[7] = (short)1687;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1687);
      assertEquals(0, int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687}, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)1687;
      longArray0[1] = (long) (short)1687;
      longArray0[2] = (long) (short)1687;
      longArray0[3] = (long) (short)1687;
      longArray0[4] = (long) (short)1687;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)1687, 0);
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1687L, 1687L, 1687L, 1687L, 1687L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1687L;
      doubleArray0[1] = (double) 1687L;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1687.0, 1687.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)1687, (int) (short)1687);
      assertEquals(7, int1);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687}, shortArray0);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687, (short)1687}, shortArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-828);
      intArray0[1] = 119;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-828);
      floatArray0[1] = (float) 36;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 36;
      floatArray0[4] = (float) (-828);
      floatArray0[5] = (float) (-828);
      floatArray0[6] = (float) 119;
      floatArray0[7] = (float) 36;
      floatArray0[8] = (float) (-1);
      ArrayUtils.reverse(floatArray0, 79, 7);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-828.0F), 36.0F, (-1.0F), 36.0F, (-828.0F), (-828.0F), 119.0F, 36.0F, (-1.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, 1576, 119, 119);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-828.0F), 36.0F, (-1.0F), 36.0F, (-828.0F), (-828.0F), 119.0F, 36.0F, (-1.0F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 36.0F);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-828.0F), 36.0F, (-1.0F), 36.0F, (-828.0F), (-828.0F), 119.0F, 36.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals("{1, 3, 7}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      charArray0[3] = 'p';
      charArray0[4] = 's';
      charArray0[5] = 'o';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertArrayEquals(new char[] {'1', 's', '#', 'p', 's', 'o'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)43, (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)43);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)43}, byteArray0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('U');
      assertEquals('U', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('U', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('p');
      assertEquals('p', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('Z');
      assertEquals('Z', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character0);
      assertEquals('U', (char)character4);
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('R');
      assertEquals('R', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('Z');
      assertEquals('Z', (char)character6);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character3));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      boolean boolean0 = ArrayUtils.isSorted(characterArray0);
      assertFalse(boolean0);
      assertEquals(7, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-1));
      assertEquals(9, objectArray0.length);
      assertNull(object1);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(9, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-1));
      assertEquals(9, objectArray0.length);
      assertEquals(9, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1912);
      assertEquals(1912, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2247));
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1912}, intArray0);
      assertNotNull(intArray0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 27, (-2247));
      assertNull(shortArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1114111);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {1912}, intArray0);
      assertArrayEquals(new int[] {1912}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      long[] longArray0 = new long[8];
      ArrayUtils.shift((char[]) null, 2);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      short[] shortArray0 = new short[3];
      ArrayUtils.reverse(shortArray0, 2126221433, 8);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = (double) (-1641);
      doubleArray0[3] = (double) 110;
      doubleArray0[4] = (double) 122;
      doubleArray0[5] = (double) 8;
      doubleArray0[6] = (double) 110;
      doubleArray0[7] = (double) 2126221433;
      ArrayUtils.reverse(doubleArray0, 2126221433, 2126221433);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 10.0, (-1641.0), 110.0, 122.0, 8.0, 110.0, 2.126221433E9}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-3320);
      longArray0[1] = (long) 122;
      longArray0[2] = 1472L;
      longArray0[3] = (long) (short) (-3320);
      longArray0[4] = (long) 122;
      longArray0[5] = (long) (short) (-3320);
      longArray0[6] = (long) 8;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-3320L), 122L, 1472L, (-3320L), 122L, (-3320L), 8L}, longArray1);
      assertArrayEquals(new long[] {(-3320L), 122L, 1472L, (-3320L), 122L, (-3320L), 8L}, longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(shortArray0, 0, (int) (short)1205);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) (-1641);
      ArrayUtils.reverse(doubleArray0, 110, 122);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, (-1641.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 122;
      longArray0[2] = (long) 122;
      longArray0[3] = (long) 122;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (short)27;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 'E';
      longArray0[8] = (long) (short)27;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 122L, 122L, 122L, 0L, 27L, 0L, 69L, 27L}, longArray1);
      assertArrayEquals(new long[] {0L, 122L, 122L, 122L, 0L, 27L, 0L, 69L, 27L}, longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) null, 122);
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-5);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-3802);
      shortArray0[3] = (short)520;
      shortArray0[4] = (short) (-3783);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)1532;
      shortArray0[7] = (short)79;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-5), (short) (-1), (short) (-3802), (short)520, (short) (-3783), (short)2, (short)1532, (short)79}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)64;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-1), (byte)1, (byte)64, (byte) (-33)}, byteArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1279);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-5), (short) (-1), (short) (-3802), (short)520, (short) (-3783), (short)2, (short)1532, (short)79}, shortArray0);
      assertArrayEquals(new short[] {(short) (-5), (short) (-1), (short) (-3802), (short)520, (short) (-3783), (short)2, (short)1532, (short)79}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      Double double0 = new Double((-3631.7));
      assertEquals((-3631.7), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((short)1136);
      assertEquals(1136.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(3.0);
      assertEquals(3.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(661.479);
      assertEquals(661.479, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double double5 = new Double(51.0);
      assertEquals(51.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      Float float0 = new Float((-1656.942));
      assertEquals((-1656.942F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals((-1656.942F), object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1428);
      longArray0[1] = (long) (-1428);
      longArray0[2] = (long) (-1428);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short)1136, (-1814));
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1428L), (-1428L), (-1428L)}, longArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 0;
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)2876);
      assertEquals((short)2876, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1089);
      assertEquals((short)1089, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short)1089, (short)short2);
      assertEquals(4, shortArray0.length);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      try { 
        Short.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)32;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)377;
      shortArray0[5] = (short) (-971);
      shortArray0[6] = (short) (-26);
      shortArray0[7] = (short) (-4091);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)15, (short)32, (short)377, (short) (-971), (short) (-26), (short) (-4091)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 1012, (int) (short)377);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)15, (short)32, (short)377, (short) (-971), (short) (-26), (short) (-4091)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)32;
      shortArray0[2] = (short)15;
      shortArray0[3] = (short) (-281);
      shortArray0[4] = (short)377;
      shortArray0[5] = (short) (-971);
      shortArray0[6] = (short) (-26);
      shortArray0[7] = (short) (-4091);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)15, (short) (-281), (short)377, (short) (-971), (short) (-26), (short) (-4091)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 1012, (int) (short)377);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)15, (short) (-281), (short)377, (short) (-971), (short) (-26), (short) (-4091)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'e';
      charArray0[2] = 'Z';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'Y', 'e', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'e', 'Z', 'Y', 'e', 'Z'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = ';';
      charArray0[3] = 'k';
      charArray0[4] = ';';
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-26);
      shortArray0[1] = (short) (-26);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-26), (short) (-26)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short) (-26), 1064);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-26), (short) (-26)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', ';', ';', 'k', ';', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3371, (-2555));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2555);
      LongStream longStream1 = mockRandom0.longs(1L);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      assertNotNull(longStream1);
      
      ArrayUtils.shift((Object[]) null, 0, 3371, 90);
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      LongStream longStream2 = mockRandom1.longs();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(longStream2.equals((Object)longStream0));
      assertFalse(longStream2.equals((Object)longStream1));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(longStream2, longStream0);
      assertNotSame(longStream2, longStream1);
      assertNotNull(longStream2);
      
      mockRandom1.setSeed(0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(15, doubleArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      ArrayUtils.shift((Object[]) null, 8192, (-2183), 150);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(15, doubleArray1.length);
      assertEquals(15, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift((Object[]) null, 2190, (-1368), (-55));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte) (-64), (byte) (-1), (byte)99, (byte)1}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      charArray0[5] = 'F';
      charArray0[6] = 's';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'K');
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', 'F', 's'}, charArray1);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', 'F', 's'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.add(charArray1, 'Z');
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray2.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', 'F', 's'}, charArray1);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', 'F', 's', 'Z'}, charArray2);
      assertArrayEquals(new char[] {'|', '|', '|', '|', '|', 'F', 's'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray2);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 725.7912605296542, 8, 2908.96218006);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 'd';
      floatArray0[4] = (float) 8;
      floatArray0[5] = (float) 'd';
      floatArray0[6] = (float) 8;
      floatArray0[8] = (float) 'o';
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 'd');
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 8.0F, 100.0F, 0.0F, 8.0F, 100.0F, 8.0F, 0.0F, 111.0F}, floatArray0, 0.01F);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(8);
      assertEquals(8L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(8);
      assertEquals(8L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1522L));
      assertEquals((-1522L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, 1064, (-3296));
      assertNull(shortArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'd';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'Z', 'd'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'd', 'Z', 'd'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      Character character0 = new Character('#');
      assertEquals('#', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('Y');
      assertEquals('Y', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('w');
      assertEquals('w', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('8');
      assertEquals('8', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-64));
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'X';
      floatArray0[2] = (float) 'X';
      floatArray0[3] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 88.0F, 88.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte byte0 = (byte) (-85);
      Byte byte1 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte) (-85)}, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (-3603);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-309);
      shortArray0[8] = (short) byte0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short) (-3603));
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)5, (short) (-85), (short) (-3603), (short) (-1), (short) (-85), (short) (-85), (short) (-1), (short) (-309), (short) (-85)}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) byte0, (int) (short)5);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'I';
      charArray0[2] = 'c';
      charArray0[3] = ']';
      charArray0[4] = '/';
      boolean boolean0 = ArrayUtils.contains(charArray0, '^');
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'C', 'I', 'c', ']', '/'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-641L), (-78));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '/';
      intArray0[1] = 433;
      intArray0[2] = (int) '/';
      intArray0[3] = (int) 'C';
      intArray0[4] = (int) ']';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 433, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, Integer.MAX_VALUE, 90);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)427;
      shortArray0[2] = (short)1136;
      shortArray0[3] = (short)1136;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short)427, (short)1136, (short)1136, (short)0}, shortArray0);
      
      ArrayUtils.swap((boolean[]) null, 90, (int) (short)1136, (int) (short)1136);
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = (Long) (long)(short)1136;
      char[] charArray1 = ArrayUtils.subarray(charArray0, 4113, 0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      ArrayUtils.reverse((byte[]) null);
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, '|');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      char[] charArray3 = ArrayUtils.add(charArray0, '|');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray3.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'|'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotNull(charArray3);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer integer0 = new Integer(2146940118);
      assertEquals(2146940118, (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) integer0);
      assertEquals(0, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-76);
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)1, (byte) (-1), (byte) (-64), (byte) (-118), (byte) (-94)}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '|');
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.add(charArray0, '9');
      assertEquals(2, charArray2.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'|', '9'}, charArray2);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-30), (int) (short) (-30));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)360;
      shortArray0[2] = (short)360;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-92);
      ArrayUtils.reverse(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92), (byte)61, (byte)61}, byteArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray0, '|');
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray2.length);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertArrayEquals(new char[] {';', ';'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      char[] charArray3 = ArrayUtils.add(charArray1, ';');
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray3.length);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {';'}, charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotNull(charArray3);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1216.2053486));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1216.2053486), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      shortArray0[6] = short1;
      shortArray0[7] = short1;
      shortArray0[8] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) short0;
      longArray0[1] = 179L;
      longArray0[2] = 2496L;
      longArray0[3] = (long) short0;
      longArray0[4] = (long) 'X';
      longArray0[5] = (long) (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1472L));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 179L, 2496L, (-1L), 88L, (-1L)}, longArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = object0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      ArrayUtils.shift(objectArray0, (int) (short)0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 972);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 972;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 37, (float) (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      Double double0 = new Double(0.7);
      assertEquals(0.7, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.7);
      assertEquals(0.7, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-33.94333));
      assertEquals((-33.94333), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(3309.3611138727);
      assertEquals(3309.3611138727, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double3;
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2199.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.7, 3309.3611138727, (-33.94333), 0.7}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2740);
      shortArray0[1] = (short) (-2116);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2711));
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2740), (short) (-2116)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)111;
      shortArray0[1] = (short)111;
      shortArray0[2] = (short) (-2283);
      shortArray0[3] = (short) (-2283);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)111, (short)111, (short) (-2283), (short) (-2283)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)90;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)1, (byte) (-103), (byte) (-114), (byte) (-1), (byte)2, (byte)90}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)1, (byte) (-103), (byte) (-114), (byte) (-1), (byte)2, (byte)90}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1266));
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)111, (short)111, (short) (-2283), (short) (-2283)}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8047);
      shortArray0[1] = (short) (-695);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-8047), (short) (-695)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2197.8293F);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-8047), (short) (-695)}, shortArray0);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short) (-695);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (short) (-695);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1084, Integer.MAX_VALUE);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 0L, (-695L), 0L, (-695L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean2);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-820), 0);
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-8047), (short) (-695)}, shortArray0);
      assertFalse(int1 == int0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-1L), 0L, (-695L), 0L, (-695L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray2);
      
      Short short0 = new Short((short) (-698));
      assertEquals((short) (-698), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short) (-8047);
      shortArray1[1] = (Short) (short) (-8047);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[0]);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-8047), (short) (-8047)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 1465;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 97;
      intArray0[4] = (-1729);
      intArray0[5] = (-1729);
      intArray0[6] = 256;
      boolean boolean0 = ArrayUtils.contains(intArray0, Integer.MAX_VALUE);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {7, 1465, Integer.MAX_VALUE, 97, (-1729), (-1729), 256}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 97;
      longArray0[1] = (long) (-1729);
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) 1465;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {97L, (-1729L), 2147483647L, 1465L}, longArray1);
      assertArrayEquals(new long[] {97L, (-1729L), 2147483647L, 1465L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-803.0);
      doubleArray0[2] = (-1210.72027);
      doubleArray0[3] = (-1928.6883016);
      doubleArray0[2] = 1590.0693295;
      doubleArray0[5] = 57.83298721;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2475.159912109375);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-803.0), 1590.0693295, (-1928.6883016), 0.0, 57.83298721, 0.0, (-2475.159912109375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 1117;
      intArray0[2] = (-1149);
      ArrayUtils.swap(intArray0, (-1149), (-2128), 3);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {3, 1117, (-1149)}, intArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 194.9813, 194.9813);
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-803.0), 1590.0693295, (-1928.6883016), 0.0, 57.83298721, 0.0, (-2475.159912109375)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) short0, 8);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 360.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, 1783.31752708, (-97.08094));
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {360.0, (-1.0), 8.0, 8.0, (-1.0)}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)360;
      shortArray0[1] = (short)360;
      shortArray0[2] = (short)360;
      shortArray0[3] = (short)360;
      shortArray0[4] = (short)360;
      shortArray0[5] = (short)1209;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)85);
      assertFalse(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)360, (short)360, (short)360, (short)360, (short)360, (short)1209}, shortArray0);
      
      Character[] characterArray0 = new Character[7];
      char char0 = 'K';
      Character character0 = new Character('K');
      assertEquals('K', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('K', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('z');
      assertEquals('z', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertEquals('K', (char)character3);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('K');
      assertEquals('K', (char)character4);
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('z');
      assertEquals('z', (char)character5);
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('s');
      assertEquals('s', (char)character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char0));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'E');
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'K', 'K', 'z', 'K', 'K', 'z', 's'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-828), (-828), (-828));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (double) '/';
      doubleArray0[2] = (double) '/';
      doubleArray0[3] = 100.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-828);
      intArray0[1] = (-828);
      intArray0[2] = (int) '/';
      intArray0[3] = (-828);
      intArray0[4] = (-828);
      intArray0[5] = (-828);
      intArray0[6] = (int) '/';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-828), (-828), 47, (-828), (-828), (-828), 47}, intArray0);
      assertNotNull(integerArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 100.0;
      objectArray0[1] = (Object) (-828);
      objectArray0[2] = (Object) '/';
      objectArray0[3] = (Object) (-828);
      objectArray0[4] = (Object) (-828);
      objectArray0[5] = (Object) (-828);
      Character character0 = new Character('/');
      assertEquals('/', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0, (-828));
      assertEquals(2, int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3371, (-2555));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2555);
      doubleArray0[3] = (double) 0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (int) (short)0, (int) (short)0, 5);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'I';
      charArray0[2] = '&';
      charArray0[3] = '|';
      charArray0[4] = 'p';
      charArray0[5] = '%';
      charArray0[6] = 'I';
      int int1 = ArrayUtils.indexOf(charArray0, '&');
      assertEquals(2, int1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'l', 'I', '&', '|', 'p', '%', 'I'}, charArray0);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)66, (byte)46, (byte) (-86), (byte) (-74), (byte) (-1), (byte) (-30), (byte)0}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 274L;
      longArray0[1] = 119L;
      longArray0[2] = (-2568L);
      longArray0[3] = (-1122L);
      longArray0[4] = 2277L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {274L, 119L, (-2568L), (-1122L), 2277L}, longArray0);
      assertArrayEquals(new long[] {274L, 119L, (-2568L), (-1122L), 2277L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)85;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)13);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-3), (byte)123, (byte)48, (byte) (-74), (byte)8, (byte)85}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, (-64L), (-64L), (-64L), (-64L)}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 71L;
      ArrayUtils.swap(doubleArray0, 3642, Integer.MIN_VALUE, (-987));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {71.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 71.0;
      doubleArray1[1] = (Double) 71.0;
      doubleArray1[2] = (Double) 71.0;
      doubleArray1[3] = (Double) 71.0;
      Double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 69, (-1191));
      assertEquals(0, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      
      ArrayUtils.shift(longArray0, (-1191), 698, 69);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-64L), (-64L), (-64L), (-64L), 71L}, longArray0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)51);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0, (byte)51}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'G');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'G'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1834));
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.decrement();
      assertEquals((-1835.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1835.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1835), mutableInt0.shortValue());
      assertEquals((-1835), mutableInt0.intValue());
      assertEquals((-1835), (int)mutableInt0.toInteger());
      assertEquals((-1835), (int)mutableInt0.getValue());
      assertEquals("-1835", mutableInt0.toString());
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals((-1835L), mutableInt0.longValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-1835), int0);
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834L), mutableInt0.longValue());
      
      int int1 = mutableInt0.addAndGet(69);
      assertEquals((-1765), int1);
      assertFalse(int1 == int0);
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1765L), mutableInt0.longValue());
      assertEquals((short) (-1765), mutableInt0.shortValue());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765), (int)mutableInt0.toInteger());
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((byte)27, mutableInt0.byteValue());
      assertEquals((-1765), mutableInt0.intValue());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mutableInt0;
      objectArray0[1] = (Object) mutableInt0;
      objectArray0[2] = (Object) mutableInt0;
      objectArray0[3] = (Object) mutableInt0;
      objectArray0[4] = (Object) mutableInt0;
      Float float0 = new Float((double) 69);
      assertEquals(69.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (-1765));
      assertEquals((-1765.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) (-1835));
      assertEquals((-1835.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-1056.648377076));
      assertEquals((-1056.6484F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Float float0 = new Float((-64.0));
      assertEquals((-64.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.3333098F);
      assertEquals(1.3333098F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-64.0));
      assertEquals((-64.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 100.0F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 7);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 951L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-264), Integer.MAX_VALUE);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MutableInt mutableInt0 = new MutableInt((-1834));
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.decrement();
      assertEquals((-1835.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals((-1835), (int)mutableInt0.toInteger());
      assertEquals((-1835L), mutableInt0.longValue());
      assertEquals((-1835), (int)mutableInt0.getValue());
      assertEquals((-1835.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1835", mutableInt0.toString());
      assertEquals((short) (-1835), mutableInt0.shortValue());
      assertEquals((-1835), mutableInt0.intValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-1835), int0);
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1834), mutableInt0.shortValue());
      
      int int1 = mutableInt0.addAndGet(69);
      assertEquals((-1765), int1);
      assertFalse(int1 == int0);
      assertEquals((-1765), (int)mutableInt0.toInteger());
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1765), mutableInt0.shortValue());
      assertEquals((-1765), mutableInt0.intValue());
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765L), mutableInt0.longValue());
      assertEquals((byte)27, mutableInt0.byteValue());
      
      ArrayUtils.shift(objectArray0, 3376, 69, 0);
      assertEquals(0, objectArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(71L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1835);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1834);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1835.0), 0.0, (-1834.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1834);
      intArray0[1] = (-1765);
      intArray0[2] = 56;
      ArrayUtils.shuffle(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1765), 56, (-1834)}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift(objectArray0, (-1834), 4, (-3215));
      assertEquals(0, objectArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1835.0), 0.0, (-1834.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 999, (-1765));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      float[] floatArray0 = new float[6];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short)100;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) long0);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift(floatArray0, (int) (byte) (-7));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-557L);
      longArray0[1] = (long) (short)100;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {100L, (-557L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1317, 52, 1317);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1117;
      floatArray0[1] = (float) 1317;
      floatArray0[2] = (float) (-1626);
      ArrayUtils.reverse(floatArray0, 3850, 3738);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1117.0F, 1317.0F, (-1626.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1626.0F), 1317.0F, 1117.0F}, floatArray0, 0.01F);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray1 = new boolean[0];
      ArrayUtils.shuffle(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int[] intArray0 = new int[11];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(11, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(11, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 0;
      Short[] shortArray0 = new Short[4];
      short short0 = (short)2876;
      Short short1 = new Short((short)2876);
      assertEquals((short)2876, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)1089);
      assertEquals((short)1089, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) shortArray0[1]);
      assertEquals((short)1089, (short)short3);
      assertEquals(4, shortArray0.length);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      try { 
        Short.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 0;
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)2876);
      assertEquals((short)2876, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1089);
      assertEquals((short)1089, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short)1089, (short)short2);
      assertEquals(4, shortArray0.length);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      try { 
        Short.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer integer0 = new Integer(160);
      assertEquals(160, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'k');
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 160;
      longArray0[2] = (long) 'k';
      longArray0[3] = (long) 160;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 'k';
      longArray0[7] = (long) 'k';
      ArrayUtils.shift(longArray0, 57);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {107L, 0L, 160L, 107L, 160L, 1L, 107L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-76);
      intArray0[1] = 100;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-76), 100}, intArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 100;
      objectArray0[1] = (Object) 100;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) (-76);
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) mockRandom0;
      ArrayUtils.reverse(objectArray0, 100, (-2357));
      assertEquals(7, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '2';
      charArray0[2] = 'v';
      charArray0[3] = '>';
      charArray0[4] = '.';
      charArray0[5] = '}';
      ArrayUtils.shift(charArray0, (-76));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'.', '}', '3', '2', 'v', '>'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, 1871);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1871, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = 'J';
      charArray0[2] = 'd';
      charArray0[3] = '0';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'%', 'J', 'd', '0'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'd';
      ArrayUtils.swap(floatArray0, 1041, 3376, 1269);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {100.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Double double0 = new Double(3545.30702466361);
      assertEquals(3545.30702466361, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3545.30702466361);
      assertEquals(3545.30702466361, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(4555.984);
      assertEquals(4555.984, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double3;
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      doubleArray0[3] = double3;
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'%', '%', '%', '%'}, charArray0);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = (double) '%';
      doubleArray1[2] = (double) '%';
      doubleArray1[3] = (double) '%';
      doubleArray1[4] = 4555.984;
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {4555.984, 37.0, 37.0, 37.0, 4555.984}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-62);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)82, (byte) (-62)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)82, (byte) (-62)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = '.';
      charArray0[2] = 'Y';
      charArray0[3] = '0';
      charArray0[4] = 't';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'~', '.', 'Y', '0', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1687;
      MutableInt mutableInt0 = new MutableInt((int) (short)1687);
      assertEquals(1687, (int)mutableInt0.getValue());
      assertEquals((byte) (-105), mutableInt0.byteValue());
      assertEquals(1687.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1687", mutableInt0.toString());
      assertEquals(1687, (int)mutableInt0.toInteger());
      assertEquals(1687.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1687, mutableInt0.shortValue());
      assertEquals(1687L, mutableInt0.longValue());
      assertEquals(1687, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.add((Number) (short)1687);
      assertEquals(3374L, mutableInt0.longValue());
      assertEquals(3374.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("3374", mutableInt0.toString());
      assertEquals(3374.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3374, (int)mutableInt0.getValue());
      assertEquals(3374, (int)mutableInt0.toInteger());
      assertEquals((byte)46, mutableInt0.byteValue());
      assertEquals(3374, mutableInt0.intValue());
      assertEquals((short)3374, mutableInt0.shortValue());
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(3374, (int)integer0);
      assertEquals(3374L, mutableInt0.longValue());
      assertEquals(3374.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("3374", mutableInt0.toString());
      assertEquals(3374.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3374, (int)mutableInt0.getValue());
      assertEquals(3374, (int)mutableInt0.toInteger());
      assertEquals((byte)46, mutableInt0.byteValue());
      assertEquals(3374, mutableInt0.intValue());
      assertEquals((short)3374, mutableInt0.shortValue());
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(335);
      assertEquals(335, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1463));
      assertEquals((-1463), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer3 = new Integer(1182);
      assertEquals(1182, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1182, (-1463)}, intArray0);
      assertNotNull(intArray0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean3);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1687, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 't';
      charArray0[2] = '4';
      charArray0[3] = 'K';
      charArray0[4] = '%';
      boolean boolean4 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean4);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'o', 't', '4', 'K', '%'}, charArray0);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 53, 53, (-6));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.get(objectArray0, (int)  (-1), (Object) byte0);
      assertEquals((byte) (-1), object1);
      assertEquals(9, objectArray0.length);
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) true;
      objectArray0[8] = (Object) true;
      ArrayUtils.shift(objectArray0, (-6), (-665), 711);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = ArrayUtils.removeAll(object0, (BitSet) null);
      assertNull(object1);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = null;
      objectArray0[6] = (Object) 0.0F;
      Double double0 = new Double(70.0);
      assertEquals(70.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2555.3374F;
      ArrayUtils.shift(floatArray0, (-641));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2555.3374F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 360;
      longArray0[1] = (-1611L);
      longArray0[2] = (long) (-641);
      longArray0[3] = (long) (-641);
      longArray0[4] = 0L;
      longArray0[5] = (long) 360;
      longArray0[6] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {360L, (-1611L), (-641L), (-641L), 0L, 360L, 0L}, longArray0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-75), 1136);
      assertNull(intArray0);
      
      ArrayUtils.reverse(floatArray0, 3642, 4);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2555.3374F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2555.3374F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 0, 2);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)28;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte)37;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-126), (byte)28}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte)28, (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-126), (byte)28, (byte) (-126), (byte) (-126), (byte)28, (byte)37}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      ArrayUtils.swap((int[]) null, (int) (byte) (-126), (int) (byte)28, 160);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1363L);
      doubleArray0[3] = (double) (-1363L);
      doubleArray0[2] = (double) (-1363L);
      doubleArray0[3] = (double) (-1363L);
      doubleArray0[4] = (double) (-1363L);
      doubleArray0[5] = (double) (-1363L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1898), 1580.05);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1363.0), 0.0, (-1363.0), (-1363.0), (-1363.0), (-1363.0), 0.0}, doubleArray0, 0.01);
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)48;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1126.8381F);
      floatArray0[1] = (-1126.8381F);
      floatArray0[2] = (-1126.8381F);
      floatArray0[3] = (float) (short) (-1191);
      floatArray0[4] = (-1126.8381F);
      floatArray0[5] = (float) (short) (-1191);
      floatArray0[6] = (float) (short) (-1191);
      floatArray0[7] = (float) (short) (-1191);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1126.8381F));
      assertEquals(4, int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1126.8381F), (-1126.8381F), (-1126.8381F), (-1191.0F), (-1126.8381F), (-1191.0F), (-1191.0F), (-1191.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1126.8381F);
      doubleArray0[1] = (double) (-1126.8381F);
      doubleArray0[2] = (double) 4;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2088.15682995455), (int) (short) (-1191), (-1.0));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1126.838134765625), (-1126.838134765625), 4.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1191);
      shortArray0[1] = (short) (-1191);
      shortArray0[2] = (short) (-4180);
      shortArray0[3] = (short) (-1191);
      shortArray0[4] = (short) (-1191);
      short[] shortArray1 = ArrayUtils.add(shortArray0, 4, (short)770);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1191), (short) (-1191), (short) (-4180), (short) (-1191), (short) (-1191)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1191), (short) (-1191), (short) (-4180), (short) (-1191), (short)770, (short) (-1191)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1126.8381F), (-1126.8381F), (-1126.8381F), (-1191.0F), (-1126.8381F), (-1191.0F), (-1191.0F), (-1191.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(doubleArray0, (int) (short) (-4180));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1126.838134765625), 4.0, (-1126.838134765625)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2536);
      doubleArray0[3] = (double) 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2536.0), 0, (double) (-2536));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2536.0), 0.0}, doubleArray0, 0.01);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";";
      stringArray0[1] = "yes";
      stringArray0[2] = "(8*x|Rc>zLm";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((-2649.1631212467883), (double) (short)0);
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0;
      ArrayUtils.shift(intArray0, 3376);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (short)0, 1.0);
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 957.0, 195225787, 3.0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 127);
      assertEquals(6, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 127;
      doubleArray0[1] = (double) 127;
      doubleArray0[2] = (double) 127;
      doubleArray0[3] = (double) 127;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.7, 1443.2101795189274);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {127.0, 127.0, 127.0, 127.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {127.0, 127.0, 127.0, 127.0}, doubleArray0, 0.01);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertNull(object1);
      
      objectArray0[1] = null;
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      Object object4 = ArrayUtils.get(objectArray0, 127, object3);
      assertEquals(6, objectArray0.length);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object4.equals((Object)object2));
      assertSame(object3, object4);
      assertNotSame(object3, object2);
      assertSame(object4, object3);
      assertNotSame(object4, object2);
      assertNotNull(object4);
      
      objectArray0[3] = object4;
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {127.0, 127.0, 127.0, 127.0}, doubleArray0, 0.01);
      assertEquals(4, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet1.toString());
      assertEquals(4, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertSame(bitSet1, bitSet0);
      assertSame(bitSet0, bitSet1);
      assertNotNull(bitSet1);
      
      objectArray0[4] = (Object) bitSet1;
      Float float0 = new Float((-998.0));
      assertEquals((-998.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 127;
      intArray0[1] = 127;
      intArray0[2] = 127;
      intArray0[3] = 127;
      intArray0[4] = 127;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, 81, 6232);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      org.evosuite.runtime.Random.setNextRandom(81);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 81;
      doubleArray0[1] = 69.0;
      doubleArray0[2] = (double) 6232;
      doubleArray0[3] = (double) 6232;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {81.0, 69.0, 6232.0, 6232.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 69.0);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {81.0, 69.0, 6232.0, 6232.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 81;
      longArray0[2] = (long) 81;
      int int1 = ArrayUtils.indexOf(longArray0, 46L);
      assertEquals((-1), int1);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 81L, 81L}, longArray0);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      booleanArray2[4] = true;
      boolean[] booleanArray3 = ArrayUtils.addAll(booleanArray0, booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertEquals(8, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, true}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(6232.0);
      assertEquals(6232.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 1);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(3901.420884327);
      assertEquals(3901.421F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {6232.0F, 1.0F, (-1.0F), 3901.421F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[7] = byte0;
      byte byte1 = (byte)89;
      Byte byte2 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte)89, (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte8);
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte0));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte9);
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte5));
      assertNotNull(byte9);
      
      byteArray0[8] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte) (-53), (byte)89, (byte)89, (byte)89, (byte) (-53), (byte)65, (byte)65}, byteArray1);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) byte1;
      doubleArray0[2] = (double) (byte) (-53);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-105.836552915));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 89.0, (-53.0)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '`';
      charArray0[2] = ';';
      ArrayUtils.shift(charArray0, (int) byte1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'`', ';', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-3696);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-3696);
      objectArray0[1] = (Object) (-3696);
      objectArray0[2] = (Object) (-3696);
      objectArray0[3] = (Object) (-3696);
      ArrayUtils.swap(objectArray0, (-3696), 73);
      assertEquals(4, objectArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(73);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 73;
      doubleArray0[1] = (double) 73;
      doubleArray0[2] = (double) (-3696);
      doubleArray0[3] = (double) 73;
      doubleArray0[4] = (double) (-3696);
      doubleArray0[5] = (double) (-3696);
      doubleArray0[6] = (double) (-3696);
      doubleArray0[7] = (double) (-3696);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {73.0, 73.0, (-3696.0), 73.0, (-3696.0), (-3696.0), (-3696.0), (-3696.0)}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, 1335, (-645), 504);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-697));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-697);
      intArray1[1] = (-697);
      intArray1[2] = (-697);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {(-697), (-697), (-697)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.swap((Object[]) integerArray0, (-697), 321);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {(-697), (-697), (-697)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-1850));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 69.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 81;
      doubleArray0[3] = (double) 321;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 69.0;
      doubleArray1[1] = (double) 6232;
      doubleArray1[2] = (double) (-697);
      doubleArray1[3] = (double) (-697);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {69.0, 0.0, 81.0, 321.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 6232.0, (-697.0), (-697.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 0.0);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {69.0, 6232.0, (-697.0), (-697.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      float[] floatArray0 = new float[6];
      floatArray0[3] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 3376;
      floatArray0[3] = (float) (-2536);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 363.0F);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 3376.0F, (-2536.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "oT{b4&[[kp$";
      stringArray0[1] = "E?z;r=*0nf`BG/F";
      stringArray0[2] = "oT{b4&[[kp$";
      stringArray0[3] = "oT{b4&[[kp$";
      stringArray0[4] = "oT{b4&[[kp$";
      stringArray0[5] = "oT{b4&[[kp$";
      stringArray0[6] = "oT{b4&[[kp$";
      stringArray0[7] = "oT{b4&[[kp$";
      String[] stringArray1 = ArrayUtils.removeAll(stringArray0, intArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(7, stringArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = true;
      booleanArray1[1] = boolean0;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Byte byte0 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)53);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)37);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)37}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "The Array must not be null";
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 8, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[6] = (long) 'E';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short)0);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 69L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, Float.NaN);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(longArray1, (-2601));
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 69L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean2);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Long long0 = new Long((-1087L));
      assertEquals((-1087L), (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertEquals((-1087L), object0);
      assertNotNull(object0);
      
      boolean boolean3 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'E';
      boolean boolean0 = ArrayUtils.isSorted(charArray2);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {69.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1, "4y^v+V/*?!");
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, stringArray0.length);
      assertArrayEquals(new float[] {69.0F}, floatArray0, 0.01F);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3371, (-2536));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2536);
      doubleArray0[3] = (double) 0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)1;
      ArrayUtils.shift(byteArray0, 1114111, 414, (int) (byte) (-125));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)1}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-125);
      shortArray0[1] = (short) (byte) (-125);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-291));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-125), (short) (-125)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-125), (short) (-125)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-269);
      ArrayUtils.shift(shortArray0, (-1912), 1, (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-269)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 36);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Character character0 = new Character('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('r');
      assertEquals('r', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('\'');
      assertEquals('\'', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('E');
      assertEquals('E', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-269);
      ArrayUtils.shift(shortArray0, (-1912), 1, (-1));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-269)}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 36);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-111);
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)102, (byte) (-102), (byte)9, (byte) (-93), (byte)7, (byte) (-60), (byte) (-111)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-102), (byte)9, (byte) (-93), (byte)7, (byte) (-60), (byte) (-111)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'o';
      charArray0[2] = 'I';
      ArrayUtils.shift(charArray0, 8);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000', 'C', 'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(11, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = new BitSet(11);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = new BitSet();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotNull(bitSet1);
      
      ArrayUtils.shift((char[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)89;
      Byte byte2 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte)89, (byte)byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte8);
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte9);
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte2));
      assertNotNull(byte9);
      
      byteArray0[8] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)89, (byte) (-53), (byte)89, (byte)89, (byte)89, (byte) (-53), (byte)65, (byte)65}, byteArray1);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)65;
      doubleArray0[1] = (double) byte1;
      doubleArray0[2] = (double) (byte) (-53);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-105.836552915));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 89.0, (-53.0)}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '`';
      charArray0[2] = ';';
      ArrayUtils.shift(charArray0, (int) byte1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'`', ';', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[6] = (long) 'E';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short)0);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 69L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 0, (int) (short)0, (-385));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 69L;
      floatArray0[2] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 69.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 69.0F, 0.0F, 0.0F, 69.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 9115.448F;
      floatArray0[3] = 348.1F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 9115.448F, 348.1F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 9115.448F, 348.1F, (-1.0F), 1.0F, 9115.448F, 348.1F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-6830);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-6830);
      doubleArray0[3] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, Integer.MAX_VALUE);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-6830.0), 0.0, (-6830.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6830.0), 0.0, (-6830.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'q', 'i', 'i'}, charArray0);
      assertArrayEquals(new char[] {'q', 'i', 'i'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 0.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {(-6830.0), 0.0, (-6830.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6830.0), 0.0, (-6830.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-6830.0), (-6830.0), 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      int int0 = ArrayUtils.indexOf(charArray1, 'i', (-6830));
      assertEquals(1, int0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'q', 'i', 'i'}, charArray0);
      assertArrayEquals(new char[] {'q', 'i', 'i'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) (-6830), (-5));
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-6830.0), 0.0, (-6830.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6830.0), 0.0, (-6830.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2339), (-2339));
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, 645.1937804429498);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'K', (-2339));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1349.9055258991018), (int) (byte)0);
      assertEquals((-1), int1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2339), (-2339));
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, 645.1937804429498);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-105);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)20, (byte)64, (byte)54, (byte) (-77), (byte) (-98), (byte) (-105)}, byteArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int[] intArray0 = new int[3];
      int int0 = 1668;
      intArray0[0] = 1668;
      int int1 = (-2460);
      intArray0[1] = (-2460);
      int int2 = 4092;
      intArray0[2] = 4092;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2460), 4092);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1668, (-2460), 4092}, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-803.0);
      Double double0 = new Double((-318.6996397757438));
      assertEquals((-318.6996397757438), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-1210.72027));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-2740));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Long long0 = new Long((-1429L));
      assertEquals((-1429L), (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertEquals((-1429L), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1429L);
      doubleArray0[1] = (double) (-1429L);
      doubleArray0[2] = (double) (-1429L);
      doubleArray0[3] = (double) (-1429L);
      doubleArray0[4] = 3728.286849868;
      doubleArray0[5] = (double) (-1429L);
      MockRandom mockRandom0 = new MockRandom((-64L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1429.0), (-1429.0), (-1429.0), 3728.286849868, (-1429.0), (-1429.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals((-56L), mutableInt0.longValue());
      assertEquals((-56), mutableInt0.intValue());
      assertEquals((-56.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-56), mutableInt0.byteValue());
      assertEquals((-56), (int)mutableInt0.getValue());
      assertEquals((-56), (int)mutableInt0.toInteger());
      assertEquals((-56.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-56", mutableInt0.toString());
      assertEquals((short) (-56), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((-56L), mutableInt0.longValue());
      assertEquals((-56), mutableInt0.intValue());
      assertEquals((-56.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-56), mutableInt0.byteValue());
      assertEquals((-56), (int)mutableInt0.getValue());
      assertEquals((-56), (int)mutableInt0.toInteger());
      assertEquals((-56.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-56", mutableInt0.toString());
      assertEquals((short) (-56), mutableInt0.shortValue());
      assertEquals((-56.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((byte) (-56), mutableInt1.byteValue());
      assertEquals((-56), (int)mutableInt1.toInteger());
      assertEquals((short) (-56), mutableInt1.shortValue());
      assertEquals((-56), (int)mutableInt1.getValue());
      assertEquals("-56", mutableInt1.toString());
      assertEquals((-56.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-56), mutableInt1.intValue());
      assertEquals((-56L), mutableInt1.longValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = (Object) mutableInt0;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = null;
      objectArray0[6] = (Object) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(7, objectArray0.length);
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2, 3, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-56);
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte) (-56);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-56));
      assertEquals(3, byteArray1.length);
      assertEquals(12, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2564;
      intArray0[1] = 2145249754;
      intArray0[2] = 116;
      intArray0[3] = 2;
      intArray0[4] = 4377;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {2564, 2145249754, 116, 2, 4377, 0}, intArray0);
      assertArrayEquals(new int[] {2564, 2145249754, 116, 2, 4377, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      ArrayUtils.shift((boolean[]) null, (int) '1', (int) '1', 27);
      int[] intArray0 = new int[10];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 's';
      intArray0[2] = 27;
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '1';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'1', 's', '#', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '#';
      objectArray0[1] = (Object) '1';
      objectArray0[2] = (Object) 35;
      objectArray0[3] = (Object) 27;
      Object object0 = ArrayUtils.toPrimitive((Object) 49);
      assertEquals(49, object0);
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(5, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-64));
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) '#';
      intArray2[1] = (int) 's';
      intArray2[2] = (int) (byte) (-64);
      intArray2[3] = (int) '1';
      intArray2[4] = (int) '1';
      intArray2[5] = (int) '1';
      int[] intArray3 = ArrayUtils.nullToEmpty(intArray2);
      assertEquals(6, intArray3.length);
      assertEquals(6, intArray2.length);
      assertArrayEquals(new int[] {35, 115, (-64), 49, 49, 49}, intArray3);
      assertArrayEquals(new int[] {35, 115, (-64), 49, 49, 49}, intArray2);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray3);
      assertNotNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1668;
      intArray0[1] = (-2460);
      intArray0[2] = 1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'j';
      charArray0[2] = '1';
      charArray0[3] = ' ';
      charArray0[4] = '|';
      charArray0[5] = '4';
      charArray0[6] = 'Y';
      boolean boolean0 = ArrayUtils.contains(charArray0, ' ');
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'N', 'j', '1', ' ', '|', '4', 'Y'}, charArray0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'j';
      longArray0[1] = (long) 1668;
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) '4';
      ArrayUtils.shift(longArray0, (-404));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {106L, 1668L, 89L, 52L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, (Object) "");
      assertEquals(0, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-487.0));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 117, 117);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement((float[]) null, (float) (-1));
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      char char0 = 's';
      charArray0[1] = 's';
      charArray0[2] = '#';
      ArrayUtils.shift((boolean[]) null, (int) '1', (int) '1', 27);
      int[] intArray0 = new int[10];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 's';
      intArray0[2] = 27;
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '1';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'1', 's', '#', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '#';
      objectArray0[1] = (Object) '1';
      objectArray0[2] = (Object) 35;
      objectArray0[3] = (Object) 27;
      Object object0 = ArrayUtils.toPrimitive((Object) 49);
      assertEquals(49, object0);
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(5, objectArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) 's';
      doubleArray0[2] = 1374.499330224802;
      doubleArray0[3] = (double) 's';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      org.evosuite.runtime.Random.setNextRandom(81);
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 6232;
      doubleArray0[1] = 69.0;
      doubleArray0[2] = (double) 6232;
      doubleArray0[3] = (double) 6232;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 81;
      intArray0[1] = 81;
      intArray0[2] = 81;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 81, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) 73;
      ArrayUtils.swap(doubleArray0, 11, 1865, (-1737));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3.0, 11.0, 73.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1738;
      shortArray0[1] = (short)3026;
      shortArray0[2] = (short)689;
      shortArray0[3] = (short)327;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short)9258;
      shortArray0[6] = (short)1472;
      shortArray0[7] = (short)105;
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)1738, (short)3026, (short)689, (short)327, (short)5, (short)9258, (short)1472, (short)105, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)5;
      intArray0[1] = 73;
      intArray0[2] = (int) (short)9258;
      intArray0[3] = (int) (short)5;
      intArray0[4] = (int) (short)105;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 424, (int) (short)3026);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 424, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)360;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (short)360;
      doubleArray0[3] = (double) 2227;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2382.1, (int) (short)360);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {360.0, 1.0, 360.0, 2227.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)360;
      intArray0[1] = 2227;
      intArray0[2] = (-1);
      intArray0[3] = 2227;
      intArray0[4] = (int) (short)360;
      intArray0[5] = 2227;
      intArray0[6] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 2227, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2227, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MutableInt mutableInt0 = new MutableInt((-1834));
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.decrement();
      assertEquals((-1835.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1835.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1835L), mutableInt0.longValue());
      assertEquals((-1835), (int)mutableInt0.toInteger());
      assertEquals((-1835), (int)mutableInt0.getValue());
      assertEquals("-1835", mutableInt0.toString());
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals((-1835), mutableInt0.intValue());
      assertEquals((short) (-1835), mutableInt0.shortValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-1835), int0);
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((short) (-1834), mutableInt0.shortValue());
      
      int int1 = mutableInt0.addAndGet(69);
      assertEquals((-1765), int1);
      assertFalse(int1 == int0);
      assertEquals((byte)27, mutableInt0.byteValue());
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1765), mutableInt0.shortValue());
      assertEquals((-1765), mutableInt0.intValue());
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765L), mutableInt0.longValue());
      assertEquals((-1765), (int)mutableInt0.toInteger());
      
      ArrayUtils.shift(objectArray0, 3386, 69, 0);
      assertEquals(0, objectArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(71L);
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((byte)27, mutableInt0.byteValue());
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1765), mutableInt0.shortValue());
      assertEquals((-1765), mutableInt0.intValue());
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765L), mutableInt0.longValue());
      assertEquals((-1765), (int)mutableInt0.toInteger());
      assertEquals((-1765), (int)mutableInt1.getValue());
      assertEquals((-1765.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1765.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1765L), mutableInt1.longValue());
      assertEquals("-1765", mutableInt1.toString());
      assertEquals((-1765), (int)mutableInt1.toInteger());
      assertEquals((byte)27, mutableInt1.byteValue());
      assertEquals((short) (-1765), mutableInt1.shortValue());
      assertEquals((-1765), mutableInt1.intValue());
      assertNotNull(mutableInt1);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.addAll((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)105);
      assertNull(byteArray0);
      
      MutableInt mutableInt0 = new MutableInt(763);
      assertEquals(763.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-5), mutableInt0.byteValue());
      assertEquals(763, (int)mutableInt0.getValue());
      assertEquals(763, (int)mutableInt0.toInteger());
      assertEquals(763, mutableInt0.intValue());
      assertEquals((short)763, mutableInt0.shortValue());
      assertEquals(763L, mutableInt0.longValue());
      assertEquals("763", mutableInt0.toString());
      assertEquals(763.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(763.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-5), mutableInt0.byteValue());
      assertEquals(763, (int)mutableInt0.getValue());
      assertEquals(763, (int)mutableInt0.toInteger());
      assertEquals(763, mutableInt0.intValue());
      assertEquals((short)763, mutableInt0.shortValue());
      assertEquals(763L, mutableInt0.longValue());
      assertEquals("763", mutableInt0.toString());
      assertEquals(763.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)763, mutableInt1.shortValue());
      assertEquals(763.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-5), mutableInt1.byteValue());
      assertEquals(763, (int)mutableInt1.getValue());
      assertEquals("763", mutableInt1.toString());
      assertEquals(763, (int)mutableInt1.toInteger());
      assertEquals(763.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(763L, mutableInt1.longValue());
      assertEquals(763, mutableInt1.intValue());
      assertNotNull(mutableInt1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[3] = mutableInt1;
      mutableIntArray0[4] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertEquals(5, mutableIntArray0.length);
      assertEquals(10, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1799.6363473599931;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1799.6363473599931, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1799.6363473599931, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1524;
      shortArray0[1] = (short) (-386);
      shortArray0[2] = (short)1524;
      shortArray0[3] = (short)1524;
      shortArray0[4] = (short)1524;
      shortArray0[5] = (short)1524;
      shortArray0[6] = (short) (-26589);
      shortArray0[7] = (short)8192;
      ArrayUtils.swap(shortArray0, (int) (short) (-386), (int) (short)1524);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1524, (short) (-386), (short)1524, (short)1524, (short)1524, (short)1524, (short) (-26589), (short)8192}, shortArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1799.6363473599931, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1799.6363473599931, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-97));
      assertNull(byteArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt(5204);
      assertEquals(5204, mutableInt0.intValue());
      assertEquals(5204L, mutableInt0.longValue());
      assertEquals((byte)84, mutableInt0.byteValue());
      assertEquals((short)5204, mutableInt0.shortValue());
      assertEquals("5204", mutableInt0.toString());
      assertEquals(5204.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(5204.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5204, (int)mutableInt0.toInteger());
      assertEquals(5204, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(0.0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertEquals(4, mutableIntArray1.length);
      assertEquals(2, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'X';
      objectArray0[1] = (Object) '%';
      objectArray0[2] = null;
      objectArray0[3] = (Object) 'X';
      objectArray0[4] = (Object) 'X';
      objectArray0[5] = (Object) '%';
      objectArray0[6] = null;
      objectArray0[7] = null;
      objectArray0[8] = (Object) 'X';
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[4]);
      assertEquals(9, objectArray0.length);
      assertEquals("{0, 3, 4, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-1670));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) bitSet0;
      objectArray1[1] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(boolean0);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.indexOf(intArray0, 1, 7);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom(7);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndDecrement();
      assertEquals(2, int0);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt0 = new MutableInt(double0);
      assertEquals(100, (int)mutableInt0.toInteger());
      assertEquals(100, (int)mutableInt0.getValue());
      assertEquals("100", mutableInt0.toString());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals(100.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(100.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)100, mutableInt0.shortValue());
      assertEquals(100, mutableInt0.intValue());
      assertEquals(100L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(100, (int)mutableInt0.toInteger());
      assertEquals(100, (int)mutableInt0.getValue());
      assertEquals("100", mutableInt0.toString());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals(100.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(100.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)100, mutableInt0.shortValue());
      assertEquals(100, mutableInt0.intValue());
      assertEquals(100L, mutableInt0.longValue());
      assertEquals("100", mutableInt1.toString());
      assertEquals(100, mutableInt1.intValue());
      assertEquals((short)100, mutableInt1.shortValue());
      assertEquals(100.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)100, mutableInt1.byteValue());
      assertEquals(100, (int)mutableInt1.toInteger());
      assertEquals(100, (int)mutableInt1.getValue());
      assertEquals(100L, mutableInt1.longValue());
      assertEquals(100.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt1.compareTo(mutableInt0);
      assertEquals(0, int0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(100, (int)mutableInt0.toInteger());
      assertEquals(100, (int)mutableInt0.getValue());
      assertEquals("100", mutableInt0.toString());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals(100.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(100.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)100, mutableInt0.shortValue());
      assertEquals(100, mutableInt0.intValue());
      assertEquals(100L, mutableInt0.longValue());
      assertEquals("100", mutableInt1.toString());
      assertEquals(100, mutableInt1.intValue());
      assertEquals((short)100, mutableInt1.shortValue());
      assertEquals(100.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)100, mutableInt1.byteValue());
      assertEquals(100, (int)mutableInt1.toInteger());
      assertEquals(100, (int)mutableInt1.getValue());
      assertEquals(100L, mutableInt1.longValue());
      assertEquals(100.0, mutableInt1.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      Integer integer0 = mutableInt1.getValue();
      assertEquals(100, (int)integer0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(100, (int)mutableInt0.toInteger());
      assertEquals(100, (int)mutableInt0.getValue());
      assertEquals("100", mutableInt0.toString());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals(100.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(100.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)100, mutableInt0.shortValue());
      assertEquals(100, mutableInt0.intValue());
      assertEquals(100L, mutableInt0.longValue());
      assertEquals("100", mutableInt1.toString());
      assertEquals(100, mutableInt1.intValue());
      assertEquals((short)100, mutableInt1.shortValue());
      assertEquals(100.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)100, mutableInt1.byteValue());
      assertEquals(100, (int)mutableInt1.toInteger());
      assertEquals(100, (int)mutableInt1.getValue());
      assertEquals(100L, mutableInt1.longValue());
      assertEquals(100.0, mutableInt1.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotNull(integer0);
      
      int int1 = mutableInt1.getAndDecrement();
      assertEquals(100, int1);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals(100, (int)mutableInt0.toInteger());
      assertEquals(100, (int)mutableInt0.getValue());
      assertEquals("100", mutableInt0.toString());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals(100.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(100.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)100, mutableInt0.shortValue());
      assertEquals(100, mutableInt0.intValue());
      assertEquals(100L, mutableInt0.longValue());
      assertEquals(99L, mutableInt1.longValue());
      assertEquals((short)99, mutableInt1.shortValue());
      assertEquals(99.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(99, mutableInt1.intValue());
      assertEquals(99.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(99, (int)mutableInt1.toInteger());
      assertEquals(99, (int)mutableInt1.getValue());
      assertEquals((byte)99, mutableInt1.byteValue());
      assertEquals("99", mutableInt1.toString());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(integerArray0, (Comparator<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int[] intArray0 = new int[2];
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 0;
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)1089);
      assertEquals((short)1089, (short)short0);
      assertNotNull(short0);
      
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[1]);
      assertEquals((short)1089, (short)short1);
      assertEquals(4, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      try { 
        Short.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle";
      stringArray0[1] = ".\"L9]";
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-557);
      shortArray0[2] = (short)9258;
      shortArray0[3] = (short)99;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)67;
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-557), (short)9258, (short)99, (short)1, (short)67, (short)0}, shortArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (int) (short)0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[2] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, (-309), (int) (short)0, 224);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, true, true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, true, true}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{2, 7, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-14);
      int int0 = ArrayUtils.indexOf(longArray0, (-2632L), 1033);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-14L), 0L}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2632L);
      doubleArray0[1] = (double) (byte) (-14);
      doubleArray0[3] = (double) (byte) (-14);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1033;
      doubleArray0[7] = (double) 1033;
      doubleArray0[8] = (double) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-2632.0), (-14.0), 0.0, (-14.0), (-1.0), 0.0, 1033.0, 1033.0, (-1.0)}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "@K8dg?r";
      stringArray0[2] = "9za!";
      stringArray0[3] = "W_7p2zWNTQKCqu{.]}";
      stringArray0[4] = "";
      stringArray0[5] = "Object varargs must not be null";
      stringArray0[6] = "";
      stringArray0[7] = "&2v";
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, 1033, ";tKtQ_GDMsXTP:");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1033, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-186);
      shortArray0[1] = (short) (-186);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-186);
      shortArray0[4] = (short) (-186);
      shortArray0[5] = (short) (-186);
      shortArray0[6] = (short) (-186);
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-186), (short) (-186), (short) (-1), (short) (-186), (short) (-186), (short) (-186), (short) (-186), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-186), (short) (-186), (short) (-1), (short) (-186), (short) (-186), (short) (-186), (short) (-186), (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Short[] shortArray2 = new Short[4];
      shortArray2[0] = (Short) (short) (-1);
      shortArray2[1] = (Short) (short) (-1);
      shortArray2[2] = (Short) (short) (-186);
      shortArray2[3] = (Short) (short) (-186);
      boolean boolean0 = ArrayUtils.isSorted(shortArray2);
      assertFalse(boolean0);
      assertEquals(4, shortArray2.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-186);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-186.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 'X';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 88.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)2589;
      shortArray0[2] = (short) (-186);
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)4, (short)2589, (short) (-186), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)4, (short)2589, (short) (-186), (short) (-1)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Short[] shortArray2 = new Short[2];
      shortArray2[0] = (Short) (short) (-1);
      shortArray2[1] = (Short) (short) (-1);
      boolean boolean1 = ArrayUtils.isSorted(shortArray2);
      assertTrue(boolean1);
      assertEquals(2, shortArray2.length);
      assertFalse(boolean1 == boolean0);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray2.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 88.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)360);
      assertEquals((short)360, (short)short0);
      assertNotNull(short0);
      
      short short1 = (short)1284;
      Short[] shortArray0 = new Short[2];
      Short short2 = new Short((short)102);
      assertEquals((short)102, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[0] = short2;
      shortArray0[0] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Short", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 725.7912605296542, 8, 2908.96218006);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[2] = 'Z';
      charArray0[3] = 'd';
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 'd';
      floatArray0[3] = (float) 'd';
      floatArray0[4] = (float) 8;
      floatArray0[5] = (float) 'd';
      floatArray0[6] = (float) 8;
      floatArray0[7] = (float) '\u0000';
      floatArray0[8] = (float) 'o';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 8.0F, 100.0F, 100.0F, 8.0F, 100.0F, 8.0F, 0.0F, 111.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-960.524F));
      assertFalse(boolean1);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 8.0F, 100.0F, 100.0F, 8.0F, 100.0F, 8.0F, 0.0F, 111.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(8);
      assertEquals(8L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(8);
      assertEquals(8L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1522L));
      assertEquals((-1522L), (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean2);
      assertEquals(3, longArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'd', 'Z', '\u0000', '!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(11, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = new BitSet(11);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = new BitSet();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(0, bitSet2.length());
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotNull(bitSet2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-61);
      shortArray0[1] = (short)825;
      shortArray0[2] = (short)114;
      shortArray0[3] = (short) (-166);
      shortArray0[4] = (short)13;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)71;
      shortArray0[7] = (short)8;
      ArrayUtils.reverse(shortArray0, 2, (int) (short)8);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-61), (short)825, (short)8, (short)71, (short)0, (short)13, (short) (-166), (short)114}, shortArray0);
      
      ArrayUtils.swap((Object[]) null, (int) (short) (-61), (int) (short) (-166), (int) (short)825);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(shortArray0, (int) (short)0, (-1137));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      ArrayUtils.swap((Object[]) booleanArray0, 2144, 2146566311, (-1137));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1799.6363473599931);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1799.6363473599931}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 100.0;
      doubleArray2[1] = 1799.6363473599931;
      doubleArray2[2] = 1799.6363473599931;
      doubleArray2[3] = 1799.6363473599931;
      doubleArray2[4] = 1799.6363473599931;
      doubleArray2[5] = 1799.6363473599931;
      double[] doubleArray3 = ArrayUtils.clone(doubleArray2);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {100.0, 1799.6363473599931, 1799.6363473599931, 1799.6363473599931, 1799.6363473599931, 1799.6363473599931}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {100.0, 1799.6363473599931, 1799.6363473599931, 1799.6363473599931, 1799.6363473599931, 1799.6363473599931}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (short) (-1192);
      floatArray0[3] = (float) (short) (-1192);
      floatArray0[5] = (float) (short)401;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)256;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)256, (int) (short) (-1192));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {256.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1192);
      shortArray0[1] = (short) (-1192);
      shortArray0[2] = (short)401;
      shortArray0[3] = (short)401;
      shortArray0[4] = (short)256;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1192));
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1192), (short) (-1192), (short)401, (short)401, (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1192), (short) (-1192), (short) (-1192), (short)401, (short)401, (short)256}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {256.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)256, (int) (short)401);
      assertEquals(5, int1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1192), (short) (-1192), (short)401, (short)401, (short)256}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1192), (short) (-1192), (short) (-1192), (short)401, (short)401, (short)256}, shortArray1);
      assertFalse(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, (-6), (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2283);
      shortArray0[1] = (short)111;
      shortArray0[2] = (short) (byte) (-14);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2283), (short)111, (short) (-14)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (byte) (-14));
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2283), (short)111, (short) (-14)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer integer0 = new Integer(160);
      assertEquals(160, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'k');
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 160;
      longArray0[2] = (long) 'k';
      longArray0[3] = (long) 160;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 'k';
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) 'k';
      ArrayUtils.shift(longArray0, 57);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {107L, 0L, 160L, 107L, 160L, 1L, 107L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Double double0 = new Double(100.0);
      assertEquals(100.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt0 = new MutableInt(double0);
      assertEquals("100", mutableInt0.toString());
      assertEquals(100L, mutableInt0.longValue());
      assertEquals(100, mutableInt0.intValue());
      assertEquals(100.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)100, mutableInt0.shortValue());
      assertEquals(100.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(100, (int)mutableInt0.getValue());
      assertEquals(100, (int)mutableInt0.toInteger());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals("100", mutableInt0.toString());
      assertEquals(100L, mutableInt0.longValue());
      assertEquals(100, mutableInt0.intValue());
      assertEquals(100.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)100, mutableInt0.shortValue());
      assertEquals(100.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(100, (int)mutableInt0.getValue());
      assertEquals(100, (int)mutableInt0.toInteger());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals("100", mutableInt1.toString());
      assertEquals((byte)100, mutableInt1.byteValue());
      assertEquals(100, (int)mutableInt1.getValue());
      assertEquals(100, (int)mutableInt1.toInteger());
      assertEquals(100L, mutableInt1.longValue());
      assertEquals(100.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(100.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(100, mutableInt1.intValue());
      assertEquals((short)100, mutableInt1.shortValue());
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt1.compareTo(mutableInt0);
      assertEquals(0, int0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals("100", mutableInt0.toString());
      assertEquals(100L, mutableInt0.longValue());
      assertEquals(100, mutableInt0.intValue());
      assertEquals(100.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)100, mutableInt0.shortValue());
      assertEquals(100.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(100, (int)mutableInt0.getValue());
      assertEquals(100, (int)mutableInt0.toInteger());
      assertEquals((byte)100, mutableInt0.byteValue());
      assertEquals("100", mutableInt1.toString());
      assertEquals((byte)100, mutableInt1.byteValue());
      assertEquals(100, (int)mutableInt1.getValue());
      assertEquals(100, (int)mutableInt1.toInteger());
      assertEquals(100L, mutableInt1.longValue());
      assertEquals(100.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(100.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(100, mutableInt1.intValue());
      assertEquals((short)100, mutableInt1.shortValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-3020L);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      ArrayUtils.shift(longArray0, 0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-3020L), 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 725, 108, 73);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, (int) (short)0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 0L;
      ArrayUtils.swap(doubleArray0, (int) (short)0, 73, 725);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      ArrayUtils.shift(longArray0, (int) (short)0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray3 = ArrayUtils.nullToEmpty(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray3.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray3);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotNull(charArray3);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) (short)0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertEquals(0L, object0);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      ArrayUtils.shift(objectArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Short short0 = new Short((short) (-1715));
      assertEquals((short) (-1715), (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer(160);
      assertEquals(160, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'k');
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 160;
      longArray0[2] = (long) 'k';
      longArray0[3] = (long) 160;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 'k';
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) 'k';
      ArrayUtils.shift(longArray0, 57);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {107L, 0L, 160L, 107L, 160L, 1L, 107L, 0L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short short0 = (short)0;
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 3376;
      int int1 = (-2536);
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3376;
      short[] shortArray0 = new short[0];
      int int2 = 1317;
      int int3 = 52;
      ArrayUtils.shift(shortArray0, 1317, 52, 1317);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int4 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1317, 52, (double) (-2536));
      assertEquals((-1), int4);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3376.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = ArrayUtils.insert(0, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Short short0 = new Short((short) (-1715));
      assertEquals((short) (-1715), (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte) (-9));
      assertEquals((byte) (-9), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(0, object0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'y');
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2155L;
      longArray0[1] = (long) 'k';
      longArray0[2] = (long) 'k';
      longArray0[3] = (long) (short) (-1715);
      longArray0[4] = (long) 160;
      longArray0[5] = (long) 'k';
      longArray0[6] = (long) 57;
      longArray0[7] = (long) 57;
      longArray0[8] = (long) (byte) (-9);
      ArrayUtils.shift(longArray0, (int) (short) (-1715));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {107L, 57L, 57L, (-9L), 2155L, 107L, 107L, (-1715L), 160L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 4592, (int) (byte) (-117));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-111);
      shortArray0[1] = (short) (byte)37;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1355));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-111), (short)37}, shortArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1586);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1072, 2145950769);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short) (-1586)}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-525), (-1260));
      assertNull(byteArray0);
      
      ArrayUtils.shift(booleanArray0, (-762));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 3);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray1.length);
      assertEquals(3, classArray0.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)97;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)246);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)97}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)97}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      ArrayUtils.swap(byteArray0, 37, 0, (int) (byte)50);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)4;
      ArrayUtils.swap(byteArray0, 64, (-2134986402));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-44), (byte)4, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean boolean1 = Boolean.valueOf("<size=");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      ArrayUtils.hashCode((Object) boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (-2134986402);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-44);
      longArray0[5] = (long) 64;
      longArray0[6] = (long) (byte) (-44);
      longArray0[7] = (long) (byte)4;
      ArrayUtils.reverse(longArray0, 2, (int) (byte)4);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {2L, (-2134986402L), (-1L), (-1L), (-44L), 64L, (-44L), 4L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Z');
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)2682);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-2358), 18655);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '%';
      intArray0[1] = (int) 'Z';
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1478;
      intArray1[1] = (-1);
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(4, intArray2.length);
      assertArrayEquals(new int[] {37, 90}, intArray0);
      assertArrayEquals(new int[] {1478, (-1)}, intArray1);
      assertArrayEquals(new int[] {37, 90, 1478, (-1)}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      ArrayUtils.reverse(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.reverse(charArray0, 1038, (-1));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      
      ArrayUtils.swap(longArray0, 10, 1164, 91);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 951L;
      longArray0[1] = 3925L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1509L);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {951L, 3925L}, longArray0);
      
      ArrayUtils.swap(longArray0, (-13), (-13));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {951L, 3925L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)64);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'X';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'l');
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'X', '%', 'X'}, charArray0);
      assertArrayEquals(new char[] {'X', '%', 'X'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2358);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2682);
      assertEquals((-1), int1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-2358), (short)0, (short)0}, shortArray0);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short)0);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) (short)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 88, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 88, 0, 0, 0, 0, 88, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'X', '%', 'X'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      
      ArrayUtils.reverse(charArray0, (int) (short)0, 5);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'X', '%', 'X'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      
      ArrayUtils.swap(longArray0, (int) (short)0, (-3070), (int) (short)0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-2182.208));
      assertEquals((-2182.208F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3742.0));
      assertEquals((-3742.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      assertEquals((-2182.208F), (float)float2, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-2203.13092898937));
      assertEquals((-2203.1309F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-2182.208));
      assertEquals((-2182.208F), (float)float5, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) floatArray0[2]);
      assertEquals((-2182.208F), (float)float6, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      
      floatArray0[6] = float6;
      Float float7 = new Float(1.0F);
      assertEquals(1.0F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotNull(float7);
      
      Float[] floatArray1 = ArrayUtils.add(floatArray0, float7);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('H', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('H', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('|');
      assertEquals('|', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character0);
      assertEquals('H', (char)character4);
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('H');
      assertEquals('H', (char)character5);
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(')');
      assertEquals(')', (char)character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('|');
      assertEquals('|', (char)character7);
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertTrue(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.toArray(characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'o';
      charArray0[2] = '+';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'e', 'o', '+'}, charArray0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) '+';
      characterArray0[1] = (Character) 'o';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'+', 'o'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = 2713;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2713);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2713, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(116L);
      assertEquals(116L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-218L));
      assertEquals((-218L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(116L);
      assertEquals(116L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long1;
      Long long3 = new Long((long) longArray0[2]);
      assertEquals((-218L), (long)long3);
      assertEquals(4, longArray0.length);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {116L, (-218L), (-218L), (-218L)}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-64);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 1757, (short) (-64));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1757, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      long long0 = 90L;
      Long long1 = new Long(90L);
      assertEquals(90L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(90L);
      assertEquals(90L, (long)long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(long0);
      assertEquals(90L, (long)long3);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertEquals(90L, (long)long4);
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(long0);
      assertEquals(90L, (long)long5);
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long4));
      assertNotNull(long5);
      
      longArray0[4] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {90L, 90L, 90L, 90L, 90L}, longArray1);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) 90L;
      doubleArray0[2] = 105.0;
      doubleArray0[3] = (double) long0;
      doubleArray0[4] = (double) long0;
      doubleArray0[5] = (double) long0;
      doubleArray0[6] = (double) long0;
      doubleArray0[7] = (double) long0;
      ArrayUtils.reverse(doubleArray0, (-1798), (-1798));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, 90.0, 105.0, 90.0, 90.0, 90.0, 90.0, 90.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-3719));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3719, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1216.2053486));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1216.2053486), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 629;
      floatArray0[1] = (float) 'V';
      floatArray0[2] = (float) 'X';
      int[] intArray0 = new int[7];
      intArray0[0] = 2145873778;
      intArray0[1] = 0;
      intArray0[2] = 2145873778;
      intArray0[3] = 2145873778;
      intArray0[4] = 629;
      intArray0[5] = (int) 'X';
      intArray0[6] = 0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, (int[]) null);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2145873778, 0, 2145873778, 2145873778, 629, 88, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'E'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)71;
      ArrayUtils.shift(byteArray0, 15);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)71, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)91);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)71, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)71, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)91;
      ArrayUtils.shift(charArray2, (int) (byte)91);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'E'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-919.37);
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) '%';
      objectArray0[5] = (Object) 'V';
      objectArray0[6] = (Object) (-919.37);
      objectArray0[7] = (Object) 'V';
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0, class0);
      assertEquals(8, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2782);
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2782)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Character character0 = Character.valueOf('U');
      assertEquals('U', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'U', 'U'}, charArray0);
      assertNotNull(charArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-232));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 69.0;
      doubleArray0[2] = 69.0;
      doubleArray0[3] = (double) (-232);
      doubleArray0[4] = 62.0;
      doubleArray0[5] = 69.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, 0.0, 69.0, (-232.0), 62.0, 69.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 62.0);
      assertEquals(4, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, 0.0, 69.0, (-232.0), 62.0, 69.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1662.828;
      doubleArray0[1] = (-2628.0);
      doubleArray0[2] = (-2628.0);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1662.828, (-2628.0), (-2628.0), 1.5, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'T';
      charArray0[2] = '+';
      charArray0[4] = 'X';
      charArray0[5] = 'd';
      charArray0[6] = ']';
      char[] charArray1 = ArrayUtils.add(charArray0, 'j');
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'L', 'T', '+', '\u0000', 'X', 'd', ']', 'j'}, charArray1);
      assertArrayEquals(new char[] {'L', 'T', '+', '\u0000', 'X', 'd', ']'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      Boolean[] booleanArray1 = new Boolean[4];
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray1[0] = boolean1;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 240.5242;
      doubleArray0[2] = 260.210277;
      doubleArray0[3] = 1693.1744090476;
      doubleArray0[4] = (-1016.139807);
      doubleArray0[5] = 1.5;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 1453, 3838.6700926423);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1453, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-114.748121094);
      doubleArray0[6] = 2293.691633576896;
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 69;
      intArray0[2] = 1;
      intArray0[3] = 1153;
      intArray0[4] = (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 69, 1, 1153, (-1)}, intArray0);
      assertNotNull(integerArray0);
      
      Boolean boolean0 = Boolean.valueOf("qLzZ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) boolean0, 79);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 69, 1, 1153, (-1)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 1);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, (-64L), (-64L), (-64L), (-64L)}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 71L;
      ArrayUtils.swap(doubleArray0, (int) 'G', Integer.MIN_VALUE, (-987));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {71.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 71.0;
      doubleArray1[1] = (Double) 71.0;
      doubleArray1[2] = (Double) 71.0;
      doubleArray1[3] = (Double) 71.0;
      ArrayUtils.shift(longArray0, (-1191), 698, 69);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-64L), (-64L), (-64L), (-64L), 71L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      int[] intArray0 = new int[2];
      intArray0[0] = 2831;
      intArray0[1] = 2831;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-857), (-2194));
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {2831, 2831}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)2;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-27), (byte) (-122), (byte) (-80), (byte)12, (byte)0, (byte) (-1), (byte) (-87), (byte)35, (byte)2}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(intArray1, 823, (int) (byte) (-80), 3);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {2831, 2831}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2831, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Double double0 = new Double(3545.30702466361);
      assertEquals(3545.30702466361, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3545.30702466361);
      assertEquals(3545.30702466361, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(4555.984);
      assertEquals(4555.984, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double3;
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      doubleArray0[3] = double3;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-1332.948552);
      doubleArray1[4] = (double) doubleArray0[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) doubleArray0[1], 2339);
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, (-1332.948552), 4555.984}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-128));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)1, (byte) (-14), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)1, (byte) (-14), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (byte) (-64);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-64);
      integerArray0[1] = (Integer) (-64);
      integerArray0[2] = (Integer) (-64);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[1]);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-64), (-64), (-64)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (byte) (-64), (-1104));
      assertNull(shortArray0);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray0, 49);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray2.length);
      assertArrayEquals(new int[] {0, 0, (-64), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-64), 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 97;
      doubleArray1[1] = (double) 'X';
      doubleArray1[2] = (double) '%';
      doubleArray1[1] = (double) 'X';
      doubleArray1[4] = 0.0;
      charArray0[3] = '%';
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integer0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integer0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger((String) null, integer2);
      assertEquals(0, (int)integer4);
      assertTrue(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertEquals(2, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integer0);
      assertEquals(0, (int)integer6);
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer4));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      assertEquals(0, (int)integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integer0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 2, 0, 0}, intArray0);
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer7));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)integer6));
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2536);
      doubleArray0[3] = (double) 0;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      ArrayUtils.shift((Object[]) booleanArray0, (-55), 36, 8192);
      assertEquals(0, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 1L, 335);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('V');
      assertEquals('V', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(719);
      assertEquals(719, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(101);
      assertEquals(101, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer1;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 4598.0F;
      floatArray0[1] = (-1467.9747F);
      floatArray0[2] = 349.9133F;
      floatArray0[3] = (float) 629;
      floatArray0[4] = (float) 719;
      floatArray0[5] = (float) 101;
      floatArray0[6] = (float) 629;
      floatArray0[7] = (float) 629;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 349.9133F);
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {4598.0F, (-1467.9747F), 349.9133F, 629.0F, 719.0F, 101.0F, 629.0F, 629.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4598.0F, (-1467.9747F), 629.0F, 719.0F, 101.0F, 629.0F, 629.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Long[] longArray0 = ArrayUtils.insert((-3142), (Long[]) null, (Long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'M';
      charArray0[1] = 'h';
      charArray0[2] = '\'';
      charArray0[3] = 'M';
      charArray0[4] = 'w';
      charArray0[5] = 'G';
      Short short0 = new Short((short)342);
      assertEquals((short)342, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((short)342);
      assertEquals(342, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(342, object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "cEOB-%F:Rk!G7$";
      stringArray0[2] = " in an array of ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "Unexpected IllegalAccessException";
      stringArray0[7] = "float";
      stringArray0[8] = "-{%[cY0:";
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 342, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 342, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3320);
      shortArray0[1] = (short) (-1192);
      shortArray0[2] = (short)401;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3320), (short) (-1192), (short)401}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-23.0));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'I';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      Object object0 = ArrayUtils.get((Object[]) stringArray0, 1276);
      assertEquals(3, stringArray0.length);
      assertNull(object0);
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) "\b[/}m Q");
      assertEquals("\b[/}m Q", object1);
      assertNotNull(object1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)97;
      shortArray0[6] = (short) (-907);
      shortArray0[7] = (short)1;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1112), 7);
      assertEquals((-1), int1);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)97, (short) (-907), (short)1}, shortArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)6317;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1618);
      shortArray0[4] = (short)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals(4, int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)6317, (short)3, (short) (-1), (short) (-1618), (short)1}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)6317;
      longArray0[2] = (long) (short)6317;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 11);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1L, 6317L, 6317L}, longArray0);
      assertArrayEquals(new long[] {1L, 6317L, 6317L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[6];
      int[] intArray0 = new int[8];
      intArray0[0] = 11;
      intArray0[1] = 4;
      intArray0[2] = (int) (short)3;
      intArray0[3] = 4;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short)3;
      intArray0[6] = 11;
      intArray0[7] = (int) (byte) (-71);
      int int1 = ArrayUtils.indexOf(intArray0, 11, 11);
      assertEquals((-1), int1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {11, 4, 3, 4, (-1), 3, 11, (-71)}, intArray0);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Short short0 = new Short((short)60);
      assertEquals((short)60, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)60, object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = 527L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 527L}, longArray0);
      assertArrayEquals(new long[] {0L, 527L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) short0;
      objectArray0[4] = (Object) 527L;
      objectArray0[7] = (Object) short0;
      ArrayUtils.shift(objectArray0, (int) (short)60);
      assertEquals(8, objectArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)9);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (int) (short)60);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(4555.984);
      assertEquals(4555.984, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 172;
      intArray0[2] = 172;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-62);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)56);
      assertEquals(4, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte) (-26), (byte) (-62)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)15, (byte)56, (byte)56, (byte)56, (byte)15, (byte) (-26), (byte) (-62)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-26);
      longArray0[1] = (long) (byte)56;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) (byte)101;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 172;
      longArray0[6] = (long) (byte)56;
      ArrayUtils.shuffle(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {56L, 10L, 101L, 2L, 172L, 56L, (-26L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      long[] longArray0 = new long[4];
      longArray0[0] = 1422L;
      longArray0[1] = (long) (short) (-1586);
      longArray0[2] = 1422L;
      longArray0[3] = (long) (short)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)7, (-3635));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1422L, (-1586L), 1422L, 7L}, longArray0);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Long long0 = new Long((short)7);
      assertEquals(7L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray1 = ArrayUtils.addFirst((Long[]) null, long0);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-72), (byte)9, (byte)122, (byte)5, (byte)127, (byte)95, (byte)2}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)95;
      intArray0[1] = (int) (byte)127;
      intArray0[2] = (int) (byte)122;
      intArray0[3] = (int) (byte)95;
      intArray0[4] = (int) (short)7;
      intArray0[5] = (int) (byte) (-72);
      intArray0[6] = (int) (byte)95;
      intArray0[7] = (int) (short)7;
      int int0 = ArrayUtils.indexOf(intArray0, (-72));
      assertEquals(5, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {95, 127, 122, 95, 7, (-72), 95, 7}, intArray0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'V', '%', 'X'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'l');
      assertNull(charArray1);
      
      ArrayUtils.reverse((char[]) null, 113, (-223));
      int int1 = ArrayUtils.indexOf(doubleArray0, 1510.398514, 39);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.indexOf((char[]) null, 'S');
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 48;
      intArray0[0] = 48;
      ArrayUtils.shift(intArray0, 48, 48, 48);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {48}, intArray0);
      
      ArrayUtils.shift(intArray0, 48, 48, (-2578));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {48}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2578), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2578, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 1488);
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1488;
      ArrayUtils.shift(intArray0, (-1), 2852, (-1670));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1488}, intArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2852;
      longArray0[1] = (long) 1488;
      longArray0[2] = (long) (-1670);
      longArray0[3] = (long) (-1670);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 558;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1488, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 1488);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 1488);
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1488;
      ArrayUtils.shift(intArray0, (-1), 2852, (-1670));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1488}, intArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 558, 114);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2852;
      longArray0[1] = (long) 1488;
      longArray0[2] = (long) (-1670);
      longArray0[3] = (long) 114;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 558;
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean2);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {2852L, 1488L, (-1670L), 114L, (-1L), 558L}, longArray0);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1488, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1670;
      int[] intArray0 = new int[4];
      intArray0[0] = 114;
      intArray0[1] = (int) (short)1670;
      intArray0[2] = 4;
      intArray0[3] = 3642;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 4, 4);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {114, 1670, 4, 3642}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-88);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)102, (byte)5, (byte)93, (byte) (-88)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)102, (byte)5, (byte)93, (byte) (-88), (byte) (-56), (byte)102, (byte)5, (byte)93, (byte) (-88)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(intArray0, (int) (byte)5, (-1263), (-209));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {114, 1670, 4, 3642}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'C';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {67L, (-64L), (-64L), (-64L), (-64L)}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-64);
      intArray0[1] = 2831;
      intArray0[2] = (int) 'C';
      intArray0[3] = (int) (byte) (-64);
      intArray0[4] = (int) 'C';
      intArray0[5] = 3642;
      intArray0[6] = (-64);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 3642, 3642);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-64), 2831, 67, (-64), 67, 3642, (-64)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0, (byte) (-64), (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(intArray0, 3642, (-64), 1814);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-64), 2831, 67, (-64), 67, 3642, (-64)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Byte byte0 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte0);
      assertNotNull(byte0);
      
      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) byte0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('t');
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3901.0485313);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 117, (-1));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-3);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte) (-3));
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-3));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-3), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((short[]) null, 0, 18);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 18;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {18L}, longArray0);
      assertArrayEquals(new long[] {18L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Byte byte0 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)572, (int) (byte)8);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ',');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {','}, charArray0);
      assertArrayEquals(new char[] {',', ','}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray1, (Random) mockRandom0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {18L}, longArray0);
      assertArrayEquals(new long[] {18L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 4L;
      longArray0[3] = 4L;
      longArray0[4] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 4L, 4L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'M';
      charArray0[1] = 'h';
      charArray0[2] = '\'';
      charArray0[3] = 'M';
      charArray0[4] = 'w';
      charArray0[5] = 'G';
      Short short0 = new Short((short)350);
      assertEquals((short)350, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)350;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)350}, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'M';
      longArray0[1] = 3673L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {77L, 3673L}, longArray0);
      assertArrayEquals(new long[] {77L, 3673L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-17));
      assertEquals((byte) (-17), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      try { 
        Byte.decode("The type must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The type must not be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-14);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1587.1057;
      doubleArray0[1] = 1587.1057;
      doubleArray0[2] = 1587.1057;
      doubleArray0[3] = 1587.1057;
      doubleArray0[4] = (double) (-14);
      doubleArray0[5] = (double) (byte) (-14);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-14), (-14), (double) (-14));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1587.1057, 1587.1057, 1587.1057, 1587.1057, (-14.0), (-14.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-14);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Float float0 = new Float((-64.0));
      assertEquals((-64.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(Float.NaN);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-64.0));
      assertEquals((-64.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 43;
      doubleArray0[1] = (-64.0);
      doubleArray0[2] = (double) 43;
      doubleArray0[3] = (-64.0);
      doubleArray0[4] = (double) 43;
      doubleArray0[5] = (double) 3;
      ArrayUtils.shift(doubleArray0, (-1), (-1), 3);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {43.0, (-64.0), 43.0, (-64.0), 43.0, 3.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, Integer.MAX_VALUE, 84, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      ArrayUtils.shift(booleanArray2, 4, (-3856), (-3856));
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'b';
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('b', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 256, 256, (int) char0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3856);
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) 'b';
      doubleArray0[4] = (double) 4;
      int int0 = new Integer((int) character0);
      assertEquals(98, int0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      
      MockRandom mockRandom0 = new MockRandom(98);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) characterArray0, (Random) mockRandom0);
      assertEquals(2, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.shift(doubleArray0, 98, 1117, 1117);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3856.0), 98.0, 98.0, 98.0, 4.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1117;
      longArray0[1] = (long) 'b';
      longArray0[2] = (long) char0;
      longArray0[3] = (long) char0;
      longArray0[4] = (-900L);
      longArray0[5] = (long) 4;
      longArray0[6] = (-1446L);
      longArray0[7] = (long) 4;
      longArray0[8] = (long) char0;
      ArrayUtils.shift(longArray0, 256, (-300), (int) char0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1117L, 98L, 98L, 98L, (-900L), 4L, (-1446L), 4L, 98L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (byte) (-64);
      intArray0[4] = (int) '1';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = (int) 's';
      intArray1[2] = (int) 's';
      intArray1[5] = (int) (byte) (-64);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {0, 0, (-64), 0, 49}, intArray0);
      assertArrayEquals(new int[] {0, 115, 115, 0, 0, (-64)}, intArray1);
      assertArrayEquals(new int[] {49}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2, (int) (byte) (-64), 115);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) (-64);
      ArrayUtils.shift(longArray0, 43, 3, 43);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3L, (-64L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(11, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, 'o');
      assertNull(charArray1);
      
      ArrayUtils.shift((long[]) null, 11);
      char[] charArray2 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 725;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 725;
      ArrayUtils.swap(doubleArray0, 82, (-937), 1489);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {111.0, 725.0, 11.0, 725.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Byte byte0 = Byte.valueOf((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("92", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf((int[]) null, 2, 2);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (byte)92;
      floatArray0[2] = (float) (byte)92;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) (byte)92;
      ArrayUtils.shift(floatArray0, 10, (int) (byte)92, (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 92.0F, 92.0F, 2.0F, 92.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(booleanArray0, (-88), 1, 3527);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Byte byte0 = Byte.valueOf((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("92", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf((int[]) null, 2, 2);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'E', 10);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = 2259.0F;
      floatArray0[2] = (float) (byte)92;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) (byte)92;
      ArrayUtils.shift(floatArray0, 10, (int) (byte)92, (-1));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {69.0F, 2259.0F, 92.0F, 2.0F, 92.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(booleanArray0, (-88), 1, 3527);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      ArrayUtils.shift(longArray0, 57);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(3, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-979L);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift(longArray0, 57);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-979L)}, longArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableInt0.add((Number) integer0);
      assertEquals((-2), mutableInt0.intValue());
      assertEquals("-2", mutableInt0.toString());
      assertEquals((short) (-2), mutableInt0.shortValue());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2), (int)mutableInt0.toInteger());
      assertEquals((-2.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2), (int)mutableInt0.getValue());
      assertEquals((-2L), mutableInt0.longValue());
      
      Float float0 = new Float((-695.0F));
      assertEquals((-695.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) mutableInt0, (Object) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-828);
      intArray0[1] = 119;
      intArray0[2] = (-828);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-828), 119, (-828)}, intArray0);
      assertArrayEquals(new int[] {(-828), 119, (-828)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      char[] charArray0 = new char[3];
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-697));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\u0000';
      ArrayUtils.shift(objectArray0, (int) '\u0000', (int) '\u0000', (int) '\u0000');
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(charArray0, '?');
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-2781));
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      int int1 = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2781));
      assertEquals((-2781), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("j%aN%J_BUn", (Integer) int1);
      assertEquals((-1), (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(int1 == int0);
      assertNotNull(integer3);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer3);
      assertEquals(1, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertTrue(int1 == int0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'Q';
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'V', '%', 'X'}, charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null, 'l');
      assertNull(charArray1);
      
      ArrayUtils.reverse((char[]) null, 113, (-223));
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-53);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-6);
      floatArray0[1] = (float) (byte) (-6);
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-6));
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1), (byte) (-77));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)7;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (byte)7;
      doubleArray0[3] = (double) (byte)7;
      doubleArray0[4] = (double) (byte)7;
      doubleArray0[5] = (double) (byte)7;
      doubleArray0[6] = (double) (byte)7;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertArrayEquals(new double[] {7.0, 1.0, 7.0, 7.0, 7.0, 7.0, 7.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-53);
      byte byte0 = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-28);
      byte byte1 = (byte)3;
      byteArray0[5] = (byte)3;
      byte byte2 = (byte)50;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-50);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-53), (byte) (-13), (byte)92, (byte) (-28), (byte)3, (byte)50, (byte) (-50)}, byteArray0);
      assertNotNull(byteArray1);
      
      char char0 = 'L';
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (int) (byte)50, 'L');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte byte0 = (byte) (-85);
      Byte byte1 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-85), (byte) (-85), (byte) (-85)}, byteArray1);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 725;
      doubleArray0[1] = (double) (short) (-3603);
      doubleArray0[2] = (double) 725;
      doubleArray0[3] = (double) byte0;
      ArrayUtils.swap(doubleArray0, (int) (short) (-1), 0, 1355);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {725.0, (-3603.0), 725.0, (-85.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1569);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 300.7491);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {300.7491}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse((short[]) null, 0, 18);
      ArrayUtils.reverse(doubleArray0, (-1641), (-1641));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 18;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {18L}, longArray0);
      assertArrayEquals(new long[] {18L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-112);
      Byte byte1 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-112), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte) (-112), (byte)byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)50, (byte)8, (byte)15, (byte) (-112), (byte) (-112)}, byteArray1);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)572, (int) (byte)8);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-707L);
      longArray0[1] = 991L;
      longArray0[2] = 2147483647L;
      longArray0[3] = 3018L;
      ArrayUtils.swap(longArray0, 3642, (-304));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-707L), 991L, 2147483647L, 3018L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'X';
      objectArray0[1] = (Object) '%';
      objectArray0[2] = (Object) 0;
      ArrayUtils.shift(objectArray0, (-2252), 8192, (-55));
      assertEquals(3, objectArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Double double0 = new Double(3545.30702466361);
      assertEquals(3545.30702466361, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3545.30702466361);
      assertEquals(3545.30702466361, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-3032), 46, (-14));
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      char[] charArray0 = new char[9];
      int[] intArray0 = new int[8];
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (int) '\u0000';
      ArrayUtils.shift(intArray0, (-941));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) 98;
      doubleArray0[1] = (double) 2147007804;
      doubleArray0[2] = (double) 2147007804;
      doubleArray0[3] = (double) 'k';
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2147007804;
      doubleArray0[7] = (-2.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2.147007804E9, (-2.0));
      assertFalse(boolean0);
      assertEquals(24, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1590.0693295;
      doubleArray2[1] = 0.0;
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1590.0693295, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1590.0693295}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      ArrayUtils.swap(intArray0, 127, (-1956), 127);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1799.6363473599931;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1799.6363473599931, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1799.6363473599931, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)35;
      shortArray0[1] = (short) (-368);
      shortArray0[2] = (short)35;
      shortArray0[3] = (short)1524;
      shortArray0[4] = (short)35;
      shortArray0[5] = (short)1524;
      shortArray0[6] = (short) (-26589);
      shortArray0[7] = (short)8192;
      ArrayUtils.swap(shortArray0, (int) (short) (-368), (-2147483638));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)35, (short) (-368), (short)35, (short)1524, (short)35, (short)1524, (short) (-26589), (short)8192}, shortArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1799.6363473599931, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1799.6363473599931, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Character character0 = new Character('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, ']');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) ']';
      doubleArray0[1] = (double) '8';
      doubleArray0[2] = (double) ']';
      doubleArray0[3] = (double) ']';
      doubleArray0[4] = (double) '8';
      doubleArray0[5] = (double) ']';
      doubleArray0[6] = (double) '8';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {93.0, 56.0, 93.0, 93.0, 56.0, 93.0, 56.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      float[] floatArray0 = new float[6];
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)100;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long(11L);
      assertEquals(11L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) long0);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-540L);
      longArray0[1] = (long) (short)100;
      MockRandom mockRandom0 = new MockRandom((short)100);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {100L, (-540L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)6317;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1618);
      shortArray0[4] = (short)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals(4, int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)6317, (short)3, (short) (-1), (short) (-1618), (short)1}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)6317;
      longArray0[2] = (long) (short)6317;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 11);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1L, 6317L, 6317L}, longArray0);
      assertArrayEquals(new long[] {1L, 6317L, 6317L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-62);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)101);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)15, (byte)56, (byte) (-82), (byte) (-26), (byte) (-62)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)15, (byte)56, (byte) (-82), (byte) (-26), (byte) (-62)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {6317L, 6317L, 1L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '.';
      charArray0[2] = 'r';
      charArray0[3] = 'j';
      charArray0[4] = 'a';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'Y', '.', 'r', 'j', 'a'}, charArray0);
      assertArrayEquals(new char[] {'Y', '.', 'r', 'j', 'a', 'Y', '.', 'r', 'j', 'a'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, (-64L), (-64L), (-64L), (-64L)}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-64);
      intArray0[1] = (int) (byte) (-64);
      intArray0[2] = (int) 'G';
      intArray0[1] = (int) 'G';
      intArray0[5] = 3647;
      intArray0[6] = 3647;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 4, 3647);
      assertEquals(3, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 3647, 3647}, intArray1);
      assertArrayEquals(new int[] {(-64), 71, 71, 0, 0, 3647, 3647}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0, (byte) (-64), (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(intArray0, 4, 3647, 1814);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-64), 71, 71, 0, 0, 3647, 3647}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'G';
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) (byte) (-64);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {71L, (-64L), (-64L), (-64L), (-64L)}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-64);
      intArray0[1] = 2831;
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) (byte) (-64);
      intArray0[4] = (int) 'G';
      intArray0[5] = 3642;
      intArray0[6] = 3642;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 4, 3642);
      assertEquals(3, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {71, 3642, 3642}, intArray1);
      assertArrayEquals(new int[] {(-64), 2831, 71, (-64), 71, 3642, 3642}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0, (byte) (-64), (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(intArray0, 4, 3642, 1814);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-64), 2831, 71, (-64), 71, 3642, 3642}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.shift((short[]) null, 71);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      int int0 = ArrayUtils.indexOf(charArray0, 'S');
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'s', 'G', 'G', 'G', 'G', 'G', 'G', 'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1569);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = ArrayUtils.get(objectArray0, (int) 1569);
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Byte byte0 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertEquals((short) (-105), mutableInt0.shortValue());
      assertEquals("-105", mutableInt0.toString());
      assertEquals((-105.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-105), mutableInt0.intValue());
      assertEquals((-105.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-105L), mutableInt0.longValue());
      assertEquals((byte) (-105), mutableInt0.byteValue());
      assertEquals((-105), (int)mutableInt0.getValue());
      assertEquals((-105), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-105), (int)integer0);
      assertEquals((short) (-105), mutableInt0.shortValue());
      assertEquals("-105", mutableInt0.toString());
      assertEquals((-105.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-105), mutableInt0.intValue());
      assertEquals((-105.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-105L), mutableInt0.longValue());
      assertEquals((byte) (-105), mutableInt0.byteValue());
      assertEquals((-105), (int)mutableInt0.getValue());
      assertEquals((-105), (int)mutableInt0.toInteger());
      assertNotNull(integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-105), object1);
      assertEquals((short) (-105), mutableInt0.shortValue());
      assertEquals("-105", mutableInt0.toString());
      assertEquals((-105.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-105), mutableInt0.intValue());
      assertEquals((-105.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-105L), mutableInt0.longValue());
      assertEquals((byte) (-105), mutableInt0.byteValue());
      assertEquals((-105), (int)mutableInt0.getValue());
      assertEquals((-105), (int)mutableInt0.toInteger());
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-105);
      intArray0[1] = (int) (byte) (-105);
      intArray0[2] = (int) (byte) (-105);
      intArray0[3] = (int) (short)1569;
      intArray0[4] = (int) (short)1569;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1569, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = null;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1687;
      intArray0[1] = (int) (short)1687;
      intArray0[2] = (int) (short)1687;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1687, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-828), (-828), (-828));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '/';
      longArray0[1] = (long) '/';
      longArray0[2] = 0L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3215.0545652;
      doubleArray0[1] = (double) 47L;
      doubleArray0[2] = (double) (-828);
      doubleArray0[3] = (double) '/';
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(byteArray0, (-828), (int) (byte)0, (-828));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.shift((byte[]) null, (-828));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)46;
      intArray0[1] = (-828);
      intArray0[2] = (int) '/';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {46, (-828), 47}, intArray0);
      assertArrayEquals(new int[] {46, (-828), 47, 46, (-828), 47}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[0] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) false;
      objectArray0[8] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 78);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(9, objectArray0.length);
      
      Character character0 = new Character('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) character0, (-36));
      assertEquals(9, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Byte byte0 = Byte.valueOf((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("92", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = (Boolean) false;
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.contains(floatArray0, 1525.0F);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean3);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean3 == boolean2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)92;
      shortArray0[1] = (short) (byte)92;
      shortArray0[2] = (short) (byte)92;
      shortArray0[3] = (short) (byte)92;
      shortArray0[4] = (short) (byte)92;
      shortArray0[5] = (short) (byte)92;
      shortArray0[6] = (short) (byte)92;
      boolean boolean4 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean4);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)92, (short)92, (short)92, (short)92, (short)92, (short)92, (short)92}, shortArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      float[] floatArray0 = new float[0];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'M';
      charArray0[2] = ':';
      charArray0[3] = 'f';
      charArray0[4] = '+';
      charArray0[5] = 't';
      charArray0[6] = '}';
      charArray0[7] = 'v';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'M', ':', 'f', '+', 't', '}', 'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 0, 1829);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)0, (byte) (-128)}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'M';
      charArray0[2] = ':';
      charArray0[3] = 'f';
      charArray0[4] = '+';
      charArray0[5] = 't';
      charArray0[6] = '}';
      charArray0[7] = 'v';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'M', ':', 'f', '+', 't', '}', 'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-114.748121094);
      doubleArray0[6] = 2293.691633576896;
      doubleArray0[7] = 91.44177807536421;
      ArrayUtils.swap(doubleArray0, (-987), 73, 73);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, (-1.0), 3.0, Double.NaN, 0.0, (-114.748121094), 2293.691633576896, 91.44177807536421}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1586.0);
      doubleArray0[1] = 372.0;
      doubleArray0[2] = (-1390.4416482131833);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1466.9963884846;
      doubleArray0[5] = (-1541.996164799746);
      doubleArray0[6] = 1571.1678178431;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-3555.8831334464653);
      ArrayUtils.swap(doubleArray0, 2704, 2704, (-64));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1586.0), 372.0, (-1390.4416482131833), 0.0, 1466.9963884846, (-1541.996164799746), 1571.1678178431, (-1.0), (-3555.8831334464653)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'L';
      charArray0[3] = '`';
      charArray0[4] = 'I';
      charArray0[5] = '9';
      charArray0[6] = 'm';
      charArray0[7] = '1';
      charArray0[8] = 'b';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      LongStream longStream0 = mockRandom0.longs(1876L, 0L, 835L);
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs();
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotSame(longStream1, longStream0);
      assertNotNull(longStream1);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'0', 'L', '`', 'I', '9', 'm', '1', 'b', '0'}, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '1';
      intArray0[1] = (int) 'I';
      intArray0[2] = (int) '9';
      intArray0[3] = (int) '`';
      int int1 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals((-1), int1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {49, 73, 57, 96}, intArray0);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)51;
      shortArray0[1] = (short)12;
      shortArray0[2] = (short) (-891);
      shortArray0[3] = (short) (-2346);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1);
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (-500), 83);
      assertEquals((-1), int2);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)51, (short)12, (short) (-891), (short) (-2346), (short)2, (short) (-1)}, shortArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 1463L;
      longArray0[2] = 172L;
      longArray0[3] = 0L;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1L, 1463L, 172L, 0L}, longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3642;
      intArray0[1] = 3642;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 3642;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-489), (-75));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3642, 3642, 4, 4, 3642}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-75);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 4;
      floatArray0[6] = (float) 1463L;
      floatArray0[7] = (float) 1463L;
      ArrayUtils.reverse(floatArray0, 4, 4);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-75.0F), 0.0F, 0.0F, 4.0F, 1463.0F, 1463.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1463.0F, 1463.0F, 4.0F, 0.0F, 0.0F, (-75.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      char[] charArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertEquals(9, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) (byte) (-8);
      longArray0[2] = (long) (byte) (-8);
      longArray0[3] = (long) (byte) (-8);
      longArray0[4] = (long) (byte) (-8);
      longArray0[5] = 121L;
      longArray0[6] = (long) (byte) (-8);
      longArray0[7] = (long) 335;
      longArray0[8] = 1422L;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-2062L), Integer.MAX_VALUE);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2147483647L, (-8L), (-8L), (-8L), (-8L), 121L, (-8L), 335L, 1422L}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      Long[] longArray1 = ArrayUtils.addFirst((Long[]) null, (Long) (-8L));
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (byte) (-64);
      intArray0[4] = (int) '1';
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long(138L);
      assertEquals(138L, (long)long0);
      assertNotNull(long0);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) null, (Object) long0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 6.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 6.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3376;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2536), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2536, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object1);
      assertTrue(boolean0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object1, 30);
      assertEquals(7, objectArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "";
      stringArray0[2] = "tPA=cJk5PS)S";
      stringArray0[3] = "RNU&!0;Y8";
      stringArray0[4] = "The Array must not be null";
      stringArray0[5] = "})F>0`";
      stringArray0[6] = "='";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        ArrayUtils.remove(stringArray0, (-907));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -907, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(2838);
      assertEquals(2838, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(2838, (int)integer1);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(2838, (int)integer2);
      assertEquals(5, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(21);
      assertEquals(21, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      MutableInt mutableInt0 = new MutableInt((int) integerArray0[1]);
      assertEquals(5, integerArray0.length);
      assertEquals(2838L, mutableInt0.longValue());
      assertEquals(2838.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("2838", mutableInt0.toString());
      assertEquals((short)2838, mutableInt0.shortValue());
      assertEquals(2838, mutableInt0.intValue());
      assertEquals((byte)22, mutableInt0.byteValue());
      assertEquals(2838.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2838, (int)mutableInt0.toInteger());
      assertEquals(2838, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.decrementAndGet();
      assertEquals(2837, int0);
      assertEquals(5, integerArray0.length);
      assertEquals(2837, mutableInt0.intValue());
      assertEquals(2837L, mutableInt0.longValue());
      assertEquals(2837.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("2837", mutableInt0.toString());
      assertEquals((short)2837, mutableInt0.shortValue());
      assertEquals(2837.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals(2837, (int)mutableInt0.getValue());
      assertEquals(2837, (int)mutableInt0.toInteger());
      
      mutableInt0.decrement();
      assertEquals(5, integerArray0.length);
      assertEquals(2836, mutableInt0.intValue());
      assertEquals(2836L, mutableInt0.longValue());
      assertEquals(2836.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("2836", mutableInt0.toString());
      assertEquals((short)2836, mutableInt0.shortValue());
      assertEquals(2836.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2836, (int)mutableInt0.toInteger());
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(2836, (int)mutableInt0.getValue());
      
      Integer integer4 = mutableInt0.toInteger();
      assertEquals(2836, (int)integer4);
      assertEquals(5, integerArray0.length);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(2836, mutableInt0.intValue());
      assertEquals(2836L, mutableInt0.longValue());
      assertEquals(2836.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("2836", mutableInt0.toString());
      assertEquals((short)2836, mutableInt0.shortValue());
      assertEquals(2836.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2836, (int)mutableInt0.toInteger());
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(2836, (int)mutableInt0.getValue());
      assertNotNull(integer4);
      
      int int1 = mutableInt0.addAndGet((int) integerArray0[0]);
      assertEquals(5674, int1);
      assertEquals(5, integerArray0.length);
      assertFalse(int1 == int0);
      assertEquals((short)5674, mutableInt0.shortValue());
      assertEquals(5674.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)42, mutableInt0.byteValue());
      assertEquals("5674", mutableInt0.toString());
      assertEquals(5674, mutableInt0.intValue());
      assertEquals(5674, (int)mutableInt0.toInteger());
      assertEquals(5674.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5674L, mutableInt0.longValue());
      assertEquals(5674, (int)mutableInt0.getValue());
      
      mutableInt0.subtract((-171));
      assertEquals(5, integerArray0.length);
      assertEquals(5845L, mutableInt0.longValue());
      assertEquals("5845", mutableInt0.toString());
      assertEquals(5845.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5845, mutableInt0.intValue());
      assertEquals(5845.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(5845, (int)mutableInt0.getValue());
      assertEquals((short)5845, mutableInt0.shortValue());
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals(5845, (int)mutableInt0.toInteger());
      
      int int2 = mutableInt0.incrementAndGet();
      assertEquals(5846, int2);
      assertEquals(5, integerArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5846L, mutableInt0.longValue());
      assertEquals("5846", mutableInt0.toString());
      assertEquals(5846.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5846, mutableInt0.intValue());
      assertEquals((short)5846, mutableInt0.shortValue());
      assertEquals(5846, (int)mutableInt0.getValue());
      assertEquals(5846.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals(5846, (int)mutableInt0.toInteger());
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[4]);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2838, 2838, 2838, 21, 2836}, intArray0);
      assertNotNull(intArray0);
      
      Integer integer5 = new Integer(5846);
      assertEquals(5846, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      boolean boolean1 = ArrayUtils.isEquals(integerArray0[4], integer5);
      assertFalse(boolean1);
      assertEquals(5, integerArray0.length);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'x');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, 113, 227);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(7, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      
      ArrayUtils.shift(booleanArray1, 3026, 227, (-1213));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("Array element ");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'k';
      charArray0[2] = '3';
      charArray0[3] = 'S';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      ArrayUtils.shift(byteArray0, (int) (byte)11);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11}, byteArray0);
      
      char[] charArray1 = ArrayUtils.addFirst((char[]) null, '3');
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'3'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("Array element ");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'k';
      charArray0[2] = '3';
      charArray0[3] = 'S';
      charArray0[4] = 'v';
      charArray0[5] = 'o';
      charArray0[6] = '[';
      charArray0[7] = 'J';
      charArray0[8] = 'x';
      boolean boolean2 = ArrayUtils.contains(charArray0, '3');
      assertTrue(boolean2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'e', 'k', '3', 'S', 'v', 'o', '[', 'J', 'x'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '3';
      ArrayUtils.swap(doubleArray0, (-2628), 1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {51.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-2628));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {51.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {51.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      ArrayUtils.swap(byteArray0, (int) (byte)0, 1, (-700));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, (-828), (-828), (-828));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'G';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-828);
      doubleArray0[1] = (double) 'p';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-828), (-828), (-221.31));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-828.0), 112.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'p';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'p';
      floatArray0[3] = (float) 'p';
      floatArray0[4] = (float) (-828);
      floatArray0[5] = (float) 'G';
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) '/';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {112.0F, (-1.0F), 112.0F, 112.0F, (-828.0F), 71.0F, (-1.0F), 47.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'L';
      charArray0[3] = '`';
      charArray0[4] = 'I';
      charArray0[5] = '9';
      charArray0[6] = 'm';
      charArray0[7] = '1';
      charArray0[8] = 'b';
      Short short0 = new Short((short)350);
      assertEquals((short)350, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer(525);
      assertEquals(525, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(525, object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1735.2771F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-657.0804F);
      floatArray0[3] = (-5773.699F);
      floatArray0[4] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 119.0F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {1735.2771F, Float.NaN, (-657.0804F), (-5773.699F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1735.2771F, Float.NaN, (-657.0804F), (-5773.699F), (-1.0F), 119.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2134986402);
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2134986402)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2134986402);
      longArray0[1] = 630L;
      longArray0[2] = (long) (-2134986402);
      longArray0[3] = (long) (-2134986402);
      longArray0[4] = (long) (-2134986402);
      ArrayUtils.swap(longArray0, (-2134986402), (-2134986402), (-1233));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-2134986402L), 630L, (-2134986402L), (-2134986402L), (-2134986402L)}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-828), (-828), (-828));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'G';
      charArray0[3] = 'p';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'p';
      longArray0[1] = (long) '/';
      longArray0[2] = (long) 'p';
      longArray0[3] = (long) '/';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {112L, 47L, 112L, 47L}, longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'G';
      intArray0[1] = 3642;
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'G';
      intArray0[4] = (int) 'p';
      intArray0[5] = (int) 'G';
      intArray0[6] = (int) 'G';
      intArray0[7] = (int) 'p';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 71, 4);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {71, 3642, 112, 71, 112, 71, 71, 112}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Character character0 = Character.valueOf('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray2.length);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'H';
      doubleArray0[1] = 1799.6363473599931;
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = (double) 'H';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte) (-75);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)113);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-75)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-60), (byte) (-75)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-940), 967);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shift(byteArray0, (int) (byte)71, 1456, (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shift(byteArray0, 2);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)7);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (byte)71, 212);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)7;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 1456;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1.0));
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 7.0, 1.0, 1456.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 7.0, 1.0, 1456.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1687;
      shortArray0[1] = (short)1687;
      shortArray0[2] = (short)1687;
      shortArray0[3] = (short)1687;
      shortArray0[4] = (short)1687;
      shortArray0[5] = (short)1687;
      shortArray0[6] = (short)1687;
      shortArray0[7] = (short)1687;
      Float float0 = new Float(0.7);
      assertEquals(0.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (short)1687);
      assertEquals(1687.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      Float float2 = new Float((float) floatArray0[2]);
      assertEquals(1687.0F, (float)float2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[4] = float2;
      floatArray0[5] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.7F, 0.7F, 1687.0F, 0.7F, 1687.0F, 1687.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[1] = (short) (byte) (-6);
      shortArray0[2] = (short) (byte) (-6);
      ArrayUtils.swap(shortArray0, (int) (byte) (-6), 873, (int) (short) (-6));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-6), (short) (-6), (short) (-6)}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-6), (short) (-6), (short) (-6)}, shortArray0);
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, mutableInt0.intValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, mutableInt0.intValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '9';
      int int0 = ArrayUtils.indexOf(charArray0, 'o', 2146926872);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', '9'}, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (double) 'o';
      doubleArray0[2] = (double) '9';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 111.0, (-1));
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 111.0, 57.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1267);
      intArray0[1] = (-3109);
      intArray0[2] = 3850;
      intArray0[3] = 5554;
      intArray0[4] = 2136;
      intArray0[5] = 90;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5554, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 725.7912605296542, 8, 2908.96218006);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'G';
      charArray0[2] = 'Z';
      charArray0[3] = 'd';
      charArray0[4] = 'o';
      charArray0[5] = '7';
      charArray0[6] = '4';
      char[] charArray1 = ArrayUtils.add(charArray0, '!');
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'!', 'G', 'Z', 'd', 'o', '7', '4'}, charArray0);
      assertArrayEquals(new char[] {'!', 'G', 'Z', 'd', 'o', '7', '4', '!'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '4';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) 'Z';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '!';
      intArray0[5] = (int) '7';
      intArray0[6] = (int) '7';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 33;
      intArray0[4] = 44;
      intArray0[5] = 0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 33;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 44;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2092.489F));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {33.0F, 0.0F, 0.0F, 44.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {33.0F, 0.0F, 0.0F, 44.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[7];
      floatArray2[0] = (Float) 33.0F;
      floatArray2[1] = (Float) 44.0F;
      floatArray2[2] = (Float) 44.0F;
      floatArray2[4] = (Float) 0.0F;
      floatArray2[5] = (Float) 33.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-1670));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) bitSet0;
      objectArray1[1] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(boolean0);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1670);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-1670);
      intArray0[6] = (-1670);
      intArray0[7] = (-1670);
      intArray0[8] = 1;
      ArrayUtils.shift(intArray0, (-1670), 2118850532, 468);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, 1, (-1670), 1, 1, (-1670), (-1670), (-1670), 1}, intArray0);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      ArrayUtils.shift(intArray0, (-1670));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1670), (-1670), (-1670), 1, 1, 1, (-1670), 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      int[] intArray0 = new int[3];
      intArray0[0] = 1378;
      intArray0[1] = 646;
      intArray0[2] = 2118850532;
      ArrayUtils.shift(intArray0, (-1560), 468, 1378);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2118850532, 1378, 646}, intArray0);
      
      ArrayUtils.shift(intArray0, 1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {646, 2118850532, 1378}, intArray0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'E';
      ArrayUtils.shift((int[]) null, (-1), 2852, 2852);
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(1, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, (-1670));
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) bitSet0;
      objectArray1[1] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(boolean0);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-1670);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (-1670);
      intArray0[6] = (-1670);
      intArray0[7] = (-1670);
      intArray0[8] = 1;
      ArrayUtils.shift(intArray0, 1, 2118850532, 508);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, (-1670), (-1670), (-1670), 1, 1, (-1670), 1, 1}, intArray0);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray1[2] = boolean1;
      Boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 1, 1);
      assertEquals(3, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'F';
      charArray0[1] = 'r';
      charArray0[2] = '\'';
      charArray0[3] = ',';
      charArray0[4] = 'w';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'r';
      floatArray0[1] = (float) 'r';
      floatArray0[2] = (float) 'F';
      floatArray0[3] = (float) ',';
      floatArray0[4] = (float) ',';
      floatArray0[5] = (float) '\'';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {114.0F, 114.0F, 70.0F, 44.0F, 44.0F, 39.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2555);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short)32);
      assertEquals((short)32, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)2341);
      assertEquals((short)2341, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short short2 = (short) (-31);
      Short short3 = new Short((short) (-31));
      assertEquals((short) (-31), (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short2);
      assertEquals((short) (-31), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short) (-64));
      assertEquals((short) (-64), (short)short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      
      Short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, short5);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      org.evosuite.runtime.Random.setNextRandom(81);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 81;
      doubleArray0[1] = 69.0;
      doubleArray0[2] = (double) 6232;
      doubleArray0[3] = (double) 6232;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 6232;
      longArray0[1] = 115L;
      longArray0[2] = (long) 6232;
      longArray0[3] = (long) 6232;
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {6232L, 6232L, 115L, 6232L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 6232L;
      floatArray0[1] = (float) 6232;
      floatArray0[2] = (float) 115L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 111.0F);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {6232.0F, 6232.0F, 115.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, true, 4);
      assertEquals((-1), int1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int1 == int0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 1488);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The type must not be null";
      byte byte0 = (byte)53;
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte)102;
      Byte byte4 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-13));
      assertEquals((byte) (-13), (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte5;
      byteArray0[2] = byte4;
      byteArray0[3] = byte4;
      byteArray0[4] = byte4;
      byteArray0[5] = byte1;
      byteArray0[6] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)8);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-2), (byte)102, (byte)102, (byte)102, (byte)53, (byte)102}, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte3;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte3;
      shortArray0[4] = (short) byte0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)76);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)53, (short)102, (short)53, (short)102, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)53, (short)102, (short)53, (short)102, (short)53}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)102, (short)53, (short)102, (short)53, (short)53}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      ArrayUtils.shift(booleanArray2, 4, (-3856), (-3856));
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'b';
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('b', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 256, 256, (int) char0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3856);
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) 'b';
      doubleArray0[4] = (double) 4;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-3856), (int) character0, (double) 4);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3856.0), 98.0, 98.0, 98.0, 4.0}, doubleArray0, 0.01);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.swap((float[]) null, (-788), 0, 0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 0, 5, Integer.MAX_VALUE);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-6);
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 5;
      floatArray0[3] = (float) 5;
      floatArray0[4] = 1694.08F;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      ArrayUtils.reverse(floatArray0, 1086, (-52));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-6.0F), 5.0F, 5.0F, 5.0F, 2.14748365E9F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1126.8381F), 160);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-6.0F), 5.0F, 5.0F, 5.0F, 2.14748365E9F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 4L;
      Float float0 = new Float((double) 0L);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 4L);
      assertEquals(4.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((float) 0L);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[1];
      Float float3 = new Float((-920.7745448397516));
      assertEquals((-920.77454F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[0] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-920.77454F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(57.0F);
      assertEquals(57.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(57.0F);
      assertEquals(57.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((-1364.8229589933));
      assertEquals((-1364.823F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float2;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      floatArray0[2] = float1;
      floatArray0[4] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1733.155F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {57.0F, 57.0F, 57.0F, 1733.155F, (-1364.823F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 1488);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The type must not be null";
      byte byte0 = (byte)53;
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byte byte3 = (byte)102;
      Byte byte4 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-13));
      assertEquals((byte) (-13), (byte)byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte5;
      byteArray0[2] = byte4;
      byteArray0[3] = byte4;
      byteArray0[4] = byte4;
      byteArray0[5] = byte1;
      byteArray0[6] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)8);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte) (-2), (byte)102, (byte)102, (byte)102, (byte)53, (byte)102}, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte3;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte3;
      shortArray0[4] = (short) byte0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)76);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)53, (short)102, (short)53, (short)102, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)53, (short)102, (short)53, (short)102, (short)53}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)53, (short)102, (short)53, (short)102, (short)53}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = ' ';
      charArray0[2] = '\'';
      charArray0[3] = '%';
      charArray0[4] = 't';
      charArray0[5] = '2';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 't');
      assertEquals(5, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'k', ' ', '\'', '%', '2'}, charArray1);
      assertArrayEquals(new char[] {'k', ' ', '\'', '%', 't', '2'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      charArray0[3] = 'p';
      charArray0[4] = 's';
      charArray0[5] = 'o';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertArrayEquals(new char[] {'1', 's', '#', 'p', 's', 'o'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2037);
      shortArray0[1] = (short) (byte) (-64);
      shortArray0[2] = (short) (-2037);
      shortArray0[3] = (short) (-277);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (byte) (-64);
      shortArray0[6] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-277));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2037), (short) (-64), (short) (-2037), (short) (-277), (short) (-1), (short) (-64), (short) (-1)}, shortArray0);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) (short) (-1);
      floatArray1[1] = (float) 's';
      floatArray1[2] = (float) (byte) (-64);
      floatArray1[3] = Float.NaN;
      floatArray1[4] = (float) '#';
      floatArray1[5] = (float) (short) (-1);
      floatArray1[6] = (float) (short) (-277);
      ArrayUtils.swap(floatArray1, 2895, (-1281), (int) (short) (-1));
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 115.0F, (-64.0F), Float.NaN, 35.0F, (-1.0F), (-277.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)46, (int) (byte)0, (int) (byte)46);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)46, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shift((boolean[]) null, (-2717), (int) (byte)0, 1962);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 's';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 115.0, (double) (byte)0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {115.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)0, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)46;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[2] = 41.0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {115.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {46.0, 0.0, 41.0}, doubleArray1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 's');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'s'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'E');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'E';
      ArrayUtils.swap(floatArray0, (-1391), 2, (-305));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {69.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-305), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      ArrayUtils.shift((boolean[]) null, (int) '1', (int) '1', 27);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 's';
      doubleArray0[1] = (double) '#';
      doubleArray0[2] = (double) '#';
      doubleArray0[3] = 337.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 41.0, (double) (byte) (-64));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {115.0, 35.0, 35.0, 337.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte) (-64), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 27;
      doubleArray1[1] = (-1208.97644564);
      doubleArray1[2] = (double) '#';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {115.0, 35.0, 35.0, 337.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {27.0, (-1208.97644564), 35.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '1');
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'1', 's', '#', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'1', 's', '#', '\u0000', '\u0000', '\u0000', '1'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1288;
      shortArray0[1] = (short)1284;
      shortArray0[2] = (short)1284;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1950);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1);
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1950), (short) (-1), (short)1, (short)1284, (short)1284, (short)1288}, shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)19;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)19);
      assertEquals(1, int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85, (byte)19}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      ArrayUtils.shift((boolean[]) null, (int) '1', (int) '1', 27);
      int[] intArray0 = new int[10];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 's';
      intArray0[2] = 27;
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '1';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'1', 's', '#', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '#';
      objectArray0[1] = (Object) '1';
      objectArray0[2] = (Object) 35;
      objectArray0[3] = (Object) 27;
      Object object0 = ArrayUtils.toPrimitive((Object) 49);
      assertEquals(49, object0);
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertEquals(5, objectArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 27);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'X';
      floatArray0[1] = (-2475.16F);
      floatArray0[2] = 883.3695F;
      ArrayUtils.shift(floatArray0, (-2242), Integer.MAX_VALUE, (-2242));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-2475.16F), 883.3695F, 88.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1676.857));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)2193;
      shortArray0[0] = (short)483;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2193, (short)15, (short)483}, shortArray0);
      
      Character[] characterArray0 = new Character[9];
      char char0 = 't';
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('t');
      assertEquals('t', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char char1 = 's';
      Character character2 = new Character('s');
      assertEquals('s', (char)character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('s');
      assertEquals('s', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('t');
      assertEquals('t', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)char1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertEquals('t', (char)character5);
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(char0 == char1);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char1);
      assertEquals('s', (char)character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)char1));
      assertFalse(char1 == char0);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character(char0);
      assertEquals('t', (char)character7);
      assertTrue(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)character5));
      assertTrue(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char1));
      assertTrue(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character3));
      assertFalse(char0 == char1);
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character((char) character6);
      assertEquals('s', (char)character8);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character7));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)char1));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character5));
      assertTrue(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character1));
      assertTrue(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)char0));
      assertTrue(character8.equals((Object)char1));
      assertFalse(char1 == char0);
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character7);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'t', 't', 's', 's', 't', 't', 's', 't', 's'}, charArray0);
      assertTrue(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)character5));
      assertTrue(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char1));
      assertTrue(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character8));
      assertFalse(character7.equals((Object)character3));
      assertFalse(char0 == char1);
      assertNotNull(charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) (short)15;
      floatArray0[2] = (float) char0;
      floatArray0[3] = 2119.57F;
      floatArray0[4] = (float) (char)character6;
      floatArray0[5] = (float) char0;
      floatArray0[6] = (float) (char)character6;
      floatArray0[7] = (float) (short)15;
      ArrayUtils.shift(floatArray0, (int) (short)15);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {15.0F, 116.0F, 2119.57F, 115.0F, 116.0F, 115.0F, 15.0F, 116.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      ArrayUtils.shift(booleanArray2, 4, (-3856), (-3856));
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'b';
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('b', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 256, 256, (int) char0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3856);
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) 'b';
      doubleArray0[4] = (double) 4;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-3856), (int) character0, (double) 4);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3856.0), 98.0, 98.0, 0.0, 4.0}, doubleArray0, 0.01);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shift(doubleArray0, 0, 1117, 1117);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 4.0, (-3856.0), 98.0, 98.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1117;
      longArray0[1] = (long) 'b';
      longArray0[2] = (long) (char)character0;
      longArray0[3] = (long) (char)character0;
      longArray0[4] = (-900L);
      doubleArray0[1] = (double) 4;
      longArray0[6] = (-1446L);
      longArray0[8] = (long) (char)character0;
      ArrayUtils.shift(longArray0, 256, (-300), (int) character0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1117L, 98L, 98L, 98L, (-900L), 0L, (-1446L), 0L, 98L}, longArray0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-919.37);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = 0.7;
      doubleArray0[7] = (double) 0;
      ArrayUtils.shift(doubleArray0, 3, 3, 43);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-919.37), 0.0, 0.0, 0.0, 0.7, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, 84, 0, 0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-1), (-2144286120), (-2144286120));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, (-1), (-2590), 954);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 3376, (-2536));
      assertEquals(0, booleanArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-2536);
      doubleArray0[3] = (double) 0;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2536.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      ArrayUtils.shift(booleanArray2, 4, (-3856), (-3856));
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'b';
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('b', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 256, 256, (int) char0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3856);
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) 'b';
      doubleArray0[4] = (double) 4;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-3856), (int) character0, (double) 4);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3856.0), 98.0, 98.0, 98.0, 4.0}, doubleArray0, 0.01);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) characterArray0, (Random) mockRandom0);
      assertEquals(2, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.shift(doubleArray0, 0, 1117, 1117);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {98.0, 4.0, (-3856.0), 98.0, 98.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1117;
      longArray0[1] = (long) 'b';
      longArray0[2] = (long) char0;
      longArray0[3] = (long) char0;
      longArray0[4] = (-900L);
      longArray0[5] = (long) 4;
      longArray0[6] = (-1446L);
      longArray0[7] = (long) 4;
      longArray0[8] = (long) char0;
      ArrayUtils.shift(longArray0, 256, (-300), (int) char0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1117L, 98L, 98L, 98L, (-900L), 4L, (-1446L), 4L, 98L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-979L);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-53.0), 19, (double) 2);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 19;
      floatArray0[2] = (float) 19;
      floatArray0[3] = (float) (-979L);
      floatArray0[4] = (float) (-979L);
      floatArray0[5] = (float) (-979L);
      floatArray0[6] = (float) (-979L);
      ArrayUtils.reverse(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-979.0F), (-979.0F), (-979.0F), (-979.0F), 19.0F, 19.0F, 2.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 2);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1670;
      shortArray0[1] = (short)1670;
      shortArray0[2] = (short)1670;
      shortArray0[3] = (short)1670;
      shortArray0[4] = (short)1670;
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'z';
      charArray0[1] = 'D';
      charArray0[3] = '\"';
      charArray0[4] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'r');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'i', 'D', '\u0000', '\"', 'q'}, charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\"';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '\u0000';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray1);
      assertFalse(boolean0);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      
      Integer integer0 = new Integer((short)1670);
      assertEquals(1670, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(1670, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals(1, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      boolean[] booleanArray0 = null;
      int int0 = 108;
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 108, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      float[] floatArray0 = new float[3];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap(charArray0, (int) (byte)0, (-1), (-405));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'X', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-1), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1586);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1072, 2145950769);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short) (-1586)}, shortArray0);
      
      ArrayUtils.swap((byte[]) null, 3378, 1136);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.hashCode(object0);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.reverse(longArray0, 2, 2808);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '5';
      charArray0[2] = '#';
      charArray0[3] = 'y';
      charArray0[4] = '7';
      charArray0[5] = 'b';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Short short0 = new Short((short) (-907));
      assertEquals((short) (-907), (short)short0);
      assertNotNull(short0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short) (-907), object1);
      assertNotNull(object1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-907);
      shortArray0[1] = (short) (-907);
      shortArray0[2] = (short) (-907);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-907), (-265));
      assertEquals(0, int1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-907), (short) (-907), (short) (-907)}, shortArray0);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap((byte[]) null, 1136, (-1));
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      int[] intArray0 = new int[2];
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)46, (int) (byte)0, (int) (byte)46);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)46, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)46);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)46, (byte)46, (byte)0}, byteArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert(11, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = new BitSet(11);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = new BitSet();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[3] = 11;
      intArray0[4] = 11;
      intArray0[5] = 11;
      intArray0[6] = 11;
      intArray0[7] = 11;
      intArray0[8] = 11;
      boolean boolean0 = ArrayUtils.contains(intArray0, 11);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {11, 11, 11, 11, 11, 11, 11, 11, 11}, intArray0);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)54);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-95), (byte) (-62), (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-95), (byte) (-62), (byte)59}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 's';
      intArray0[2] = 27;
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '1';
      intArray1[1] = (int) 's';
      intArray1[2] = (int) 's';
      intArray1[3] = (int) '#';
      intArray1[4] = (int) 's';
      intArray1[5] = (int) (byte) (-64);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(3, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {27, 35, 35}, intArray2);
      assertArrayEquals(new int[] {35, 115, 27, 35, 35}, intArray0);
      assertArrayEquals(new int[] {49, 115, 115, 35, 115, (-64)}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 49;
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[5] = (long) '#';
      longArray0[6] = (long) '#';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertArrayEquals(new long[] {49L, (-64L), (-64L), (-64L), 0L, 35L, 35L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift((boolean[]) null, 27, 1184, (int) (byte) (-64));
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-64);
      shortArray0[1] = (short) (byte) (-64);
      shortArray0[2] = (short) (-12397);
      shortArray0[3] = (short) (byte) (-64);
      shortArray0[4] = (short) (byte) (-64);
      shortArray0[5] = (short) (byte) (-64);
      shortArray0[6] = (short) (byte) (-64);
      ArrayUtils.swap(shortArray0, (-14), (int) (byte) (-64), 35);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-64), (short) (-64), (short) (-12397), (short) (-64), (short) (-64), (short) (-64), (short) (-64)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      ArrayUtils.shift((boolean[]) null, (int) '1', (int) '1', 27);
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 27);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1670;
      shortArray0[1] = (short)1670;
      shortArray0[2] = (short)1670;
      shortArray0[3] = (short)1670;
      shortArray0[4] = (short)1670;
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'z';
      charArray0[1] = 'D';
      charArray0[3] = '\"';
      charArray0[4] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'r');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'i', 'D', '\u0000', '\"', 'q'}, charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\"';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = (long) (short)1670;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1972L);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1670L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'M';
      charArray0[6] = 'h';
      charArray0[2] = '\'';
      charArray0[3] = 'h';
      charArray0[4] = 'w';
      charArray0[5] = 'G';
      Short short0 = new Short((short)350);
      assertEquals((short)350, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((short)350);
      assertEquals(350, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(350, object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3327);
      Integer integer0 = new Integer((short)2246);
      assertEquals(2246, (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long((short) (-3327));
      assertEquals((-3327L), (long)long0);
      assertNotNull(long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertEquals((-3327L), object0);
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-3327));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3327, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      Short short0 = new Short((short)393);
      assertEquals((short)393, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((-2146692968));
      assertEquals((-2146692968), (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long(3436L);
      assertEquals(3436L, (long)long0);
      assertNotNull(long0);
      
      MutableInt mutableInt0 = new MutableInt(long0);
      assertEquals(3436.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3436L, mutableInt0.longValue());
      assertEquals("3436", mutableInt0.toString());
      assertEquals(3436.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(3436, (int)mutableInt0.toInteger());
      assertEquals((byte)108, mutableInt0.byteValue());
      assertEquals(3436, (int)mutableInt0.getValue());
      assertEquals(3436, mutableInt0.intValue());
      assertEquals((short)3436, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.add((Number) short0);
      assertEquals(3829.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-11), mutableInt0.byteValue());
      assertEquals(3829, (int)mutableInt0.toInteger());
      assertEquals(3829, (int)mutableInt0.getValue());
      assertEquals(3829, mutableInt0.intValue());
      assertEquals((short)3829, mutableInt0.shortValue());
      assertEquals("3829", mutableInt0.toString());
      assertEquals(3829.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3829L, mutableInt0.longValue());
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(3829.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-11), mutableInt0.byteValue());
      assertEquals(3829, (int)mutableInt0.toInteger());
      assertEquals(3829, (int)mutableInt0.getValue());
      assertEquals(3829, mutableInt0.intValue());
      assertEquals((short)3829, mutableInt0.shortValue());
      assertEquals("3829", mutableInt0.toString());
      assertEquals(3829.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(3829L, mutableInt0.longValue());
      assertEquals((byte) (-11), mutableInt1.byteValue());
      assertEquals(3829L, mutableInt1.longValue());
      assertEquals(3829, (int)mutableInt1.getValue());
      assertEquals(3829, (int)mutableInt1.toInteger());
      assertEquals("3829", mutableInt1.toString());
      assertEquals(3829.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(3829.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(3829, mutableInt1.intValue());
      assertEquals((short)3829, mutableInt1.shortValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'M';
      charArray0[1] = 'h';
      charArray0[2] = '\'';
      charArray0[3] = 'M';
      charArray0[4] = 'w';
      charArray0[5] = 'G';
      Short short0 = new Short((short)350);
      assertEquals((short)350, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((short)350);
      assertEquals(350, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(350, object0);
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Short short0 = new Short((short)60);
      assertEquals((short)60, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((-3696));
      assertEquals((-3696), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)60, object0);
      assertNotNull(object0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 805.7206F;
      floatArray0[1] = (float) (short)60;
      floatArray0[2] = (float) (-3696);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (short)60;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) (-3696);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {805.7206F, 60.0F, (-3696.0F), 0.0F, 60.0F, 0.0F, 0.0F, (-3696.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 2522);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-111), (byte) (-1), (byte) (-111), (byte) (-111), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-111), (byte) (-1), (byte) (-111), (byte) (-111), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)5, (short) (-1)}, shortArray0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'I';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 6, 90);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2746.339);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 90;
      floatArray0[1] = (float) 90;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0, 90);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 90.0F}, floatArray0, 0.01F);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 90.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[0];
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0, class0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[7];
      shortArray2[0] = (short) (-2252);
      shortArray2[1] = (short)1967;
      shortArray2[2] = (short) (-2252);
      shortArray2[3] = (short)49;
      shortArray2[4] = (short) (-3696);
      shortArray2[5] = (short)2797;
      shortArray2[6] = (short)2797;
      short[] shortArray3 = ArrayUtils.removeAllOccurences(shortArray2, (short)2797);
      assertEquals(7, shortArray2.length);
      assertEquals(5, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-2252), (short)1967, (short) (-2252), (short)49, (short) (-3696), (short)2797, (short)2797}, shortArray2);
      assertArrayEquals(new short[] {(short) (-2252), (short)1967, (short) (-2252), (short)49, (short) (-3696)}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotNull(shortArray3);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Double double0 = new Double(3545.30702466361);
      assertEquals(3545.30702466361, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3545.30702466361);
      assertEquals(3545.30702466361, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(4555.984);
      assertEquals(4555.984, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double3;
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      doubleArray0[3] = double3;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      Double double6 = ArrayUtils.get(doubleArray0, 172, double5);
      assertEquals(0.0, (double)double6, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double5);
      assertEquals(0.0, object0);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertFalse(object0.equals((Object)double4));
      assertFalse(object0.equals((Object)double1));
      assertFalse(object0.equals((Object)double0));
      assertFalse(object0.equals((Object)double3));
      assertTrue(object0.equals((Object)double2));
      assertNotNull(object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 172;
      longArray0[1] = (-2632L);
      int int0 = ArrayUtils.indexOf(longArray0, 122L, (-1428));
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {172L, (-2632L)}, longArray0);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-2632L);
      doubleArray1[3] = (double) 172;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {4555.984, 0.0, (-2632.0), 172.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 447L, (-1));
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1428);
      doubleArray0[1] = (double) 447L;
      doubleArray0[2] = (double) (-1428);
      doubleArray0[3] = (double) (-1428);
      doubleArray0[4] = 401.9671612;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1428.0), 447.0, (-1428.0), (-1428.0), 401.9671612}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-14), (byte) (-14)}, byteArray0);
      
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) (byte) (-14);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-14);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte) (-14);
      floatArray0[6] = (float) (byte) (-14);
      floatArray0[7] = (float) (byte) (-14);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte) (-60));
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-14), (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-8));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-60);
      intArray0[1] = (int) 'X';
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-60), (int) (byte) (-60));
      assertEquals((-1), int1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-60), 88}, intArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) (byte) (-14);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-14);
      floatArray0[4] = (float) (byte) (-14);
      floatArray0[5] = (float) (byte) (-14);
      floatArray0[6] = (float) (byte) (-14);
      floatArray0[7] = (float) (byte) (-14);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte) (-60));
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-14);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-14)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 27, (-1879048192), (-1879048192));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)15;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)33, (byte)82, (byte) (-57), (byte)2, (byte)65, (byte)15}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)33, (byte)82, (byte) (-57), (byte)2, (byte)65, (byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)33, (byte)82, (byte) (-57), (byte)65, (byte)15}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      Double double0 = new Double((-1507.096178668065));
      assertEquals((-1507.096178668065), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ArrayUtils.get((Double[]) null, 1126, double0);
      assertEquals((-1507.096178668065), (double)double1, 0.01);
      assertNotNull(double1);
      
      Float float0 = new Float((float) 1126);
      assertEquals(1126.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ArrayUtils.toString((Object) float0, "");
      assertEquals("1126.0", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2121610351);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2121610351)}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2121610351);
      floatArray0[1] = (float) (-2121610351);
      floatArray0[2] = (float) (-2121610351);
      floatArray0[3] = (float) (-2121610351);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-2.12161037E9F), (-2.12161037E9F), (-2.12161037E9F), (-2.12161037E9F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(49.0);
      assertEquals(49.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3.0);
      assertEquals(3.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1750.7));
      assertEquals((-1750.7), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((-1750.7), (double)double3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = ArrayUtils.get(doubleArray0, 37, double1);
      assertEquals(3.0, (double)double4, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      String string0 = ArrayUtils.toString((Object) double4, "");
      assertEquals("3.0", string0);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 37;
      intArray0[1] = 37;
      intArray0[2] = 37;
      intArray0[3] = 37;
      intArray0[4] = (-744);
      intArray0[5] = 37;
      intArray0[6] = 37;
      intArray0[7] = 37;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {37, 37, 37, 37, (-744), 37, 37, 37}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-744);
      floatArray0[1] = (float) 37;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-744.0F), 37.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2859);
      assertEquals(3, int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      long[] longArray0 = new long[5];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1687;
      MutableInt mutableInt0 = new MutableInt((int) (short)1687);
      assertEquals(1687L, mutableInt0.longValue());
      assertEquals(1687, mutableInt0.intValue());
      assertEquals(1687.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1687, mutableInt0.shortValue());
      assertEquals((byte) (-105), mutableInt0.byteValue());
      assertEquals(1687, (int)mutableInt0.toInteger());
      assertEquals(1687.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1687", mutableInt0.toString());
      assertEquals(1687, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(1687, (int)integer0);
      assertEquals(1687L, mutableInt0.longValue());
      assertEquals(1687, mutableInt0.intValue());
      assertEquals(1687.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1687, mutableInt0.shortValue());
      assertEquals((byte) (-105), mutableInt0.byteValue());
      assertEquals(1687, (int)mutableInt0.toInteger());
      assertEquals(1687.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1687", mutableInt0.toString());
      assertEquals(1687, (int)mutableInt0.getValue());
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(335);
      assertEquals(335, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1398));
      assertEquals((-1398), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(1182);
      assertEquals(1182, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      ArrayUtils.shift(longArray0, 14);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[20];
      floatArray0[0] = (float) (short)1687;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(20, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(20, floatArray0.length);
      assertEquals(40, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'E';
      floatArray0[1] = (float) 'E';
      floatArray0[2] = 111.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 111.0F);
      assertEquals(2, int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {69.0F, 69.0F, 111.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 2);
      assertEquals(2, int1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3360);
      intArray0[1] = 69;
      intArray0[2] = 35;
      intArray0[3] = 64;
      intArray0[4] = 919;
      intArray0[5] = (-5190);
      intArray0[6] = 629;
      intArray0[7] = (-615);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new int[] {(-3360), 69, 35, 64, 919, (-5190), 629, (-615)}, intArray0);
      assertNotNull(integerArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-615);
      floatArray0[1] = (float) (-615);
      floatArray0[2] = (float) 919;
      floatArray0[3] = (float) 35;
      floatArray0[4] = (float) (-5190);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-615.0F), (-615.0F), 919.0F, 35.0F, (-5190.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1330);
      assertEquals(5, int0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '#';
      ArrayUtils.shift((boolean[]) null, (int) '1', (int) '1', 27);
      int[] intArray0 = new int[10];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '1';
      intArray0[2] = 27;
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '1';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'1', '1', '#', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) '#';
      objectArray0[1] = (Object) '1';
      objectArray0[2] = (Object) 35;
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)93;
      ArrayUtils.shift(byteArray0, (-1364), (int) (byte)93, (-2118850531));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-35), (byte)93, (byte) (-8)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (-49));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-8), (byte) (-35)}, byteArray0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, (-6), (int) (byte) (-14), (int) (byte) (-14));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-14));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1414.37775;
      doubleArray0[3] = 2613.444005;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(7, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1414.37775, 2613.444005, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-102);
      ArrayUtils.shift(byteArray0, (-2474), 3238, (int) (byte)70);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-42), (byte) (-77), (byte)23, (byte) (-102)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (-49));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)70, (byte) (-42), (byte) (-77), (byte)23}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)70;
      floatArray0[1] = (float) (-49);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1834));
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.decrement();
      assertEquals((-1835), (int)mutableInt0.toInteger());
      assertEquals((-1835L), mutableInt0.longValue());
      assertEquals("-1835", mutableInt0.toString());
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals((-1835), (int)mutableInt0.getValue());
      assertEquals((-1835.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1835), mutableInt0.intValue());
      assertEquals((short) (-1835), mutableInt0.shortValue());
      assertEquals((-1835.0F), mutableInt0.floatValue(), 0.01F);
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-1835), int0);
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      
      int int1 = mutableInt0.addAndGet(69);
      assertEquals((-1765), int1);
      assertFalse(int1 == int0);
      assertEquals((-1765), mutableInt0.intValue());
      assertEquals((short) (-1765), mutableInt0.shortValue());
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)27, mutableInt0.byteValue());
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((-1765), (int)mutableInt0.toInteger());
      assertEquals((-1765L), mutableInt0.longValue());
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1835);
      intArray0[1] = (-615);
      intArray0[2] = 35;
      intArray0[3] = 35;
      intArray0[4] = 69;
      intArray0[5] = 919;
      intArray0[6] = (-741);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new int[] {(-1835), (-615), 35, 35, 69, 919, (-741)}, intArray0);
      assertNotNull(integerArray0);
      
      int int2 = ArrayUtils.indexOf((Object[]) integerArray0, (Object) mutableInt0, 35);
      assertEquals((-1), int2);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertArrayEquals(new int[] {(-1835), (-615), 35, 35, 69, 919, (-741)}, intArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1765), mutableInt0.intValue());
      assertEquals((short) (-1765), mutableInt0.shortValue());
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)27, mutableInt0.byteValue());
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((-1765), (int)mutableInt0.toInteger());
      assertEquals((-1765L), mutableInt0.longValue());
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long long0 = 116L;
      Long long1 = new Long(116L);
      assertEquals(116L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-218L));
      assertEquals((-218L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(116L);
      assertEquals(116L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertEquals(116L, (long)long4);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      
      longArray0[3] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1363L));
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {116L, (-218L), 116L, 116L}, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-64);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte) (-2);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-2));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-64), (byte) (-64), (byte) (-2), (byte) (-64), (byte) (-2), (byte) (-2), (byte)82, (byte) (-2)}, byteArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3, 5, 6, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)82, (int) (byte) (-64));
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-64), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)107);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)107, (byte) (-64), (byte) (-64), (byte) (-64), (byte) (-2), (byte) (-64), (byte) (-2), (byte) (-2), (byte)82, (byte) (-2)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-64), (byte) (-64), (byte) (-2), (byte) (-64), (byte) (-2), (byte) (-2), (byte)82, (byte) (-2)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) 98;
      doubleArray0[1] = (double) 2147007804;
      doubleArray0[2] = (double) 2147007804;
      doubleArray0[3] = (double) 'k';
      doubleArray0[5] = (double) 'k';
      doubleArray0[6] = (double) 2147007804;
      doubleArray0[7] = (-2.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2.147007804E9, (-2.0));
      assertFalse(boolean0);
      assertEquals(24, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)40);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
      assertArrayEquals(new byte[] {(byte)56}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray1, (-859), 98, (int) (byte)50);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
      assertArrayEquals(new byte[] {(byte)56}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1687;
      shortArray0[1] = (short)1687;
      shortArray0[2] = (short)1687;
      shortArray0[3] = (short)1687;
      shortArray0[4] = (short)1687;
      shortArray0[5] = (short)1687;
      shortArray0[6] = (short)1687;
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'w';
      charArray0[2] = 'b';
      charArray0[3] = '6';
      charArray0[4] = '8';
      charArray0[5] = 't';
      char[] charArray1 = ArrayUtils.insert((int) (short)1687, charArray0, (char[]) null);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'\"', 'w', 'b', '6', '8', 't'}, charArray0);
      assertArrayEquals(new char[] {'\"', 'w', 'b', '6', '8', 't'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeElement((char[]) null, 'w');
      assertNull(charArray2);
      
      char[] charArray3 = ArrayUtils.clone((char[]) null);
      assertNull(charArray3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)33, (byte)97, (byte) (-67), (byte)49, (byte)113, (byte)98, (byte)32, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '`', (-1211));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '5';
      charArray0[2] = '#';
      charArray0[3] = 'y';
      charArray0[4] = '7';
      charArray0[5] = 'b';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) '7';
      objectArray0[5] = (Object) '#';
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) '#';
      objectArray0[8] = (Object) 'b';
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(9, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 10, 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'Q', 90);
      assertEquals((-1), int2);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'P', '5', '#', 'y', '7', 'b'}, charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      org.evosuite.runtime.Random.setNextRandom((-3696));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Float float0 = new Float(2196.193);
      assertEquals(2196.193F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(303.94F);
      assertEquals(303.94F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) 303.94F);
      assertEquals(303.94F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float2;
      floatArray0[2] = float2;
      floatArray0[3] = float2;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {2196.193F, 303.94F, 303.94F, 303.94F, 2196.193F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'u';
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, 117.0F);
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '@';
      intArray0[1] = (int) '@';
      intArray0[2] = (int) 'u';
      intArray0[3] = (int) '@';
      intArray0[4] = (int) '@';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 117);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {64, 64, 117, 64, 64}, intArray0);
      assertArrayEquals(new int[] {64, 64, 64, 64}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) (-14), 363);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-14);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-14.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (-14));
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-14.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 750.39328547308;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {750.39328547308}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 4598;
      intArray0[2] = 1;
      intArray0[3] = (-1);
      intArray0[4] = 122;
      intArray0[5] = 2950;
      intArray0[3] = (-930);
      intArray0[7] = 7;
      intArray0[8] = 98;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {4598, 1, (-930), 122, 2950, 0, 7, 98, 0}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 750.39328547308;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 98;
      objectArray0[3] = (Object) 122;
      objectArray0[4] = (Object) 1;
      objectArray0[5] = (Object) 98;
      ArrayUtils.shift(objectArray0, (-741), 0, 1);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'I';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 6, 90);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2746.339);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 90;
      floatArray0[1] = (float) 90;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0, 90);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 90.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 90.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = new short[7];
      shortArray1[0] = (short) (-2252);
      shortArray1[1] = (short)1967;
      shortArray1[2] = (short) (-2252);
      shortArray1[3] = (short)49;
      shortArray1[4] = (short) (-3696);
      shortArray1[5] = (short)2797;
      shortArray1[6] = (short)2797;
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'I';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "\b[/}m Q";
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "\b[/}m Q");
      assertEquals(3, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 6, 90);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2746.339);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-919.37), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 90;
      floatArray0[1] = (float) 90;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0, 90);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 90.0F}, floatArray0, 0.01F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {90.0F, 90.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[0];
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0, class0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[7];
      shortArray2[0] = (short) (-2252);
      shortArray2[1] = (short)1967;
      shortArray2[2] = (short)97;
      shortArray2[3] = (short)49;
      shortArray2[4] = (short) (-3696);
      shortArray2[5] = (short)2797;
      shortArray2[6] = (short)1510;
      short[] shortArray3 = ArrayUtils.removeAllOccurences(shortArray2, (short)2797);
      assertEquals(6, shortArray3.length);
      assertEquals(7, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-2252), (short)1967, (short)97, (short)49, (short) (-3696), (short)1510}, shortArray3);
      assertArrayEquals(new short[] {(short) (-2252), (short)1967, (short)97, (short)49, (short) (-3696), (short)2797, (short)1510}, shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotNull(shortArray3);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-681));
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1586);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      ArrayUtils.swap(byteArray0, 2145249754, 4, 114);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)50;
      doubleArray0[1] = (double) (byte)50;
      doubleArray0[2] = (double) (byte)50;
      doubleArray0[3] = (double) (-1586);
      doubleArray0[4] = (double) (byte)50;
      doubleArray0[5] = 414.1;
      doubleArray0[6] = (double) (byte)50;
      doubleArray0[7] = (double) (-1586);
      doubleArray0[8] = (double) (-1586);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 414.1);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {50.0, 50.0, 50.0, (-1586.0), 50.0, 50.0, (-1586.0), (-1586.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {50.0, 50.0, 50.0, (-1586.0), 50.0, 414.1, 50.0, (-1586.0), (-1586.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (short) (-1192);
      floatArray0[3] = (float) (short) (-1192);
      floatArray0[5] = (float) (short)401;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1192.0F), (-1192.0F), 0.0F, 401.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)256;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2109135724), (int) (short) (-1192));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {256.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1192);
      shortArray0[1] = (short) (-1192);
      shortArray0[2] = (short)401;
      shortArray0[3] = (short)401;
      shortArray0[4] = (short)256;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1192));
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1192), (short) (-1192), (short) (-1192), (short)401, (short)401, (short)256}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1192), (short) (-1192), (short)401, (short)401, (short)256}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {256.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)43, (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)43);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)43}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-14);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-14);
      floatArray0[4] = (float) (byte) (-14);
      floatArray0[5] = (float) (byte) (-14);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertTrue(boolean0);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-524L);
      longArray0[1] = (long) 2;
      longArray0[2] = 0L;
      longArray0[3] = (long) (byte)43;
      longArray0[4] = (long) (byte)43;
      longArray0[5] = (long) (-1006);
      longArray0[6] = (long) 0;
      longArray0[7] = (-2076L);
      ArrayUtils.reverse(longArray0, (-2835), 4);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {43L, 0L, 2L, (-524L), 43L, (-1006L), 0L, (-2076L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)121);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)82;
      shortArray0[1] = (short) (byte)121;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)82, 98);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)82, (short)121}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-6));
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(4555.984);
      assertEquals(4555.984, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 172;
      intArray0[2] = 172;
      intArray0[3] = 2;
      intArray0[4] = 10;
      int int0 = ArrayUtils.indexOf(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {10, 172, 172, 2, 10}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '5';
      charArray0[2] = '#';
      charArray0[3] = 'y';
      charArray0[4] = '7';
      charArray0[5] = 'b';
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) '7';
      objectArray0[5] = (Object) '#';
      objectArray0[6] = (Object) 0L;
      objectArray0[7] = (Object) '#';
      objectArray0[8] = (Object) 'b';
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(9, objectArray0.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 10, 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-84));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-64), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -64, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1504L;
      longArray0[1] = 4L;
      longArray0[2] = (long) (short)0;
      longArray0[3] = 78L;
      ArrayUtils.swap(longArray0, 55, (-2143), (-300));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1504L, 4L, 0L, 78L}, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1504L;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 465.0, 1548, 100.0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1504.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('G');
      assertEquals('G', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('=');
      assertEquals('=', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('g');
      assertEquals('g', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('c');
      assertEquals('c', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('=');
      assertEquals('=', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf((char) character5);
      assertEquals('=', (char)character6);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf(')');
      assertEquals(')', (char)character7);
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character6));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', '=', 'g', 'c', '=', '=', ')'}, charArray0);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (char)character0;
      doubleArray0[1] = (double) ')';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4.0, (-3724.286849868));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {71.0, 41.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) character5, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 61, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1192);
      shortArray0[2] = (short) (-1192);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1192), (short) (-1192)}, shortArray0);
      
      ArrayUtils.reverse(shortArray0, (int) (short) (-1192), (int) (short) (-1192));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-1192), (short) (-1192)}, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1192);
      doubleArray0[1] = (double) (-1641);
      doubleArray0[2] = (double) 0;
      ArrayUtils.reverse(doubleArray0, 76, (-2362));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1192.0), (-1641.0), 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1192);
      longArray0[1] = (long) (-2362);
      longArray0[2] = (long) (short) (-1192);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-1192L), (-2362L), (-1192L)}, longArray0);
      assertArrayEquals(new long[] {(-1192L), (-2362L), (-1192L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-1192);
      objectArray0[1] = (Object) (-1641.0);
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Character character0 = Character.valueOf('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray1 = new boolean[3];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray2.length);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'H';
      doubleArray0[1] = 1799.6363473599931;
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = (double) 'H';
      doubleArray0[7] = 1799.6363473599931;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = 1799.6363473599931;
      doubleArray0[7] = (double) 'H';
      doubleArray0[8] = 1.5;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-91.63));
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-91.63), 72.0, 1799.6363473599931, 72.0, 72.0, 0.0, 0.0, 1799.6363473599931, 72.0, 1.5}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {72.0, 1799.6363473599931, 72.0, 72.0, 0.0, 0.0, 1799.6363473599931, 72.0, 1.5}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) 1799.6363473599931;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) false;
      ArrayUtils.reverse(objectArray0);
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 'H';
      floatArray0[2] = (float) 'H';
      floatArray0[3] = (float) 'H';
      ArrayUtils.swap(floatArray0, 629, Integer.MAX_VALUE);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 72.0F, 72.0F, 72.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[2] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'I';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "\b[/}m Q";
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "\b[/}m Q");
      assertEquals(3, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      int[] intArray0 = new int[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)15);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-60), 512);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '?';
      charArray0[2] = 't';
      charArray0[3] = '.';
      charArray0[4] = '?';
      charArray0[5] = '.';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1728), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1728, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)39}, byteArray0);
      assertArrayEquals(new byte[] {(byte)39}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Long long0 = new Long(981L);
      assertEquals(981L, (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = '#';
      ArrayUtils.shift((boolean[]) null, (int) '1', (int) '1', 27);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) 's';
      intArray0[2] = 27;
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '1';
      intArray1[1] = (int) 's';
      intArray1[2] = (int) 's';
      intArray1[3] = (int) '#';
      intArray1[4] = (int) 's';
      intArray1[5] = (int) (byte) (-64);
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(3, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {27, 35, 35}, intArray2);
      assertArrayEquals(new int[] {35, 115, 27, 35, 35}, intArray0);
      assertArrayEquals(new int[] {49, 115, 115, 35, 115, (-64)}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 49;
      longArray0[1] = (long) (byte) (-64);
      longArray0[2] = (long) (byte) (-64);
      longArray0[3] = (long) (byte) (-64);
      longArray0[4] = (long) '1';
      longArray0[5] = (long) '#';
      longArray0[6] = (long) '#';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertArrayEquals(new long[] {49L, (-64L), (-64L), (-64L), 49L, 35L, 35L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift((boolean[]) null, 27, 1184, (int) (byte) (-64));
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-803.0);
      doubleArray0[2] = (-1210.72027);
      doubleArray0[3] = (-1928.6883016);
      doubleArray0[4] = 1590.0693295;
      doubleArray0[5] = 57.83298721;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2475.159912109375);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-803.0), (-1210.72027), (-1928.6883016), 1590.0693295, 57.83298721, 0.0, (-2475.159912109375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-803.0), (-1210.72027), (-1928.6883016), 1590.0693295, 57.83298721, 0.0, (-2475.159912109375)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 1117;
      intArray0[2] = (-1117);
      ArrayUtils.swap(intArray0, (-1117), (-2128), 3);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {3, 1117, (-1117)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Double double0 = new Double((-1817.4976009));
      assertEquals((-1817.4976009), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-1817.4976009));
      assertEquals((-1817.4976009), (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1117;
      intArray0[1] = (-1117);
      intArray0[2] = 1117;
      intArray0[3] = 3;
      ArrayUtils.swap(intArray0, (-2915), (-609), (-1117));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1117, (-1117), 1117, 3}, intArray0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, (-641));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[7];
      ArrayUtils.swap(shortArray0, (-641), (-641), Integer.MAX_VALUE);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Float[] floatArray1 = new Float[0];
      Float float0 = new Float(1624.0F);
      assertEquals(1624.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = ArrayUtils.add(floatArray1, float0);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      ArrayUtils.shift((Object[]) floatArray1, 1);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1799.6363473599931);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1799.6363473599931}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1524;
      shortArray0[1] = (short)35;
      shortArray0[2] = (short) (-368);
      shortArray0[3] = (short)8192;
      shortArray0[4] = (short) (-26589);
      ArrayUtils.swap(shortArray0, (-1053), (-642));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1524, (short)35, (short) (-368), (short)8192, (short) (-26589)}, shortArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1799.6363473599931}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "-{%[cY0:";
      stringArray0[2] = "M8aheA8";
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1033, stringArray0, stringArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1033, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'I';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "\b[/}m Q";
      stringArray0[2] = "";
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'V');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'X', '%', 'V', 'I'}, charArray0);
      assertArrayEquals(new char[] {'V', 'X', '%', 'V', 'I'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) stringArray0, (Object) "");
      assertEquals(3, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotSame(stringArray0, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)52;
      shortArray0[1] = (short)4153;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-721);
      ArrayUtils.reverse(shortArray0, (int) (short)52, (int) (short)52);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)52, (short)4153, (short)1, (short) (-721)}, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (float) (short)4153;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (short)4153;
      floatArray0[4] = (float) (short)52;
      floatArray0[5] = (-696.4958F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1.0F);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 4153.0F, 1.0F, 4153.0F, 52.0F, (-696.4958F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4153.0F, 4153.0F, 52.0F, (-696.4958F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = new Float[6];
      floatArray2[0] = (Float) 4153.0F;
      floatArray2[1] = (Float) 4153.0F;
      floatArray2[2] = (Float) (-696.4958F);
      floatArray2[3] = (Float) 4153.0F;
      floatArray2[4] = (Float) 4153.0F;
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[5] = float0;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray3.length);
      assertArrayEquals(new float[] {4153.0F, 4153.0F, (-696.4958F), 4153.0F, 4153.0F, (-1.0F)}, floatArray3, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-76);
      intArray0[1] = 100;
      Double double0 = new Double((-76));
      assertEquals((-76.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(100);
      assertEquals(100.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(100);
      assertEquals(100.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (int) 0, (-1));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short)1580;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 1257);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1257, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-919.37);
      boolean boolean0 = ArrayUtils.isNotEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap((byte[]) null, 131, (-2117), (-1709));
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 3130;
      longArray0[1] = 118L;
      longArray0[2] = (long) (-2117);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2251L));
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {3130L, 118L, (-2117L)}, longArray0);
      assertArrayEquals(new long[] {3130L, 118L, (-2117L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-919.37);
      doubleArray1[1] = (Double) (-919.37);
      doubleArray1[2] = (Double) (-919.37);
      doubleArray1[3] = (Double) (-919.37);
      doubleArray1[4] = (Double) (-919.37);
      doubleArray1[5] = (Double) (-919.37);
      doubleArray1[6] = (Double) (-919.37);
      doubleArray1[7] = (Double) (-919.37);
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2334.9937F);
      floatArray0[1] = 757.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1733.155F;
      floatArray0[4] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2334.9937F));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2334.9937F), 757.0F, 0.0F, 1733.155F, 0.0F}, floatArray0, 0.01F);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-446);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-446));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-446)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-967.594));
      assertEquals((-967.594), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.5);
      assertEquals(1.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-967.594));
      assertEquals((-967.594), (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.5);
      assertEquals(1.5, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((short) (-446));
      assertEquals((-446.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals((-967.594), (double)double5, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(69.0);
      assertEquals(69.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1.5);
      assertEquals(1.5, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((double) doubleArray0[5]);
      assertEquals((-967.594), (double)double8, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertEquals((double)double8, (double)double5, 0.01);
      assertEquals((double)double8, (double)double2, 0.01);
      assertNotNull(double8);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '\'';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) '%', (int) '%');
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', '\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '%';
      floatArray0[1] = (float) '\'';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) '\'', 12);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {37.0F, 39.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '%';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-89);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1136, (int) (byte) (-65));
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)21, (byte) (-65), (byte)23, (byte)112, (byte) (-89)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      char[] charArray0 = new char[9];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2147007804;
      floatArray0[1] = (float) 'k';
      floatArray0[2] = (float) 'k';
      floatArray0[3] = (float) 2484;
      floatArray0[4] = (float) 'k';
      floatArray0[6] = (float) 2147007804;
      floatArray0[7] = (float) 2484;
      floatArray0[8] = (float) 2484;
      // Undeclared exception!
      try { 
        ArrayUtils.subarray(floatArray0, 2146926872, Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '\'';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-184), (-184));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'%', '\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '%';
      floatArray0[1] = (float) '\'';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-184), 12);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {37.0F, 39.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {37.0F, 39.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '%';
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) '%';
      Double double0 = new Double((-919.37));
      assertEquals((-919.37), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(290.0);
      assertEquals(290.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(37.0F);
      assertEquals(37.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      long[] longArray0 = new long[4];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 43, (-4));
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1903), (-4));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 5.0, 43);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3003.5938F);
      floatArray0[1] = (-1504.4F);
      floatArray0[2] = 1645.69F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2325.35F);
      floatArray0[5] = 0.0F;
      ArrayUtils.reverse(floatArray0, 812, 1524);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-3003.5938F), (-1504.4F), 1645.69F, 0.0F, (-2325.35F), 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1833), 1524, (-1));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, false, false}, booleanArray0));
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) boolean0, (-1));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) boolean0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), 1072);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-3003.5938F), (-1504.4F), 1645.69F, 0.0F, (-2325.35F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3003.5938F), (-1504.4F), 1645.69F, 0.0F, (-2325.35F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1676);
      intArray0[3] = 33;
      intArray0[4] = 44;
      intArray0[5] = 3069;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, 0, (-1676), 33, 44, 3069}, intArray0);
      assertArrayEquals(new int[] {0, (-1676), 33, 44, 3069}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1676);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1676);
      floatArray0[3] = (float) 44;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1676.0F), 0.0F, (-1676.0F), 44.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1676.0F), 0.0F, (-1676.0F), 44.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-7), (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte) (-7), (byte)2}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)100);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)100, (short)2, (short)2}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1676.0F), 0.0F, (-1676.0F), 44.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1676.0F), 44.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2555.3374F;
      ArrayUtils.shift(floatArray0, (-641));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2555.3374F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '<';
      charArray0[2] = 'z';
      charArray0[3] = '?';
      charArray0[4] = 'w';
      charArray0[5] = 't';
      charArray0[6] = '.';
      charArray0[7] = '.';
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SJ";
      stringArray0[1] = "M(\"#";
      String[] stringArray1 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2731.519F;
      floatArray0[1] = 349.9133F;
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertNotNull(stringArray2);
      
      Float[] floatArray1 = new Float[4];
      floatArray1[0] = (Float) 349.9133F;
      floatArray1[1] = (Float) 349.9133F;
      floatArray1[2] = (Float) 2731.519F;
      floatArray1[3] = (Float) 2731.519F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-1727.4263F));
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertArrayEquals(new float[] {349.9133F, 349.9133F, 2731.519F, 2731.519F}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-14);
      intArray0[1] = (int) (byte) (-14);
      intArray0[2] = (int) (byte) (-14);
      intArray0[3] = (-6);
      intArray0[4] = (int) (byte) (-14);
      intArray0[0] = (int) (byte) (-14);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertArrayEquals(new int[] {(-14), (-14), (-14), (-6), (-14), 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\'}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)0;
      ArrayUtils.shift(byteArray0, (-1205), (int) (byte) (-32), (-1));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)46, (byte)0, (byte)32, (byte) (-102), (byte)43, (byte)43, (byte)46, (byte)0}, byteArray0);
      
      ArrayUtils.shift(byteArray0, 52);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte) (-102), (byte)43, (byte)43, (byte)46, (byte)0, (byte) (-32), (byte)46}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 761;
      intArray0[1] = (int) (byte)43;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {761, 43}, intArray0);
      assertArrayEquals(new int[] {761, 43, 761, 43}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)2);
      assertEquals(1, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)2, (byte) (-1)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, (int) (byte)2, 2377, (-698));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)2;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "~A=y\";=n");
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'F';
      charArray0[1] = 'h';
      charArray0[2] = '\'';
      charArray0[3] = 'F';
      charArray0[4] = 'w';
      charArray0[5] = 'G';
      Short short0 = new Short((short)350);
      assertEquals((short)350, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((short)350);
      assertEquals(350, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(350, object0);
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1799.6363473599931);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1799.6363473599931}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 698L;
      longArray0[2] = 337L;
      longArray0[3] = (-1L);
      ArrayUtils.shift(longArray0, 372, 372, 372);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 698L, 337L, (-1L)}, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 337L;
      floatArray0[1] = (float) 372;
      floatArray0[2] = 1638.3F;
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) 698L;
      floatArray0[6] = (float) 337L;
      floatArray0[7] = (float) 372;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {337.0F, 372.0F, 1638.3F, (-1.0F), 698.0F, 0.0F, 337.0F, 372.0F}, floatArray0, 0.01F);
      
      Short short0 = new Short((short) (-2140));
      assertEquals((short) (-2140), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-2140));
      assertEquals((short) (-2140), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      Short short2 = new Short((short) (-2140));
      assertEquals((short) (-2140), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      shortArray0[2] = short1;
      shortArray0[3] = short0;
      shortArray0[4] = shortArray0[1];
      shortArray0[5] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 337L);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 698L, 337L, (-1L)}, longArray0);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'G';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'w', 'w', 'w', 'w', 'G'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte) (-102), 2124910897, (-392));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)43, (byte)32, (byte)46, (byte)2, (byte)2, (byte)32, (byte)0}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-15));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)46, (byte)2, (byte)2, (byte)32, (byte)0, (byte)43}, byteArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      ArrayUtils.shift((byte[]) null, (-605), 533, 3345);
      ArrayUtils.shift((byte[]) null, 533);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) 533;
      longArray0[4] = (long) 3345;
      longArray0[5] = (long) 3345;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 533L, 3345L, 3345L}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'F';
      charArray0[1] = 'r';
      charArray0[2] = '\'';
      charArray0[3] = ',';
      charArray0[4] = 'w';
      charArray0[5] = 'G';
      charArray0[6] = 'F';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'r', '\'', ',', 'w', 'G', 'F'}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)43;
      ArrayUtils.shift(byteArray0, 0, 1525, (int) (byte) (-14));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-14), (byte)0, (byte)43, (byte)0, (byte) (-32), (byte)32, (byte) (-102), (byte)46}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-14), (byte)0, (byte)43, (byte)0, (byte) (-32), (byte)32, (byte) (-102), (byte)46}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)46;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {46L}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 6.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 6.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-14);
      ArrayUtils.shift(byteArray0, 0, (int) (byte) (-14), (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte)43, (byte) (-14)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)43);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)43}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-14);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte) (-14);
      floatArray0[4] = (float) (byte) (-14);
      floatArray0[5] = (float) (byte) (-14);
      floatArray0[6] = (float) (byte) (-14);
      floatArray0[7] = (float) (byte) (-14);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-14.0F));
      assertEquals(8, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-14.0F), 0.0F, 0.0F, (-14.0F), (-14.0F), (-14.0F), (-14.0F), (-14.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-14.0F), (-14.0F), (-14.0F), (-14.0F), (-14.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      Character character0 = new Character('@');
      assertEquals('@', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '@');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'@', '@', '@'}, charArray0);
      assertNotNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '\\';
      charArray0[2] = '0';
      charArray0[3] = 'q';
      charArray0[4] = 'W';
      char[] charArray1 = ArrayUtils.insert(2145950769, (char[]) null, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'v', '\\', '0', 'q', 'W'}, charArray0);
      assertNull(charArray1);
      
      char[] charArray2 = new char[6];
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'v';
      charArray2[1] = 'W';
      charArray2[2] = 'W';
      charArray2[3] = '0';
      charArray2[4] = 'v';
      charArray2[5] = 'v';
      char[] charArray3 = ArrayUtils.removeElement(charArray2, '-');
      assertEquals(6, charArray2.length);
      assertEquals(6, charArray3.length);
      assertArrayEquals(new char[] {'v', 'W', 'W', '0', 'v', 'v'}, charArray2);
      assertArrayEquals(new char[] {'v', 'W', 'W', '0', 'v', 'v'}, charArray3);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotNull(charArray3);
      
      char[] charArray4 = ArrayUtils.clone(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray4.length);
      assertArrayEquals(new char[] {'v', '\\', '0', 'q', 'W'}, charArray0);
      assertArrayEquals(new char[] {'v', '\\', '0', 'q', 'W'}, charArray4);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray2));
      assertNotSame(charArray0, charArray4);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray2);
      assertNotNull(charArray4);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-979L);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 4, 5}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)322;
      shortArray0[1] = (short) (-8047);
      shortArray0[2] = (short) (-695);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)322, (short) (-8047), (short) (-695)}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-695);
      floatArray0[1] = (float) (short) (-8047);
      floatArray0[2] = (-2197.8293F);
      floatArray0[3] = (float) (short) (-8047);
      floatArray0[4] = 736.6F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (-979L);
      int int0 = ArrayUtils.indexOf(floatArray0, 2074.4814F, 36);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-695.0F), (-8047.0F), (-2197.8293F), (-8047.0F), 736.6F, 1.0F, (-979.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1670;
      shortArray0[1] = (short)1670;
      shortArray0[2] = (short)1670;
      shortArray0[3] = (short)1670;
      shortArray0[4] = (short)1670;
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'z';
      charArray0[2] = 'D';
      charArray0[3] = '\"';
      charArray0[4] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'r');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'i', 'z', 'D', '\"', 'q'}, charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\"';
      Object object0 = ArrayUtils.get(objectArray0, 513);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '\"';
      intArray0[1] = 1272;
      intArray0[2] = (int) 'i';
      intArray0[3] = (int) (short)1670;
      intArray0[4] = (int) 'q';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 34);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {34, 1272, 105, 1670, 113}, intArray0);
      assertArrayEquals(new int[] {1272, 105, 1670, 113}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1670);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short)1670, (short)1670, (short)1670, (short)1670, (short)1670, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1670, (short)1670, (short)1670, (short)1670, (short)1670, (short)0, (short)0, (short)0, (short)1670}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      Short short0 = new Short((short)353);
      assertEquals((short)353, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'o';
      charArray0[2] = 'R';
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 1087, (short)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1087, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1834));
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      mutableInt0.decrement();
      assertEquals((-1835), (int)mutableInt0.getValue());
      assertEquals((-1835), (int)mutableInt0.toInteger());
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals("-1835", mutableInt0.toString());
      assertEquals((-1835L), mutableInt0.longValue());
      assertEquals((-1835.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1835.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1835), mutableInt0.intValue());
      assertEquals((short) (-1835), mutableInt0.shortValue());
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((-1835), int0);
      assertEquals((-1834), (int)mutableInt0.toInteger());
      assertEquals((-1834), (int)mutableInt0.getValue());
      assertEquals((byte) (-42), mutableInt0.byteValue());
      assertEquals((-1834L), mutableInt0.longValue());
      assertEquals((-1834.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1834), mutableInt0.intValue());
      assertEquals((short) (-1834), mutableInt0.shortValue());
      assertEquals("-1834", mutableInt0.toString());
      assertEquals((-1834.0F), mutableInt0.floatValue(), 0.01F);
      
      int int1 = mutableInt0.addAndGet(69);
      assertEquals((-1765), int1);
      assertFalse(int1 == int0);
      assertEquals((-1765), mutableInt0.intValue());
      assertEquals((-1765.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1765L), mutableInt0.longValue());
      assertEquals((short) (-1765), mutableInt0.shortValue());
      assertEquals((-1765.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1765", mutableInt0.toString());
      assertEquals((-1765), (int)mutableInt0.getValue());
      assertEquals((-1765), (int)mutableInt0.toInteger());
      assertEquals((byte)27, mutableInt0.byteValue());
      
      mutableInt0.add(69);
      assertEquals((short) (-1696), mutableInt0.shortValue());
      assertEquals((byte)96, mutableInt0.byteValue());
      assertEquals((-1696.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1696", mutableInt0.toString());
      assertEquals((-1696.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1696), (int)mutableInt0.toInteger());
      assertEquals((-1696), mutableInt0.intValue());
      assertEquals((-1696), (int)mutableInt0.getValue());
      assertEquals((-1696L), mutableInt0.longValue());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mutableInt0;
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 613;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {613}, intArray0);
      assertArrayEquals(new int[] {613, 613}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      Character character1 = Character.valueOf('Y');
      assertEquals('Y', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\'');
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'\'', 'Y', '\''}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)15;
      shortArray0[2] = (short)2193;
      shortArray0[3] = (short)483;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)483, (short)2193, (short)15, (short)0}, shortArray0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'd';
      Character character1 = Character.valueOf('d');
      assertEquals('d', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char char1 = 's';
      Character character2 = new Character('s');
      assertEquals('s', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('s');
      assertEquals('s', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('t');
      assertEquals('t', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertEquals('d', (char)character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(char0 == char1);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char1);
      assertEquals('s', (char)character6);
      assertTrue(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(char1 == char0);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf((char) character6);
      assertEquals('s', (char)character7);
      assertTrue(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)char0));
      assertFalse(char1 == char0);
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character((char) character6);
      assertEquals('s', (char)character8);
      assertTrue(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character7));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertTrue(character8.equals((Object)character2));
      assertTrue(character8.equals((Object)char1));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)char0));
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character4));
      assertTrue(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character1));
      assertFalse(char1 == char0);
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char1);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'t', 'd', 's', 's', 't', 'd', 's', 's', 's'}, charArray0);
      assertFalse(char1 == char0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-63);
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[3] = (-63);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-63), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -63, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-2);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-2), 11);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character character0 = Character.valueOf('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      Integer integer0 = new Integer((byte) (-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "byte");
      assertEquals("-2", string0);
      assertNotNull(string0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 11);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2), (byte) (-2)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-714.1439446);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) (byte) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-395.2);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-2), 2, (-53.0));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-714.1439446), 11.0, (-2.0), (-1.0), (-395.2)}, doubleArray0, 0.01);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse((float[]) null);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-44));
      assertEquals((-1), int1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("Array element ");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'k';
      charArray0[2] = '3';
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-795), (-3255));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'e';
      doubleArray0[1] = (double) (-3255);
      doubleArray0[2] = (double) 'e';
      doubleArray0[3] = (double) '3';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {101.0, (-3255.0), 101.0, 51.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-9));
      assertNull(byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((-795));
      assertEquals((short) (-795), mutableInt0.shortValue());
      assertEquals((-795.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-795", mutableInt0.toString());
      assertEquals((-795), mutableInt0.intValue());
      assertEquals((-795), (int)mutableInt0.toInteger());
      assertEquals((-795L), mutableInt0.longValue());
      assertEquals((-795), (int)mutableInt0.getValue());
      assertEquals((byte) (-27), mutableInt0.byteValue());
      assertEquals((-795.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(101.0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals("101", mutableInt1.toString());
      assertEquals(101L, mutableInt1.longValue());
      assertEquals(101.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(101, mutableInt1.intValue());
      assertEquals((short)101, mutableInt1.shortValue());
      assertEquals((byte)101, mutableInt1.byteValue());
      assertEquals(101.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(101, (int)mutableInt1.toInteger());
      assertEquals(101, (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      mutableIntArray0[0] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(2, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'C';
      charArray0[2] = 'n';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'C';
      longArray0[1] = (long) 'C';
      longArray0[2] = (long) 'C';
      longArray0[3] = (long) 'C';
      ArrayUtils.swap(longArray0, 783, (-2147483638));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {67L, 67L, 67L, 67L}, longArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-2147483638), 783);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.insert((-2147483638), intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)26;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, object0);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertSame(object0, object1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2054;
      floatArray0[1] = (float) (-1);
      ArrayUtils.swap(floatArray0, (-805), 2054, 115);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2054.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-75);
      intArray0[5] = (-1);
      intArray0[2] = (-489);
      intArray0[3] = (-75);
      intArray0[4] = (-75);
      intArray0[5] = (-489);
      intArray0[6] = (-489);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-489), 0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-75), 0, (-489), (-75), (-75), (-489), (-489)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-75);
      floatArray0[1] = (float) 0;
      floatArray0[3] = (float) (-489);
      floatArray0[5] = (float) 0;
      ArrayUtils.reverse(floatArray0, (-1), (-75));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-75.0F), 0.0F, 0.0F, (-489.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-489.0F), 0.0F, 0.0F, (-75.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)256;
      shortArray0[1] = (short)256;
      shortArray0[2] = (short) (-3853);
      shortArray0[3] = (short) (-3853);
      shortArray0[4] = (short)962;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      ArrayUtils.shift(shortArray0, (-1725), (-1725), (int) (short)256);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)256, (short)256, (short) (-3853), (short) (-3853), (short)962, (short) (-1), (short) (-1)}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)256, (int) (short)972);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)32);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short)0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) "XkdJ$1*", 2650);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-713.805);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 2650);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-713.805)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2650.0, (-713.805)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {(-713.805)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-713.805)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)934;
      shortArray0[2] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1618));
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)934, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(shortArray0, (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)934, (short) (-1), (short)0}, shortArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (short)0);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = new Float[4];
      floatArray2[0] = (Float) (-1.0F);
      floatArray2[1] = (Float) (-1.0F);
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (short)934;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (-1.0F);
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, object0);
      assertEquals(4, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short) (-1935);
      shortArray0[2] = (short)84;
      ArrayUtils.swap(shortArray0, (int) (short)1136, (int) (short) (-1935));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short) (-1935), (short)84}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-83), (int) (byte)2);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)934;
      shortArray0[2] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1618));
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)934, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)6;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-1);
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 6.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(shortArray0, (-1));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)934, (short) (-1), (short)6}, shortArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (short)6);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float[] floatArray2 = new Float[4];
      floatArray2[0] = (Float) (-1.0F);
      floatArray2[1] = (Float) (-1.0F);
      floatArray2[2] = (Float) 6.0F;
      floatArray2[3] = (Float) (-1.0F);
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertEquals(4, floatArray3.length);
      assertEquals(4, floatArray2.length);
      assertSame(floatArray3, floatArray2);
      assertSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      
      ArrayUtils.swap(shortArray0, (int) (short)934, (-6));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)934, (short) (-1), (short)6}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) floatArray2, (Object) "KT", 49);
      assertEquals((-1), int1);
      assertEquals(4, floatArray2.length);
      assertTrue(int1 == int0);
      assertSame(floatArray2, floatArray3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)934;
      intArray0[1] = (int) (short)934;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(363, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 363, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-3084.33518384035), 73, (-1.0));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 73;
      longArray0[1] = (long) 73;
      longArray0[2] = (long) 73;
      longArray0[3] = (long) 90;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 73;
      longArray0[6] = (long) (-1);
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      ArrayUtils.shift(booleanArray2, Integer.MIN_VALUE);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 73);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "oT{b4&[[kp$";
      stringArray0[1] = "*M4X{{9a$v";
      int[] intArray0 = new int[0];
      String[] stringArray1 = ArrayUtils.removeAll(stringArray0, intArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, stringArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1288;
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-349), (long) (-349));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -349, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 9115.448F;
      Float float0 = new Float((double) 1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(9115.448F);
      assertEquals(9115.448F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray1 = new Float[4];
      floatArray1[0] = (Float) 9115.448F;
      floatArray1[1] = (Float) (-1.0F);
      floatArray1[2] = float1;
      floatArray1[3] = float0;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      MutableInt mutableInt0 = new MutableInt(822);
      assertEquals(822.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(822, mutableInt0.intValue());
      assertEquals(822, (int)mutableInt0.toInteger());
      assertEquals(822L, mutableInt0.longValue());
      assertEquals(822, (int)mutableInt0.getValue());
      assertEquals("822", mutableInt0.toString());
      assertEquals((short)822, mutableInt0.shortValue());
      assertEquals((byte)54, mutableInt0.byteValue());
      assertEquals(822.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals(822, int0);
      assertEquals(823.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(823, mutableInt0.intValue());
      assertEquals(823L, mutableInt0.longValue());
      assertEquals("823", mutableInt0.toString());
      assertEquals((short)823, mutableInt0.shortValue());
      assertEquals(823, (int)mutableInt0.getValue());
      assertEquals(823.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(823, (int)mutableInt0.toInteger());
      assertEquals((byte)55, mutableInt0.byteValue());
      
      mutableInt0.setValue((Number) floatArray1[1]);
      assertEquals(4, floatArray1.length);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertSame(floatArray1, floatArray2);
      
      float[] floatArray3 = ArrayUtils.addFirst(floatArray0, 9115.448F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray3.length);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 9115.448F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {9115.448F, (-1.0F), 1.0F, 9115.448F, 0.0F}, floatArray3, 0.01F);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-919.37);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-919.37));
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '%';
      charArray0[2] = 'V';
      charArray0[3] = 'I';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "\b[/}m Q";
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "\b[/}m Q");
      assertEquals(3, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 6, 90);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.5);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-919.37)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 9115.448F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 9115.448F, 0.0F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(1292);
      assertEquals(1292, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) integer0);
      assertEquals((-1), int1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3003.5938F);
      Boolean boolean0 = Boolean.valueOf("nvY-lW?_9l3/Ex,B.");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("E0=P ;ci3+tsHT");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)81;
      shortArray0[1] = (short)63;
      shortArray0[2] = (short) (-186);
      shortArray0[3] = (short) (-2090);
      shortArray0[4] = (short)3;
      shortArray0[5] = (short) (-2634);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1);
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean2);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)81, (short)63, (short) (-186), (short) (-2090), (short)3, (short) (-2634), (short) (-1), (short) (-1)}, shortArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean3);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)81, (short)63, (short) (-186), (short) (-2090), (short)3, (short) (-2634), (short) (-1), (short) (-1)}, shortArray0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean1 = Boolean.valueOf(", Length: ");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }
}
