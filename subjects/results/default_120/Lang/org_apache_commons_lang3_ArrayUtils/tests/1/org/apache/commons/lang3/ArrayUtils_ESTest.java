/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 12:30:58 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Map;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)75;
      Byte byte2 = new Byte((byte)75);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)75, (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte2;
      Byte byte3 = new Byte((byte) (-68));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-68), (byte)byte3);
      assertNotNull(byte3);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-56);
      longArray0[1] = (-773L);
      longArray0[2] = (long) byte1;
      longArray0[3] = (long) (byte)75;
      longArray0[4] = 2135L;
      longArray0[5] = (long) (byte) (-68);
      longArray0[6] = (long) (byte)75;
      int int0 = ArrayUtils.indexOf(longArray0, (-68L), (int) byte1);
      assertArrayEquals(new long[] {(-56L), (-773L), 75L, 75L, 2135L, (-68L), 75L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)108;
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1681L);
      assertArrayEquals(new long[] {1681L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1681L, 2276);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)108;
      floatArray0[1] = 1778.208F;
      floatArray0[2] = (float) 14;
      floatArray0[3] = (float) 2276;
      floatArray0[4] = (float) (-1495L);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = 2392.5F;
      floatArray0[7] = (-461.1002F);
      floatArray0[8] = (float) (short)108;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 78);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {108.0F, 1778.208F, 14.0F, 2276.0F, (-1495.0F), (-1.0F), 2392.5F, (-461.1002F), 108.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {108.0F, 1778.208F, 14.0F, 2276.0F, (-1495.0F), (-1.0F), 2392.5F, (-461.1002F), 108.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1319);
      floatArray0[1] = (float) 1;
      ArrayUtils.shift(floatArray0, (int) (byte) (-79), 321, (int) (byte) (-79));
      assertArrayEquals(new float[] {1.0F, (-1319.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1319.0F);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = 2247.2164163675;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) (-1319.0F);
      double[] doubleArray1 = ArrayUtils.insert(6, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, (-1319.0), 6.0, 2247.2164163675, 6.0, (-1319.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-79);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 45);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-79)}, intArray0);
      assertArrayEquals(new int[] {45, (-79)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2689L;
      longArray0[1] = (-1655L);
      longArray0[2] = (-2435L);
      longArray0[3] = 579L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1655L), (-2435L), 579L, 2689L}, longArray0);
      assertEquals(4, longArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(longArray0, 0, 1200, 0);
      assertArrayEquals(new long[] {(-1655L), (-2435L), 579L, 2689L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short)6);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-117L));
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {6.0F}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 2L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-4438));
      assertEquals((short) (-4438), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-4438));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-4438), (short)short1);
      assertNotNull(short1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-4438);
      floatArray0[1] = (float) (short) (-4438);
      floatArray0[2] = (float) (short) (-4438);
      floatArray0[3] = (float) (short) (-4438);
      floatArray0[4] = (float) (short) (-4438);
      floatArray0[5] = (float) (short) (-4438);
      floatArray0[6] = (float) (short) (-4438);
      floatArray0[7] = (float) (short) (-4438);
      floatArray0[8] = (-1901.22F);
      ArrayUtils.reverse(floatArray0, (int) (short) (-4438), 27);
      assertArrayEquals(new float[] {(-1901.22F), (-4438.0F), (-4438.0F), (-4438.0F), (-4438.0F), (-4438.0F), (-4438.0F), (-4438.0F), (-4438.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Float float0 = new Float((double) (-4438.0F));
      assertEquals((-4438.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-6), (int) (short) (-4438));
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 1852.842F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1852.842F}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotNull(floatArray2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short) (-4438);
      longArray0[2] = (long) (short) (-6);
      longArray0[3] = (long) 27;
      longArray0[4] = (long) 27;
      longArray0[5] = (long) (-1);
      longArray0[6] = 2147483647L;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1L), (-4438L), (-6L), 27L, 27L, (-1L), 2147483647L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 342L;
      longArray0[1] = 342L;
      longArray0[2] = 342L;
      longArray0[3] = 342L;
      longArray0[4] = 342L;
      longArray0[5] = 342L;
      longArray0[6] = 342L;
      longArray0[7] = 342L;
      longArray0[8] = 342L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-148L));
      assertArrayEquals(new long[] {342L, 342L, 342L, 342L, 342L, 342L, 342L, 342L, 342L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {342L, 342L, 342L, 342L, 342L, 342L, 342L, 342L, 342L}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1);
      
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {342L, 342L, 342L, 342L, 342L, 342L, 342L, 342L, 342L}, longArray0);
      assertArrayEquals(new long[] {342L, 342L, 342L, 342L, 342L, 342L, 342L, 342L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (-2596), (-2037));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Float float0 = new Float((float) (-2596));
      assertEquals((-2596.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (-2596));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2596.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-2037));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, int0);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray3 = ArrayUtils.removeAll(longArray1, intArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray1);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, longArray3.length);
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2689L;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2689L);
      assertEquals(2689.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {2689.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 16;
      intArray0[1] = 65;
      intArray0[2] = 1;
      intArray0[3] = (-1771);
      intArray0[4] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {16, 65, 1, (-1771), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 65;
      intArray1[3] = 65;
      intArray1[4] = 65;
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {65, 65}, intArray2);
      assertArrayEquals(new int[] {16, 65, 1, (-1771), 0}, intArray0);
      assertArrayEquals(new int[] {0, 1, 65, 65, 65}, intArray1);
      assertEquals(2, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer(89);
      assertEquals(89, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 63;
      intArray0[1] = 89;
      intArray0[2] = 89;
      intArray0[3] = 63;
      intArray0[4] = 63;
      intArray0[5] = 63;
      intArray0[6] = 89;
      intArray0[7] = 89;
      intArray0[8] = 63;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {63, 89, 89, 63, 63, 63, 89, 89, 63}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 89;
      intArray1[1] = 63;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {63, 89, 89, 63, 63, 63, 89, 89, 63}, intArray0);
      assertArrayEquals(new int[] {89, 63}, intArray1);
      assertArrayEquals(new int[] {89, 63, 63, 63, 89, 89, 63}, intArray2);
      assertEquals(9, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(7, intArray2.length);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 3494.115F;
      floatArray0[2] = 3415.077F;
      int int0 = ArrayUtils.indexOf(floatArray0, 3415.077F, (-1688));
      assertArrayEquals(new float[] {(-1.0F), 3494.115F, 3415.077F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(2, int0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 3494.115F, 2);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), 3494.115F, 3415.077F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      
      int int2 = ArrayUtils.lastIndexOf(intArray0, 2, 1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int2);
      
      Integer integer0 = new Integer((-721));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-721), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(374);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(374, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = new Double((-1365.1));
      assertEquals((-1365.1), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1365.1)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Array element ";
      stringArray0[1] = "java.ljang.Object";
      stringArray0[2] = "java.lang.Byte";
      stringArray0[3] = "+1.2}o@s";
      stringArray0[4] = "w`mIQzEva<49X";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = ArrayUtils.toStringArray((Object[]) stringArray0, (String) null);
      assertSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) doubleArray0[0]);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1365.1F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3587;
      shortArray0[1] = (short) (-4078);
      shortArray0[2] = (short)1123;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3587, (short) (-4078), (short)1123}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.add((String[]) null, "U'3");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (-2958.0F);
      floatArray0[4] = 1135.28F;
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) (byte)1;
      floatArray0[7] = (float) (byte)1;
      floatArray0[8] = (float) byte0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-2958.0F));
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, (-2958.0F), 1135.28F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) byte0, (int) byte0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, (-2958.0F), 1135.28F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-32));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Byte byte1 = new Byte((byte)55);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)55, (byte)byte1);
      assertNotNull(byte1);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'O';
      Character character1 = Character.valueOf('O');
      assertFalse(character1.equals((Object)character0));
      assertEquals('O', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('4');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('4', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('O');
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertEquals('O', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-4208), (int) char0);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1943));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1943), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int1 = 88;
      Integer integer2 = new Integer(88);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertEquals(88, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertFalse(int1 == int0);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(88, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1345);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(1345, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(98);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(98, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2225);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int1));
      assertEquals(2225, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = Integer.valueOf(111);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(111, (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((byte) (-32));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertEquals((-32), (int)integer8);
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)775;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)775}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-79);
      doubleArray0[1] = (double) (short)775;
      doubleArray0[2] = (double) (short)775;
      doubleArray0[3] = (double) (byte) (-79);
      doubleArray0[4] = (double) (short)775;
      doubleArray0[5] = (double) (byte) (-18);
      doubleArray0[6] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-79.0), 1);
      assertArrayEquals(new double[] {(-79.0), 775.0, 775.0, (-79.0), 775.0, (-18.0), 2.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (int) (byte) (-18);
      intArray3[1] = 2;
      intArray3[2] = 2;
      intArray3[3] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "S";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "R";
      stringArray0[3] = "T(2dlo/FU{4XaZ'C5";
      stringArray0[4] = "-Rs3eZ:i)=ElfNO6q";
      stringArray0[5] = "v&F%6QyYTE";
      stringArray0[6] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[7] = "0,tQ|^7";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      ArrayUtils.reverse((boolean[]) null);
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = 2889L;
      longArray0[2] = 21L;
      longArray0[3] = 21L;
      longArray0[4] = (-1649L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1649L));
      assertArrayEquals(new long[] {(-1L), 2889L, 21L, 21L, (-1649L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1388);
      intArray0[1] = (-2136904910);
      intArray0[2] = 105;
      intArray0[3] = 3;
      intArray0[4] = 11;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 105, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "k/4";
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "k/4";
      String[] stringArray2 = ArrayUtils.nullToEmpty(stringArray1);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = ArrayUtils.toStringArray((Object[]) stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertEquals(13, stringArray0.length);
      assertEquals(13, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2689L;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2689L);
      assertEquals(2689.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {2689.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = ArrayUtils.toStringArray((Object[]) stringArray1, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = 80.0F;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Double double0 = new Double(80.0F);
      assertEquals(80.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)2);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'Q';
      charArray0[2] = '\"';
      charArray0[3] = 'f';
      charArray0[4] = 'o';
      charArray0[5] = '|';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {':', 'Q', '\"', 'f', 'o', '|'}, charArray0);
      assertArrayEquals(new char[] {':', 'Q', '\"', 'f', 'o', '|'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, (int) 2);
      assertEquals(4, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 'Q';
      objectArray0[2] = (Object) 'Q';
      objectArray0[3] = (Object) ':';
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) short0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, " vs ");
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-2146470204));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-2146470204), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int1 = 7;
      Integer integer1 = new Integer(7);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(7, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short)2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int1));
      assertEquals(7, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger(" vs ");
      assertNull(integer4);
      
      integerArray0[4] = null;
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(128);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertEquals(128, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";[2fhr]3i0f";
      stringArray0[1] = "java.lang.Float";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = ArrayUtils.toStringArray((Object[]) stringArray1, "[e?vI@JTRC");
      assertNotSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2634.843F));
      assertArrayEquals(new float[] {(-2634.843F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2146470204);
      intArray0[1] = (-2146470204);
      intArray0[2] = (-2146470204);
      intArray0[3] = (-2146470204);
      intArray0[4] = (-2146470204);
      intArray0[5] = (-2146470204);
      intArray0[6] = (-2146470204);
      intArray0[7] = (-2146470204);
      intArray0[8] = (-2146470204);
      int int0 = ArrayUtils.indexOf(intArray0, (-2146470204), (-2146470204));
      assertArrayEquals(new int[] {(-2146470204), (-2146470204), (-2146470204), (-2146470204), (-2146470204), (-2146470204), (-2146470204), (-2146470204), (-2146470204)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (-1), 1461, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1461;
      floatArray0[1] = (float) 1461;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1461.0F;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1461;
      doubleArray0[3] = (double) 1461;
      doubleArray0[4] = (double) 1461.0F;
      doubleArray0[5] = (double) 1461.0F;
      doubleArray0[6] = (double) 1461.0F;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1461.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1461.0, 1461.0, 1.0, 1461.0, 1461.0, 1461.0, 1461.0, 1461.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1461.0, 1.0, 1461.0, 1461.0, 1461.0, 1461.0, 1461.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 903);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {903}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayUtils.reverse((double[]) null, (-1893), (-2055));
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'k';
      charArray0[2] = 'S';
      charArray0[3] = 'p';
      charArray0[4] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'m', 'k', 'S', 'p', '-'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(2069.485);
      assertEquals(2069.485, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2069.485);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2069.485, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(2069.485, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1893));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-1893.0), (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(275.02);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(275.02, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-2055));
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((-2055.0), (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(2069.485);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals(2069.485, (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-5229.958354709994));
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((-5229.958354709994), (double)double7, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {2069.485, 2069.485, 2069.485, (-1893.0), 275.02, (-2055.0), 2069.485, (-5229.958354709994)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-49L));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2100799219));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'y';
      charArray0[2] = '4';
      ArrayUtils.shift(charArray0, 1807);
      assertArrayEquals(new char[] {'4', 'z', 'y'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[2];
      charArray0[2] = 'y';
      intArray0[1] = (int) 'y';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 121}, intArray0);
      assertArrayEquals(new int[] {0, 121}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1043;
      intArray0[1] = 1043;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1043, 1043}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1043;
      floatArray0[3] = (float) 1043;
      floatArray0[4] = (float) 1;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1043.0F, 1043.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = '_';
      charArray0[2] = '#';
      charArray0[3] = '8';
      charArray0[4] = '';
      charArray0[5] = 'K';
      charArray0[6] = 'w';
      charArray0[7] = '&';
      charArray0[8] = 'e';
      char[] charArray1 = ArrayUtils.remove(charArray0, 1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'%', '#', '8', '', 'K', 'w', '&', 'e'}, charArray1);
      assertArrayEquals(new char[] {'%', '_', '#', '8', '', 'K', 'w', '&', 'e'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) '\'';
      floatArray0[6] = (float) '\'';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 39.0F, 0.0F, 0.0F, 0.0F, 39.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 39.0F, 0.0F, 0.0F, 0.0F, 39.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short)1983);
      assertEquals((short)1983, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1680;
      intArray0[1] = 160;
      ArrayUtils.swap(intArray0, 2, (-1539), 1072);
      assertArrayEquals(new int[] {1680, 160}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)37;
      ArrayUtils.shift(byteArray0, (-1492));
      assertArrayEquals(new byte[] {(byte)71, (byte)37, (byte)2, (byte) (-91), (byte)1, (byte)67}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Short short0 = new Short((byte) (-86));
      assertEquals((short) (-86), (short)short0);
      assertNotNull(short0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 736;
      intArray0[1] = 2;
      ArrayUtils.shift(intArray0, (-2120652874), 764, 4205);
      assertArrayEquals(new int[] {2, 736}, intArray0);
      assertEquals(2, intArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf("Xni5dL-ZtmEU,'RpW");
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf("Xni5dL-ZtmEU,'RpW");
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean(boolean0);
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 736}, intArray0);
      assertArrayEquals(new int[] {2, 736, 2, 736}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MutableInt mutableInt0 = new MutableInt((-7));
      assertEquals((-7), mutableInt0.intValue());
      assertEquals("-7", mutableInt0.toString());
      assertEquals((-7.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-7L), mutableInt0.longValue());
      assertEquals((-7.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-7), mutableInt0.byteValue());
      assertEquals((-7), (int)mutableInt0.getValue());
      assertEquals((short) (-7), mutableInt0.shortValue());
      assertEquals((-7), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-7));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-7), mutableInt1.intValue());
      assertEquals((-7.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-7.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-7L), mutableInt1.longValue());
      assertEquals((short) (-7), mutableInt1.shortValue());
      assertEquals("-7", mutableInt1.toString());
      assertEquals((-7), (int)mutableInt1.getValue());
      assertEquals((byte) (-7), mutableInt1.byteValue());
      assertEquals((-7), (int)mutableInt1.toInteger());
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-7), mutableInt0.intValue());
      assertEquals("-7", mutableInt0.toString());
      assertEquals((-7.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-7L), mutableInt0.longValue());
      assertEquals((-7.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-7), mutableInt0.byteValue());
      assertEquals((-7), (int)mutableInt0.getValue());
      assertEquals((short) (-7), mutableInt0.shortValue());
      assertEquals((-7), (int)mutableInt0.toInteger());
      assertEquals((-7), mutableInt1.intValue());
      assertEquals((-7.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-7.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-7L), mutableInt1.longValue());
      assertEquals((short) (-7), mutableInt1.shortValue());
      assertEquals("-7", mutableInt1.toString());
      assertEquals((-7), (int)mutableInt1.getValue());
      assertEquals((byte) (-7), mutableInt1.byteValue());
      assertEquals((-7), (int)mutableInt1.toInteger());
      assertEquals(0, int0);
      
      MutableInt mutableInt2 = (MutableInt)ArrayUtils.get(objectArray0, (-7), (Object) mutableInt0);
      assertSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt1);
      assertSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertEquals((-7), mutableInt0.intValue());
      assertEquals("-7", mutableInt0.toString());
      assertEquals((-7.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-7L), mutableInt0.longValue());
      assertEquals((-7.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-7), mutableInt0.byteValue());
      assertEquals((-7), (int)mutableInt0.getValue());
      assertEquals((short) (-7), mutableInt0.shortValue());
      assertEquals((-7), (int)mutableInt0.toInteger());
      assertEquals((-7L), mutableInt2.longValue());
      assertEquals("-7", mutableInt2.toString());
      assertEquals((-7), (int)mutableInt2.getValue());
      assertEquals((-7), (int)mutableInt2.toInteger());
      assertEquals((-7.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((byte) (-7), mutableInt2.byteValue());
      assertEquals((-7), mutableInt2.intValue());
      assertEquals((-7.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((short) (-7), mutableInt2.shortValue());
      assertEquals(3, objectArray0.length);
      assertNotNull(mutableInt2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-7);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-7.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      objectArray0[0] = (Object) (-7);
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) 0);
      assertNull(longArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Object[] objectArray1 = ArrayUtils.removeAllOccurences((Object[]) floatArray0, (Object) mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(floatArray0, objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-7), mutableInt1.intValue());
      assertEquals((-7.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-7.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-7L), mutableInt1.longValue());
      assertEquals((short) (-7), mutableInt1.shortValue());
      assertEquals("-7", mutableInt1.toString());
      assertEquals((-7), (int)mutableInt1.getValue());
      assertEquals((byte) (-7), mutableInt1.byteValue());
      assertEquals((-7), (int)mutableInt1.toInteger());
      assertEquals(0, objectArray1.length);
      assertEquals(0, floatArray0.length);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-71));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(bitSet0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      Byte byte1 = new Byte((byte) (-71));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-71), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray1[3] = byte1;
      byteArray1[4] = byte0;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotNull(byteArray2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-71);
      doubleArray0[2] = (double) (byte)51;
      doubleArray0[3] = (double) (byte) (-71);
      doubleArray0[4] = (double) (byte)51;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-71.0), 51.0, (-71.0), 51.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      ArrayUtils.swap(charArray0, (-2489), (int) (byte) (-71), (int) (byte)51);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)51;
      byteArray3[1] = (byte)0;
      ArrayUtils.reverse(byteArray3, (int) (byte) (-32), (int) (byte)0);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)51, (byte)0}, byteArray3);
      assertEquals(2, byteArray3.length);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift(doubleArray0, (int) (byte)0);
      assertArrayEquals(new double[] {0.0, (-71.0), 51.0, (-71.0), 51.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = 2;
      int int1 = 1667;
      ArrayUtils.swap(booleanArray0, 2, 1667, (-1563));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) false;
      objectArray0[8] = (Object) false;
      ArrayUtils.swap(objectArray0, 2, 1667, (-1563));
      assertEquals(9, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-1563), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1563, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Short short0 = new Short((byte) (-15));
      assertEquals((short) (-15), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte) (-15));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-15), (short)short1);
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1688));
      assertArrayEquals(new short[] {(short) (-15), (short) (-15), (short) (-15), (short) (-15)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-8361));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-15), (short) (-15), (short) (-15), (short) (-15)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-15), (short) (-15), (short) (-15), (short) (-15)}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)shortArray0[1];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) shortArray0[3]);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-15L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '|');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((double[]) null, (-1), 2255, 0);
      Float float0 = new Float((float) (short)11);
      assertEquals(11.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1573.9219F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1573.9219F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-125), (byte)108, (byte) (-80), (byte)127, (byte) (-90), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)108, (byte) (-80), (byte)127, (byte) (-90), (byte)1}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-7441.347409042533));
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)21);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-125), (byte)108, (byte) (-80), (byte)127, (byte) (-90), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)108, (byte) (-80), (byte)127, (byte) (-90), (byte)1}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)108);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-125), (byte)108, (byte) (-80), (byte)127, (byte) (-90), (byte)1}, byteArray0);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray2);
      
      Long[] longArray2 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertEquals(0, longArray2.length);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1619);
      shortArray0[1] = (short)892;
      shortArray0[2] = (short)892;
      shortArray0[3] = (short) (-944);
      shortArray0[4] = (short)1432;
      shortArray0[5] = (short)1802;
      shortArray0[6] = (short) (-944);
      shortArray0[7] = (short)754;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1619), (short)892, (short)892, (short) (-944), (short)1432, (short)1802, (short) (-944), (short)754}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = Integer.getInteger(" in an array of ");
      assertNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-1619), (short)892, (short)892, (short) (-944), (short)1432, (short)1802, (short) (-944), (short)754}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (short)1432;
      longArray0[3] = 2147192629L;
      longArray0[4] = (long) (short)754;
      longArray0[5] = (long) (short)754;
      longArray0[6] = (long) (short)1802;
      longArray0[7] = (long) (short)1802;
      longArray0[8] = (long) (short) (-944);
      ArrayUtils.shift(longArray0, (int) (short) (-1619), (int) (short)892, (int) (short)1802);
      assertArrayEquals(new long[] {1802L, (-944L), 0L, 1432L, 0L, 2147192629L, 754L, 754L, 1802L}, longArray0);
      assertEquals(9, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (short)754, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 754, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = 80.0F;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Double double0 = new Double(80.0F);
      assertEquals(80.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer(4472);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(4472, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)54, (byte)54, (byte)54, (byte)54}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.swap(floatArray0, (-1), 2126, 2109135725);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 80.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(80.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertArrayEquals(new double[] {80.0, 80.0, 80.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)54;
      intArray0[1] = (int) (byte)54;
      intArray0[2] = (-1335);
      intArray0[3] = (-1);
      ArrayUtils.shift(intArray0, (-1), 2126, 54);
      assertArrayEquals(new int[] {(-1335), (-1), 54, 54}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      ArrayUtils.shift(charArray0, 0, 501, (-2124638077));
      assertArrayEquals(new char[] {'D', 'D', 'D', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[3]);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[1];
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray0, (-1), 2146885463, 2146885463);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1), (long) 2146885463);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1619);
      shortArray0[1] = (short)892;
      shortArray0[2] = (short)892;
      shortArray0[3] = (short) (-944);
      shortArray0[4] = (short)1432;
      shortArray0[5] = (short)1802;
      shortArray0[6] = (short)16;
      shortArray0[7] = (short)754;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1619), (short)892, (short)892, (short) (-944), (short)1432, (short)1802, (short)16, (short)754}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer integer0 = Integer.getInteger(" in an array of ");
      assertNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-1619), (short)892, (short)892, (short) (-944), (short)1432, (short)1802, (short)16, (short)754}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (short)1432;
      longArray0[2] = (long) (short)16;
      longArray0[3] = 2147192629L;
      longArray0[4] = (long) (short)754;
      longArray0[5] = (long) (short)754;
      longArray0[6] = (long) (short)1802;
      longArray0[7] = (long) (short)1802;
      longArray0[8] = (long) (short) (-944);
      ArrayUtils.shift(longArray0, (int) (short) (-1619), (int) (short)892, (-1));
      assertArrayEquals(new long[] {1432L, 16L, 2147192629L, 754L, 754L, 1802L, 1802L, (-944L), 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (short)754, 754L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 754, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1365.1);
      ArrayUtils.swap((byte[]) null, 0, 0);
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse(doubleArray0, 0, 8);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1365.1)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = '%';
      charArray0[2] = '|';
      charArray0[3] = 'h';
      charArray0[4] = 'U';
      charArray0[5] = '.';
      charArray0[6] = 'i';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Float float0 = new Float((float) (-2596));
      assertEquals((-2596.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2576L);
      longArray0[1] = (-2435L);
      longArray0[0] = (-2435L);
      longArray0[3] = (long) (-2596);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-2435L), 0L, (-2596L), 0L, (-2435L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1596L));
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new long[] {(-2435L), 0L, (-2596L), 0L, (-2435L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)36;
      shortArray0[1] = (short)1303;
      shortArray0[2] = (short) (-2912);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2596), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2596, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      Double[] doubleArray2 = ArrayUtils.clone((Double[]) null);
      assertNull(doubleArray2);
      
      Short[] shortArray0 = new Short[5];
      short short0 = (short)12;
      Short short1 = new Short((short)12);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)12, (short)short1);
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)12, (short)short2);
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)1851);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)1851, (short)short3);
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      try { 
        Short.valueOf(":57Stq9KYe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":57Stq9KYe\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(1, int0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)102;
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)95;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)95}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 41, (int) (byte)102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Float float0 = new Float((-2548.0));
      assertEquals((-2548.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(booleanArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, booleanArray0.length);
      assertNotNull(map0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Object[]) booleanArray0, (-1387));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1387, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.removeElement((Boolean[]) null, (Object) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-1217);
      boolean[] booleanArray1 = new boolean[0];
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotNull(booleanArray2);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) Integer.MAX_VALUE;
      integerArray0[1] = (Integer) (-1217);
      integerArray0[2] = (Integer) (-1217);
      integerArray0[3] = (Integer) Integer.MAX_VALUE;
      integerArray0[4] = (Integer) (-1217);
      integerArray0[5] = (Integer) Integer.MAX_VALUE;
      integerArray0[6] = (Integer) Integer.MAX_VALUE;
      integerArray0[7] = (Integer) (-1217);
      integerArray0[8] = (Integer) Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 134);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-1217), (-1217), Integer.MAX_VALUE, (-1217), Integer.MAX_VALUE, Integer.MAX_VALUE, (-1217), Integer.MAX_VALUE}, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, integerArray0.length);
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 4753L;
      longArray0[1] = (-1655L);
      longArray0[2] = (-1039L);
      ArrayUtils.shift(longArray0, (-145), (-145), 605);
      assertArrayEquals(new long[] {4753L, (-1655L), (-1039L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-117);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-117));
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-117)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '!';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertArrayEquals(new char[] {'!', '!', '!', '!'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '!';
      Double double0 = new Double(1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[1];
      Double double1 = new Double(1756.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1756.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-3699.206791912471));
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3699.206791912471)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals("0", mutableInt1.toString());
      assertNotNull(mutableInt1);
      
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals("0", mutableInt2.toString());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0, mutableInt2.intValue());
      assertEquals(0L, mutableInt2.longValue());
      assertNotNull(mutableInt2);
      
      int int0 = mutableInt0.compareTo(mutableInt2);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt2, mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals("0", mutableInt2.toString());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0, mutableInt2.intValue());
      assertEquals(0L, mutableInt2.longValue());
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mutableInt1;
      objectArray0[1] = (Object) mutableInt1;
      Byte byte0 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte0);
      assertNotNull(byte0);
      
      MutableInt mutableInt3 = (MutableInt)ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNotSame(mutableInt3, mutableInt2);
      assertSame(mutableInt3, mutableInt1);
      assertNotSame(mutableInt3, mutableInt0);
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertEquals(0.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt3.shortValue());
      assertEquals(0.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals(0, mutableInt3.intValue());
      assertEquals("0", mutableInt3.toString());
      assertEquals(0, (int)mutableInt3.toInteger());
      assertEquals(0L, mutableInt3.longValue());
      assertEquals(0, (int)mutableInt3.getValue());
      assertEquals(2, objectArray0.length);
      assertNotNull(mutableInt3);
      
      MockRandom mockRandom0 = new MockRandom((-2999L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.insert(0, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1696L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (-2596), (-2037));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2596);
      longArray0[1] = 579L;
      longArray0[2] = (long) (-2596);
      longArray0[3] = (-1219L);
      longArray0[4] = (long) (-2037);
      longArray0[5] = (-2435L);
      longArray0[6] = 579L;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = 579L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {579L, (-2596L), (-1219L), (-2037L), (-2435L), 579L, 0L, 579L, (-2596L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (-2037), 108, 2146658644);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = '6';
      charArray0[2] = '5';
      charArray0[3] = 'V';
      charArray0[4] = 'n';
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, (-2596), (-2596));
      assertArrayEquals(new char[] {'J', '6', '5', 'V', 'n'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-1), (-824));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (-1), (int) (byte)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), (-824));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '}';
      charArray0[1] = '}';
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 174);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.insert((int) (byte)0, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-1193), (-6));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1193);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (-6);
      doubleArray0[3] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 25.14234026, (int) (byte)0);
      assertArrayEquals(new double[] {(-1193.0), 0.0, (-6.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[0];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotNull(booleanArray3);
      
      ArrayUtils.reverse(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      ArrayUtils.shuffle(booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      
      Float float0 = new Float((-1754.04016827));
      assertEquals((-1754.0402F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray2, (Object) float0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, booleanArray2.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (long) 2;
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 2L}, longArray0);
      assertArrayEquals(new long[] {1L, 2L, 1L, 2L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      char char0 = 'j';
      charArray0[1] = 'j';
      char char1 = '/';
      charArray0[2] = '/';
      charArray0[3] = 'r';
      int int0 = 17;
      int int1 = (-1231);
      char[] charArray1 = ArrayUtils.subarray(charArray0, 17, (-1231));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', 'j', '/', 'r'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotNull(characterArray1);
      
      Double double0 = new Double((-1231));
      assertEquals((-1231.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) doubleArray1[0]);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1231.0), (-1231.0)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      Boolean boolean1 = Boolean.valueOf("java.lang.Object");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Object[]) characterArray0, (Object) boolean1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (-2596), (-2037));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Float float0 = new Float((float) (-2596));
      assertEquals((-2596.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2317.797754);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      char[] charArray0 = new char[6];
      char[] charArray1 = ArrayUtils.insert((int) (short)0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertNotNull(charArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = ArrayUtils.contains(charArray1, 'v');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 3257.66749, 588);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3449;
      intArray0[1] = 588;
      intArray0[2] = 588;
      intArray0[3] = 37;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {3449, 588, 588, 37}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 's';
      charArray0[2] = '|';
      charArray0[3] = 'e';
      charArray0[4] = '8';
      charArray0[5] = '[';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'5', 's', '|', 'e', '8', '['}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '2';
      floatArray0[1] = (float) '2';
      floatArray0[2] = (float) '2';
      floatArray0[3] = (float) '2';
      floatArray0[4] = (float) '2';
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      float float0 = mockRandom1.nextFloat();
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0F, float0, 0.01F);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new float[] {50.0F, 50.0F, 50.0F, 50.0F, 50.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 50.0F;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-936.0509);
      doubleArray0[3] = (double) 50.0F;
      doubleArray0[4] = (double) 50.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 50.0F;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-936.0509), (double) 50.0F);
      assertArrayEquals(new double[] {50.0, (-1.0), (-936.0509), 50.0, 50.0, 0.0, 50.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1L;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 1L);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte) (-32);
      intArray0[2] = 1;
      intArray0[3] = (-2093);
      intArray0[4] = (int) (byte) (-32);
      intArray0[5] = (int) (byte) (-32);
      intArray0[6] = (-1);
      intArray0[7] = 82;
      ArrayUtils.reverse(intArray0, (-703), 110);
      assertArrayEquals(new int[] {82, (-1), (-32), (-32), (-2093), 1, (-32), 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-0.3));
      assertEquals((-0.3), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-0.3)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (-529.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2933.1008F;
      floatArray0[5] = 1983.8536F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-529.0F), 0.0F, 2933.1008F, 1983.8536F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 2933.1008F);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2933.100830078125}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-13), 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double((short) (-13));
      assertEquals((-13.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((short) (-13));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-13.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray1[1] = double1;
      Double double2 = new Double(1.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)74;
      ArrayUtils.reverse(byteArray0, (int) (byte)7, (int) (byte)7);
      assertArrayEquals(new byte[] {(byte)113, (byte)79, (byte) (-71), (byte) (-7), (byte) (-17), (byte)7, (byte)74}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-7), 1073741824, (-1072));
      assertArrayEquals(new byte[] {(byte)79, (byte) (-71), (byte) (-7), (byte) (-17), (byte)7, (byte)74, (byte)113}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Double double3 = new Double((byte) (-7));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-7.0), (double)double3, 0.01);
      assertNotNull(double3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'q';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte) (-7));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -7, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      String[] stringArray0 = new String[0];
      MutableInt mutableInt0 = new MutableInt(52);
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals("52", mutableInt0.toString());
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(52L, mutableInt0.longValue());
      assertEquals(52, mutableInt0.intValue());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals("52", mutableInt0.toString());
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(52L, mutableInt0.longValue());
      assertEquals(52, mutableInt0.intValue());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertEquals("52", mutableInt1.toString());
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52L, mutableInt1.longValue());
      assertEquals((short)52, mutableInt1.shortValue());
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt0.addAndGet((Number) mutableInt1);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals("104", mutableInt0.toString());
      assertEquals(104, mutableInt0.intValue());
      assertEquals(104L, mutableInt0.longValue());
      assertEquals("52", mutableInt1.toString());
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52L, mutableInt1.longValue());
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals(104, int0);
      
      mutableInt0.increment();
      assertNotSame(mutableInt0, mutableInt1);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(105, (int)mutableInt0.toInteger());
      assertEquals(105, (int)mutableInt0.getValue());
      assertEquals((byte)105, mutableInt0.byteValue());
      assertEquals(105, mutableInt0.intValue());
      assertEquals("105", mutableInt0.toString());
      assertEquals((short)105, mutableInt0.shortValue());
      assertEquals(105L, mutableInt0.longValue());
      assertEquals(105.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(105.0, mutableInt0.doubleValue(), 0.01);
      
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) mutableInt0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(105, (int)mutableInt0.toInteger());
      assertEquals(105, (int)mutableInt0.getValue());
      assertEquals((byte)105, mutableInt0.byteValue());
      assertEquals(105, mutableInt0.intValue());
      assertEquals("105", mutableInt0.toString());
      assertEquals((short)105, mutableInt0.shortValue());
      assertEquals(105L, mutableInt0.longValue());
      assertEquals(105.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(105.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)894;
      shortArray0[1] = (short) (-32);
      shortArray0[2] = (short) (-1524);
      shortArray0[3] = (short) (-4068);
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)894, (short) (-32), (short) (-1524), (short) (-4068)}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)894, (short) (-32), (short) (-1524), (short) (-4068)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 12, (-824));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (int) (byte) (-18), 1, 12);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 12;
      floatArray0[1] = (float) 12;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) (-824);
      floatArray0[7] = (float) 12;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-824);
      intArray0[3] = 12;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-71);
      intArray0[7] = 12;
      intArray0[8] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 1646;
      intArray0[2] = (int) '}';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byte byte0 = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)57;
      byte byte1 = (byte) (-80);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-80));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-5), (byte)16, (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)16, (byte)57}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(intArray0, (int) (byte) (-5), (int) (byte)57, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {0, 0, 1646, 125, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, Integer.MAX_VALUE, 464.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      ArrayUtils.shift((byte[]) null, 0, 1, 1);
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-737.8045233926));
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 945;
      ArrayUtils.shift(floatArray0, 1, 1, (-1296));
      assertArrayEquals(new float[] {1.0F, 1.0F, 945.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-1296);
      longArray0[2] = (long) 1;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, (-1296L), 1L}, longArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1296);
      intArray1[1] = 945;
      intArray1[2] = (-1296);
      intArray1[3] = (-1296);
      intArray1[4] = (-1296);
      intArray1[5] = (-1296);
      intArray1[6] = 1;
      intArray1[7] = 945;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 945, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '!';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 4, 2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotNull(charArray1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '!';
      characterArray0[1] = (Character) '!';
      characterArray0[2] = (Character) '!';
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(3, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertNotNull(characterArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1138.1548494));
      assertEquals((-1138.1548494), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) characterArray0[2]);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertArrayEquals(new double[] {(-1138.1548494)}, doubleArray1, 0.01);
      assertEquals(3, characterArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer((-1102));
      assertEquals((-1102), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)41);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[16];
      intArray0[1] = (int) (byte)41;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 2, (-2366.9343F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2366.9343F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1102);
      longArray0[1] = (long) 2;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)41;
      shortArray0[1] = (short) (byte)41;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)41, (short)41}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)41, (short)41}, shortArray2);
      assertArrayEquals(new short[] {(short)41, (short)41}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-3166);
      shortArray0[1] = (short)2558;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2754;
      shortArray0[4] = (short) (-4856);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-93);
      shortArray0[7] = (short)2334;
      shortArray0[8] = (short)4892;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-3166), (short)2558, (short) (-1), (short)2754, (short) (-4856), (short) (-1), (short) (-93), (short)2334, (short)4892}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer2 = new Integer(2098);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2098, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {2098, Integer.MAX_VALUE}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)97;
      ArrayUtils.shift(byteArray0, 1, 577, (int) (byte) (-13));
      assertArrayEquals(new byte[] {(byte)84, (byte)97, (byte)90, (byte)98, (byte)60, (byte) (-24), (byte) (-13), (byte)76}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      
      Float float0 = new Float((double) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short) (-1));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      
      Character character0 = new Character('e');
      assertEquals('e', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '%');
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(charArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 1744.2554962, (-71), (double) (-71));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 2.147483647E9;
      doubleArray0[3] = 2.147483647E9;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2147483647L, 121);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 121;
      intArray0[2] = 121;
      intArray0[3] = 121;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 121;
      intArray0[7] = (-1);
      ArrayUtils.shift(intArray0, 121);
      assertArrayEquals(new int[] {(-1), 121, 0, 121, 121, (-1), (-1), 121}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 443.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 443.0;
      doubleArray2[1] = (double) 121;
      doubleArray2[2] = (double) (-1);
      doubleArray2[3] = 443.0;
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) 121;
      doubleArray2[6] = (double) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 2.147483647E9, 2.147483647E9, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {443.0, 121.0, (-1.0), 443.0, (-1.0), 121.0, (-1.0)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)6007;
      shortArray0[2] = (short)261;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), 121);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)6007, (short)261}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)6007, (short)261}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 's';
      longArray0[1] = (long) 's';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 101L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {115L, 115L}, longArray0);
      assertArrayEquals(new long[] {115L, 115L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)71;
      ArrayUtils.swap(byteArray0, 2, 1, (int) (byte) (-21));
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-92), (byte) (-118), (byte)117, (byte) (-47), (byte) (-1), (byte) (-80), (byte)119, (byte)71}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (byte) (-18);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2306.35F;
      floatArray0[1] = (float) (-18L);
      floatArray0[2] = 337.77F;
      floatArray0[3] = (float) (-18L);
      floatArray0[4] = (float) (-1688);
      floatArray0[5] = (float) (-18L);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-18), (int) (byte) (-18));
      assertArrayEquals(new float[] {2306.35F, (-18.0F), 337.77F, (-18.0F), (-1688.0F), (-18.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2306.35F, 859);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {2306.35F, (-18.0F), 337.77F, (-18.0F), (-1688.0F), (-18.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, int1);
      
      Integer integer0 = new Integer((-1688));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1688), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-1688), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1688, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(66, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1653L);
      longArray0[1] = (long) 66;
      longArray0[2] = (long) 66;
      longArray0[3] = (long) 66;
      longArray0[4] = (long) 66;
      longArray0[5] = (long) 66;
      longArray0[6] = (long) 66;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {(-1653L), 66L, 66L, 66L, 66L, 66L, 66L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1653L);
      longArray1[1] = (long) 66;
      longArray1[2] = (long) 66;
      longArray1[3] = (-1653L);
      long[] longArray2 = ArrayUtils.add(longArray1, 66L);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1653L), 66L, 66L, (-1653L), 66L}, longArray2);
      assertArrayEquals(new long[] {(-1653L), 66L, 66L, (-1653L)}, longArray1);
      assertEquals(5, longArray2.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray2);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 66L;
      doubleArray0[1] = (double) (-1653L);
      doubleArray0[2] = (double) (-1653L);
      doubleArray0[3] = 1209.0121145492;
      doubleArray0[4] = (double) 66L;
      doubleArray0[5] = 84.0;
      doubleArray0[6] = (double) (-1653L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 66);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 4}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertArrayEquals(new double[] {66.0, (-1653.0), (-1653.0), 1209.0121145492, 66.0, 84.0, (-1653.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 63;
      intArray0[1] = 63;
      intArray0[2] = 63;
      intArray0[3] = 63;
      intArray0[4] = 63;
      intArray0[5] = 63;
      intArray0[6] = 63;
      intArray0[7] = 63;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {63, 63, 63, 63, 63, 63, 63, 63}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {63, 63, 63, 63, 63, 63, 63, 63}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.insert(63, intArray1, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {63, 63, 63, 63, 63, 63, 63, 63}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 63;
      ArrayUtils.swap(floatArray0, 63, 8, (-347));
      assertArrayEquals(new float[] {63.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Float float0 = new Float((float) (-2596));
      assertEquals((-2596.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte)89);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)89}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertNotNull(byteArray3);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'E';
      charArray0[2] = 'P';
      charArray0[3] = 'i';
      charArray0[4] = 'F';
      charArray0[5] = 'y';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'E');
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'6', 'E', 'P', 'i', 'F', 'y'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) 'P';
      intArray0[2] = (int) 'i';
      intArray0[3] = (int) 'E';
      intArray0[4] = (int) '6';
      intArray0[5] = (int) 'y';
      intArray0[6] = 2120;
      intArray0[7] = (int) 'y';
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {121, 80, 105, 69, 54, 121, 2120, 121}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(5, intArray2.length);
      assertNotNull(intArray2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long(1667L);
      assertEquals(1667L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      
      Long long2 = Long.getLong("", long0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long2.equals((Object)long1));
      assertEquals(1667L, (long)long2);
      assertNotNull(long2);
      
      Long long3 = new Long((-1L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertEquals((-1L), (long)long3);
      assertNotNull(long3);
      
      Long long4 = new Long((-1L));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertEquals((-1L), (long)long4);
      assertNotNull(long4);
      
      Long long5 = new Long(49L);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertEquals(49L, (long)long5);
      assertNotNull(long5);
      
      Long long6 = new Long((-780L));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertEquals((-780L), (long)long6);
      assertNotNull(long6);
      
      Long long7 = new Long((-1L));
      assertFalse(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertTrue(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long0));
      assertEquals((-1L), (long)long7);
      assertNotNull(long7);
      
      Long[] longArray0 = new Long[7];
      Long long8 = new Long(1667L);
      assertFalse(long8.equals((Object)long7));
      assertTrue(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long3));
      assertTrue(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long4));
      assertEquals(1667L, (long)long8);
      assertNotNull(long8);
      
      longArray0[0] = long8;
      Long long9 = new Long(0L);
      assertFalse(long9.equals((Object)long0));
      assertFalse(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long3));
      assertEquals(0L, (long)long9);
      assertNotNull(long9);
      
      Long long10 = Long.getLong("", long9);
      assertFalse(long9.equals((Object)long0));
      assertFalse(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long10.equals((Object)long7));
      assertFalse(long10.equals((Object)long8));
      assertFalse(long10.equals((Object)long4));
      assertFalse(long10.equals((Object)long3));
      assertFalse(long10.equals((Object)long0));
      assertFalse(long10.equals((Object)long6));
      assertFalse(long10.equals((Object)long5));
      assertFalse(long10.equals((Object)long1));
      assertFalse(long10.equals((Object)long2));
      assertEquals(0L, (long)long10);
      assertNotNull(long10);
      
      longArray0[1] = long10;
      longArray0[2] = long4;
      longArray0[3] = long0;
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      ArrayUtils.shift(charArray0, (-1618), 3870, 3870);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) long2);
      assertFalse(long0.equals((Object)long7));
      assertFalse(long0.equals((Object)long10));
      assertFalse(long0.equals((Object)long4));
      assertTrue(long0.equals((Object)long8));
      assertFalse(long0.equals((Object)long9));
      assertFalse(long0.equals((Object)long6));
      assertFalse(long0.equals((Object)long5));
      assertFalse(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long3));
      assertFalse(long2.equals((Object)long9));
      assertTrue(long2.equals((Object)long8));
      assertFalse(long2.equals((Object)long5));
      assertFalse(long2.equals((Object)long3));
      assertFalse(long2.equals((Object)long4));
      assertFalse(long2.equals((Object)long7));
      assertFalse(long2.equals((Object)long10));
      assertFalse(long2.equals((Object)long6));
      assertFalse(long2.equals((Object)long1));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "', has a length less than 2", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (-93.0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1925;
      intArray0[1] = 1688;
      intArray0[2] = 127;
      intArray0[3] = (-1454);
      intArray0[4] = 1;
      intArray0[5] = (-233);
      intArray0[6] = 2126;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1925, 1688, 127, (-1454), 1, (-233), 2126}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {''}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-2576), (int) (short)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[4];
      long[] longArray0 = bitSet0.toLongArray();
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      BitSet bitSet1 = BitSet.valueOf(longArray0);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.size());
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet1);
      
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)0;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2086;
      shortArray0[1] = (short)699;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2086, (short)699}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)2086;
      shortArray1[1] = (short)2086;
      shortArray1[2] = (short) (-1352);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)2086, (short)699}, shortArray0);
      assertArrayEquals(new short[] {(short)2086, (short)2086, (short) (-1352)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer((-1090));
      assertEquals((-1090), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1045;
      intArray0[1] = (int) (short)2086;
      intArray0[2] = (int) (short)699;
      intArray0[3] = (int) (short)699;
      intArray0[4] = (int) (byte)12;
      intArray0[5] = (int) (short)2086;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1090), 2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1045, 2086}, intArray1);
      assertArrayEquals(new int[] {1045, 2086, 699, 699, 12, 2086}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)44);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new short[] {(short)2086, (short)699}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.contains(byteArray0, (byte) (-83));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'R';
      charArray0[2] = 'A';
      charArray0[3] = 'c';
      charArray0[4] = '*';
      charArray0[5] = 'M';
      charArray0[6] = '5';
      charArray0[7] = '5';
      charArray0[8] = 'P';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'O', 'R', 'A', 'c', '*', 'M', '5', '5', 'P'}, charArray1);
      assertArrayEquals(new char[] {'O', 'R', 'A', 'c', '*', 'M', '5', '5', 'P'}, charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1);
      
      ArrayUtils.shift((int[]) null, 3895, Integer.MAX_VALUE, (-32));
      Short short0 = new Short((short)884);
      assertEquals((short)884, (short)short0);
      assertNotNull(short0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) short0;
      objectArray0[2] = (Object) 2.14748365E9F;
      objectArray0[3] = (Object) bitSet0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertEquals(4, objectArray0.length);
      assertEquals(0, int0);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-944);
      Double double0 = new Double((short) (-944));
      assertEquals((-944.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      String[] stringArray0 = ArrayUtils.removeElement((String[]) null, (Object) double0);
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-944);
      floatArray0[1] = 159.5F;
      floatArray0[2] = (float) (short) (-944);
      floatArray0[3] = (float) (short) (-944);
      floatArray0[4] = (float) (short) (-944);
      floatArray0[5] = (float) (short) (-944);
      floatArray0[6] = (float) (short) (-944);
      floatArray0[7] = (float) (short) (-944);
      floatArray0[8] = (float) (short) (-944);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-944.0F), 159.5F, (-944.0F), (-944.0F), (-944.0F), (-944.0F), (-944.0F), (-944.0F), (-944.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = '';
      charArray0[2] = 'A';
      charArray0[3] = 'w';
      charArray0[4] = 'L';
      charArray0[5] = '}';
      charArray0[6] = 'r';
      charArray0[7] = '*';
      charArray0[8] = 'i';
      ArrayUtils.reverse(charArray0, (int) (short) (-944), Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'i', '*', 'r', '}', 'L', 'w', 'A', '', 'v'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2037);
      doubleArray0[2] = (double) (-2037);
      doubleArray0[3] = 1.0;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertNotNull(booleanArray3);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2037);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-2037));
      assertArrayEquals(new long[] {(-2037L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 0.0F;
      floatArray0[3] = 80.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 80.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 80.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, int0);
      
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) double0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[4] = 3;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3, 0, 0, 0, 3}, intArray0);
      assertArrayEquals(new int[] {0, 0, 3}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 19301, 0);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 144.8F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 17;
      longArray0[3] = (long) (byte)0;
      int int0 = ArrayUtils.indexOf(longArray0, 579L, (int) byte0);
      assertArrayEquals(new long[] {(-1L), 0L, 17L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) byte0;
      floatArray0[5] = (float) 17L;
      floatArray0[6] = (float) (-1);
      long[] longArray1 = ArrayUtils.insert((int) (byte)0, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 0L, 17L, 0L, (-1L), 0L, 17L, 0L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, 17L, 0L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = 'M';
      charArray0[2] = 'T';
      Double double0 = new Double(17);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '_');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'+', 'M', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'+', 'M', 'T', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotNull(charArray1);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)0, (-851));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Byte byte0 = new Byte((byte) (-93));
      assertEquals((byte) (-93), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)84);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)84, (byte)byte1);
      assertNotNull(byte1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-93);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)3;
      byte[] byteArray1 = ArrayUtils.insert(3, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-93), (byte)0, (byte)0, (byte)84, (byte)36, (byte) (-93), (byte)3}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)84;
      doubleArray0[1] = (double) 3;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)36, (double) (byte) (-93));
      assertArrayEquals(new double[] {84.0, 3.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte)3, 0.0);
      assertArrayEquals(new double[] {84.0, 3.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte)36, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "k/4";
      ArrayUtils.shift((char[]) null, 1820);
      byte byte0 = (byte) (-74);
      Byte byte1 = new Byte((byte) (-74));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-74), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte) (-74)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Short short0 = new Short(byte0);
      assertEquals((short) (-74), (short)short0);
      assertNotNull(short0);
      
      int int0 = new Integer(1820);
      assertEquals(1820, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)54;
      ArrayUtils.shift(doubleArray0, (-1223));
      assertArrayEquals(new double[] {54.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)54;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1820, 108);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {54L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 1820);
      assertNull(floatArray0);
      
      ArrayUtils.swap((float[]) null, 2, 108, 2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      Integer integer0 = new Integer((-1102));
      assertEquals((-1102), (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)41);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[16];
      intArray0[0] = (int) (byte)41;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 41;
      floatArray0[1] = (float) (short) (-1);
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {41.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean2);
      
      ArrayUtils.shift(intArray0, (-1927), 2460, (int) (byte)12);
      assertEquals(16, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 2, (-2366.9343F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {41.0F, (-1.0F), (-2366.9343F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {41.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1102);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)41;
      boolean boolean3 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new long[] {(-1102L), 2L, 41L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils.swap((byte[]) null, 35, 1059);
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-944);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-944);
      floatArray0[1] = 984.505F;
      floatArray0[2] = (float) (short) (-944);
      ArrayUtils.shift(shortArray0, (int) (short) (-944), 2146825314, (int) (short) (-944));
      assertArrayEquals(new short[] {(short) (-944), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[1] = integer0;
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'s', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, int0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-93.0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-431.387F));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (long) 7;
      longArray0[2] = (-2201L);
      longArray0[3] = 0L;
      longArray0[4] = (-2201L);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 0L, (-540));
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(4, bitSet1.length());
      assertEquals("{3}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertArrayEquals(new long[] {1L, 7L, (-2201L), 0L, (-2201L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(bitSet1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertNotNull(intArray2);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-164.0));
      assertEquals((-164.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-164.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2919.2532329));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-2919.2532329), (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(869.29273);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(869.29273, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(869.29273, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(1185.0);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals(1185.0, (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[2]);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-2919.2532329), (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[6]);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-2919.2532329), (double)double7, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-164.0), (-164.0), (-2919.2532329), 869.29273, 869.29273, 1185.0, (-2919.2532329), (-2919.2532329)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'c';
      charArray0[2] = 'k';
      charArray0[3] = '&';
      charArray0[4] = 'g';
      charArray0[5] = 'e';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '&';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'D', 'c', 'k', '&', 'g', 'e'}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertArrayEquals(new char[] {'D', 'c', 'k', 'g', 'e'}, charArray2);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(5, charArray2.length);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = ';';
      charArray0[2] = '1';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '1');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'3', ';', '1'}, charArray0);
      assertArrayEquals(new char[] {'1', '3', ';', '1'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '3';
      charArray0[0] = '1';
      doubleArray0[2] = (double) ';';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 561.0861, (-626));
      assertArrayEquals(new double[] {51.0, 0.0, 59.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'1', ';', '1'}, charArray0);
      assertArrayEquals(new char[] {'1', '3', ';', '1'}, charArray1);
      assertArrayEquals(new char[] {'3'}, charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotNull(charArray2);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'1', ';', '1'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)1;
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)1, (byte)1, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 1734, (int) (byte)1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = null;
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = Integer.MIN_VALUE;
      intArray0[5] = Integer.MIN_VALUE;
      int int0 = (-1400);
      ArrayUtils.shift(intArray0, (-1400), (int) (byte)0, (int) (byte)1);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, 0, 0, 1, Integer.MIN_VALUE, Integer.MIN_VALUE}, intArray0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1400);
      floatArray0[1] = (float) (-371);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-850), (float) Integer.MIN_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -850, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 17;
      longArray0[3] = (long) (byte)0;
      int int0 = ArrayUtils.indexOf(longArray0, 579L, (int) byte0);
      assertArrayEquals(new long[] {0L, 0L, 17L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) 0L;
      floatArray0[5] = (float) 17L;
      floatArray0[6] = (float) (-1);
      long[] longArray1 = ArrayUtils.insert((int) (byte)0, longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 17L, 0L, 0L, 0L, 17L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 17L, 0L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = 'M';
      charArray0[2] = 'T';
      Double double0 = new Double(17);
      assertEquals(17.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1789.40484237));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1789.40484237), (double)double1, 0.01);
      assertNotNull(double1);
      
      ArrayUtils.shift((Object[]) byteArray0, (-2600), (int) byte0, 89);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1686.5516328029632;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 17;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1600.2, 8192, 1686.5516328029632);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-1.0), 1686.5516328029632, 0.0, 17.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2689L;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1655L);
      floatArray0[1] = (float) 2689L;
      floatArray0[2] = (-2715.77F);
      floatArray0[3] = (-1144.717F);
      floatArray0[4] = (float) (-1655L);
      floatArray0[5] = 1893.735F;
      floatArray0[6] = (float) 2689L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {(-1655.0F), 2689.0F, (-2715.77F), (-1144.717F), (-1655.0F), 1893.735F, 2689.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1L), 7);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new long[] {2689L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet1);
      
      Long long0 = new Long((-734L));
      assertEquals((-734L), (long)long0);
      assertNotNull(long0);
      
      String string0 = ArrayUtils.toString((Object) long0, (String) null);
      assertEquals("-734", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int0 = ArrayUtils.indexOf(charArray0, '=', (-2171));
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'O';
      doubleArray0[1] = (double) Float.NaN;
      doubleArray0[2] = (double) (-1655.0F);
      doubleArray0[3] = (double) 2689.0F;
      doubleArray0[4] = 11.0;
      doubleArray0[5] = 1657.4702428600247;
      doubleArray0[6] = (double) 1893.735F;
      ArrayUtils.swap(doubleArray0, (-2171), 7, (-543));
      assertArrayEquals(new double[] {79.0, Double.NaN, (-1655.0), 2689.0, 11.0, 1657.4702428600247, 1893.7349853515625}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.reverse((byte[]) null, (int) (byte)0, 356);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)6;
      longArray0[2] = (-183L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-183L), 2);
      assertArrayEquals(new long[] {0L, 6L, (-183L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(2, int0);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 6L, (-183L)}, longArray0);
      assertArrayEquals(new long[] {0L, 6L, (-183L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, 6.0, 356);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)0, 356, 7);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 96.0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer(193);
      assertEquals(193, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 193);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 3496.0F;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) 3496.0F;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-1);
      ArrayUtils.swap(byteArray0, 1136, (-2145638858));
      assertArrayEquals(new byte[] {(byte)6, (byte)114, (byte)2, (byte) (-61), (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1973;
      shortArray0[3] = (short)2627;
      shortArray0[4] = (short) (byte) (-61);
      ArrayUtils.swap(shortArray0, (int) (byte)2, (-318), (int) (byte) (-61));
      assertArrayEquals(new short[] {(short)2, (short) (-1), (short)1973, (short)2627, (short) (-61)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)6, (byte)114, (byte)2, (byte) (-61), (byte) (-1), (byte)6, (byte)114, (byte)2, (byte) (-61), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)114, (byte)2, (byte) (-61), (byte) (-1)}, byteArray0);
      assertEquals(10, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3674L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double[] doubleArray0 = new double[1];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Character character0 = new Character('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('r');
      assertFalse(character1.equals((Object)character0));
      assertEquals('r', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(characterArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '2';
      floatArray0[1] = (float) (-1296);
      floatArray0[2] = (float) (-1296);
      floatArray0[3] = (float) '2';
      ArrayUtils.shift(floatArray0, (-3913), (-17), (-1296));
      assertArrayEquals(new float[] {50.0F, (-1296.0F), (-1296.0F), 50.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3913);
      longArray0[1] = (long) (-3913);
      longArray0[2] = (long) (-3913);
      longArray0[3] = (-1L);
      longArray0[4] = (long) '2';
      longArray0[5] = (long) (-1296);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-3913), (-1296));
      assertArrayEquals(new long[] {(-3913L), (-3913L), (-3913L), (-1L), 50L, (-1296L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1296));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1296, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      Float float0 = new Float((double) (short) (-944));
      assertEquals((-944.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 590;
      intArray0[3] = 1;
      intArray0[4] = (int) (byte)1;
      intArray0[5] = 1849;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = (int) (byte)1;
      intArray0[8] = (int) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1);
      assertEquals("{0, 3, 4, 6, 7, 8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertArrayEquals(new int[] {1, 590, 0, 1, 1, 1849, 1, 1, 1}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1, (int) (byte)1);
      assertArrayEquals(new int[] {1, 590, 0, 1, 1, 1849, 1, 1, 1}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "]$RWK}%!I/", "Search and Replace array lengths don't match: ");
      assertEquals("]$RWK}%!I/", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (byte)1);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short short0 = (short) (-1);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      
      int int0 = (-1973);
      Integer integer0 = new Integer((-1973));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1973), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(443);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(443, (int)integer1);
      assertNotNull(integer1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "k/4";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2723);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2723, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(0);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertEquals(10, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(integerArray1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray1, (Object) integer1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(int1 == int0);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer3));
      assertEquals(10, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-57);
      intArray0[1] = 9;
      intArray0[2] = 1073741824;
      intArray0[3] = 78;
      intArray0[4] = (-2001);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-57), 9, 1073741824, 78, (-2001), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {9, 1073741824, 78, (-2001), 0, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.removeElements(objectArray0, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      
      ArrayUtils.shift(intArray1, 0, (-1240), 11);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-57), 9, 1073741824, 78, (-2001), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {9, 1073741824, 78, (-2001), 0, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      
      ArrayUtils.shift((long[]) null, (-1), (-476), 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1073741824;
      doubleArray0[1] = (double) (-57);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1073741824, 78, 95.0);
      assertArrayEquals(new double[] {1.073741824E9, (-57.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '^');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 45.0;
      doubleArray0[1] = 2435.80215295;
      doubleArray0[2] = 2689.0;
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 2106965088, 2106965088, 1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((-888), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3064.0), (-3064.0));
      assertArrayEquals(new double[] {45.0, 2435.80215295, 2689.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-91);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)32, (byte)4, (byte)51, (byte) (-91)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)32, (byte)4, (byte)51, (byte) (-91)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (byte) (-18);
      longArray0[2] = (long) (byte) (-18);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, (-18L), (-18L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "hnr<CSd2<%78.P;<Y";
      stringArray0[2] = "eK}ATbJa*g";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = ArrayUtils.get(stringArray0, (int)  (-18));
      assertEquals(8, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-18);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-105));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18), (byte) (-18), (byte) (-18), (byte) (-18), (byte) (-18)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18), (byte) (-18), (byte) (-18), (byte) (-18), (byte) (-18)}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-18);
      intArray0[1] = (int) (byte) (-18);
      intArray0[2] = (int) (byte) (-18);
      intArray0[3] = (int) (byte) (-105);
      intArray0[4] = (int) (byte) (-18);
      intArray0[5] = (int) (byte) (-105);
      intArray0[6] = (int) (byte) (-18);
      intArray0[7] = (int) (byte) (-18);
      intArray0[8] = (int) (byte) (-18);
      int int0 = ArrayUtils.indexOf(intArray0, (-18));
      assertArrayEquals(new int[] {(-18), (-18), (-18), (-105), (-18), (-105), (-18), (-18), (-18)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Short short0 = new Short((short)953);
      assertEquals((short)953, (short)short0);
      assertNotNull(short0);
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)120);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)120, (byte)byte1);
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-73);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte) (-73);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) (byte) (-70);
      doubleArray0[8] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-70), (int) (byte)2, (-3989.0));
      assertArrayEquals(new double[] {(-73.0), 0.0, (-73.0), 0.0, 2.0, 0.0, 1.5, (-70.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-70);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-6));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-944);
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'v', (int) (short) (-944));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-229.7);
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 'v';
      doubleArray0[3] = (double) '`';
      doubleArray0[4] = (double) 'v';
      doubleArray0[5] = (double) '5';
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) '_';
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.7, (-41));
      assertArrayEquals(new double[] {(-229.7), 13.0, 118.0, 96.0, 118.0, 53.0, 1.0, 95.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-944), 2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-944), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-944), (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 118.0;
      objectArray0[1] = (Object) 13.0;
      objectArray0[2] = (Object) 118.0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(objectArray0, (-1));
      assertEquals(3, objectArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-944), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), 0.7);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new double[] {(-229.7), 13.0, 118.0, 96.0, 118.0, 53.0, 1.0, 95.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      ArrayUtils.shift(byteArray0, (-865), 32, 3203);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Double double0 = new Double((-865));
      assertEquals((-865.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      ArrayUtils.shift((boolean[]) null, (-2801), 85, (-32));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-8);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {''}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-8);
      floatArray0[1] = (float) (short) (-8);
      floatArray0[2] = (float) (short) (-8);
      floatArray0[3] = (float) (short) (-8);
      floatArray0[4] = (float) (short) (-8);
      floatArray0[5] = (float) '';
      floatArray0[4] = 0.0F;
      floatArray0[7] = (float) (short) (-8);
      floatArray0[8] = (float) (short) (-8);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-8.0F));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 7, 8}", bitSet0.toString());
      assertEquals(6, bitSet0.cardinality());
      assertArrayEquals(new float[] {(-8.0F), (-8.0F), (-8.0F), (-8.0F), 0.0F, 127.0F, 0.0F, (-8.0F), (-8.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-8);
      longArray0[1] = (long) '';
      longArray0[2] = (long) (short) (-8);
      longArray0[3] = (long) (short) (-8);
      longArray0[4] = (long) '';
      longArray0[5] = (long) (short) (-8);
      longArray0[6] = (long) (short) (-8);
      longArray0[7] = (long) (short) (-8);
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-2201L), 7);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new long[] {(-8L), 127L, (-8L), (-8L), 127L, (-8L), (-8L), (-8L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
  }
}
