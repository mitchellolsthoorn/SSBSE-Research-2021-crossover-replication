/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 14:56:32 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-58), (int) (byte) (-74));
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-61), (byte) (-74), (byte) (-58), (byte)11, (byte) (-121), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83}, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)83;
      shortArray0[1] = (short) (byte)83;
      shortArray0[2] = (short) (byte)83;
      shortArray0[3] = (short) (byte)83;
      shortArray0[4] = (short) (byte)83;
      shortArray0[5] = (short) (byte)83;
      shortArray0[6] = (short) (byte)83;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1026), (-2860));
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)83, (short)83, (short)83, (short)83, (short)83, (short)83, (short)83}, shortArray0);
      
      Short short0 = new Short((short) (-589));
      assertEquals((short) (-589), (short)short0);
      assertNotNull(short0);
      
      Short short1 = Short.valueOf((short)10);
      assertEquals((short)10, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)83);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-589), (int) (short)83, (-1));
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)83, (short)83, (short)83, (short)83, (short)83, (short)83, (short)83}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, 6, (int) (short)10, (-56));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-2145635549), (-2145635549), 6);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-2145635549));
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = ArrayUtils.insert((-260), (String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      int[] intArray0 = new int[8];
      intArray0[0] = (-260);
      intArray0[1] = (int) 'V';
      intArray0[2] = (int) 'V';
      intArray0[3] = (-2145635549);
      intArray0[4] = 6;
      intArray0[5] = (int) 'V';
      intArray0[6] = (-2145635549);
      intArray0[7] = (int) 'V';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(8, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-260), 86, 86, (-2145635549), 6, 86, (-2145635549), 86}, intArray0);
      
      ArrayUtils.reverse((double[]) null, 99, (-260));
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-260));
      assertEquals(7, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {86, 86, (-2145635549), 6, 86, (-2145635549), 86}, intArray1);
      assertArrayEquals(new int[] {(-260), 86, 86, (-2145635549), 6, 86, (-2145635549), 86}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)33);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)27}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character character0 = Character.valueOf('V');
      assertEquals('V', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'V';
      characterArray0[1] = (Character) 'V';
      characterArray0[2] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[0]);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'V', 'V'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[2] = (byte) (-62);
      byteArray0[4] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-62), (byte)0, (byte)1}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-12550));
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-19);
      byteArray1[2] = (byte)0;
      byteArray1[4] = (byte) (-57);
      byteArray1[5] = (byte) (-123);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-62);
      ArrayUtils.reverse(byteArray1, (int) (byte)32, (int) (byte)0);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)0, (byte)0, (byte) (-57), (byte) (-123), (byte)1, (byte)0, (byte) (-62)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(637);
      assertEquals(637.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) double1;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) double0;
      ArrayUtils.reverse(objectArray0, 12, 12);
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, 0, (byte) (-1));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertNotNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-121);
      longArray0[4] = (long) 637;
      longArray0[5] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {12L, 1L, (-1L), (-121L), 637L, 0L}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[6] = boolean1;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 531.0931F;
      floatArray0[1] = 13.046814F;
      floatArray0[4] = (-226.6149F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1960.0326F);
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean2);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {531.0931F, 13.046814F, 0.0F, 0.0F, (-226.6149F), 0.0F, (-1960.0326F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 8, 8);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {531.0931F, 13.046814F, 0.0F, 0.0F, (-226.6149F), 0.0F, (-1960.0326F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 13.046814F;
      doubleArray0[1] = (double) 531.0931F;
      boolean boolean3 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean3);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new double[] {13.04681396484375, 531.0930786132812}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-530);
      intArray0[1] = (-530);
      ArrayUtils.shift(intArray0, (-530), (-386), (-2146301762));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-530), (-530)}, intArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-2146301762), (-530));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-530), (-530)}, intArray0);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {531.0931F, 13.046814F, 0.0F, 0.0F, (-226.6149F), 0.0F, (-1960.0326F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3119L;
      doubleArray0[1] = 6.593794940713904;
      doubleArray0[2] = (double) 3119L;
      doubleArray0[3] = (double) 3119L;
      doubleArray0[4] = (double) 3119L;
      doubleArray0[5] = (double) 3119L;
      doubleArray0[6] = 78.90215636381322;
      doubleArray0[7] = (double) 3119L;
      doubleArray0[8] = (double) 3119L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 6.593794940713904);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3119.0, 6.593794940713904, 3119.0, 3119.0, 3119.0, 3119.0, 78.90215636381322, 3119.0, 3119.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-2570);
      shortArray0[2] = (short)14995;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)14995, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-2570), (short)14995}, shortArray0);
      
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)14995;
      Short short0 = new Short((short)951);
      assertEquals((short)951, (short)short0);
      assertNotNull(short0);
      
      shortArray1[2] = short0;
      shortArray1[3] = (Short) (short) (-2570);
      shortArray1[4] = (Short) (short) (-2570);
      shortArray1[5] = (Short) (short)0;
      shortArray1[6] = (Short) (short)14995;
      Short short1 = new Short((short)32226);
      assertEquals((short)32226, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[7] = shortArray1[2];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[5]);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)14995, (short)951, (short) (-2570), (short) (-2570), (short)0, (short)14995, (short)951}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      Character[] characterArray0 = new Character[3];
      char char0 = '\"';
      Character character0 = Character.valueOf('\"');
      assertEquals('\"', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('!');
      assertEquals('!', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('A');
      assertEquals('A', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (int) char0, (-4731));
      assertEquals(3, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Xv}%s{z(y'wBP_N]?fr";
      stringArray0[1] = "org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl";
      stringArray0[2] = "8slz\"ah";
      stringArray0[3] = "java.lang.Integer";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2172.598876723642, 1.0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) char0, 2333.5759224185);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      long[] longArray0 = new long[14];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      longArray0[7] = (long) 76;
      longArray0[7] = (long) Integer.MAX_VALUE;
      intArray0[2] = 0;
      ArrayUtils.swap((long[]) null, 76, 4044, 0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      Long[] longArray2 = new Long[8];
      longArray2[0] = (Long) 2147483647L;
      longArray2[1] = (Long) 2147483647L;
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = ArrayUtils.get(longArray2, 2171, long0);
      assertEquals(0L, (long)long1);
      assertEquals(8, longArray2.length);
      assertNotNull(long1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) long1, 2171);
      assertEquals((-1), int0);
      assertEquals(8, longArray2.length);
      
      int int1 = ArrayUtils.indexOf((byte[]) null, (byte) (-72), 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) longArray2[1], (-1));
      assertEquals(8, longArray2.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 3119L;
      int int0 = ArrayUtils.indexOf(floatArray0, 2384.0F, 0);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3119.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double2;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-2246));
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[0] = (byte)29;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)29, (byte)88, (byte) (-20), (byte) (-1), (byte) (-85), (byte) (-1), (byte) (-1), (byte)0}, byteArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-1);
      objectArray0[1] = (Object) (byte)88;
      objectArray0[2] = (Object) (byte)0;
      ArrayUtils.reverse(objectArray0, (int) (byte)88, 21);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'W';
      charArray0[2] = 'A';
      charArray0[3] = 'E';
      charArray0[4] = '?';
      charArray0[5] = 'Y';
      charArray0[6] = 'K';
      charArray0[7] = '\'';
      int int0 = ArrayUtils.indexOf(charArray0, 'K', (-1));
      assertEquals(6, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'G', 'W', 'A', 'E', '?', 'Y', 'K', '\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 4044;
      intArray0[2] = 0;
      intArray0[3] = 7;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 0;
      intArray0[6] = 7;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = 4044;
      ArrayUtils.shift(intArray0, 7, 7, (-57));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 4044, 0, 7, 0, 0, 7, 0, 4044}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)90, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1792.14F;
      floatArray0[1] = (float) 0L;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 1792.14F;
      doubleArray0[1] = (double) 1792.14F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 1792.14F;
      doubleArray0[6] = 316.804968955878;
      int int0 = ArrayUtils.indexOf(doubleArray0, 343.1449516, 6);
      assertEquals((-1), int0);
      assertEquals(17, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 6, (-1));
      assertEquals((-1), int1);
      assertEquals(6, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {1792.14F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      ArrayUtils.reverse(intArray0, 3047, (-1));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      
      int int2 = ArrayUtils.indexOf(floatArray0, 1792.14F);
      assertEquals(0, int2);
      assertEquals(6, floatArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new float[] {1792.14F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'm';
      intArray1[1] = (int) 'm';
      intArray1[2] = (int) (short)102;
      intArray1[3] = 1288490189;
      intArray1[4] = (int) (short)102;
      intArray1[5] = (int) (short)102;
      intArray1[6] = (int) (short)102;
      intArray1[7] = (-1);
      intArray1[8] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {109, 109, 102, 1288490189, 102, 102, 102, (-1), Integer.MAX_VALUE}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 102, (-1));
      assertEquals(9, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {109, 109, 102, 1288490189, 102, 102, 102, (-1), Integer.MAX_VALUE}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)11540;
      floatArray0[1] = (float) 'm';
      floatArray0[2] = (float) Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {11540.0F, 109.0F, 2.14748365E9F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)14;
      shortArray0[1] = (short)102;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)14, 1);
      assertEquals(2, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)14, (short)102}, shortArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, 0);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new int[] {109, 109, 102, 1288490189, 102, 102, 102, (-1), Integer.MAX_VALUE}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      charArray0[8] = 'm';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 386, (int) (short)11540);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short) (-938));
      assertEquals((short) (-938), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-4309));
      assertEquals((short) (-4309), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)700);
      assertEquals((short)700, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-938), (short) (-4309), (short) (-1), (short)700}, shortArray1);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = 'u';
      charArray0[2] = '=';
      charArray0[3] = '>';
      charArray0[4] = 'z';
      charArray0[5] = '+';
      charArray0[6] = '8';
      ArrayUtils.shift(charArray0, (int) (short) (-4309), 916, 2675);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'8', '#', 'u', '=', '>', 'z', '+'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-938);
      intArray0[1] = 2675;
      intArray0[2] = (-1451);
      intArray0[3] = (int) (short)shortArray0[1];
      intArray0[4] = (int) 'u';
      intArray0[5] = (int) (short)shortArray0[3];
      intArray0[6] = (-733);
      intArray0[7] = (int) '+';
      intArray0[8] = (int) '+';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2675, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'm';
      charArray0[2] = 'd';
      charArray0[3] = 'j';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'U', 'm', 'd', 'j'}, charArray0);
      assertArrayEquals(new char[] {'U', 'm', 'd', 'j'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 3136.0F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf("9f");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, "9f");
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) 'm';
      objectArray0[2] = (Object) 'm';
      objectArray0[3] = (Object) 'd';
      objectArray0[4] = (Object) "9f";
      objectArray0[5] = (Object) 'm';
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, (Object) boolean0);
      assertEquals(5, objectArray1.length);
      assertEquals(6, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(boolean0.equals((Object)boolean1));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(objectArray1, objectArray0);
      assertFalse(boolean2);
      assertEquals(5, objectArray1.length);
      assertEquals(6, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1142, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1142, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)121;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      Float float0 = new Float((-1897.61));
      assertEquals((-1897.61F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray1, 37.0F);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) float0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) float0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) float0;
      objectArray0[6] = object0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(7, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 1L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertNotNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean2);
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 2;
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = 'J';
      charArray0[4] = 'A';
      charArray0[5] = '<';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '<';
      char[] charArray2 = ArrayUtils.insert(2, charArray0, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(7, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'w', '\u0000', 'i', 'J', 'A', '<'}, charArray0);
      assertArrayEquals(new char[] {'<'}, charArray1);
      assertArrayEquals(new char[] {'w', '\u0000', '<', 'i', 'J', 'A', '<'}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)18688;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = (Short) (short)18688;
      shortArray1[1] = (Short) (short)18688;
      shortArray1[2] = (Short) (short)18688;
      shortArray1[3] = (Short) (short)18688;
      shortArray1[4] = (Short) (short)18688;
      shortArray1[5] = (Short) (short)18688;
      Short short0 = new Short((short) shortArray1[4]);
      assertEquals((short)18688, (short)short0);
      assertEquals(8, shortArray1.length);
      assertNotNull(short0);
      
      shortArray1[6] = short0;
      shortArray1[7] = (Short) (short)18688;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[0]);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      MockRandom mockRandom0 = new MockRandom((long) shortArray1[5]);
      assertEquals(8, shortArray1.length);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((-1), (int) shortArray1[0]);
      assertEquals(8, shortArray1.length);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(shortArray2, (Random) mockRandom0);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688, (short)18688}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array";
      stringArray0[0] = "{}";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-16)).when(comparator0).compare(anyString() , anyString());
      boolean boolean0 = ArrayUtils.isSorted(stringArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'Z';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)103, 572);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', 'Z'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'w', 'Z'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (byte)103);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)103;
      shortArray0[1] = (short) (byte)103;
      shortArray0[2] = (short) (byte)103;
      shortArray0[3] = (short) (byte)103;
      shortArray0[4] = (short)46;
      MockRandom mockRandom0 = new MockRandom((-16));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)103, (short)103, (short)103, (short)46, (short)103}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      long[] longArray0 = new long[14];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      longArray0[7] = (long) 76;
      longArray0[7] = (long) Integer.MAX_VALUE;
      intArray0[2] = 0;
      ArrayUtils.swap((long[]) null, 76, 4044, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '0';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = '+';
      charArray0[7] = 'd';
      charArray0[8] = 'P';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'Y');
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'+', '0', '+', '+', '+', '+', '+', 'd', 'P'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(108, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 108, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = '(';
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "KaNaD~KzWx:");
      assertEquals("(", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)121}, byteArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)121}, byteArray0);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "(");
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(3, stringArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)121}, byteArray0);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)121;
      doubleArray0[1] = (double) (byte)121;
      doubleArray0[2] = (double) char0;
      doubleArray0[3] = (double) (short) (-469);
      doubleArray0[4] = (double) (byte)121;
      doubleArray0[5] = (double) (byte)121;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)121, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)36;
      byteArray0[0] = (byte) (-30);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-14);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 1L;
      longArray0[1] = 1L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 1L);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) 1L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 1656L);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 1656L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      Long[] longArray2 = new Long[4];
      longArray2[0] = (Long) 0L;
      longArray2[1] = (Long) 1L;
      longArray2[2] = (Long) 1L;
      longArray2[3] = (Long) 1L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (-2147483648L));
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L, 1L, 1L}, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      
      Long long1 = new Long(long0);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray2, (Object) long1);
      assertEquals(3, int0);
      assertEquals(4, longArray2.length);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1512L);
      longArray0[2] = (-1512L);
      longArray0[3] = 0L;
      float[] floatArray0 = new float[11];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-1512L));
      assertFalse(boolean0);
      assertEquals(11, floatArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1512L), (-1512L), 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      boolean boolean1 = ArrayUtils.contains(floatArray0, 798.0F);
      assertFalse(boolean1);
      assertEquals(11, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1512L), (-1512L), 0L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-510.6292231112403));
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-510.6292231112403), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = new Integer(82);
      assertEquals(82, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, 256, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 3119L);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 1563, 1, 1563);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-830), 1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) 3119L);
      assertEquals(3119.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (-830));
      assertEquals((-830.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray1 = ArrayUtils.add(floatArray0, 1, float1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-802));
      assertEquals((short) (-802), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      try { 
        Short.decode("java.lang.Short");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Short\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'H';
      floatArray0[2] = (-3046.7F);
      floatArray0[3] = (float) 'H';
      floatArray0[4] = (float) 'H';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {72.0F, 72.0F, (-3046.7F), 72.0F, 72.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      Character character1 = Character.valueOf('H');
      assertEquals('H', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      boolean boolean3 = ArrayUtils.contains((Object[]) floatArray1, (Object) character1);
      assertFalse(boolean3);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertTrue(character1.equals((Object)character0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new float[] {72.0F, 72.0F, (-3046.7F), 72.0F, 72.0F}, floatArray0, 0.01F);
      
      boolean boolean4 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 'H';
      floatArray2[1] = (-3046.7F);
      floatArray2[2] = (float) 'H';
      floatArray2[3] = (-3046.7F);
      floatArray2[4] = (float) 'H';
      floatArray2[5] = 874.127F;
      float[] floatArray3 = ArrayUtils.subarray(floatArray2, 9, 2244);
      assertEquals(6, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertArrayEquals(new float[] {72.0F, (-3046.7F), 72.0F, (-3046.7F), 72.0F, 874.127F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotNull(floatArray3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'H';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 2144998591, 2244);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2144998591, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-211));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-211);
      intArray0[1] = 2;
      intArray0[2] = 7;
      intArray0[3] = (-110);
      intArray0[4] = (-1);
      intArray0[5] = (-2148);
      intArray0[6] = (-1);
      intArray0[7] = (-2148);
      intArray0[8] = (-1);
      ArrayUtils.shift(intArray0, (-1), 4044, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-211), 2, 7, (-110), (-1), (-2148), (-1), (-2148), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[0];
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '<');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int[] intArray2 = ArrayUtils.addFirst(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[3] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1061);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, (int) (short)0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2270;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2305);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1061);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1061);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1061L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1061L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.swap(doubleArray0, 2393, 1835, 1835);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)2270;
      floatArray0[1] = (float) (short) (-1061);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (short)2270;
      ArrayUtils.swap(floatArray0, (-4309), (int) (short)0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {2270.0F, (-1061.0F), 0.0F, (-1.0F), 0.0F, 2270.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) shortArray1, 0, (int) (short) (-1));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2911);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'X';
      charArray0[2] = ';';
      charArray0[3] = 'Q';
      charArray0[4] = 'i';
      charArray0[5] = '5';
      charArray0[6] = 'O';
      ArrayUtils.swap(charArray0, (int) (short) (-1), (-262), (int) (short)0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'x', 'X', ';', 'Q', 'i', '5', 'O'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 637;
      intArray0[1] = 637;
      intArray0[2] = 637;
      intArray0[3] = 637;
      intArray0[4] = 637;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1133);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {637, 637, 637, 637, 637}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      MockRandom mockRandom0 = new MockRandom(115L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {637, 637, 637, 637, 637}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 637;
      doubleArray0[1] = (-1499.46);
      doubleArray0[2] = (double) 637;
      doubleArray0[3] = 1066.5;
      doubleArray0[4] = (double) 637;
      ArrayUtils.shift(doubleArray0, (-1), 5564, 637);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1066.5, 637.0, 637.0, (-1499.46), 637.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      long[] longArray0 = new long[14];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      longArray0[7] = (long) Integer.MAX_VALUE;
      intArray0[2] = 0;
      ArrayUtils.swap((long[]) null, 76, 4044, 0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 2147483647L);
      assertEquals(2.14748365E9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {2.14748365E9F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 531.0931F;
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('#');
      assertEquals('#', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('z');
      assertEquals('z', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('T');
      assertEquals('T', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('t');
      assertEquals('t', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('>');
      assertEquals('>', (char)character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('>');
      assertEquals('>', (char)character6);
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf((char) character2);
      assertEquals('z', (char)character7);
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character2.equals((Object)character5));
      assertFalse(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character4));
      assertFalse(character2.equals((Object)character6));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = new Character((char) character2);
      assertEquals('z', (char)character8);
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character3));
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character2.equals((Object)character5));
      assertFalse(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character7));
      assertFalse(character2.equals((Object)character6));
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'W', '#', 'z', 'T', 't', '>', '>', 'z', 'z'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = (boolean) boolean1;
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, false);
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-57);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      ArrayUtils.swap((long[]) null, (int) (byte)32, 0, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-123);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (byte) (-57);
      doubleArray0[3] = (double) (byte)70;
      ArrayUtils.shift(doubleArray0, (int) (byte)70);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-57.0), 70.0, (-123.0), 1.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, (int) (byte)70, (-2526));
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) (byte) (-57));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 0);
      assertEquals(3, int1);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-57.0), 70.0, (-123.0), 1.0}, doubleArray0, 0.01);
      
      Byte[] byteArray1 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(4545);
      assertEquals(4545, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(16);
      assertEquals(16, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("%L$G$JC14k", integer1);
      assertEquals(16, (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-3035));
      assertEquals((-3035), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer3;
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      objectArray0[2] = (Object) integer1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) integer0;
      ArrayUtils.shift(objectArray0, 16, 4545, (-1125));
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-3035));
      assertEquals(5, booleanArray0.length);
      assertEquals("{2, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertNotNull(bitSet0);
      
      ArrayUtils.hashCode((Object) null);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      long[] longArray0 = new long[14];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      longArray0[7] = (long) 76;
      longArray0[7] = (long) Integer.MAX_VALUE;
      intArray0[2] = 0;
      ArrayUtils.swap((long[]) null, 76, 4044, 0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) 2147483647L);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '5';
      doubleArray0[1] = (-0.7607178226457485);
      doubleArray0[2] = (double) '%';
      doubleArray0[3] = (-689.823047196);
      doubleArray0[4] = (-126.0);
      doubleArray0[5] = (-0.7607178226457485);
      doubleArray0[6] = (-688.02126636);
      doubleArray0[7] = (double) (-139);
      ArrayUtils.shift(doubleArray0, (-2576), 1, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, (-0.7607178226457485), 37.0, (-689.823047196), (-126.0), (-0.7607178226457485), (-688.02126636), (-139.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      char char0 = '%';
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '5';
      doubleArray0[1] = (-0.7607178226457485);
      doubleArray0[2] = (double) '%';
      doubleArray0[3] = (-689.823047196);
      doubleArray0[4] = (-126.0);
      doubleArray0[5] = (-0.7607178226457485);
      doubleArray0[6] = (-688.02126636);
      doubleArray0[7] = (double) (-139);
      ArrayUtils.shift(doubleArray0, (-2576), 1, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, (-0.7607178226457485), 37.0, (-689.823047196), (-126.0), (-0.7607178226457485), (-688.02126636), (-139.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short) (-469));
      assertEquals((-469), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-469), (int)integer1);
      assertEquals(2, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)825);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = 'R';
      ArrayUtils.swap(charArray0, (int) (short)825, (int) (short)825, (int) (short) (-469));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'R', 'R', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)32;
      byteArray0[4] = (byte) (-38);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-123));
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-123), (byte)32, (byte)0, (byte) (-38)}, byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-38);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-123), (byte)32, (byte)0, (byte) (-38)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-123), (byte)32, (byte)0, (byte) (-38)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)91, (int) (byte) (-123));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-123), (byte)32, (byte)0, (byte) (-38)}, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      ArrayUtils.reverse(byteArray0, (int) (byte) (-123), 3);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-123), (byte)70, (byte)0, (byte) (-38)}, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)32;
      doubleArray0[1] = (double) (byte)32;
      doubleArray0[2] = (double) (byte)70;
      doubleArray0[3] = (double) (byte) (-38);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1492.64410021, (int) (byte)70);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {32.0, 32.0, 70.0, (-38.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      int[] intArray2 = ArrayUtils.clone(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) null, (Object) character0);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'T');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'<', 'q', 'q', 'q'}, charArray0);
      assertArrayEquals(new char[] {'T', '<', 'q', 'q', 'q'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 1480);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-4666L));
      assertEquals((-4666L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(2797L);
      assertEquals(2797L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-4666L));
      assertEquals((-4666L), (long)long4);
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[1]);
      assertEquals((-4666L), (long)long5);
      assertEquals(9, longArray0.length);
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((-1892L));
      assertEquals((-1892L), (long)long6);
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertNotNull(long6);
      
      longArray0[6] = long6;
      Long long7 = new Long(2797L);
      assertEquals(2797L, (long)long7);
      assertTrue(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long2));
      assertNotNull(long7);
      
      longArray0[7] = long7;
      Long long8 = new Long(0L);
      assertEquals(0L, (long)long8);
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long0));
      assertTrue(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long6));
      assertNotNull(long8);
      
      longArray0[8] = long8;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-57);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (long) (byte)32;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (int) (byte)32);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 32L}, longArray0);
      assertArrayEquals(new long[] {1L, 32L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-105), (-51));
      assertEquals(5, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)32, (byte) (-57), (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte) (-57);
      doubleArray0[3] = (-2632.56456637918);
      doubleArray0[4] = (double) (byte)70;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-105), (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, (-57.0), (-2632.56456637918), 70.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)57);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)32, (byte) (-57), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)32, (byte) (-57), (byte)0, (byte)57}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2304.8551682551), (int) (byte) (-57), 716.795273378);
      assertEquals(3, int1);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1.0, 0.0, (-57.0), (-2632.56456637918), 70.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Short short0 = new Short((short) (-312));
      assertEquals((short) (-312), (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-312);
      intArray0[1] = (-834);
      intArray0[2] = (int) (short) (-312);
      intArray0[3] = (int) (short) (-312);
      intArray0[4] = (int) (short) (-312);
      intArray0[5] = 1;
      ArrayUtils.shift(intArray0, 512);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-312), 1, (-312), (-834), (-312), (-312)}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-312);
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean2);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short) (-312)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '3';
      ArrayUtils.swap(intArray0, 512, 283, (-312));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-312), 1, (-312), (-834), (-312), (-312)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short) (-312));
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-312);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-834);
      boolean boolean3 = ArrayUtils.contains(doubleArray0, (-874.0), (-1.0));
      assertFalse(boolean3);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new double[] {(-312.0), (-1.0), (-1.0), (-1.0), (-834.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      float[] floatArray0 = new float[8];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1434;
      shortArray0[1] = (short) (-58);
      shortArray0[2] = (short)247;
      shortArray0[3] = (short)1317;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1434;
      intArray0[1] = (int) (short) (-58);
      intArray0[2] = (int) (short)1317;
      intArray0[3] = (int) (short)1317;
      intArray0[4] = (int) (short)247;
      intArray0[5] = 2;
      intArray0[6] = (int) (short)247;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 247, 1);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1434, (-58), 1317, 1317, 247, 2, 247}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1504;
      shortArray1[1] = (short)1317;
      shortArray1[2] = (short)1504;
      shortArray1[3] = (short)1434;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)1504, (-1894));
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)1504, (short)1317, (short)1504, (short)1434}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1504;
      ArrayUtils.swap(objectArray0, (-17), 322, (-22));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array";
      stringArray0[0] = "Cannot store ";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-16)).when(comparator0).compare(anyString() , anyString());
      boolean boolean0 = ArrayUtils.isSorted(stringArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'Z';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)103, 572);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', 'Z'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      Integer integer0 = new Integer(955);
      assertEquals(955, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(955);
      assertEquals(955, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = (-1);
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-7708));
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {955, 955, 955, (-1)}, intArray0);
      assertNotNull(intArray0);
      
      Short short0 = new Short((short)22539);
      assertEquals((short)22539, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DO>}ux#g#g`";
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "DO>}ux#g#g`");
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (int)integerArray0[1];
      longArray0[1] = (long) 955;
      longArray0[2] = (long) (int)integerArray0[0];
      longArray0[3] = (long) int0;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 955;
      longArray0[6] = (long) (-1);
      int int1 = ArrayUtils.indexOf(longArray0, (long) integerArray0[2], (int) integerArray0[1]);
      assertEquals((-1), int1);
      assertEquals(7, longArray0.length);
      assertEquals(4, integerArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {955L, 955L, 955L, (-1L), (-1L), 955L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'H';
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
      
      ArrayUtils.shift((char[]) null, (-290), (int) short0, (-34));
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 429, (-127));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse(floatArray0, (-422), 2);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 3179.06F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-840.7538F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (float) 429;
      floatArray1[3] = (float) 429;
      floatArray1[4] = (-3046.7F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-1.0F);
      float[] floatArray2 = ArrayUtils.add(floatArray1, 1, (-1.0F));
      assertEquals(8, floatArray2.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-840.7538F), (-1.0F), (-1.0F), 429.0F, 429.0F, (-3046.7F), 0.0F, (-1.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-840.7538F), (-1.0F), 429.0F, 429.0F, (-3046.7F), 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      
      org.evosuite.runtime.Random.setNextRandom(670);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-422);
      doubleArray0[1] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-840.7538F), 2293, (double) 670);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-422.0), 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2316;
      intArray0[1] = 885;
      intArray0[2] = (-3508);
      intArray0[3] = (-1);
      intArray0[4] = (-2137541594);
      intArray0[5] = (-379);
      intArray0[6] = 0;
      intArray0[7] = (-2730);
      intArray0[8] = 488;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2137541594);
      intArray1[1] = (-379);
      intArray1[2] = 885;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {2316, 885, (-3508), (-1), (-2137541594), (-379), 0, (-2730), 488}, intArray0);
      assertArrayEquals(new int[] {(-2137541594), (-379), 885}, intArray1);
      assertArrayEquals(new int[] {2316, (-3508), (-1), 0, (-2730), 488}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      Double double0 = new Double((byte) (-79));
      assertEquals((-79.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-79);
      longArray0[1] = (long) (byte) (-79);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.1, (-126), 955.1887818543);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-126);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-126.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'P');
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'P', 'R', 'R', 'R', 'R', 'R', 'R', 'R'}, charArray1);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'R', 'R', 'R'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-126));
      assertEquals((-126), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-79));
      assertEquals((-79), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2513);
      assertEquals(2513, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2280);
      assertEquals(2280, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("{}", (-1351));
      assertEquals((-1351), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2513);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {(-126), (-79), 2513, 2280, (-1351)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-484.27494), 1, 1.0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2991);
      assertEquals(2991, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = integer2;
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-123);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)32;
      intArray0[1] = (int) (byte) (-123);
      intArray0[2] = (int) (byte)32;
      intArray0[3] = (int) (byte)70;
      intArray0[4] = (int) (byte)32;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 32);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {32, (-123), 32, 70, 32}, intArray0);
      assertArrayEquals(new int[] {(-123), 32, 70, 32}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, (-1797), (-374));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {32, (-123), 32, 70, 32}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)70;
      floatArray0[1] = (float) (-64);
      floatArray0[2] = (float) (byte)70;
      floatArray0[3] = (float) (-123);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-123), 1);
      assertEquals(3, int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {70.0F, (-64.0F), 70.0F, (-123.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, (-2547), 1, (-2547));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Double[] doubleArray2 = new Double[4];
      Double double0 = new Double(2192.0953);
      assertEquals(2192.0953, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      Double double1 = new Double(3119L);
      assertEquals(3119.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray2[1] = double1;
      Double double2 = new Double(0.7);
      assertEquals(0.7, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray2[2] = double2;
      Double double3 = new Double(0.7);
      assertEquals(0.7, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray2[3] = double3;
      Double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray2);
      assertEquals(8, doubleArray3.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotNull(doubleArray3);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.contains(intArray0, 1133);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1133;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1133;
      doubleArray0[4] = (double) 266;
      doubleArray0[5] = (double) 1133;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) 266;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 266.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1133.0, 0.0, 0.0, 1133.0, 266.0, 1133.0, 0.0, 266.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1133.0, 0.0, 0.0, 1133.0, 1133.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = '`';
      charArray0[2] = 'D';
      charArray0[3] = 'h';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'j', '`', 'D', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)47;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)319, (int) (short)0);
      assertEquals(5, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short)47, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((long[]) null, (int) (short)47, 1367, 0);
      ArrayUtils.swap(shortArray0, 2356, 2356, (int) (short)0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)47, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1367;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1367.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1367.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((short)47);
      assertEquals(47L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)0);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1628L);
      assertEquals(1628L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(1628L);
      assertEquals(1628L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((short)0);
      assertEquals(0L, (long)long4);
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(2075L);
      assertEquals(2075L, (long)long5);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      
      longArray0[5] = long5;
      Long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) longArray1, (-1103), Integer.MAX_VALUE);
      assertEquals(12, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 36, 1628L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1039L);
      longArray0[2] = (-1039L);
      longArray0[3] = (-1039L);
      longArray0[4] = (-1039L);
      Float float0 = new Float((double) (-1039L));
      assertEquals((-1039.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1039L));
      assertEquals((-1039.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1039.0F), (-1039.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short)544);
      assertEquals((short)544, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-662));
      assertEquals((short) (-662), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      ArrayUtils.shift((Object[]) floatArray0, (-415));
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 955;
      intArray0[1] = 76;
      intArray0[2] = (-2146845275);
      intArray0[3] = (int) (short)544;
      intArray0[4] = 76;
      Integer integer0 = new Integer(955);
      assertEquals(955, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(544);
      assertEquals(544, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(76);
      assertEquals(76, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      Short short2 = new Short((short) (-942));
      assertEquals((short) (-942), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-662), (short)544, (short) (-942)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      Float float0 = new Float((double) (-1039L));
      assertEquals((-1039.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1039L));
      assertEquals((-1039.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1039.0F), (-1039.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short)544);
      assertEquals((short)544, (short)short0);
      assertNotNull(short0);
      
      ArrayUtils.shift((Object[]) floatArray0, (-415));
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 76;
      intArray0[2] = (int) (short)544;
      intArray0[3] = (int) (short)544;
      Integer integer0 = new Integer(955);
      assertEquals(955, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(544);
      assertEquals(544, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(76);
      assertEquals(76, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertEquals(6, integerArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 76, 544, 544, 0, 0}, intArray0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(integerArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-415);
      doubleArray0[1] = 1237.17676597;
      doubleArray0[2] = (double) 76;
      doubleArray0[3] = (double) (-415);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-415.0), 1237.17676597, 76.0, (-415.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 4465, 4465);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-415.0), 1237.17676597, 76.0, (-415.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-1.0F);
      ArrayUtils.shift(doubleArray0, 56);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1.0), 1.0}, doubleArray0, 0.01);
      
      Short short0 = new Short((short) (-526));
      assertEquals((short) (-526), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)2282);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short) (-469));
      assertEquals((-469), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-469), (int)integer1);
      assertEquals(2, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)11548);
      assertNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 1239, (int) integerArray0[0]);
      assertEquals(2, integerArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertSame(integerArray0, integerArray1);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1239;
      longArray0[1] = (long) (int)integerArray0[1];
      longArray0[2] = (long) char0;
      longArray0[3] = (long) (int)integerArray0[0];
      longArray0[4] = (long) (short)11548;
      longArray0[5] = (long) (-1618);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1618), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1618, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      Short short0 = new Short((short)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)1382;
      Character character0 = new Character('c');
      assertEquals('c', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('c');
      assertEquals('c', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (short)1382);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[23];
      charArray0[0] = (char) character1;
      charArray0[1] = ',';
      charArray0[2] = 'k';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = (char) character1;
      charArray0[6] = (char) character1;
      charArray0[7] = (char) character1;
      charArray0[8] = 'c';
      ArrayUtils.swap(charArray0, 2384, 68, 1022);
      assertEquals(23, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      long[] longArray0 = new long[4];
      longArray0[0] = (-3570L);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-1039L);
      longArray0[3] = (-1078L);
      boolean boolean0 = ArrayUtils.contains(longArray0, 3240L);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-3570L), 0L, (-1039L), (-1078L)}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 12;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.insert((int) (short)0, intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {12, 0, 0}, intArray0);
      assertArrayEquals(new int[] {12, 0, 0, 12, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 321, 3);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3570L), 0L, (-1039L), (-1078L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray2 = ArrayUtils.add(intArray0, (int) (short)0, (-2175));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {12, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2175), 12, 0, 0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-5357);
      intArray3[1] = 321;
      int[] intArray4 = ArrayUtils.removeElements(intArray0, intArray3);
      assertEquals(3, intArray4.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray3.length);
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertArrayEquals(new int[] {12, 0, 0}, intArray4);
      assertArrayEquals(new int[] {12, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-5357), 321}, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray4);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotNull(intArray4);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-62), (byte) (-123), (byte)1}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-12550));
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-57);
      byteArray1[4] = (byte) (-57);
      byteArray1[5] = (byte) (-123);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte) (-57);
      byteArray1[8] = (byte) (-62);
      ArrayUtils.reverse(byteArray1, (int) (byte)32, 872);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-62), (byte)0, (byte) (-57), (byte) (-57), (byte) (-123), (byte)1, (byte) (-57), (byte) (-62)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-123);
      intArray0[1] = (int) (byte) (-123);
      intArray0[2] = 423;
      intArray0[3] = (int) (byte) (-62);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-123), (-123), 423, (-62)}, intArray0);
      assertArrayEquals(new int[] {(-123), (-123), 423, (-62)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = (-1);
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals((-1), (int)integer1);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals((-1), (int)integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      Short short0 = new Short((short)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)6;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)6;
      doubleArray0[1] = (double) (short)6;
      doubleArray0[2] = 55.0;
      doubleArray0[3] = (double) (short)6;
      doubleArray0[4] = 1548.3097332169;
      doubleArray0[5] = (double) (short)1382;
      doubleArray0[6] = (double) (short)6;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, 1382.0, 1548.3097332169, 6.0, 55.0, 6.0, 6.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '+');
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2430), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2430, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short)11540;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      BitSet bitSet1 = new BitSet();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotNull(bitSet1);
      
      Long long0 = Long.getLong("Bm+~1");
      assertNull(long0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(2, shortArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertNotSame(bitSet0, bitSet1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3993.123);
      doubleArray0[1] = (-3993.123);
      doubleArray0[2] = (double) 2199.59F;
      doubleArray0[3] = (-266.110693);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-266.110693), 2199.590087890625, (-3993.123), (-3993.123)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'f');
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+', '+'}, charArray0);
      
      ArrayUtils.swap(floatArray0, (-2997), 6, 2);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 2199.59F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-266.110693), 2, 1070.1037);
      assertEquals(0, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-266.110693), 2199.590087890625, (-3993.123), (-3993.123)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((char[]) null, 878, 878);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 878;
      doubleArray0[1] = (double) 878;
      doubleArray0[2] = (double) 878;
      doubleArray0[3] = (-266.110693);
      doubleArray0[4] = (double) 878;
      doubleArray0[5] = (double) 878;
      doubleArray0[6] = (double) 878;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {878.0, 878.0, 878.0, (-266.110693), 878.0, 878.0, 878.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, '+');
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 878;
      doubleArray1[1] = (-266.110693);
      doubleArray1[2] = (-266.110693);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 6;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 6;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) '+';
      floatArray0[5] = (float) 6;
      floatArray0[6] = (float) 980;
      ArrayUtils.swap(floatArray0, 980, 878, 6);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {6.0F, 1.0F, 6.0F, 6.0F, 43.0F, 6.0F, 980.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 0.0, 2, (double) 980);
      assertEquals(2, int0);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {878.0, (-266.110693), (-266.110693)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 125L;
      longArray0[2] = 328L;
      longArray0[3] = (-1875L);
      longArray0[4] = 1956L;
      longArray0[5] = 1L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1151L);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2147483648L), 125L, 328L, (-1875L), 1956L, 1L}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L), 125L, 328L, (-1875L), 1956L, 1L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = ArrayUtils.insert(72, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1956L;
      doubleArray0[1] = (double) (-2147483648L);
      doubleArray0[2] = 2698.4911;
      doubleArray0[3] = (double) 72;
      doubleArray0[4] = 540.576893;
      doubleArray0[5] = (double) 125L;
      doubleArray0[6] = (double) 328L;
      doubleArray0[7] = (double) 1151L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2698.4911, (double) 72);
      assertEquals(2, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1956.0, (-2.147483648E9), 2698.4911, 72.0, 540.576893, 125.0, 328.0, 1151.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 328L;
      floatArray0[1] = (float) 328L;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 328L;
      floatArray0[4] = (float) (-1875L);
      floatArray0[5] = (float) 328L;
      floatArray0[6] = (float) (-1875L);
      floatArray0[7] = (float) 1956L;
      floatArray0[8] = (float) (-1875L);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-43), 11540);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {328.0F, 328.0F, (-1.0F), 328.0F, (-1875.0F), 328.0F, (-1875.0F), 1956.0F, (-1875.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {328.0F, 328.0F, (-1.0F), 328.0F, (-1875.0F), 328.0F, (-1875.0F), 1956.0F, (-1875.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert(1073741824, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, (-1637));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {3L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (-1637), 321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1637, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-108);
      Byte byte3 = new Byte((byte) (-108));
      assertEquals((byte) (-108), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-28);
      Byte byte5 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      byte byte6 = (byte)21;
      Byte byte7 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      byteArray0[4] = byte7;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte) (-108), (byte) (-28), (byte)21}, byteArray1);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)35;
      intArray0[1] = (int) (byte)21;
      intArray0[2] = (int) byte4;
      intArray0[3] = (int) byte4;
      intArray0[4] = (int) byte6;
      intArray0[5] = (int) byte4;
      intArray0[6] = (int) byte2;
      intArray0[7] = (int) (byte)21;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 56);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {35, 21, (-28), (-28), 21, (-28), (-108), 21}, intArray1);
      assertArrayEquals(new int[] {35, 21, (-28), (-28), 21, (-28), (-108), 21}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(byteArray1, (int) (byte)2, (int) (byte)2, (int) (byte)2);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (byte)2;
      doubleArray1[1] = (double) 2199.59F;
      doubleArray1[2] = (-3993.123);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.0, 2199.590087890625, (-3993.123)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('r');
      assertEquals('r', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('r');
      assertEquals('r', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character1);
      assertEquals('r', (char)character3);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      characterArray0[4] = character0;
      Character character4 = new Character('b');
      assertEquals('b', (char)character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (char)character0;
      longArray0[1] = (long) (char)character2;
      longArray0[2] = (long) (char)character2;
      longArray0[3] = (long) 'b';
      longArray0[4] = (long) (char)character1;
      longArray0[5] = 1L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {87L, 114L, 114L, 98L, 114L, 1L}, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      boolean boolean1 = ArrayUtils.isSorted((Object[]) characterArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(6, characterArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 2;
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = 'J';
      charArray0[4] = 'A';
      charArray0[5] = '<';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '<';
      char[] charArray2 = ArrayUtils.insert(2, charArray0, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(7, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', '\u0000', 'i', 'J', 'A', '<'}, charArray0);
      assertArrayEquals(new char[] {'<'}, charArray1);
      assertArrayEquals(new char[] {'w', '\u0000', '<', 'i', 'J', 'A', '<'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)18688;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3134, 5436);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert(3134, booleanArray0, booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (double) 2;
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = 'J';
      charArray0[4] = 'A';
      charArray0[5] = '<';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '<';
      char[] charArray2 = ArrayUtils.insert(2, charArray0, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(7, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', '\u0000', 'i', 'J', 'A', '<'}, charArray0);
      assertArrayEquals(new char[] {'<'}, charArray1);
      assertArrayEquals(new char[] {'w', '\u0000', '<', 'i', 'J', 'A', '<'}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)18688;
      shortArray0[1] = (short) (-382);
      shortArray0[2] = (short)411;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)6;
      shortArray0[5] = (short)8;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1369;
      shortArray0[8] = (short)1;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)18688, (short) (-382), (short)411, (short)0, (short)6, (short)8, (short) (-1), (short)1369, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)18688, (short) (-382), (short)411, (short)0, (short)6, (short)8, (short) (-1), (short)1369, (short)1}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)7;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-97), (byte) (-56), (byte)7}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "arry";
      stringArray0[0] = "{";
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, 266);
      assertEquals(0, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(longArray0, (int) (byte)103, 2144624835, 0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      Short short0 = new Short((short) (-85));
      assertEquals((short) (-85), (short)short0);
      assertNotNull(short0);
      
      Short short1 = (Short)ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short) (-85), (short)short1);
      assertNotNull(short1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(short1, object0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-85);
      floatArray0[1] = (float) (short) (-85);
      Integer integer0 = new Integer(979);
      assertEquals(979, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((short)979, mutableInt0.shortValue());
      assertEquals("979", mutableInt0.toString());
      assertEquals(979L, mutableInt0.longValue());
      assertEquals(979.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(979, mutableInt0.intValue());
      assertEquals(979, (int)mutableInt0.getValue());
      assertEquals(979, (int)mutableInt0.toInteger());
      assertEquals(979.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-45), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals(979, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((short)979, mutableInt0.shortValue());
      assertEquals("979", mutableInt0.toString());
      assertEquals(979L, mutableInt0.longValue());
      assertEquals(979.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(979, mutableInt0.intValue());
      assertEquals(979, (int)mutableInt0.getValue());
      assertEquals(979, (int)mutableInt0.toInteger());
      assertEquals(979.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-45), mutableInt0.byteValue());
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(979);
      assertEquals(979, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(401);
      assertEquals(401, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      int int0 = mutableInt0.addAndGet((Number) short1);
      assertEquals(894, int0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertEquals(894.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(894L, mutableInt0.longValue());
      assertEquals(894.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(894, (int)mutableInt0.toInteger());
      assertEquals(894, (int)mutableInt0.getValue());
      assertEquals((byte)126, mutableInt0.byteValue());
      assertEquals("894", mutableInt0.toString());
      assertEquals((short)894, mutableInt0.shortValue());
      assertEquals(894, mutableInt0.intValue());
      
      mutableInt0.subtract(0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer3));
      assertEquals(894.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(894L, mutableInt0.longValue());
      assertEquals(894.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(894, (int)mutableInt0.toInteger());
      assertEquals(894, (int)mutableInt0.getValue());
      assertEquals((byte)126, mutableInt0.byteValue());
      assertEquals("894", mutableInt0.toString());
      assertEquals((short)894, mutableInt0.shortValue());
      assertEquals(894, mutableInt0.intValue());
      
      Integer integer4 = new Integer(401);
      assertEquals(401, (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(4);
      assertEquals(4, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(2);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {4}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap(intArray0, 2, 936, 1732);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {4}, intArray0);
      
      ArrayUtils.shift((byte[]) null, 936, (-4973), 401);
      Character[] characterArray0 = new Character[2];
      char char0 = 'l';
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('l', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Short short2 = new Short((short)21);
      assertEquals((short)21, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      Character[] characterArray1 = ArrayUtils.removeElement(characterArray0, (Object) short2);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[0] = (byte)21;
      byteArray0[2] = (byte)0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)21;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {21L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)79);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)32);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(32, (int)mutableInt1.toInteger());
      assertEquals(32, (int)mutableInt1.getValue());
      assertEquals((short)32, mutableInt1.shortValue());
      assertEquals(32, mutableInt1.intValue());
      assertEquals(32.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(32L, mutableInt1.longValue());
      assertEquals("32", mutableInt1.toString());
      assertEquals(32.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)32, mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)0, 2581);
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 352.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 352.0;
      doubleArray0[4] = (-688.02126636);
      doubleArray0[5] = (-0.7607178226457485);
      doubleArray0[6] = (-689.823047196);
      ArrayUtils.shift(doubleArray0, 0, (-139), 0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {352.0, (-1.0), 352.0, 0.0, (-688.02126636), (-0.7607178226457485), (-689.823047196)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {352.0, (-1.0), 352.0, 0.0, (-688.02126636), (-0.7607178226457485), (-689.823047196)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 352.0, 0.0, (-688.02126636), (-0.7607178226457485), (-689.823047196)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), 0, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (-2988.1179200092656));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2988.1179200092656)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1.0F);
      doubleArray1[1] = 717.25;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(boolean0);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 717.25, (-1.0), 0.0, (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = new Character(')');
      assertEquals(')', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Character[]) null, (Character) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean1;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean((String) null);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-88);
      shortArray0[1] = (short) (-88);
      shortArray0[2] = (short) (-88);
      shortArray0[3] = (short) (-88);
      shortArray0[4] = (short) (-88);
      shortArray0[5] = (short) (-88);
      shortArray0[6] = (short) (-88);
      shortArray0[7] = (short) (-88);
      shortArray0[8] = (short) (-88);
      ArrayUtils.shift(shortArray0, 11);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-88), (short) (-88), (short) (-88), (short) (-88), (short) (-88), (short) (-88), (short) (-88), (short) (-88), (short) (-88)}, shortArray0);
      
      String[] stringArray0 = new String[0];
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean6 = ArrayUtils.isSorted(stringArray0, comparator0);
      assertTrue(boolean6);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean6 == boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-88);
      ArrayUtils.shift(intArray0, (int) (short) (-88), 85, 572);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-88)}, intArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (short) (-88), (int) (short) (-88));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1083L));
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-4137.37019444), (-1797), 214.38564738839082);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Float float0 = new Float((-782.7F));
      assertEquals((-782.7F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.get(objectArray0, 7, (Object) float0);
      assertEquals((-782.7F), object0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 1360);
      assertEquals(3, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.get(objectArray0, 84);
      assertEquals(3, objectArray0.length);
      assertNull(object2);
      
      objectArray0[2] = null;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = 'p';
      charArray0[2] = 'P';
      charArray0[3] = ',';
      charArray0[4] = '4';
      charArray0[5] = '^';
      charArray0[6] = 'H';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'7', 'p', 'P', ',', '4', '^', 'H'}, charArray0);
      assertNotNull(characterArray0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)405);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)405}, shortArray0);
      assertNotNull(shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, stringArray0.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'7', 'p', 'P', ',', '4', '^', 'H'}, charArray0);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '^';
      doubleArray0[1] = (double) (-782.7F);
      doubleArray0[2] = (double) 1360;
      doubleArray0[3] = (double) (-782.7F);
      doubleArray0[4] = 67.0;
      doubleArray0[5] = (double) '7';
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {94.0, (-782.7000122070312), 1360.0, (-782.7000122070312), 67.0, 55.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[6] = integer0;
      integerArray0[7] = (Integer) 0;
      integerArray0[8] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 4292, 117, 46);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2015);
      shortArray0[1] = (short)2393;
      shortArray0[2] = (short)790;
      ArrayUtils.shift(shortArray0, (int) (short) (-2015));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)790, (short) (-2015), (short)2393}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'H';
      floatArray0[2] = 72.0F;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[3] = (short)3;
      shortArray0[4] = (short) (-873);
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short)0, (short)3, (short) (-873)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-1666), (short)0, (short)3, (short) (-873), (short) (-1666), (short)0, (short)3, (short) (-873)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121}, byteArray0);
      
      Character character1 = new Character(char0);
      assertEquals('R', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf(char0);
      assertEquals('R', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray1);
      assertTrue(boolean0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      Character character3 = new Character('z');
      assertEquals('z', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      
      Character character4 = Character.valueOf('e');
      assertEquals('e', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      // Undeclared exception!
      ArrayUtils.subarray(characterArray0, Integer.MAX_VALUE, (-2150));
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = (-128);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-128);
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      intArray0[6] = (-128);
      int int0 = ArrayUtils.indexOf(intArray0, (-128), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, (-128), Integer.MAX_VALUE, (-128), Integer.MAX_VALUE, 0, (-128)}, intArray0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[5] = (Integer) (-128);
      integerArray0[1] = (Integer) (-128);
      int int1 = 41;
      Integer integer0 = new Integer(41);
      assertEquals(41, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) (-128);
      integerArray0[4] = (Integer) int1;
      Integer integer1 = Integer.getInteger("java.lang.Boolean");
      assertNull(integer1);
      
      integerArray0[5] = null;
      integerArray0[6] = (Integer) Integer.MAX_VALUE;
      integerArray0[7] = (Integer) (-128);
      try { 
        Integer.decode("java.lang.Object");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Object\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-123);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (byte) (-123);
      doubleArray0[3] = (double) (byte)114;
      doubleArray0[4] = (double) 6;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-123.0), 1.0, (-123.0), 114.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-123.0), (-123.0), 1.0, (-123.0), 114.0, 6.0, 1.0, (-123.0), 114.0, 6.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((char[]) null, 878, 878);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 878;
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (int) (short) (-40), (-2445), (-6521));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'q', 'q'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short)11540;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Character character0 = Character.valueOf('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      char char0 = ')';
      Character character1 = Character.valueOf(')');
      assertEquals(')', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('O');
      assertEquals('O', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertTrue(boolean0);
      assertEquals(2, characterArray0.length);
      
      Character character3 = new Character(')');
      assertEquals(')', (char)character3);
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (int) 11540, (int) char0);
      assertEquals(2, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, (-193.538F), (int) char0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) (short)11540;
      intArray0[2] = (int) (short)11540;
      intArray0[3] = (int) ')';
      intArray0[4] = (int) char0;
      intArray0[5] = (int) (short)11540;
      intArray0[6] = (int) (short)11540;
      intArray0[7] = 1101;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11540, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(138.0);
      assertEquals(138.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(138.0);
      assertEquals(138.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.1);
      assertEquals(0.1, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.1);
      assertEquals(0.1, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(149.75);
      assertEquals(149.75, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      assertEquals(0.1, (double)double5, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {138.0, 138.0, 0.1, 0.1, 149.75, 0.1}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 432.68796784040717);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {138.0, 138.0, 0.1, 0.1, 149.75, 0.1}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {432.68796784040717, 138.0, 138.0, 0.1, 0.1, 149.75, 0.1}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '<');
      assertNull(charArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 5317.917F);
      assertNull(floatArray0);
      
      char[] charArray1 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap((long[]) null, (-2254), 101, 2);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1246);
      shortArray0[1] = (short) (-3832);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-971);
      ArrayUtils.swap(shortArray0, (int) (short) (-3832), 0, 1133);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1246), (short) (-3832), (short)0, (short) (-971)}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ArrayUtils.swap(byteArray0, (-1647), 10, (int) (short) (-1246));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 4869L);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1647);
      intArray0[1] = (-2254);
      intArray0[2] = (int) (short) (-971);
      intArray0[3] = (int) (short) (-3832);
      intArray0[4] = (int) (short) (-1246);
      intArray0[5] = (int) (short) (-971);
      intArray0[6] = 1133;
      intArray0[7] = 3;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 121, (int) (byte)57);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1647), (-2254), (-971), (-3832), (-1246), (-971), 1133, 3}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1083L));
      assertEquals((-1), int0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Double[]) null, (-1736));
      assertFalse(boolean0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) double0, (-1));
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)53;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)52, (byte)53, (byte)53}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1103);
      shortArray0[1] = (short)96;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-4003.0));
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4003.0), 2199.590087890625, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '(');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      char char0 = '6';
      Character character0 = Character.valueOf('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('s');
      assertEquals('s', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('6');
      assertEquals('6', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 's');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'6', 's', '6'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) char0;
      intArray0[2] = (int) char0;
      intArray0[3] = (int) char0;
      intArray0[4] = (int) char0;
      intArray0[5] = (int) '6';
      intArray0[6] = 1480;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {54, 54, 54, 54, 54, 54, 1480}, intArray1);
      assertArrayEquals(new int[] {54, 54, 54, 54, 54, 54, 1480}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = ArrayUtils.addFirst((Object[]) characterArray0, (Object) character2);
      assertEquals(3, characterArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(character2.equals((Object)character1));
      assertNotSame(characterArray0, objectArray0);
      assertNotNull(objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) char0, 'q');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1495.002F);
      floatArray0[1] = 2593.25F;
      floatArray0[2] = (-544.636F);
      floatArray0[3] = (-1195.8695F);
      floatArray0[4] = 727.8397F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1533.1733F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1495.002F), 2593.25F, (-544.636F), (-1195.8695F), 727.8397F, (-1.0F), (-1533.1733F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (double) 0.0F);
      assertNull(doubleArray1);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int[] intArray2 = ArrayUtils.add(intArray0, 103);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 103}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray2.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false}, booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte) (-62), (byte) (-123), (byte)1}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-12550));
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-57);
      byteArray1[4] = (byte) (-57);
      byteArray1[5] = (byte) (-123);
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte) (-62);
      ArrayUtils.reverse(byteArray1, (int) (byte)32, 872);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-62), (byte)0, (byte) (-57), (byte) (-57), (byte) (-123), (byte)1, (byte) (-1), (byte) (-62)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      Float float0 = new Float(5139.4963866605);
      assertEquals(5139.4966F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)70);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {5139.4966F, 5139.4966F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-278L);
      longArray0[1] = (long) (byte)70;
      longArray0[2] = (-278L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 70L, (int) (byte) (-123));
      assertEquals(1, int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-278L), 70L, (-278L), (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 830.8);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 830.8}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-927819929);
      longArray0[1] = (long) (-927819929);
      ArrayUtils.swap(longArray0, (-927819929), 55, (-113));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-927819929L), (-927819929L)}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)85;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)85);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)9}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)9, (byte)85}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)9;
      longArray1[1] = (long) 55;
      longArray1[2] = (long) (byte)9;
      boolean boolean0 = ArrayUtils.contains(longArray1, (long) 55);
      assertTrue(boolean0);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {9L, 55L, 9L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-1996));
      assertEquals((short) (-1996), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)85);
      assertEquals((short)85, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertEquals((short) (-1996), (short)short2);
      assertEquals(7, shortArray0.length);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short) (-1996), (short)short3);
      assertEquals(7, shortArray0.length);
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1497));
      assertEquals((short) (-1497), (short)short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((byte)1);
      assertEquals((short)1, (short)short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)54);
      assertEquals((short)54, (short)short6);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short5));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 830.8);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 830.8}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-927819929);
      ArrayUtils.swap(longArray0, (-927819929), 55, (-113));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-927819929L), 0L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)85;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)85);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)9}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)9, (byte)85}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)9;
      longArray1[1] = (long) 55;
      longArray1[2] = (long) (byte)9;
      boolean boolean0 = ArrayUtils.contains(longArray1, (long) 55);
      assertTrue(boolean0);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {9L, 55L, 9L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-1996));
      assertEquals((short) (-1996), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)85);
      assertEquals((short)85, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertEquals((short) (-1996), (short)short2);
      assertEquals(7, shortArray0.length);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short) (-1996), (short)short3);
      assertEquals(7, shortArray0.length);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1497));
      assertEquals((short) (-1497), (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((byte)1);
      assertEquals((short)1, (short)short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)54);
      assertEquals((short)54, (short)short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = '>';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'<', '>', '<', '<', '<'}, charArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-612);
      shortArray0[1] = (short)31601;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1816;
      shortArray0[5] = (short)17;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)6;
      shortArray0[8] = (short)6;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)31601);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-612), (short)31601, (short)2, (short)0, (short)1816, (short)17, (short)1, (short)6, (short)6}, shortArray0);
      assertArrayEquals(new short[] {(short) (-612), (short)2, (short)0, (short)1816, (short)17, (short)1, (short)6, (short)6}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      Double double0 = new Double((-748.2808011843));
      assertEquals((-748.2808011843), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-1178.9192032);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray1, (int) 53);
      assertFalse(boolean0);
      assertEquals(1, doubleArray1.length);
      
      Double double1 = new Double(449.78);
      assertEquals(449.78, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) double0, 2);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray1.length);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)53;
      shortArray0[1] = (short) (byte)53;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)53, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short)53, (short)53, (short)53, (short)53}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray1, (int) (short)53, (-1));
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)53, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short)53, (short)53, (short)53, (short)53}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) (short)53);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      short[] shortArray2 = ArrayUtils.remove(shortArray1, 1);
      assertEquals(3, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)53, (short)53, (short)53}, shortArray2);
      assertArrayEquals(new short[] {(short)53, (short)53}, shortArray0);
      assertArrayEquals(new short[] {(short)53, (short)53, (short)53, (short)53}, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-233);
      shortArray0[1] = (short) (-2842);
      shortArray0[2] = (short) (-970);
      shortArray0[3] = (short) (-3035);
      shortArray0[4] = (short)1466;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)4;
      shortArray0[7] = (short)83;
      shortArray0[8] = (short) (-3333);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2842));
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-233), (short) (-2842), (short) (-970), (short) (-3035), (short)1466, (short) (-1), (short)4, (short)83, (short) (-3333)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-233), (short) (-970), (short) (-3035), (short)1466, (short) (-1), (short)4, (short)83, (short) (-3333)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)109;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-69));
      assertEquals(4, byteArray0.length);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte)32, (byte) (-18), (byte) (-69), (byte)109}, byteArray0);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '^';
      charArray0[1] = '^';
      charArray0[2] = '?';
      charArray0[3] = '^';
      charArray0[4] = 'n';
      charArray0[5] = '^';
      charArray0[6] = '^';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'^', '^', '?', '^', 'n', '^', '^'}, charArray0);
      assertArrayEquals(new char[] {'^', '^', '?', '^', 'n', '^', '^'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      long long0 = 125L;
      Long long1 = new Long(125L);
      assertEquals(125L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-1810L));
      assertEquals((-1810L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(long0);
      assertEquals(125L, (long)long3);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      
      longArray0[2] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2147483647L);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {125L, (-1810L), 125L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2199.59F;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)16, byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)16;
      shortArray0[1] = (short) (byte)16;
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte)16;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (byte)16;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      ArrayUtils.shift(shortArray0, (-1), (int) (short) (-1), 10);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16, (short)16, (short) (-1), (short)16, (short)16, (short)16}, shortArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)16;
      objectArray0[1] = (Object) (short)16;
      objectArray0[2] = (Object) (short)16;
      ArrayUtils.shift(objectArray0, 21);
      assertEquals(3, objectArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean2);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1554.0);
      assertEquals(1554.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)16);
      assertEquals(16.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)16);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1554.0, 16.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'B');
      assertEquals(0, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (double) 'B';
      doubleArray0[2] = 2.5;
      doubleArray0[3] = (double) 'B';
      doubleArray0[4] = (double) 'B';
      doubleArray0[5] = (double) 'B';
      doubleArray0[6] = (double) 'B';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 66.0, 909, 12.0);
      assertEquals(6, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {66.0, 66.0, 2.5, 66.0, 66.0, 66.0, 66.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2075L;
      longArray0[1] = (long) 909;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = 2147483647L;
      longArray0[5] = (long) 'B';
      longArray0[6] = (long) 6;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1810L));
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2075L, 909L, 6L, 6L, 2147483647L, 66L, 6L}, longArray1);
      assertArrayEquals(new long[] {2075L, 909L, 6L, 6L, 2147483647L, 66L, 6L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 66.0;
      doubleArray1[1] = (Double) 66.0;
      doubleArray1[2] = (Double) 66.0;
      doubleArray1[3] = (Double) 2.5;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) 6);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {66.0, 66.0, 66.0, 2.5}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      ArrayUtils.swap(longArray1, (-927819929), (-927819929), 55);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {2075L, 909L, 6L, 6L, 2147483647L, 66L, 6L}, longArray1);
      assertArrayEquals(new long[] {2075L, 909L, 6L, 6L, 2147483647L, 66L, 6L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)33;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-104));
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)83, (byte) (-66), (byte) (-35), (byte)9, (byte)84, (byte)33}, byteArray1);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-66), (byte) (-35), (byte)9, (byte)84, (byte) (-104), (byte)33}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.shift(floatArray0, (-1193), 13, (-2342));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(6);
      assertEquals(6, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1576));
      assertEquals((-1576), (int)integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(117);
      assertEquals(117, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.getInteger("-rRs=z5Q|a `UC", integer3);
      assertEquals(117, (int)integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer((-258));
      assertEquals((-258), (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(540);
      assertEquals(540, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      
      Integer integer7 = new Integer((-1193));
      assertEquals((-1193), (int)integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertNotNull(integer7);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)1;
      longArray1[1] = (long) '}';
      longArray1[2] = (long) '}';
      longArray1[3] = 5284L;
      longArray1[4] = (long) (byte)1;
      int int1 = ArrayUtils.indexOf(longArray1, (-1L));
      assertEquals((-1), int1);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {1L, 125L, 125L, 5284L, 1L}, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-0.7607178226457485);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 0.0, 0.0, (-1.0), (-0.7607178226457485)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(4, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 795);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift(intArray0, 4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      ArrayUtils.shift(intArray0, 4, 1107, 2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5441.27220567, 0.0, 0.0, 0.0, (-1.0), (-0.7607178226457485)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int1 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      
      Long[] longArray0 = new Long[6];
      Long long0 = Long.getLong(">;9Y4l0$T}ioynT", (long) 2);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1));
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals((-1L), (long)long2);
      assertEquals(6, longArray0.length);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-3469L));
      assertEquals((-3469L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(795);
      assertEquals(795L, (long)long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-1));
      assertEquals((-1L), (long)long5);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertNotNull(long5);
      
      longArray0[5] = long5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1107, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1107, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double2;
      Double[] doubleArray1 = ArrayUtils.insert((int) 2, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (-1788);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short) (-1788)}, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Double double0 = new Double(2772.8173934251);
      assertEquals(2772.8173934251, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)115;
      longArray0[1] = (long) (byte)115;
      ArrayUtils.reverse(longArray0, (int) (byte)115, 14);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {115L, 115L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147483647L);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {115L, 115L}, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)115;
      shortArray0[1] = (short) (byte)115;
      shortArray0[2] = (short) (byte)115;
      shortArray0[3] = (short) (byte)115;
      shortArray0[4] = (short) (byte)115;
      shortArray0[5] = (short) (byte)115;
      shortArray0[6] = (short) (byte)115;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)115, (short)115, (short)115, (short)115, (short)115, (short)115, (short)115}, shortArray0);
      assertArrayEquals(new short[] {(short)115, (short)115, (short)115, (short)115, (short)115, (short)115, (short)115}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      Character character0 = new Character('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double((-2099.955424725));
      assertEquals((-2099.955424725), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 1.0;
      doubleArray1[1] = (Double) 1.0;
      doubleArray1[2] = double0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray1, (int) 0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray1.length);
      
      Double double1 = new Double((byte)21);
      assertEquals(21.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) doubleArray1[0], (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)21, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-1.0F);
      ArrayUtils.swap(floatArray0, (int) (byte)0, 2, (-43));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {78.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)21, 1727);
      assertEquals(6, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)21, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      char char0 = 'E';
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      Character character0 = Character.valueOf('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) char0;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1886);
      intArray0[1] = (int) 'E';
      intArray0[2] = (int) 't';
      intArray0[3] = (int) 't';
      intArray0[4] = (int) char0;
      intArray0[5] = (int) char0;
      intArray0[6] = (int) 't';
      intArray0[7] = (int) char0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 116, (-651));
      assertEquals(8, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{2, 3, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new int[] {(-1886), 69, 116, 116, 69, 69, 116, 69}, intArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)472;
      shortArray0[2] = (short) (-1359);
      shortArray0[3] = (short)45;
      shortArray0[4] = (short)1995;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)602;
      shortArray0[7] = (short) (-1348);
      ArrayUtils.reverse(shortArray0, 116, 115);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short)472, (short) (-1359), (short)45, (short)1995, (short) (-1), (short)602, (short) (-1348)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Float float0 = new Float((-1897.61));
      assertEquals((-1897.61F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1996);
      intArray0[1] = (-1996);
      intArray0[2] = (-1996);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1996));
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-71));
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)44, (byte)119, (byte)59, (byte)64, (byte)115, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)44, (byte)119, (byte)59, (byte)64, (byte)115, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap((char[]) null, 1346, 1434, (-1924));
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 431L;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1792.14F;
      floatArray0[1] = (float) 431L;
      floatArray0[2] = (float) 431L;
      floatArray0[3] = 1792.14F;
      floatArray0[4] = (float) 431L;
      floatArray0[5] = (float) 431L;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {431.0F, 431.0F, 1792.14F, 431.0F, 431.0F, 1792.14F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      assertEquals((short)6, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Character[] characterArray0 = new Character[1];
      char char0 = 'o';
      Character character0 = Character.valueOf('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "");
      assertEquals("o", string0);
      assertNotNull(string0);
      
      Short short2 = new Short((short)353);
      assertEquals((short)353, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121}, byteArray0);
      
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)353;
      shortArray1[1] = (short)46;
      shortArray1[2] = (short) (-3570);
      shortArray1[3] = (short) (byte)121;
      shortArray1[4] = (short) (-3570);
      shortArray1[5] = (short) (byte)121;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray1);
      assertTrue(boolean0);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)353, (short)46, (short) (-3570), (short)121, (short) (-3570), (short)121}, shortArray1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121}, byteArray0);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0, "{}");
      assertEquals(1, shortArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) short0;
      longArray0[2] = (long) (byte)121;
      longArray0[3] = (-1L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {111L, 6L, 121L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {111L, 6L, 121L, (-1L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-378.0F);
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 948.737803);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {948.737803}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Object[] objectArray0 = new Object[0];
      Float float0 = new Float((double) (-378.0F));
      assertEquals((-378.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) float0, 1212);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      float[] floatArray0 = new float[8];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1636;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 32, (-765));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1636}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 815, 59);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1636}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 883, (-765));
      assertNull(intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean2);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray2, (short)1636, 52);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)1636}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = (-127.0);
      doubleArray0[2] = (double) 'Z';
      doubleArray0[3] = (double) (char)character0;
      doubleArray0[4] = (double) (char)character0;
      doubleArray0[5] = (double) (char)character0;
      doubleArray0[6] = (double) (char)character0;
      doubleArray0[7] = 3.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) character0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, (-127.0), 90.0, 90.0, 90.0, 90.0, 90.0, 3.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-1), 1, (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) character0);
      assertEquals(90L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      ArrayUtils.reverse((Object[]) characterArray0, (-43), 50);
      assertEquals(1, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (int) (byte) (-121), (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -121, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1), (short)0, (short)88, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '2');
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'v';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ArrayUtils.shift(byteArray0, 50);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-92));
      assertEquals(1, byteArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (int) (byte) (-92);
      intArray2[1] = 0;
      int[] intArray3 = ArrayUtils.clone(intArray2);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray3.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-92), 0}, intArray2);
      assertArrayEquals(new int[] {(-92), 0}, intArray3);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'O';
      Character character1 = Character.valueOf('O');
      assertEquals('O', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertEquals('(', (char)character2);
      assertFalse(character0.equals((Object)char0));
      assertFalse(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('(');
      assertEquals('(', (char)character3);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character3);
      assertEquals('(', (char)character4);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertNotNull(character4);
      
      Float float0 = new Float((double) char0);
      assertEquals(79.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals((short)79, mutableInt0.shortValue());
      assertEquals(79.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(79, (int)mutableInt0.getValue());
      assertEquals(79, (int)mutableInt0.toInteger());
      assertEquals((byte)79, mutableInt0.byteValue());
      assertEquals("79", mutableInt0.toString());
      assertEquals(79.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(79, mutableInt0.intValue());
      assertEquals(79L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) mutableInt0, 70);
      assertEquals((-1), int0);
      assertEquals(5, characterArray0.length);
      assertEquals((short)79, mutableInt0.shortValue());
      assertEquals(79.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(79, (int)mutableInt0.getValue());
      assertEquals(79, (int)mutableInt0.toInteger());
      assertEquals((byte)79, mutableInt0.byteValue());
      assertEquals("79", mutableInt0.toString());
      assertEquals(79.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(79, mutableInt0.intValue());
      assertEquals(79L, mutableInt0.longValue());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-102);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte) (-77);
      byteArray1[5] = (byte) (-77);
      byteArray1[6] = (byte) (-77);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertEquals(7, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)78, (byte)78, (byte)78, (byte)78, (byte) (-77), (byte) (-77), (byte) (-77)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-77), (byte) (-102)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (-1842.2501608);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (double) (-1.0F);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-66.77122266435575));
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1842.2501608), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1842.2501608), (-1.0), (-1.0), (-66.77122266435575)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (-1.0), (-2819));
      assertEquals(0, int0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1842.2501608), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1842.2501608), (-1.0), (-1.0), (-66.77122266435575)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2352.547F, (-1));
      assertEquals((-1), int1);
      assertEquals(9, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 18688;
      intArray0[2] = (-1);
      intArray0[3] = (-2819);
      ArrayUtils.reverse(intArray0, 0, (-1));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 18688, (-1), (-2819)}, intArray0);
      
      ArrayUtils.reverse((Object[]) floatArray1, (-1), (-1));
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)78;
      shortArray0[2] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1227), (int) (short)78);
      assertEquals(3, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-1), (short)78, (short) (-1)}, shortArray0);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, booleanArray0);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) character0);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) 'R';
      int[] intArray1 = ArrayUtils.add(intArray0, 103);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {82, 82}, intArray0);
      assertArrayEquals(new int[] {82, 82, 103}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0, 1133);
      assertEquals(1, int1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('u');
      assertEquals('u', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char char0 = 'B';
      Character character2 = Character.valueOf('B');
      assertEquals('B', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'u', 'u', 'B'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)32;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-123);
      floatArray0[1] = (-1818.2087F);
      floatArray0[2] = (float) (byte)70;
      floatArray0[3] = (-1455.2F);
      floatArray0[4] = 561.066F;
      floatArray0[5] = (float) (byte)70;
      floatArray0[6] = (float) (byte) (-57);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-123.0F), (-1818.2087F), 70.0F, (-1455.2F), 561.066F, 70.0F, (-57.0F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 532, 1114111);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-123.0F), (-1818.2087F), 70.0F, (-1455.2F), 561.066F, 70.0F, (-57.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse((char[]) null);
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 70.0F;
      doubleArray0[1] = (double) 1114111;
      doubleArray0[2] = (double) (-123.0F);
      doubleArray0[3] = (-1232.9085260189);
      doubleArray0[4] = (double) (-1455.2F);
      ArrayUtils.shift(doubleArray0, (int) (byte)32, (-1733), 1114111);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {70.0, 1114111.0, (-123.0), (-1232.9085260189), (-1455.199951171875)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, (-278L), (-1));
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0, 1, 4893);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      
      ArrayUtils.swap(booleanArray0, 1, (-1), 23);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = (-1.0F);
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      float float1 = 0.0F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[7];
      long long0 = 747L;
      longArray0[0] = 747L;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 10;
      longArray0[5] = (long) 10;
      longArray0[6] = (-280L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {747L, 10L, 10L, 10L, 10L, 10L, (-280L)}, longArray0);
      assertNotNull(longArray1);
      
      int int0 = 657;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(657, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 657, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)217;
      longArray0[1] = (long) (short)217;
      longArray0[3] = (-280L);
      longArray0[4] = (-280L);
      longArray0[5] = (long) (short)217;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {217L, 217L, 0L, (-280L), (-280L), 217L}, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (-280L);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)217, longArray2, longArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 217, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      charArray0[2] = '+';
      charArray0[3] = '@';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'@', '+', '@', '@'}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '1');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'@', '+', '@', '@'}, charArray0);
      assertArrayEquals(new char[] {'@', '+', '@', '@', '1'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-126);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)61, (byte) (-126)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-126)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      MutableInt mutableInt0 = new MutableInt((-1.0F));
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0);
      assertEquals("-1", string0);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1250.1653F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (byte) (-126);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1250.165283203125, (-1.0), (-126.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1250.165283203125, (-1.0), (-126.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2172.598876723642);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)11);
      assertEquals(1, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte)11;
      intArray0[2] = 1;
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), 11, 1, (-1), (-1), (-1)}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (byte)11;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 11;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-1));
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 11.0F, (-1.0F), 11.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 11.0F, (-1.0F), 11.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) (-1));
      assertNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {11, 1, (-1), (-1), (-1)}, intArray1);
      assertArrayEquals(new int[] {(-1), 11, 1, (-1), (-1), (-1)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-1));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertNotNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals(5, int0);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-1), 11, 1, (-1), (-1), (-1)}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)11;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)11;
      shortArray0[3] = (short) (-12186);
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-12186), (short)11, (short) (-1), (short)11}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Character character0 = new Character('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('R');
      assertEquals('R', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('L');
      assertEquals('L', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1886);
      intArray0[3] = (int) 'b';
      intArray0[4] = (-1673);
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) 'L';
      intArray0[7] = (int) 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 140);
      assertEquals(8, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {82, 0, (-1886), 98, (-1673), 0, 76, 82}, intArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      long[] longArray0 = new long[14];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 76;
      longArray0[7] = (long) Integer.MAX_VALUE;
      intArray0[2] = 76;
      Integer integer0 = ArrayUtils.get((Integer[]) null, 2146684435, (Integer) 76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(76, object0);
      assertNotNull(object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "");
      assertNull(stringArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, 76, 1148);
      assertEquals(14, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 76, Integer.MAX_VALUE);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-50);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)118, (byte)31, (byte) (-49), (byte) (-50)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 604, 1199);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "!BOXwSrC|a1k3Nl");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1797));
      assertEquals((-1797), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1172.3503652034242), 2527);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 4437;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[5] = (float) (-1797);
      floatArray0[6] = (float) 2527;
      floatArray0[7] = (float) 2527;
      floatArray0[8] = (float) 1003;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 404.35F, 4437);
      assertEquals((-1), int1);
      assertEquals(9, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {1.0F, 4437.0F, 1.0F, 1.0F, 0.0F, (-1797.0F), 2527.0F, 2527.0F, 1003.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(intArray0, 1515, (-1845));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      int int2 = ArrayUtils.indexOf(charArray0, 't');
      assertEquals((-1), int2);
      assertEquals(0, charArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'O';
      charArray0[2] = '8';
      charArray0[3] = 'W';
      charArray0[4] = '\'';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'%', 'O', '8', 'W', '\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '%';
      longArray0[1] = (long) 'W';
      longArray0[2] = (long) 'W';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 37L);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {87L, 87L}, longArray1);
      assertArrayEquals(new long[] {37L, 87L, 87L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('O');
      assertEquals('O', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = (char) character0;
      charArray0[2] = 'O';
      charArray0[3] = (char) character0;
      charArray0[4] = '\\';
      ArrayUtils.reverse(charArray0, (-4056), 789);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\\', '(', 'O', '(', 'I'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) '(';
      doubleArray0[2] = (double) (-4056);
      doubleArray0[3] = (double) 789;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {73.0, 40.0, (-4056.0), 789.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'O';
      floatArray0[1] = (float) '(';
      floatArray0[2] = (float) 'O';
      floatArray0[3] = (float) (char)character0;
      floatArray0[4] = (float) '\\';
      floatArray0[5] = (float) '(';
      floatArray0[6] = (float) 'O';
      floatArray0[7] = (float) 'O';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {79.0F, 40.0F, 79.0F, 40.0F, 92.0F, 40.0F, 79.0F, 79.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '\\';
      longArray0[1] = (long) '(';
      longArray0[2] = (long) (-4056);
      longArray0[3] = (long) '(';
      longArray0[4] = (long) 'O';
      longArray0[5] = (long) 789;
      longArray0[6] = (-1L);
      longArray0[7] = (long) '\\';
      longArray0[8] = (long) 'I';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 73L);
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {92L, 40L, (-4056L), 40L, 79L, 789L, (-1L), 92L}, longArray1);
      assertArrayEquals(new long[] {92L, 40L, (-4056L), 40L, 79L, 789L, (-1L), 92L, 73L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'B');
      assertEquals(0, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (double) 'B';
      doubleArray0[2] = 2.5;
      doubleArray0[3] = (double) 'B';
      doubleArray0[4] = (double) 'B';
      doubleArray0[5] = (double) 'B';
      doubleArray0[6] = (double) 'B';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 66.0, 909, 12.0);
      assertEquals(6, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {66.0, 66.0, 2.5, 66.0, 66.0, 66.0, 66.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2075L;
      longArray0[1] = (long) 909;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = 2147483647L;
      longArray0[6] = (long) 6;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1810L));
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2075L, 909L, 6L, 6L, 2147483647L, 0L, 6L}, longArray1);
      assertArrayEquals(new long[] {2075L, 909L, 6L, 6L, 2147483647L, 0L, 6L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      Double[] doubleArray1 = new Double[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('O');
      assertEquals('O', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = (char) character0;
      charArray0[2] = 'O';
      charArray0[3] = (char) character0;
      charArray0[4] = '\\';
      ArrayUtils.reverse(charArray0, (-4056), 789);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\\', '(', 'O', '(', 'I'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) (-4056);
      doubleArray0[3] = (double) 789;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-4056.0), 789.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, (-4056.0), 789.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-4056.0), 789.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 1L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1039.931;
      doubleArray0[6] = (-2977.4648363365927);
      ArrayUtils.shift(doubleArray0, (-382), (-382), 1397);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1039.931, (-2977.4648363365927), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-382);
      intArray0[1] = (-382);
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, (-382));
      assertNull(intArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1475;
      shortArray0[1] = (short)1475;
      shortArray0[2] = (short)1475;
      shortArray0[3] = (short)70;
      shortArray0[4] = (short)1475;
      shortArray0[5] = (short)1475;
      shortArray0[6] = (short)1475;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1475, (-2267));
      assertEquals(0, int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1475, (short)1475, (short)1475, (short)70, (short)1475, (short)1475, (short)1475, (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1475);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1475, (short)1475, (short)1475, (short)1475, (short)70, (short)1475, (short)1475, (short)1475, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)1475, (short)1475, (short)1475, (short)70, (short)1475, (short)1475, (short)1475, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'R';
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) 'R';
      floatArray0[4] = (float) 'R';
      floatArray0[5] = (float) 'R';
      floatArray0[6] = (float) 'R';
      floatArray0[7] = (float) (short)116;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {82.0F, 82.0F, 82.0F, 82.0F, 82.0F, 82.0F, 82.0F, 116.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) characterArray0, (Object) boolean0);
      assertFalse(boolean1);
      assertEquals(1, characterArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean2);
      assertEquals(3, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'R', 'R', 'R'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 's');
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'s', 'R', 'R', 'R'}, charArray1);
      assertArrayEquals(new char[] {'R', 'R', 'R'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) integer0, 2);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {82.0F, 82.0F, 82.0F, 82.0F, 82.0F, 82.0F, 82.0F, 116.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)116;
      shortArray0[1] = (short)116;
      shortArray0[2] = (short)116;
      shortArray0[3] = (short)116;
      shortArray0[4] = (short)116;
      shortArray0[5] = (short)116;
      shortArray0[6] = (short)116;
      shortArray0[7] = (short)116;
      shortArray0[8] = (short)116;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 33);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)116, (short)116, (short)116, (short)116, (short)116, (short)116, (short)116, (short)116, (short)116}, shortArray1);
      assertArrayEquals(new short[] {(short)116, (short)116, (short)116, (short)116, (short)116, (short)116, (short)116, (short)116, (short)116}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3094L);
      longArray0[1] = 2963L;
      longArray0[2] = (-1389L);
      longArray0[3] = (-235L);
      longArray0[4] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-3094L));
      assertEquals(0, int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-3094L), 2963L, (-1389L), (-235L), 1L}, longArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-235L);
      objectArray0[1] = (Object) 2963L;
      objectArray0[2] = (Object) (-1389L);
      objectArray0[3] = (Object) 2963L;
      objectArray0[4] = (Object) 2963L;
      objectArray0[5] = (Object) (-235L);
      objectArray0[6] = (Object) (-3094L);
      objectArray0[7] = (Object) (-1389L);
      int int1 = ArrayUtils.indexOf(objectArray0, objectArray0[7]);
      assertEquals(2, int1);
      assertEquals(8, objectArray0.length);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3094L);
      floatArray0[1] = (float) 0;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (float) (-1389L);
      floatArray0[4] = (float) (-235L);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-3094L));
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-3094.0F), 0.0F, Float.NaN, (-1389.0F), (-235.0F)}, floatArray0, 0.01F);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) (-1389L);
      longArray1[1] = (Long) (-235L);
      Long[] longArray2 = ArrayUtils.subarray(longArray1, Integer.MAX_VALUE, (-1));
      assertEquals(2, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('=');
      assertEquals('=', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short)0, (short)0, (short)88, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[1];
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, (int) 0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Double double1 = new Double(2684.703755);
      assertEquals(2684.703755, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) "gnDw,2Z}B TArND=*fF}", (int) (short)88);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = '$';
      charArray0[2] = '&';
      charArray0[3] = 'x';
      ArrayUtils.swap(charArray0, 1232, (int) (short)88, 2701);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'n', '$', '&', 'x'}, charArray0);
      
      double[] doubleArray1 = new double[0];
      boolean boolean2 = ArrayUtils.contains(doubleArray1, (double) (short)0);
      assertFalse(boolean2);
      assertEquals(0, doubleArray1.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Short short0 = new Short((short) (-85));
      assertEquals((short) (-85), (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short) (-85), object0);
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object1);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-85);
      floatArray0[1] = (float) (short) (-85);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2384;
      intArray0[2] = (int) (short) (-85);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (int) (short) (-85);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 2384, (-85), 1, 1, (-85)}, intArray0);
      assertArrayEquals(new int[] {2384, (-85), 1, 1, (-85)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 1, 1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 2384, (-85), 1, 1, (-85)}, intArray0);
      assertArrayEquals(new int[] {2384, (-85), 1, 1, (-85)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 3474.0F, (-85));
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-85.0F), (-85.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'r';
      Character character0 = Character.valueOf('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('r', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('r');
      assertEquals('r', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character2);
      assertEquals('r', (char)character3);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-58.5F));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-85.0F), (-85.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-85.0F), (-85.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = char0;
      charArray0[1] = 'r';
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = '=';
      charArray0[5] = (char) character1;
      charArray0[6] = ',';
      charArray0[7] = (char) character1;
      charArray0[8] = (char) character1;
      ArrayUtils.swap(charArray0, 68, 341, 2384);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', '=', 'r', ',', 'r', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(booleanArray1, 0, 6, (-46));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)12;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)66, (byte) (-4), (byte) (-36), (byte)1, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[0];
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(booleanArray1, 0, 6, 93);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)12;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)66, (byte) (-4), (byte) (-36), (byte)1, (byte) (-43)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1797));
      assertEquals((-1797), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1172.3503652034242), 2527);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 4437;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) (-1797);
      floatArray0[6] = (float) 2527;
      floatArray0[7] = (float) 2527;
      floatArray0[8] = (float) 1003;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 404.35F, 4437);
      assertEquals((-1), int1);
      assertEquals(9, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {1.0F, 4437.0F, 1.0F, 1.0F, 1.0F, (-1797.0F), 2527.0F, 2527.0F, 1003.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(intArray0, 1515, (-1845));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short)11540;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)11540;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 543, (-1));
      assertEquals((-1), int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {11540}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-378.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-378.0F);
      doubleArray0[1] = (double) (-378.0F);
      doubleArray0[2] = (double) (-378.0F);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-378.0), (-378.0), (-378.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      boolean boolean0 = ArrayUtils.contains(charArray0, '}');
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
      
      ArrayUtils.swap(floatArray0, 6, 6, 980);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-378.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1791.0, (-2145342586), (double) (-2145342586));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-378.0), (-378.0), (-378.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('R');
      assertEquals('R', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray1 = ArrayUtils.add(characterArray0, character1);
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) characterArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2199.59F, 2);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1434;
      shortArray0[1] = (short) (-58);
      shortArray0[2] = (short)247;
      shortArray0[3] = (short)1317;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)247, 121);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1434, (short) (-58), (short)247, (short)1317}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short)1317, 43);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2199.59F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)1434, 0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)1434, (short) (-58), (short)247, (short)1317}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      Short short0 = new Short((short) (-1121));
      assertEquals((short) (-1121), (short)short0);
      assertNotNull(short0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, 32, 0, (-1));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-42));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 4);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      Class<Float> class2 = Float.class;
      classArray0[2] = class2;
      Class<Float> class3 = Float.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray1.length);
      assertEquals(4, classArray0.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-4.79F);
      doubleArray0[3] = (double) 2199.59F;
      doubleArray0[4] = (double) 2199.59F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 90;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 639);
      assertEquals(1, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {90}, intArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1157);
      intArray0[1] = (-1120);
      intArray0[2] = (-1);
      intArray0[4] = (-1157);
      intArray0[5] = (-1436);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1120);
      floatArray0[1] = (float) 824;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lzP}>sp1v6B";
      stringArray0[1] = "t97rkwEMH'";
      stringArray0[2] = "[";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      ArrayUtils.swap(byteArray0, (-1157), (-1436), (int) (byte) (-58));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (byte) (-58));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-58.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4102.0532;
      doubleArray0[1] = (-2092.72644853);
      doubleArray0[2] = 0.1;
      doubleArray0[3] = 752.0244744016;
      doubleArray0[4] = (-1281.1179200092656);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {4102.0532, (-2092.72644853), 0.1, 752.0244744016, (-1281.1179200092656)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-600);
      intArray0[1] = (-589);
      intArray0[2] = 2802;
      intArray0[3] = (-130);
      intArray0[4] = (-1325);
      intArray0[5] = 1183;
      intArray0[6] = (-1200);
      intArray0[7] = 3239;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3239, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-1516), (-1516), (-1516));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1516), (-1921));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, (-1921));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2199.59F;
      doubleArray0[1] = (double) 2199.59F;
      doubleArray0[2] = (double) 2199.59F;
      doubleArray0[3] = (-3993.123);
      doubleArray0[4] = (-3993.123);
      doubleArray0[5] = (-3993.123);
      Character character0 = new Character('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = 'k';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'M');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', '6', 'k'}, charArray0);
      assertArrayEquals(new char[] {'M', '6', '6', 'k'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      ArrayUtils.shift(byteArray0, (int) (byte) (-79));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-79), (byte)0, (byte) (-79), (byte) (-79), (byte)0, (byte) (-79), (byte) (-79)}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = '*';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '*');
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', '*'}, charArray0);
      assertArrayEquals(new char[] {'*', 'w', '*'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-79);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)872;
      shortArray0[3] = (short) (byte) (-79);
      ArrayUtils.shift(shortArray0, 2107715432, (-52), (-52));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-79), (short) (-1), (short)872, (short) (-79)}, shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = 0.7;
      doubleArray0[3] = (double) (-52);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) 2107715432;
      doubleArray0[6] = 100.0;
      doubleArray0[7] = (double) (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 119.0, 0.7, (-52.0), (-1.0), 2.107715432E9, 100.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (-1142L), (-1430));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '!';
      charArray0[2] = '_';
      charArray0[3] = ' ';
      charArray0[4] = 'L';
      charArray0[5] = ' ';
      charArray0[6] = 'D';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'m', '!', '_', ' ', 'L', ' ', 'D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.swap((long[]) null, 4044, 4044, 2);
      ArrayUtils.swap(shortArray0, 0, 2, (-122));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)9;
      ArrayUtils.swap(byteArray0, (int) (short)0, 0, 97);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)57, (byte)62, (byte)116, (byte)112, (byte)9}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte)116);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      Short short0 = new Short((short)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)6;
      intArray0[1] = (int) (short)6;
      intArray0[2] = (int) (short)6;
      intArray0[3] = (int) (short)6;
      intArray0[2] = (int) (short)6;
      intArray0[5] = 1;
      intArray0[6] = (-1);
      intArray0[7] = (int) (short)6;
      ArrayUtils.shift(intArray0, (-2089), 6, 1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1, 6, 6, 6, 6, 0, (-1), 6}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)51;
      ArrayUtils.shift(byteArray0, 6);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte)118, (byte)85, (byte)32, (byte)49}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Short short0 = new Short((short)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)6;
      intArray0[1] = (int) (short)6;
      intArray0[2] = (int) (short)6;
      intArray0[3] = (int) (short)6;
      intArray0[2] = (int) (short)6;
      intArray0[5] = 1;
      intArray0[6] = (-1);
      intArray0[7] = (int) (short)6;
      ArrayUtils.shift(intArray0, (-2089), 6, 1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1, 6, 6, 6, 6, 0, (-1), 6}, intArray0);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (short)6;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {6.0, 6.0, (-1.0), 6.0, 1.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) byte0, '/');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      Object object0 = ArrayUtils.get(objectArray0, 326, (Object) null);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) byte0;
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0);
      assertEquals((-1), int0);
      assertEquals(8, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte byte0 = (byte)39;
      Byte byte1 = new Byte((byte)39);
      assertEquals((byte)39, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)39, (byte)39, (byte)39, (byte)39, (byte)39}, byteArray1);
      assertNotNull(byteArray1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-126));
      assertNull(intArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean1 = ArrayUtils.contains(byteArray1, (byte) (-70));
      assertFalse(boolean1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)39, (byte)39, (byte)39, (byte)39, (byte)39}, byteArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'p';
      charArray0[3] = '\"';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      Double double0 = new Double((-748.2808011843));
      assertEquals((-748.2808011843), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-1178.9192032);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray1, (int) 53);
      assertFalse(boolean0);
      assertEquals(1, doubleArray1.length);
      
      Double double1 = new Double(449.78);
      assertEquals(449.78, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) double0, 2);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray1.length);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)53;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)53;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean1);
      assertEquals(2, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)53, (byte)53}, byteArray1);
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-232);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-232)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-232), (short) (-1)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-122));
      assertEquals((-1), int1);
      assertEquals(7, byteArray0.length);
      assertTrue(int1 == int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[12];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 7;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(12, intArray0.length);
      assertEquals(24, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = ArrayUtils.insert((int) (byte)0, intArray2, intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 619;
      longArray0[1] = (long) (byte)78;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 7;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 7;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 7, 6);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {619L, 78L, 0L, 0L, 7L, 0L, 0L, 7L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, 1644);
      assertEquals(6, byteArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)89);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 637;
      intArray0[1] = 637;
      intArray0[2] = 637;
      intArray0[3] = 637;
      intArray0[4] = 637;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1133);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {637, 637, 637, 637, 637}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 637;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 637, 266);
      assertEquals(2, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {637L, 0L}, longArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)9;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)2, (byte)9}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)2);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)2, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)9}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)15;
      doubleArray0[1] = (double) (byte)15;
      doubleArray0[2] = (double) (byte)9;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-556.0), Integer.MAX_VALUE, (double) (byte)15);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {15.0, 15.0, 9.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (byte)9);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)2, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)2, (byte)9, (byte)9}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3570);
      shortArray0[1] = (short) (-1);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-3570);
      longArray0[1] = (long) (short) (-3570);
      longArray0[2] = 0L;
      longArray0[3] = (long) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 101);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-3570L), (-3570L), 0L, (-1L)}, longArray0);
      
      Long[] longArray1 = new Long[0];
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'H';
      floatArray0[2] = (-3046.7F);
      floatArray0[3] = (float) 'H';
      floatArray0[4] = (float) 'H';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 5, 72.0F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {72.0F, 72.0F, (-3046.7F), 72.0F, 72.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {72.0F, 72.0F, (-3046.7F), 72.0F, 72.0F, 72.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short)94);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1665));
      assertEquals((-1), int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('5');
      assertEquals('5', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character1);
      assertEquals(1, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(characterArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) 3119L);
      assertEquals(3119.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(485.27494);
      assertEquals(485.27493F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[1]);
      assertEquals(485.27493F, (float)float2, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 3119L);
      assertEquals(3119.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float(1434.2929);
      assertEquals(1434.2928F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) 3119L);
      assertEquals(3119.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {3119.0F, 485.27493F, 485.27493F, 3119.0F, 1434.2928F, 3119.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) floatArray0[2], (-235));
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new float[] {3119.0F, 485.27493F, 485.27493F, 3119.0F, 1434.2928F, 3119.0F}, floatArray1, 0.01F);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.shift(floatArray0, (-1193), 13, (-2342));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1176.5F));
      assertEquals((-1), int1);
      assertEquals(8, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      ArrayUtils.reverse(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = ArrayUtils.insert((-1534), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[4];
      floatArray0[1] = (float) '}';
      charArray0[1] = 'Z';
      charArray0[2] = '\u001A';
      charArray0[3] = '}';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u001A', '}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      float[] floatArray0 = new float[4];
      boolean[] booleanArray0 = new boolean[27];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(27, booleanArray0.length);
      
      ArrayUtils.swap(floatArray0, (-37), 56, (-37));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf(", Length: ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 50.0F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 56;
      longArray0[1] = (long) 56;
      longArray0[2] = (long) 56;
      longArray0[3] = (long) (-37);
      longArray0[4] = (long) 56;
      longArray0[5] = (long) 56;
      longArray0[6] = (long) 56;
      longArray0[7] = (long) (-37);
      longArray0[8] = (long) 56;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {56L, 56L, 56L, (-37L), 56L, 56L, 56L, (-37L), 56L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 64.0;
      doubleArray0[1] = (double) (-1.0F);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 64.0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, (-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)14995;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1489), (int) (short) (-1489));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)14995}, shortArray0);
      
      Short short0 = new Short((short)91);
      assertEquals((short)91, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1489));
      assertEquals((short) (-1489), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = short1;
      shortArray1[2] = (Short) (short)14995;
      shortArray1[3] = (Short) (short)14995;
      shortArray1[4] = short0;
      shortArray1[7] = short1;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[7]);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1489), (short) (-1489), (short)14995, (short)14995, (short)91, (short) (-1489), (short) (-1489), (short) (-1489)}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-1.0F));
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {64.0, (-1.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)91;
      intArray0[1] = (int) (short)shortArray1[2];
      intArray0[2] = (int) (short)shortArray1[7];
      intArray0[3] = (int) (short)shortArray1[7];
      intArray0[4] = (int) (short) (-1489);
      intArray0[5] = (int) (short)shortArray1[0];
      intArray0[6] = (int) (short)91;
      intArray0[7] = (int) (short)shortArray1[2];
      intArray0[8] = (int) (short)14995;
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean2);
      assertEquals(9, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {91, 14995, (-1489), (-1489), (-1489), (-1489), 91, 14995, 14995}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'e';
      charArray0[2] = '`';
      charArray0[3] = 'C';
      charArray0[4] = 'Q';
      charArray0[5] = '7';
      charArray0[6] = 'P';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', 'e', '`', 'C', 'Q', '7', 'P'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1996);
      intArray0[1] = (-1996);
      intArray0[2] = (-1996);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 3597);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray0);
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1996);
      intArray0[1] = (-1996);
      intArray0[2] = (-1996);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 3597);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray0);
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) (-1996));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-59);
      intArray0[2] = 2888;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) (-1.0);
      doubleArray1[4] = (Double) (-1.0);
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) (-1.0);
      doubleArray1[7] = (Double) (-1.0);
      Double[] doubleArray2 = ArrayUtils.insert(7, doubleArray1, doubleArray1);
      assertEquals(16, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-2145635554), (-2145635554), 6);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-2145635554));
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = ArrayUtils.insert((-260), (String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'H';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'a');
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'V', 'H'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-24), 367);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (int) (byte) (-24));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'H'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[1];
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-2145635554), (-2145635554), 6);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-2145635554));
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = ArrayUtils.insert((-260), (String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2145635554);
      longArray0[1] = (long) (-260);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-2145635554L), (-260L)}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-2145635554), (-2145635554), 6);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-2145635554));
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = ArrayUtils.insert((-260), (String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'H';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'P');
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'V', 'H'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-24), 367);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (int) (byte) (-24));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'H'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-208);
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean2);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short) (-208)}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (short) (-208));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-208.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean boolean3 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean3);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new short[] {(short) (-208)}, shortArray0);
      
      ArrayUtils.reverse((Object[]) null, 2, (-750));
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'V';
      charArray2[1] = 'H';
      charArray2[2] = 'P';
      charArray2[3] = 'P';
      charArray2[4] = 'V';
      charArray2[5] = 'P';
      charArray2[6] = 'P';
      charArray2[7] = 'P';
      charArray2[8] = 'H';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(6, charArray0, charArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array";
      stringArray0[0] = "{}";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-1.0F);
      ArrayUtils.shift(doubleArray0, 56);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1.0), 1.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-987);
      shortArray0[1] = (short)348;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-987), (short)348}, shortArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "l.C\"Tx;dR!;[vuB_";
      stringArray0[1] = "m'";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)32;
      byteArray0[4] = (byte) (-38);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-123));
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-123), (byte)32, (byte)0, (byte) (-38)}, byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-38);
      intArray0[2] = (int) (byte) (-123);
      intArray0[3] = (int) (byte) (-123);
      intArray0[4] = (int) (byte) (-123);
      intArray0[5] = (int) (byte) (-123);
      intArray0[6] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 3179.06F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 2, 2, 2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      int int0 = ArrayUtils.indexOf(longArray0, 2L);
      assertEquals(0, int0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean1;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean((String) null);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-88);
      shortArray0[1] = (short) (-88);
      shortArray0[2] = (short) (-88);
      shortArray0[3] = (short) (-88);
      shortArray0[4] = (short) (-88);
      shortArray0[5] = (short) (-88);
      shortArray0[6] = (short) (-88);
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (short) (-88);
      floatArray0[2] = (float) (short) (-88);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-88), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -88, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(159L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap((boolean[]) null, (-2145635569), 923, 923);
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(923, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 923, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3621L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3621L);
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) 3119L;
      doubleArray0[3] = 64.0;
      doubleArray0[4] = (double) (-3621L);
      doubleArray0[5] = (double) 3119L;
      doubleArray0[6] = 79.0;
      doubleArray0[7] = (double) (-3621L);
      doubleArray0[8] = (double) (-3621L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-3621.0), 0.1, 3119.0, 64.0, (-3621.0), 3119.0, 79.0, (-3621.0), (-3621.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = (-1);
      ArrayUtils.swap(booleanArray0, (-2145635554), (-2145635554), (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int int1 = 100;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3621L);
      floatArray0[1] = (float) (-2145635554);
      floatArray0[2] = (float) (-3621L);
      floatArray0[3] = (float) (-3621L);
      floatArray0[4] = Float.NaN;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(100, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-530);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-530);
      floatArray0[1] = 47.3F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) (-530);
      floatArray0[6] = (float) (-530);
      floatArray0[7] = (-1100.947F);
      floatArray0[8] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-530.0F), 47.3F, (-1.0F), 1.0F, (-1.0F), (-530.0F), (-530.0F), (-1100.947F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-530.0F), 47.3F, (-1.0F), 1.0F, (-1.0F), (-530.0F), (-530.0F), (-1100.947F), (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-530.0F), 47.3F, (-1.0F), 1.0F, (-1.0F), (-530.0F), (-530.0F), (-1100.947F), (-1.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-530.0F));
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-530.0)}, doubleArray0, 0.01);
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, 47.3F);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-530.0F), (-1.0F), 1.0F, (-1.0F), (-530.0F), (-530.0F), (-1100.947F), (-1.0F), 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-530.0F), 47.3F, (-1.0F), 1.0F, (-1.0F), (-530.0F), (-530.0F), (-1100.947F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-530.0F), 47.3F, (-1.0F), 1.0F, (-1.0F), (-530.0F), (-530.0F), (-1100.947F), (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      long[] longArray0 = new long[14];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      longArray0[7] = (long) 76;
      longArray0[7] = (long) Integer.MAX_VALUE;
      intArray0[2] = 0;
      ArrayUtils.swap((long[]) null, 76, 4044, 0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      Long[] longArray2 = new Long[2];
      longArray2[0] = (Long) 2147483647L;
      longArray2[1] = (Long) 2147483647L;
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = ArrayUtils.get(longArray2, 2171, long0);
      assertEquals(0L, (long)long1);
      assertEquals(2, longArray2.length);
      assertNotNull(long1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) long1, 2171);
      assertEquals((-1), int0);
      assertEquals(2, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5791;
      intArray0[1] = 54;
      Short short0 = new Short((short)30536);
      assertEquals((short)30536, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)30536}, shortArray1);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-80);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)37);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-21), (byte)37, (byte) (-49), (byte) (-1), (byte)72, (byte)8, (byte) (-80), (byte)37}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-21), (byte)37, (byte) (-49), (byte) (-1), (byte)72, (byte)8, (byte) (-80)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(389L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '@';
      charArray0[3] = '@';
      charArray0[4] = '!';
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      charArray0[5] = '@';
      charArray0[6] = '+';
      charArray0[7] = '!';
      charArray0[8] = '+';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'!', '@', '@', '!', '@', '+', '!', '+', '!'}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '@');
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'!', '@', '@', '!', '@', '+', '!', '+', '!', '@'}, charArray1);
      assertArrayEquals(new char[] {'!', '@', '@', '!', '@', '+', '!', '+', '!'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      Character character0 = Character.valueOf('5');
      assertEquals('5', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) character0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.add(intArray0, 37);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {37}, intArray0);
      assertArrayEquals(new int[] {37, 37}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((byte[]) null, 37, 0);
      ArrayUtils.swap((Object[]) null, (-1), (-1), 0);
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(57L);
      assertEquals(57L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2696L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {57L}, longArray1);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) long0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)4);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      Double double0 = new Double((-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0F));
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2003.5962312666);
      assertEquals(2003.5962312666, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      Double double3 = new Double(0.0F);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      doubleArray0[2] = double3;
      doubleArray0[3] = double2;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double2;
      doubleArray0[7] = doubleArray0[1];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 12);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1707L);
      longArray0[1] = (long) 12;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-1707L), 12L}, longArray0);
      assertArrayEquals(new long[] {(-1707L), 12L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(floatArray0, 12, 980, 980);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1276.1847132157175;
      doubleArray1[1] = (double) 12L;
      doubleArray1[2] = (double) doubleArray0[4];
      doubleArray1[3] = (double) 980;
      doubleArray1[5] = (double) doubleArray0[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (-1707L), 12, (double) doubleArray0[6]);
      assertEquals(5, int0);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1276.1847132157175, 12.0, (-1.0), 980.0, 0.0, (-1.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 2003.5962312666, (-1.0), (-1.0), 2003.5962312666, (-1.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)99);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1064.73F);
      floatArray0[1] = (-326.6927F);
      floatArray0[2] = (-4960.26F);
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 1727.3226F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {(-1064.73F), (-326.6927F), (-4960.26F), Float.NaN, 1727.3226F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-4960.26F), 120);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-4960.26F), (-230));
      assertEquals((-1), int1);
      assertEquals(7, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-1064.73F), (-326.6927F), (-4960.26F), Float.NaN, 1727.3226F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, (-1549), (-1549));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Character[] characterArray0 = new Character[7];
      char char0 = '8';
      Character character0 = Character.valueOf('8');
      assertEquals('8', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('8', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('W');
      assertEquals('W', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('d');
      assertEquals('d', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('8');
      assertEquals('8', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char0);
      assertEquals('8', (char)character5);
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('d');
      assertEquals('d', (char)character6);
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = '4';
      charArray0[5] = ']';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '&');
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {']', ']', ']', ']', '4', ']'}, charArray0);
      assertArrayEquals(new char[] {']', ']', ']', ']', '4', ']'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      ArrayUtils.swap((byte[]) null, (-1), 1427);
      int int0 = ArrayUtils.lastIndexOf(intArray1, 0, 970);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('l', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('v');
      assertEquals('v', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('v');
      assertEquals('v', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertEquals('l', (char)character4);
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('E');
      assertEquals('E', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('l');
      assertEquals('l', (char)character6);
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character0));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'l', 'l', 'v', 'v', 'l', 'E', 'l'}, charArray0);
      assertNotNull(charArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = (int) (byte) (-79);
      intArray0[2] = (int) (byte) (-79);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-79), (int) character6);
      assertEquals(3, intArray0.length);
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character0));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {108, (-79), (-79)}, intArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      Short short0 = new Short((short)1823);
      assertEquals((short)1823, (short)short0);
      assertNotNull(short0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short short0 = (short)217;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)217;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 217L;
      ArrayUtils.swap(floatArray0, (-37), (-37), (int) (short)217);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {217.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 217.0F);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {217.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {217L, 0L, 217L, 0L}, longArray1);
      assertArrayEquals(new long[] {217L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)217;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short)11540;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertNotNull(bitSet0);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short)11540;
      shortArray1[1] = (Short) (short)11540;
      shortArray1[2] = (Short) (short)11540;
      shortArray1[3] = (Short) (short)11540;
      shortArray1[4] = (Short) (short)11540;
      shortArray1[5] = (Short) (short)11540;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[2]);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)11540, (short)11540, (short)11540, (short)11540, (short)11540, (short)11540}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3621L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3621L);
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) 3119L;
      doubleArray0[3] = 64.0;
      doubleArray0[4] = (double) (-3621L);
      doubleArray0[5] = (double) 3119L;
      doubleArray0[6] = 79.0;
      doubleArray0[7] = (double) (-3621L);
      doubleArray0[8] = (double) (-3621L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-3621.0), 0.1, 3119.0, 64.0, (-3621.0), 3119.0, 79.0, (-3621.0), (-3621.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[3];
      short short0 = (short)4;
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-2570);
      shortArray0[2] = (short)14995;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)14995, (int) (short)4);
      assertEquals(2, int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short) (-2570), (short)14995}, shortArray0);
      
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = (Short) (short)4;
      shortArray1[1] = (Short) (short)14995;
      Short short1 = new Short((short)951);
      assertEquals((short)951, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[2] = short1;
      shortArray1[3] = (Short) (short) (-2570);
      shortArray1[4] = (Short) (short) (-2570);
      shortArray1[5] = (Short) (short)4;
      shortArray1[6] = (Short) (short)14995;
      Short short2 = new Short((short)32226);
      assertEquals((short)32226, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray1[7] = short2;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, short0);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)4, (short)14995, (short)951, (short) (-2570), (short) (-2570), (short)4, (short)14995, (short)32226}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[3] = 653L;
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1083L));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 653L, 0L}, longArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 653L, (-1), (double) 653L);
      assertEquals(1, doubleArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1259);
      shortArray0[1] = (short) (-2786);
      shortArray0[2] = (short)102;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1427;
      shortArray0[5] = (short) (-9757);
      shortArray0[6] = (short) (-3238);
      shortArray0[7] = (short)33;
      shortArray0[8] = (short) (-88);
      ArrayUtils.shift(shortArray0, (int) (short)1427);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1427, (short) (-9757), (short) (-3238), (short)33, (short) (-88), (short) (-1259), (short) (-2786), (short)102, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 54, 54);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[2];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 93, 93);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)1504, (-985));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotNull(integerArray0);
      
      Integer integer0 = new Integer((-2384));
      assertEquals((-2384), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2384), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object1);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object2);
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, object2, 0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1)}, byteArray0);
      
      long[] longArray0 = new long[2];
      ArrayUtils.shuffle((Object[]) integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 2227L);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 2227L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1003;
      floatArray0[2] = (float) 4437;
      floatArray0[3] = (float) 4437;
      floatArray0[4] = (float) 1003;
      floatArray0[5] = (float) 1;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-888.2F));
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1003.0F, 4437.0F, 4437.0F, 1003.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1003.0F, 4437.0F, 4437.0F, 1003.0F, 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)11540;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 11540.0F, 436);
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {11540.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)102;
      longArray0[1] = (long) (short)102;
      longArray0[2] = (long) (short)102;
      longArray0[3] = (long) 436;
      longArray0[4] = (long) (short)11540;
      longArray0[5] = (long) (short)11540;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {102L, 102L, 102L, 436L, 11540L, 11540L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 436);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {11540.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {11540.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      charArray0[8] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G', (int) (short) (-1259));
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'G';
      intArray0[1] = (int) 'G';
      intArray0[2] = (int) (short) (-1259);
      intArray0[4] = (-1797);
      intArray0[5] = (int) 'G';
      intArray0[6] = (int) 'G';
      intArray0[7] = 2384;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {71, 71, (-1259), 0, (-1797), 71, 71, 2384}, intArray1);
      assertArrayEquals(new int[] {71, 71, (-1259), 0, (-1797), 71, 71, 2384}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 472, (-64));
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {71, 71, (-1259), 0, (-1797), 71, 71, 2384}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {71, 71, (-1259), 0, (-1797), 71, 71, 2384}, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray2);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'G';
      characterArray0[1] = (Character) 'G';
      characterArray0[2] = (Character) 'G';
      characterArray0[3] = (Character) 'G';
      characterArray0[4] = (Character) 'G';
      characterArray0[5] = (Character) 'G';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      ArrayUtils.shift((float[]) null, Integer.MAX_VALUE, 2069393333, (-2794));
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short)1211);
      assertEquals((short)1211, (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) short0, (int) (short)1211);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)1211;
      intArray0[1] = 15;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (int) (short)1211;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1211, 15, (-1), (-1), (-1), (-1), 1211}, intArray0);
      assertArrayEquals(new int[] {1211, 15, (-1), (-1), (-1), (-1), 1211}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Character character0 = new Character('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      charArray0[2] = '1';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'm', (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'N', 'G', '1', 'X', 'X'}, charArray0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1), (short)0, (short)88, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      MockRandom mockRandom0 = new MockRandom((-2147483648L));
      assertNotNull(mockRandom0);
      
      Float float0 = new Float((-1555.0481348));
      assertEquals((-1555.0481F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1555.0481F), (-1555.0481F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short) (-2728));
      assertEquals((short) (-2728), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      
      Long long0 = Long.getLong("69^Kc :AD?&:G=");
      assertNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(1033L);
      assertEquals(1033L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long long3 = new Long((short)0);
      assertEquals(0L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(4, floatArray2.length);
      assertEquals(4, floatArray0.length);
      assertSame(floatArray2, floatArray0);
      assertSame(floatArray0, floatArray2);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      Integer integer0 = new Integer((byte)83);
      assertEquals(83, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(268);
      assertEquals(268, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
      assertNull(intArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-479.257628);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (short) (-942);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)83;
      doubleArray0[5] = (double) 0;
      doubleArray0[7] = (double) (short) (-942);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-479.257628), 1.5, (-942.0), 0.0, 83.0, 0.0, 0.0, (-942.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.swap((long[]) null, 4044, 4044, 2);
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray1, 0, 2);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short) (-589));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 395;
      intArray0[2] = 7;
      int int0 = ArrayUtils.lastIndexOf(intArray0, Integer.MAX_VALUE);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 395, 7}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 395;
      doubleArray0[1] = (double) 395;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) 7;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {395.0, 395.0, 2.147483647E9, 7.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)824;
      shortArray0[1] = (short) (-1025);
      shortArray0[2] = (short)577;
      ArrayUtils.shift(shortArray0, (-1733), 604, (-745));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1025), (short)577, (short)824}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-1025);
      floatArray0[1] = (float) 395;
      floatArray0[2] = (float) 395;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1025.0F), 395.0F, 395.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 7);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1025), (short)577, (short)824}, shortArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short) (-1025));
      assertNull(intArray1);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1475, 395);
      assertEquals((-1), int1);
      assertEquals(3, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short) (-1025), (short)577, (short)824}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1122);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1122, (short) (-1025), (short)577, (short)824}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1025), (short)577, (short)824}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3372);
      intArray0[1] = 3;
      intArray0[2] = 53;
      intArray0[3] = 733;
      int int0 = ArrayUtils.indexOf(intArray0, 733);
      assertEquals(3, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-3372), 3, 53, 733}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 53;
      longArray0[1] = (long) 733;
      longArray0[2] = (long) (-3372);
      longArray0[3] = (long) 53;
      longArray0[4] = (long) 53;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-2147483648L));
      assertEquals((-1), int1);
      assertEquals(5, longArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {53L, 733L, (-3372L), 53L, 53L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-840.7538F), 3179.06F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1039L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1039L));
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1039L)}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2728.810213656;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-840.7538F);
      ArrayUtils.reverse(doubleArray0, (-232), 2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2728.810213656, 0.0, (-840.7537841796875)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-700));
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap((byte[]) null, 1127, 7);
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 189);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {189}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)100);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)100}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      assertEquals((short)6, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Long long0 = Long.getLong("org.apache.commons.lang3.mutable.MutableInt");
      assertNull(long0);
      
      Long long1 = new Long(short0);
      assertEquals(6L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(4913L);
      assertEquals(4913L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long long3 = new Long(2696L);
      assertEquals(2696L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-2147483648L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-45);
      ArrayUtils.swap(byteArray0, 1351, (int) (byte) (-124));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)47, (byte) (-124), (byte) (-67), (byte)0, (byte)10, (byte) (-45)}, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte) (-45));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-45)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 138.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-0.7607178226457485);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 138.0, 0.0, (-1.0), (-0.7607178226457485)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'g', (-760));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotNull(integerArray0);
      
      Integer integer0 = new Integer((-2384));
      assertEquals((-2384), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2384), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object1);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object2);
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, object2, 0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1)}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 4437;
      longArray0[1] = (long) 1;
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1L, 4437L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = ArrayUtils.insert(3810, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 56, 3134);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.insert((int) (byte)78, booleanArray1, booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)78;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, (-2164));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {78.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121}, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3570);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3570)}, shortArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2, "R");
      assertEquals(0, stringArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 1L);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) 1L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 1656L);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 1656L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2145545485);
      intArray0[1] = (-746);
      intArray0[2] = 194;
      intArray0[3] = 0;
      intArray0[4] = 50;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 50);
      assertEquals(5, intArray0.length);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new int[] {(-2145545485), (-746), 194, 0, 50}, intArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 16.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2.0F);
      floatArray0[1] = (-1178.9192F);
      floatArray0[2] = 5957.177F;
      floatArray0[3] = (-2319.7F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-2.0F), (-1178.9192F), 5957.177F, (-2319.7F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)88;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short)0, (short)0, (short)88, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[1];
      Double double0 = new Double((short)866);
      assertEquals(866.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, (int) 866);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Double double1 = new Double(2684.703755);
      assertEquals(2684.703755, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) "gnDw,2Z}B TArND=*fF}", (int) (short)88);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)109);
      assertEquals((-1), int1);
      assertEquals(1, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray3.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short)0}, shortArray3);
      assertNotSame(shortArray0, shortArray2);
      assertSame(shortArray0, shortArray3);
      assertSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotNull(shortArray3);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short) (-1780);
      shortArray0[3] = (short)1427;
      shortArray0[4] = (short) (-918);
      shortArray0[5] = (short) (-1507);
      shortArray0[6] = (short) (-1056);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-918));
      assertEquals(4, int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1136, (short) (-3155), (short) (-1780), (short)1427, (short) (-918), (short) (-1507), (short) (-1056)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)1136, (short) (-3155), (short) (-1780), (short)1427, (short) (-918), (short) (-1507), (short) (-1056)}, shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short) (-3155), (short) (-1780), (short)1427, (short) (-918), (short) (-1507), (short) (-1056)}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-4087L));
      assertEquals((-4087L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(15L);
      assertEquals(15L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((short) (-1056));
      assertEquals((-1056L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((short) (-3155));
      assertEquals((-3155L), (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1L, (-4087L), 15L, (-1056L), (-3155L)}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3621L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3621L);
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) 3119L;
      doubleArray0[3] = 64.0;
      doubleArray0[4] = (double) (-3621L);
      doubleArray0[5] = (double) 3119L;
      doubleArray0[6] = 79.0;
      doubleArray0[7] = (double) (-3621L);
      doubleArray0[8] = (double) (-3621L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-3621.0), 0.1, 3119.0, 64.0, (-3621.0), 3119.0, 79.0, (-3621.0), (-3621.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-2145635554), (-2145635554), (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 79.0;
      doubleArray1[1] = (double) (-2145635554);
      doubleArray1[2] = 0.1;
      doubleArray1[3] = (double) (-3621L);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) (-3621L);
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (-1), 1413);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {79.0, (-2.145635554E9), 0.1, (-3621.0), 0.0, (-3621.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {79.0, (-2.145635554E9), 0.1, (-3621.0), 0.0, (-3621.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      byte byte0 = (byte) (-79);
      Long long0 = new Long((byte) (-79));
      assertEquals((-79L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-127L));
      assertEquals((-127L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long((-127L));
      assertEquals((-127L), (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long1;
      long long3 = 90L;
      Long long4 = new Long(90L);
      assertEquals(90L, (long)long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      
      longArray0[1] = long4;
      longArray0[3] = long1;
      longArray0[4] = long0;
      longArray0[5] = long0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = (-127.0);
      doubleArray0[2] = (double) 'Z';
      doubleArray0[3] = (double) (char)character0;
      doubleArray0[4] = (double) (char)character0;
      doubleArray0[5] = (double) (char)character0;
      doubleArray0[6] = (double) (char)character0;
      doubleArray0[7] = 3.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) character0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, (-127.0), 90.0, 90.0, 90.0, 90.0, 90.0, 3.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-1), 1, (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) character0);
      assertEquals(90L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(754L);
      assertEquals(754L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-932L));
      assertEquals((-932L), (long)long4);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)89;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)64;
      shortArray0[4] = (short) (-17010);
      shortArray0[5] = (short) (-3463);
      shortArray0[6] = (short)240;
      shortArray0[7] = (short)1800;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1800, 3);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)89, (short) (-1), (short)64, (short) (-17010), (short) (-3463), (short)240, (short)1800}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[2] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, (-1), 94, 0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 18);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3621L);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3621L);
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) 3119L;
      doubleArray0[3] = 64.0;
      doubleArray0[4] = (double) (-3621L);
      Character[] characterArray0 = new Character[1];
      char char0 = ':';
      Character character0 = Character.valueOf(':');
      assertEquals(':', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "F");
      assertEquals(":", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-127);
      shortArray0[1] = (short)2103;
      shortArray0[2] = (short) (-127);
      shortArray0[3] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short)2103, (int) char0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127), (short)2103, (short) (-127), (short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-127);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-3621L), (-123));
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {(-127.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3621L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-3621L), 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Short short0 = new Short((short) (-312));
      assertEquals((short) (-312), (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-312);
      intArray0[1] = (-834);
      intArray0[2] = (int) (short) (-312);
      intArray0[3] = (int) (short) (-312);
      intArray0[4] = (int) (short) (-312);
      intArray0[5] = 1;
      ArrayUtils.shift(intArray0, 512);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-312), 1, (-312), (-834), (-312), (-312)}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-312);
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean2);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short) (-312)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '3';
      charArray0[2] = '&';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'x');
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'x', '3', '&'}, charArray0);
      assertArrayEquals(new char[] {'3', '&'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '&';
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short) (-312);
      doubleArray0[3] = (double) '3';
      doubleArray0[4] = (double) (-312);
      doubleArray0[5] = (double) 'x';
      doubleArray0[6] = (double) (-834);
      doubleArray0[7] = (double) 'x';
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-312);
      doubleArray1[1] = (double) (-312);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-312.0), (-312.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {38.0, 1.0, 51.0, 120.0, (-834.0), 120.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {38.0, 1.0, (-312.0), 51.0, (-312.0), 120.0, (-834.0), 120.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '\\';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'O';
      charArray0[5] = '\\';
      ArrayUtils.reverse(charArray0, 789, 97);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'O', '\\', 'I', 'I', 'O', '\\'}, charArray0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '\\';
      doubleArray1[1] = (double) 'I';
      doubleArray1[2] = (double) (-4056);
      doubleArray1[3] = (double) '\\';
      doubleArray1[4] = (double) '\\';
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {92.0, 73.0, (-4056.0), 92.0, 92.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) 'O';
      intArray0[2] = (int) 'I';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (-127L);
      floatArray0[2] = (float) (byte) (-79);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[0] = 2199.59F;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)109, (int) (byte)109);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-123), (byte)127, (byte)1}, byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-43);
      shortArray0[1] = (short) (byte) (-43);
      shortArray0[2] = (short) (byte) (-123);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)175);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-43), (short) (-43), (short) (-123)}, shortArray0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-43);
      byteArray1[1] = (byte) (-43);
      ArrayUtils.reverse(byteArray1, (int) (byte)127, (-2987));
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-43)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[3] = (-280L);
      longArray0[4] = (-280L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-280L), (-280L), 0L}, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (-280L);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      Short short0 = new Short((short)217);
      assertEquals((short)217, (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)217, 4352, 1348.8667);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 4352;
      longArray0[1] = (long) (short)217;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {4352L, 217L}, longArray0);
      assertNotNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1692), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1692, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      floatArray0[1] = (float) (short) (-127);
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) (short) (-127);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2145999554);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {(-127.0F), (-127.0F), 90.0F, (-127.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-127);
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) 2145999554;
      longArray0[3] = (long) (short) (-127);
      longArray0[4] = (long) (char)character0;
      longArray0[5] = (long) (char)character0;
      longArray0[6] = (long) 2145999554;
      longArray0[7] = (long) 'Z';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray1);
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1797));
      assertEquals((-1797), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)88;
      Integer integer0 = new Integer((short)88);
      assertEquals(88, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2266);
      assertEquals(2266, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1898));
      assertEquals((-1898), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(2784);
      assertEquals(2784, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-2578));
      assertEquals((-2578), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer((-54));
      assertEquals((-54), (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer4;
      integerArray0[1] = integer5;
      integerArray0[2] = integer3;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((-1856));
      assertEquals((-1856), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("java.lang.Short", 2042);
      assertEquals(2042, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-54));
      assertEquals((-54), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2505);
      assertEquals(2505, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(46);
      assertEquals(46, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(46);
      assertEquals(46, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(102);
      assertEquals(102, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 10;
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1), 2082);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte) (-100);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)119, (byte)1, (byte)119, (byte)119, (byte) (-100)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)4);
      assertEquals((short)4, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short)1;
      Short short2 = new Short((short)1);
      assertEquals((short)1, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (Short) short1);
      assertEquals(1, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotNull(integerArray0);
      
      Integer integer0 = new Integer((-2384));
      assertEquals((-2384), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2384), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object1);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object2);
      assertNotNull(object2);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1003;
      intArray2[1] = (-2073);
      intArray2[2] = 1003;
      intArray2[3] = 4437;
      intArray2[4] = 4437;
      intArray2[5] = 91;
      intArray2[6] = (-2384);
      intArray2[7] = 1003;
      intArray2[8] = 1;
      int[] intArray3 = ArrayUtils.addAll(intArray2, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray3.length);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertArrayEquals(new int[] {1003, (-2073), 1003, 4437, 4437, 91, (-2384), 1003, 1}, intArray3);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1003, (-2073), 1003, 4437, 4437, 91, (-2384), 1003, 1}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotNull(intArray3);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)1089);
      assertEquals((short)1089, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-443));
      assertEquals((short) (-443), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1470);
      assertEquals((short)1470, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[2]);
      assertEquals((short)1470, (short)short3);
      assertEquals(7, shortArray0.length);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-840));
      assertEquals((short) (-840), (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[3]);
      assertEquals((short)1470, (short)short5);
      assertEquals(7, shortArray0.length);
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short3));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) (-4794));
      assertEquals((short) (-4794), (short)short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-38));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((byte) (-38));
      assertEquals((short) (-38), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1497));
      assertEquals((short) (-1497), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1497));
      assertEquals((short) (-1497), (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short2;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short0;
      shortArray0[5] = short1;
      short short3 = (short)32;
      Short short4 = new Short((short)32);
      assertEquals((short)32, (short)short4);
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[6] = short4;
      shortArray0[7] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) short3;
      longArray0[1] = (long) (short)shortArray0[0];
      longArray0[2] = (long) (short)shortArray0[1];
      longArray0[3] = (long) (short) (-1497);
      longArray0[4] = 2147483647L;
      longArray0[5] = (long) (short)shortArray0[5];
      longArray0[6] = 1583L;
      longArray0[7] = (long) (short)shortArray0[2];
      longArray0[8] = (long) (short)shortArray0[2];
      int int0 = ArrayUtils.indexOf(longArray0, (long) shortArray0[0]);
      assertEquals(1, int0);
      assertEquals(9, longArray0.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new long[] {32L, (-1497L), (-1497L), (-1497L), 2147483647L, (-1497L), 1583L, (-1497L), (-1497L)}, longArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      Character character0 = new Character(']');
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G', 1655);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'G'}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 'G';
      doubleArray0[2] = (double) 4437;
      doubleArray0[3] = (double) 4437;
      doubleArray0[4] = (double) 1655;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1003, (double) 1);
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1.0, 71.0, 4437.0, 4437.0, 1655.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1135.0F);
      floatArray0[1] = (float) 4437;
      floatArray0[2] = (float) 1003;
      floatArray0[3] = 870.4315F;
      floatArray0[4] = (float) 'G';
      floatArray0[5] = (float) ']';
      floatArray0[6] = (float) 1655;
      floatArray0[7] = (float) 1003;
      floatArray0[8] = (float) 4437;
      int int2 = ArrayUtils.lastIndexOf(floatArray0, (-1135.0F), (-1651));
      assertEquals((-1), int2);
      assertEquals(9, floatArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new float[] {(-1135.0F), 4437.0F, 1003.0F, 870.4315F, 71.0F, 93.0F, 1655.0F, 1003.0F, 4437.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      floatArray0[0] = (-1.0F);
      ArrayUtils.shift(doubleArray0, 56);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '8';
      charArray0[2] = 'y';
      charArray0[3] = '5';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'{', '8', 'y', '5'}, charArray0);
      assertArrayEquals(new char[] {'{', '8', 'y', '5'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1666);
      shortArray0[1] = (short) (-1232);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2921), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2921, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Character character0 = new Character('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      charArray0[2] = '1';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'm', (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'N', 'G', '1', 'X', 'X'}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)21;
      shortArray0[3] = (short) (byte)21;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1701), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1701, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 14);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1992.27298303578, (-1701), 738.38586);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 14, (-2549));
      assertEquals((-1), int1);
      assertEquals(2, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      Character[] characterArray0 = new Character[6];
      char char0 = 'n';
      Character character0 = new Character('n');
      assertEquals('n', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('n');
      assertEquals('n', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('n', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('x');
      assertEquals('x', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertEquals('n', (char)character4);
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('n');
      assertEquals('n', (char)character5);
      assertTrue(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character1));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (int) char0, (-2145422765));
      assertEquals(0, characterArray1.length);
      assertEquals(6, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1398;
      shortArray0[1] = (short) (-382);
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (-1971);
      shortArray0[4] = (short)122;
      shortArray0[5] = (short) (-90);
      shortArray0[6] = (short) (-485);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2922;
      shortArray0[1] = (short) (-2689);
      shortArray0[2] = (short) (-383);
      shortArray0[3] = (short)331;
      shortArray0[4] = (short)321;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(482, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 482, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((-765), (char[]) null, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      Double double0 = new Double((-748.2808011843));
      assertEquals((-748.2808011843), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-1178.9192032);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray1, (int) 53);
      assertFalse(boolean0);
      assertEquals(1, doubleArray1.length);
      
      Double double1 = new Double(449.78);
      assertEquals(449.78, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) double0, (int) (byte)53);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray1.length);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      short[] shortArray0 = new short[2];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)53;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)1, 11);
      assertEquals((-1), int1);
      assertEquals(5, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-123), (byte)108, (byte)53, (byte)53}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte)0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte) (-62);
      ArrayUtils.reverse(byteArray1, (int) (byte) (-123), 2144795933);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-62), (byte)108}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-123);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, 88);
      assertEquals(3, int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-62), (byte)127, (byte)2, (byte)7, (byte) (-43), (byte)1, (byte) (-123)}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)32;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short)175;
      shortArray0[5] = (short)13107;
      shortArray0[6] = (short) (byte)127;
      shortArray0[7] = (short) (byte)2;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte)2);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)1, (short)32, (short)2, (short)175, (short)13107, (short)127, (short)2}, shortArray0);
      
      ArrayUtils.reverse(byteArray0, (int) (byte)32, 1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-62), (byte)127, (byte)2, (byte)7, (byte) (-43), (byte)1, (byte) (-123)}, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)7;
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (short)175;
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (byte)7;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(6, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {7, 1, 2, 175, 1, 7}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      ArrayUtils.shift(floatArray0, (-1193), (-1), (-2342));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)32);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-22)}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((-4.79F));
      assertEquals((-4.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-4", mutableInt0.toString());
      assertEquals((short) (-4), mutableInt0.shortValue());
      assertEquals((-4), mutableInt0.intValue());
      assertEquals((-4L), mutableInt0.longValue());
      assertEquals((-4.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-4), mutableInt0.byteValue());
      assertEquals((-4), (int)mutableInt0.toInteger());
      assertEquals((-4), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)32);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(32, mutableInt1.intValue());
      assertEquals(32, (int)mutableInt1.getValue());
      assertEquals((byte)32, mutableInt1.byteValue());
      assertEquals(32, (int)mutableInt1.toInteger());
      assertEquals(32.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(32.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("32", mutableInt1.toString());
      assertEquals((short)32, mutableInt1.shortValue());
      assertEquals(32L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      
      mutableInt0.decrement();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals((-5.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-5.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-5", mutableInt0.toString());
      assertEquals((-5), mutableInt0.intValue());
      assertEquals((short) (-5), mutableInt0.shortValue());
      assertEquals((-5L), mutableInt0.longValue());
      assertEquals((-5), (int)mutableInt0.getValue());
      assertEquals((byte) (-5), mutableInt0.byteValue());
      assertEquals((-5), (int)mutableInt0.toInteger());
      assertNotSame(mutableInt0, mutableInt1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      mutableIntArray0[0] = mutableInt1;
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt1;
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$+rDOr";
      stringArray0[1] = "$+rDOr";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string0 = ArrayUtils.toString((Object) "$+rDOr");
      assertEquals("$+rDOr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (-1L);
      ArrayUtils.shift(longArray0, (-530), (-1), (-1));
      assertEquals(22, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-530);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-530.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2820.9), (-2148));
      assertEquals(1, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-530.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-2148);
      intArray0[2] = (-2148);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-530);
      intArray0[6] = (-1);
      intArray0[7] = (-530);
      ArrayUtils.shift(intArray0, (-530), (-1), (-1));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-2148), (-2148), (-1), (-1), (-530), (-1), (-530), 0}, intArray0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (-2148));
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object[] objectArray1 = ArrayUtils.removeElements(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'O';
      charArray0[2] = '>';
      charArray0[3] = 'c';
      charArray0[4] = 'p';
      charArray0[5] = 'y';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'O');
      assertTrue(boolean1);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'>', 'O', '>', 'c', 'p', 'y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      assertEquals((short)6, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Long long0 = Long.getLong("org.apache.commons.lang3.mutable.MutableInt");
      assertNull(long0);
      
      Long long1 = new Long(short0);
      assertEquals(6L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(2696L);
      assertEquals(2696L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) (short)6;
      intArray0[2] = (int) short0;
      intArray0[3] = 1;
      intArray0[4] = (int) short0;
      intArray0[5] = 1;
      intArray0[6] = (int) short0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-1528L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 530.220604636842);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {530.220604636842}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '(';
      charArray0[2] = '1';
      charArray0[3] = '1';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 1;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) '(';
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = 8;
      intArray0[6] = (int) '1';
      ArrayUtils.reverse(intArray0, (-1686), 1384);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {49, 8, (-1), 40, (-1), 1, (-1)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 49;
      floatArray0[2] = (float) 'X';
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 49.0F, 88.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {49.0F, 88.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {49, 8, (-1), 40, (-1), 1, (-1)}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean2);
      assertEquals(7, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {49, 8, (-1), 40, (-1), 1, (-1)}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(integerArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = 'a';
      charArray0[2] = 'C';
      charArray0[3] = 'N';
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertArrayEquals(new int[] {32}, intArray0);
      assertSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short) (-589);
      floatArray0[2] = (float) (short) (-589);
      floatArray0[3] = (float) (short) (-589);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = 2885.179F;
      floatArray0[6] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (short)0);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-589.0F), (-589.0F), (-589.0F), 0.0F, 2885.179F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-589.0F), (-589.0F), (-589.0F), 0.0F, 2885.179F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) (-589.0F);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (-2145836625));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1680.5881548258674;
      doubleArray0[1] = (double) (short)1636;
      doubleArray0[2] = (double) (short)1791;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)1791);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1680.5881548258674, 1636.0, 1791.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1680.5881548258674, 1636.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 377.73);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1680.5881548258674, 1636.0, 1791.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)89;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)89, (byte)89, (byte)89, (byte)89, (byte)89, (byte)89}, byteArray0);
      
      char char0 = '!';
      MockRandom mockRandom0 = new MockRandom((byte)89);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2363.09388512;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3093.007;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 14, 14);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 4, 975.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {2363.09388512, (-1.0), 3093.007, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1L), (-303));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray1, true);
      assertFalse(boolean1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 14, 1230);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      org.evosuite.runtime.Random.setNextRandom(2);
      Class<Short[]> class0 = Short[].class;
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null, class0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      boolean boolean0 = ArrayUtils.contains(charArray0, '.');
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 2, (short)608);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1174;
      shortArray0[1] = (short)12;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1174, (short)12}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Short short0 = new Short((short)12);
      assertEquals((short)12, (short)short0);
      assertNotNull(short0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)12;
      floatArray0[1] = (float) 2145999554;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2145999554);
      assertEquals(2, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {12.0F, 2.14599962E9F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      floatArray0[1] = (float) (short) (-127);
      floatArray0[2] = (float) (char)character0;
      floatArray0[3] = (float) (short) (-127);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2145999554);
      assertEquals(4, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {(-127.0F), (-127.0F), 90.0F, (-127.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-127);
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) 2145999554;
      longArray0[3] = (long) (short) (-127);
      longArray0[4] = (long) (char)character0;
      longArray0[5] = (long) (char)character0;
      longArray0[6] = (long) 2145999554;
      longArray0[7] = (long) 'Z';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray1);
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((Integer[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) character0, (int) (short) (-127));
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2145999554;
      longArray0[1] = (long) (short)217;
      longArray0[2] = (long) (short)217;
      longArray0[3] = (long) (short)217;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2145999554L, 217L, 217L, 217L}, longArray0);
      assertArrayEquals(new long[] {2145999554L, 217L, 217L, 217L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(shortArray0, 2145999554);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Integer integer0 = new Integer((short)217);
      assertEquals(217, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("Array and element cannot both be null", (-952));
      assertEquals((-952), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2092419964);
      assertEquals(2092419964, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1809));
      assertEquals((-1809), (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-1021));
      assertEquals((-1021), (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(748);
      assertEquals(748, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer6 = new Integer(763);
      assertEquals(763, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      
      integerArray0[0] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {763}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('R');
      assertEquals('R', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('M');
      assertEquals('M', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('D');
      assertEquals('D', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      Character character4 = Character.valueOf('M');
      assertEquals('M', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertTrue(boolean0);
      assertEquals(1, characterArray0.length);
      
      Character character5 = new Character('M');
      assertEquals('M', (char)character5);
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      
      Character character6 = Character.valueOf('D');
      assertEquals('D', (char)character6);
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertNotNull(character6);
      
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (int) 'M', (int) 'M');
      assertEquals(1, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[20];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)96;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 'R';
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (-1494.2673290026285);
      doubleArray1[6] = 2734.7408741653885;
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-1494.2673290026285));
      assertEquals(8, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1494.2673290026285), 96.0, 0.0, 82.0, 0.0, 0.0, (-1494.2673290026285), 2734.7408741653885}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {96.0, 0.0, 82.0, 0.0, 0.0, (-1494.2673290026285), 2734.7408741653885}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray1, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      Character character0 = new Character('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) character0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.add(intArray0, 37);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {37}, intArray0);
      assertArrayEquals(new int[] {37, 37}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-62), 1845);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean(false);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean((String) null);
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      Character character0 = new Character('Q');
      assertEquals('Q', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) null);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(bitSet0);
      
      boolean boolean8 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean8);
      assertTrue(boolean8 == boolean0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'Q';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {81}, intArray0);
      assertArrayEquals(new int[] {81}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 321;
      intArray0[2] = 78;
      intArray0[3] = 2146575273;
      intArray0[4] = 12;
      intArray0[5] = (-2146845275);
      intArray0[0] = 795;
      ArrayUtils.shift(intArray0, (-2146845275));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {321, 78, 2146575273, 12, (-2146845275), 0, 795}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      intArray0[3] = 78;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)105;
      ArrayUtils.swap(byteArray0, 2007, (int) (byte)105, 78);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)41, (byte)112, (byte)11, (byte)14, (byte) (-102), (byte)105}, byteArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {321, 78, 2146575273, 78, (-2146845275), 0, 795}, intArray0);
      assertArrayEquals(new int[] {321, 78, 2146575273, 78, (-2146845275), 0, 795}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146575273, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 138.0;
      long[] longArray0 = new long[7];
      longArray0[0] = (-79L);
      longArray0[1] = (-2528L);
      longArray0[2] = 1003L;
      longArray0[3] = (-1367L);
      longArray0[4] = 0L;
      longArray0[5] = (-1179L);
      longArray0[6] = 2992L;
      ArrayUtils.swap(longArray0, 6, 6, 6);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-79L), (-2528L), 1003L, (-1367L), 0L, (-1179L), 2992L}, longArray0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-79L), (-2528L), 1003L, (-1367L), 0L, (-1179L), 2992L}, longArray0);
      assertArrayEquals(new long[] {0L, (-79L), (-2528L), 1003L, (-1367L), 0L, (-1179L), 2992L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5647;
      shortArray0[1] = (short)40;
      shortArray0[2] = (short) (-3581);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)5647, (short)40, (short) (-3581)}, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-72.09381));
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5441.27220567, 0.0, 138.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 138.0, 0.0, 0.0, 0.0, (-72.09381)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4664);
      shortArray0[1] = (short) (-4664);
      shortArray0[2] = (short)1;
      ArrayUtils.swap(shortArray0, (-124), (int) (short) (-4664), (int) (short) (-4664));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4664), (short) (-4664), (short)1}, shortArray0);
      
      Character character0 = new Character('$');
      assertEquals('$', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4536.3F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short) (-4664);
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = 0.1;
      doubleArray0[5] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.1);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-4536.2998046875), 0.0, (-4664.0), 1.0, 0.1, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (int) character0, 4617, (-1));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 64.0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap((boolean[]) null, (-915), (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1485.0330484334;
      doubleArray0[6] = (-2977.4648363365927);
      ArrayUtils.shift(doubleArray0, (-382), (-382), 1397);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1485.0330484334, (-2977.4648363365927)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1397;
      intArray0[1] = (-382);
      intArray0[2] = 1397;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1397, (-382), 1397}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {1397, (-382), 1397}, intArray0);
      
      ArrayUtils.reverse(doubleArray0, 1397, 1397);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1485.0330484334, (-2977.4648363365927)}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 819);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1397, (-382), 1397}, intArray0);
      assertArrayEquals(new int[] {1397, (-382), 1397}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      MockRandom mockRandom0 = new MockRandom((byte)89);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)54, (byte)2, (byte) (-1), (byte)2, (byte)2, (byte)89}, byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)89;
      floatArray0[1] = (float) (-382);
      floatArray0[2] = (float) (byte)54;
      floatArray0[3] = (float) (byte)89;
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) 1397;
      floatArray0[6] = (float) 1397;
      floatArray0[7] = (float) (byte)89;
      floatArray0[8] = (float) (-382);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {89.0F, (-382.0F), 54.0F, 89.0F, 2.0F, 1397.0F, 1397.0F, 89.0F, (-382.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {89.0F, (-382.0F), 54.0F, 89.0F, 2.0F, 1397.0F, 1397.0F, 89.0F, (-382.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[17] = (long) (-1);
      longArray0[1] = 3119L;
      longArray0[2] = (long) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4);
      shortArray0[1] = (short)253;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-469));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-4), (short)253}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4), (short)253}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(22, longArray0.length);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-4);
      boolean boolean1 = ArrayUtils.isEmpty(longArray1);
      assertFalse(boolean1);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-4L)}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((short) (-4));
      assertEquals((-4), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3035));
      assertEquals((-3035), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-4), (int)integer2);
      assertEquals(8, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(16);
      assertEquals(16, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.getInteger("Ai<j\"/[nw.\"HO+u2uC", integer3);
      assertEquals(16, (int)integer4);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((short)253);
      assertEquals(253, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(71);
      assertEquals(71, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      
      longArray0[3] = (long) (int)integer6;
      Integer integer7 = new Integer((int) integerArray0[1]);
      assertEquals((-3035), (int)integer7);
      assertEquals(8, integerArray0.length);
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer((-1));
      assertEquals((-1), (int)integer8);
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer3));
      assertNotNull(integer8);
      
      integerArray0[7] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1054);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-4), (-3035), (-4), 16, 253, 1054, (-3035), (-1)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      short[] shortArray0 = new short[6];
      doubleArray0[0] = (double) (short)2134;
      shortArray0[1] = (short) (-765);
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      shortArray0[1] = (short) (-3);
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 948.737803);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {948.737803, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short) (-3);
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[7], (-1504));
      assertEquals(0, int0);
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short) (-3);
      longArray0[4] = (long) (-1504);
      longArray0[5] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short) (-3));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, (-3L), (-1504L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-749);
      intArray0[1] = (int) (short) (-765);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-749), (-765), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '(';
      charArray0[2] = '1';
      charArray0[3] = '1';
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      
      ArrayUtils.shift(charArray0, (-34), 368, (-34));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'1', '1', 'X', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      Double double0 = new Double((-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1453.69995005));
      assertEquals((-1453.69995005), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = 1824L;
      longArray0[2] = (long) 828;
      longArray0[3] = (long) 828;
      int int0 = ArrayUtils.indexOf(longArray0, (-1840L), 828);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1824L, 828L, 828L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 409L);
      assertEquals(4, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {(-1L), 1824L, 828L, 828L}, longArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 1824L, (-1));
      assertEquals((-1), int1);
      assertEquals(9, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 'q';
      charArray0[2] = '[';
      charArray0[3] = '(';
      charArray0[4] = '[';
      charArray0[5] = '=';
      charArray0[6] = 'B';
      charArray0[7] = 'V';
      charArray0[8] = 'H';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', (-299));
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'#', 'q', '[', '(', '[', '=', 'B', 'V', 'H'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      charArray0[8] = 'G';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G', (int) (short) (-1259));
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'G';
      intArray0[1] = (int) 'G';
      intArray0[2] = (int) (short) (-1259);
      intArray0[3] = (int) 'G';
      intArray0[4] = (-1797);
      intArray0[5] = (int) 'G';
      intArray0[6] = (int) 'G';
      intArray0[7] = 2384;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {71, 71, (-1259), 71, (-1797), 71, 71, 2384}, intArray1);
      assertArrayEquals(new int[] {71, 71, (-1259), 71, (-1797), 71, 71, 2384}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 472, (-64));
      assertEquals(8, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {71, 71, (-1259), 71, (-1797), 71, 71, 2384}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {71, 71, (-1259), 71, (-1797), 71, 71, 2384}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray2);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 5, (-2145426670));
      assertEquals((-1), int1);
      assertEquals(8, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {2199.59F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'G';
      characterArray0[1] = (Character) 'G';
      characterArray0[2] = (Character) 'G';
      characterArray0[3] = (Character) 'G';
      characterArray0[4] = (Character) 'G';
      characterArray0[5] = (Character) 'G';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(6, characterArray1.length);
      assertEquals(6, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Short short0 = new Short((short) (-1259));
      assertEquals((short) (-1259), (short)short0);
      assertNotNull(short0);
      
      Double double0 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((short) (-1259));
      assertEquals((-1259.0), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = double1;
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      doubleArray0[4] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, (int)  (-1259));
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) 12;
      longArray0[2] = (long) 12;
      longArray0[3] = (long) (short) (-1259);
      longArray0[4] = (-1707L);
      longArray0[5] = (long) (short) (-1259);
      longArray0[6] = (long) (short) (-1259);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {12L, 12L, 12L, (-1259L), (-1707L), (-1259L), (-1259L)}, longArray0);
      assertArrayEquals(new long[] {12L, 12L, 12L, (-1259L), (-1707L), (-1259L), (-1259L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(floatArray0, 980, 2249, 3);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2199.59F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-2805.3), 12, (double) doubleArray0[8]);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 12;
      intArray0[1] = (-1);
      intArray0[2] = 17;
      intArray0[3] = (-1);
      intArray0[4] = (-2145426670);
      intArray0[5] = 581;
      intArray0[6] = 3;
      intArray0[7] = 2249;
      intArray0[8] = (int) (short) (-1259);
      int int1 = ArrayUtils.indexOf(intArray0, 2751);
      assertEquals((-1), int1);
      assertEquals(9, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {12, (-1), 17, (-1), (-2145426670), 581, 3, 2249, (-1259)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-2145635554), (-2145635554), 6);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-2145635554));
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = ArrayUtils.insert((-260), (String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      ArrayUtils.reverse((double[]) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'o';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'x');
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'+', 'o'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2145635554);
      ArrayUtils.swap(floatArray0, 980, (-2145635554), 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2.14563558E9F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1588.0598948771), (-1041), (-1588.0598948771));
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      floatArray0[1] = (float) (short) (-127);
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) (short) (-127);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = (char) character0;
      charArray0[2] = 'r';
      charArray0[3] = (char) character0;
      charArray0[4] = (char) character0;
      charArray0[5] = '~';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'r');
      assertEquals(5, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', '~'}, charArray1);
      assertArrayEquals(new char[] {'Z', 'Z', 'r', 'Z', 'Z', '~'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      ArrayUtils.swap(byteArray0, 1, (int) (byte)7);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)7}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-98);
      ArrayUtils.swap(byteArray0, (int) (byte) (-42), 2147136872, (int) (byte) (-2));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)26, (byte)0, (byte)0, (byte)124, (byte) (-2), (byte)50, (byte) (-98)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[8] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray1, 2, (int) (short) (-753));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true, (-875));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Short[] shortArray2 = new Short[2];
      Short short0 = new Short((short)322);
      assertEquals((short)322, (short)short0);
      assertNotNull(short0);
      
      shortArray2[0] = short0;
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      longArray0[0] = (long) (short)short1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 1L);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) 1L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'E', 636);
      assertEquals((-1), int0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)47;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)47);
      assertEquals(1, int1);
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)47}, byteArray0);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 214.38564738839082;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 214.38564738839082, (-136.115671368));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 214.38564738839082}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 352.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 214.38564738839082}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 214.38564738839082}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1463.1274F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[2] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int2 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(2, int2);
      assertEquals(7, booleanArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(14, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (byte) (-1);
      longArray0[7] = (long) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2632.56456637918);
      doubleArray0[1] = 214.38564738839082;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 214.38564738839082, (-136.115671368));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2632.56456637918), 214.38564738839082}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 352.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2632.56456637918), 214.38564738839082}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2632.56456637918), 214.38564738839082}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1463.1274F);
      assertEquals(2, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int2 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(2, int2);
      assertEquals(7, booleanArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(14, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (byte) (-1);
      longArray0[7] = (long) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      float[] floatArray0 = new float[1];
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)16, byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)16;
      longArray0[1] = (long) (byte)16;
      longArray0[2] = (long) (byte)16;
      longArray0[3] = (long) (byte)16;
      longArray0[4] = (long) (byte)16;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)16;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      Double double0 = new Double((-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0F));
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2003.5962312666);
      assertEquals(2003.5962312666, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-1281.1179200092656));
      assertEquals((-1281.1179200092656), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double3;
      doubleArray0[1] = double1;
      Double double4 = new Double(0.0F);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[2] = double4;
      doubleArray0[3] = double2;
      doubleArray0[4] = double3;
      doubleArray0[5] = double0;
      doubleArray0[6] = double3;
      doubleArray0[7] = double2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 12);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1707L);
      longArray0[1] = (long) 12;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-1707L), 12L}, longArray0);
      assertArrayEquals(new long[] {(-1707L), 12L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(floatArray0, 12, 980, 980);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1279.452;
      doubleArray1[1] = (double) 12L;
      doubleArray1[2] = (double) doubleArray0[4];
      doubleArray1[3] = (double) 980;
      doubleArray1[4] = (-1281.1179200092656);
      doubleArray1[5] = (double) doubleArray0[4];
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (-1707L), 12, (double) doubleArray0[6]);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1279.452, 12.0, (-1281.1179200092656), 980.0, (-1281.1179200092656), (-1281.1179200092656)}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '&';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '&');
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'['}, charArray1);
      assertArrayEquals(new char[] {'[', '&'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      int int0 = 8192;
      Integer integer0 = new Integer(8192);
      assertEquals(8192, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2132));
      assertEquals((-2132), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(8192);
      assertEquals(8192, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[15];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Character character0 = new Character('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'G';
      charArray0[2] = '1';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'm', (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'G', '1', 'X', 'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '(';
      charArray0[2] = '1';
      charArray0[3] = '1';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'G', (int) character0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'X', '(', '1', '1'}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) 'X';
      intArray0[2] = (int) 'G';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {40, 88, 71}, intArray0);
      assertArrayEquals(new int[] {40, 88, 71}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray1, 5, 37);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {40, 88, 71}, intArray0);
      assertArrayEquals(new int[] {40, 88, 71}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 51.0F;
      floatArray0[1] = (float) '1';
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 37;
      floatArray0[4] = (float) 5;
      floatArray0[5] = (float) 'X';
      floatArray0[6] = (float) '1';
      floatArray0[7] = (float) 'X';
      int int1 = ArrayUtils.indexOf(floatArray0, 0.0F, 37);
      assertEquals((-1), int1);
      assertEquals(8, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {51.0F, 49.0F, 2.0F, 37.0F, 5.0F, 88.0F, 49.0F, 88.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Double[] doubleArray0 = ArrayUtils.insert((-1293), (Double[]) null, (Double[]) null);
      assertNull(doubleArray0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2172.598876723642);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '@';
      charArray0[2] = '!';
      charArray0[3] = '@';
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'@', '!', '@', '+'}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '@');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'@', '!', '@', '+'}, charArray0);
      assertArrayEquals(new char[] {'@', '!', '@', '+', '@'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-0.7607178226457485);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 0.0, 0.0, (-1.0), (-0.7607178226457485)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(4, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 795);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift(intArray0, 4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)14);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)109, (byte) (-48), (byte)1}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)114);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)109, (byte) (-48), (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)114, (byte)109, (byte) (-48), (byte)1}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1285));
      assertEquals((-1), int1);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[3] = 653L;
      longArray0[4] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1083L));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 653L, 0L}, longArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 653L, (-1), (double) 653L);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 64;
      intArray0[8] = (-1);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 50);
      assertEquals((-1), int1);
      assertEquals(9, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1), 0, 0, (-1), 0, 0, 0, 64, (-1)}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)116;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)116);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)116, (byte)10, (byte)5, (byte) (-1), (byte) (-18), (byte)52, (byte)116}, byteArray1);
      assertArrayEquals(new byte[] {(byte)10, (byte)5, (byte) (-1), (byte) (-18), (byte)52, (byte)116}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(154L);
      assertEquals(154L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(154L);
      assertEquals(154L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1574L);
      assertEquals(1574L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2289L));
      assertEquals((-2289L), (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(154L);
      assertEquals(154L, (long)long4);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(1574L);
      assertEquals(1574L, (long)long5);
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {154L, 154L, 1574L, (-2289L), 154L, 1574L}, longArray1);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) 0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {154L, 154L, 1574L, (-2289L), 154L, 1574L}, longArray1);
      assertNotNull(bitSet0);
      
      Short short0 = new Short((short) (-1052));
      assertEquals((short) (-1052), (short)short0);
      assertNotNull(short0);
      
      AbstractMap.SimpleImmutableEntry<Short, Long> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Short, Long>(short0, longArray0[2]);
      assertEquals(6, longArray0.length);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Short, Long> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Short, Long>(abstractMap_SimpleImmutableEntry0);
      assertEquals(6, longArray0.length);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Short, Long>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Short, Long>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      Long long6 = new Long((-3582L));
      assertEquals((-3582L), (long)long6);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      
      Long long7 = abstractMap_SimpleEntry0.setValue(long6);
      assertEquals(1574L, (long)long7);
      assertEquals(6, longArray0.length);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long2));
      assertNotNull(long7);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Short, Long>[] abstractMap_SimpleEntryArray1 = ArrayUtils.removeAll(abstractMap_SimpleEntryArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, abstractMap_SimpleEntryArray0.length);
      assertEquals(1, abstractMap_SimpleEntryArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotNull(abstractMap_SimpleEntryArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = '\'';
      charArray0[2] = '<';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'x', '\'', '<'}, charArray0);
      assertArrayEquals(new char[] {'x', '\'', '<', 'x', '\'', '<'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short short0 = (short)217;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)217;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      ArrayUtils.swap(floatArray0, (-37), (-37), (-2585));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {217L, 0L, 217L, 0L}, longArray1);
      assertArrayEquals(new long[] {217L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2585);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      int[] intArray0 = new int[2];
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0.0F, (-414), 2375.72852229);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3570);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)90;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)121}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3570), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)121}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1211.742219);
      doubleArray0[1] = (double) (byte) (-79);
      doubleArray0[2] = (double) (byte) (-79);
      doubleArray0[3] = 1410.71908491035;
      doubleArray0[4] = (double) (byte) (-79);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-79.0), Integer.MAX_VALUE);
      assertEquals(5, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-1211.742219), (-79.0), (-79.0), 1410.71908491035, (-79.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Character character0 = Character.valueOf('[');
      assertEquals('[', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertEquals(5, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new double[] {(-1211.742219), (-79.0), (-79.0), 1410.71908491035, (-79.0)}, doubleArray0, 0.01);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((byte) (-79));
      assertEquals((short) (-79), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-79), (short)short1);
      assertEquals(9, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      try { 
        Short.valueOf("]", (int) shortArray0[1]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -79 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)108;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)59);
      assertEquals(9, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)40, (byte)43, (byte) (-103), (byte) (-63), (byte)59, (byte)33, (byte)59, (byte)2, (byte)108}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)43, (byte) (-103), (byte) (-63), (byte)33, (byte)2, (byte)108}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[5] = 0.0;
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 5441.27220567;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 5441.27220567, 0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      Double double0 = new Double((-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0F));
      assertEquals((-1.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2003.5962312666);
      assertEquals(2003.5962312666, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-1281.1179200092656));
      assertEquals((-1281.1179200092656), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double3;
      doubleArray0[1] = double1;
      Double double4 = new Double(0.0F);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[2] = double4;
      doubleArray0[3] = double2;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2199.59F;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)16, byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)16;
      shortArray0[1] = (short) (byte)16;
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short) (byte)16;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (byte)16;
      shortArray0[6] = (short) (byte)16;
      shortArray0[7] = (short) (byte)16;
      ArrayUtils.shift(shortArray0, (-1), (int) (short) (-1), (int) (short) (-1));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)16, (short)16, (short)16, (short)16, (short) (-1), (short)16, (short)16, (short)16}, shortArray0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (byte)59);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotNull(byteArray2);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), shortArray1, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Short short0 = new Short((short) (-1259));
      assertEquals((short) (-1259), (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = ArrayUtils.insert((-4110), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.contains((int[]) null, 637);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)37;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)69;
      Object[] objectArray1 = ArrayUtils.toArray(objectArray0);
      assertEquals(1, objectArray1.length);
      assertEquals(1, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)69;
      longArray0[1] = (long) (byte)37;
      longArray0[2] = (long) (byte)69;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 796L, 637);
      assertEquals(3, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {69L, 37L, 69L}, longArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 91;
      intArray0[1] = (-2146796013);
      intArray0[2] = 32;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1491;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {91, (-2146796013), 32, 1, 2, 1491}, intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1491;
      longArray0[1] = (long) 1;
      longArray0[2] = 749L;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) (-2146796013);
      longArray0[5] = (long) (-2146796013);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {1491L, 1L, 749L, 2L, (-2146796013L), (-2146796013L)}, longArray0);
      assertArrayEquals(new long[] {1491L, 1L, 749L, 2L, (-2146796013L), (-2146796013L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5164.8529;
      doubleArray0[1] = (-1133.0);
      doubleArray0[2] = 352.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1052.8480537762753);
      doubleArray0[5] = (-285.6);
      boolean boolean0 = true;
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean("");
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean6));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1211.742219), 91);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {5164.8529, (-1133.0), 352.0, 0.0, (-1052.8480537762753), (-285.6), 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) boolean4);
      assertEquals(3, int1);
      assertEquals(7, booleanArray0.length);
      assertFalse(int1 == int0);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean7));
      assertFalse(boolean4.equals((Object)boolean6));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 91;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      boolean boolean8 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean8);
      assertEquals(4, intArray0.length);
      assertTrue(boolean8 == boolean0);
      assertArrayEquals(new int[] {91, (-1), (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 120;
      intArray0[1] = (-3240);
      intArray0[2] = 20;
      intArray0[3] = 993;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {120, (-3240), 20, 993}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2146;
      shortArray0[2] = (short)37;
      Short short0 = new Short((short) (-592));
      assertEquals((short) (-592), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)37;
      ArrayUtils.shift(intArray0, 66);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {20, 993, 120, (-3240)}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)2146, (short)0, (short)37, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)2146);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false}, booleanArray0));
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean2);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new short[] {(short)2146, (short)0, (short)37, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 1L);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) 1L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(floatArray0, 8, 121, 0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4664);
      shortArray0[1] = (short) (-4664);
      shortArray0[2] = (short)1;
      ArrayUtils.swap(shortArray0, (-124), (int) (short) (-4664), (int) (short) (-4664));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4664), (short) (-4664), (short)1}, shortArray0);
      
      Character character0 = new Character('$');
      assertEquals('$', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      characterArray0[7] = character0;
      characterArray0[8] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$', '$', '$', '$'}, charArray0);
      assertNotNull(charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 52;
      longArray0[1] = (long) '$';
      longArray0[2] = (-2543L);
      longArray0[3] = (long) (char)character0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1155), (long) (-1155));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1155, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Long long0 = new Long(2696L);
      assertEquals(2696L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2696L, 2696L}, longArray1);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 3748L);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '-';
      int int0 = ArrayUtils.indexOf(charArray0, '-');
      assertEquals(1, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'6', '-'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (long)longArray0[1];
      doubleArray0[3] = (double) 1;
      ArrayUtils.reverse(doubleArray0, 2160, 1652);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {54.0, 1.0, 2696.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0, (-126), (double) (-126));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      char char0 = 'x';
      Character character0 = new Character('x');
      assertEquals('x', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('x');
      assertEquals('x', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[2] = character1;
      characterArray0[3] = character1;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-126), (-126));
      assertEquals(4, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 88;
      intArray0[1] = (int) (char)character0;
      intArray0[2] = (-126);
      intArray0[3] = (int) (char)character0;
      intArray0[4] = (-126);
      intArray0[5] = (int) char0;
      intArray0[6] = 120;
      intArray0[7] = 8192;
      intArray0[8] = (int) (char)character0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) character0, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2732);
      Character character0 = new Character('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('t');
      assertEquals('t', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('x');
      assertEquals('x', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('x');
      assertEquals('x', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      Character character4 = Character.valueOf('t');
      assertEquals('t', (char)character4);
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      characterArray0[1] = character4;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-2732), (int) character1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 3179.06F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      Character character0 = Character.valueOf('}');
      assertEquals('}', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) floatArray1, (Object) null);
      assertFalse(boolean1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 3179.06F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = '}';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean2);
      assertEquals(6, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'R', 'R', '}', 'R', 'R', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-57);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte) (-57);
      byteArray1[3] = (byte) (-57);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-123);
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)70, 1);
      assertEquals((-1), int0);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-123), (byte) (-57), (byte) (-57), (byte)1, (byte) (-123)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (byte) (-62));
      assertFalse(boolean0);
      
      ArrayUtils.reverse(byteArray0, 2985, 193);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)70, (byte) (-123), (byte)32, (byte) (-57), (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)83, 98);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)831);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(byteArray0, (int) (short)831, 98);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-64);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)113);
      assertEquals(0, int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-56), (byte) (-64)}, byteArray0);
      
      int int1 = ArrayUtils.indexOf((char[]) null, 'V', (-3317));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) (byte) (-56);
      intArray0[2] = (int) (byte)113;
      intArray0[3] = (int) '+';
      intArray0[4] = (int) (byte) (-64);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1157);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1157.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1157);
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte) (-123);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)5);
      assertEquals(5, int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-15), (byte)7, (byte) (-81), (byte)105, (byte)5, (byte) (-12), (byte)103, (byte) (-123)}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      int int1 = ArrayUtils.indexOf(charArray0, 'V', 97);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'+'}, charArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-123);
      intArray1[1] = (int) (byte)5;
      intArray1[2] = (-1157);
      intArray1[3] = (int) (byte)103;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 103, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-52);
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) doubleArray0[1]);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '|';
      charArray0[2] = '\\';
      charArray0[3] = 'X';
      charArray0[4] = 'a';
      charArray0[5] = 'n';
      charArray0[6] = 'i';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\'', '|', '\\', 'X', 'a', 'n', 'i'}, charArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-18));
      assertEquals((-1), int0);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray1, (-3993.123), (double) doubleArray0[2]);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 1.0}, doubleArray1, 0.01);
      
      ArrayUtils.reverse((Object[]) doubleArray0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2143);
      shortArray0[1] = (short) (-2143);
      shortArray0[2] = (short) (-3245);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-3245);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1);
      assertEquals(5, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-2143), (short) (-2143), (short) (-3245), (short) (-1), (short) (-3245)}, shortArray0);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.toPrimitive((Object) (short) (-1));
      assertEquals((short) (-1), object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short) (-3245);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (short) (-3245);
      ArrayUtils.reverse(objectArray0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-3245);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 102;
      longArray0[4] = (-2543L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2543L));
      assertEquals(4, int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-3245L), (-1L), 0L, 102L, (-2543L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short)11540;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'm');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)11540;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short)11540;
      objectArray0[3] = (Object) (short)11540;
      objectArray0[4] = (Object) (short)11540;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (short)11540;
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, (Object) "bk:\"@rrQ");
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)102;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (int) (short)11540;
      int int1 = ArrayUtils.indexOf(intArray0, (-128), 0);
      assertEquals((-1), int1);
      assertEquals(3, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {102, Integer.MAX_VALUE, 11540}, intArray0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 11540;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {11540}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2363.09388512;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3093.007;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 2363.09388512;
      objectArray0[1] = (Object) 2363.09388512;
      objectArray0[2] = (Object) 2363.09388512;
      objectArray0[3] = (Object) (-1.0);
      Object object0 = ArrayUtils.get(objectArray0, 206);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) 3093.007;
      objectArray0[6] = (Object) 2363.09388512;
      objectArray0[7] = (Object) 2363.09388512;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0], 116);
      assertEquals(8, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      doubleArray0[4] = (double) 206;
      intArray0[1] = 206;
      intArray0[2] = 116;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 206, 116}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray1);
      assertFalse(boolean1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 206, 116}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 404.35F;
      floatArray0[1] = 2446.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 5917.0615F);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {404.35F, 2446.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 4095;
      ArrayUtils.shift(intArray0, 4095, 4, (-1));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 4095}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 2446.0F;
      doubleArray0[4] = (double) 404.35F;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {404.3500061035156, 2446.0, 4.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(6, int1);
      assertEquals(7, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[17] = (long) (-1);
      longArray0[1] = 3119L;
      longArray0[2] = (long) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4);
      shortArray0[1] = (short)253;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-469));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-4), (short)253}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4), (short)253}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(22, longArray0.length);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short) (-4);
      boolean boolean1 = ArrayUtils.isEmpty(longArray1);
      assertFalse(boolean1);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-4L)}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((short) (-4));
      assertEquals((-4), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3035));
      assertEquals((-3035), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals((-4), (int)integer2);
      assertEquals(8, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(16);
      assertEquals(16, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.getInteger("Ai<j\"/[nw.\"HO+u2uC", integer3);
      assertEquals(16, (int)integer4);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((short)253);
      assertEquals(253, (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(71);
      assertEquals(71, (int)integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer((int) integerArray0[1]);
      assertEquals((-3035), (int)integer7);
      assertEquals(8, integerArray0.length);
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer((-1));
      assertEquals((-1), (int)integer8);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertNotNull(integer8);
      
      integerArray0[7] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1054);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-4), (-3035), (-4), 16, 253, 71, (-3035), (-1)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = (-1);
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.toInteger();
      assertEquals((-1), (int)integer1);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals((-1), (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      mutableInt0.subtract(int0);
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer2));
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      int int1 = 4;
      Integer integer4 = new Integer(4);
      assertEquals(4, (int)integer4);
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertEquals((-1), (int)integer5);
      assertFalse(int0 == int1);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int1));
      assertTrue(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int1);
      assertEquals(4, (int)integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(int1 == int0);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), 4, (-1), 4}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.swap(intArray0, int0, int0, 1982292598);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      assertFalse(int0 == int1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), 4, (-1), 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, (-19), (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)88;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)69, (byte)88}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)69, (byte)88}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer((-2384));
      assertEquals((-2384), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2384), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object1);
      assertNotNull(object1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-24));
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)69, (byte)88}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)69, (byte)88}, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1039.931;
      doubleArray0[6] = (-2977.4648363365927);
      ArrayUtils.shift(doubleArray0, (-382), (-382), 1397);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1039.931, (-2977.4648363365927), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-382);
      intArray0[1] = (-382);
      intArray0[2] = 1397;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      
      ArrayUtils.reverse(doubleArray0, (-382), (-382));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1039.931, (-2977.4648363365927), 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 801);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)27);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 321;
      intArray0[2] = 78;
      intArray0[3] = 2146575273;
      intArray0[4] = 12;
      intArray0[5] = (-2146845275);
      intArray0[0] = 795;
      ArrayUtils.shift(intArray0, (-2146845275));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {321, 78, 2146575273, 12, (-2146845275), 0, 795}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 78;
      doubleArray0[2] = (double) 2146575273;
      doubleArray0[3] = (double) 12;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 78.0, 2.146575273E9, 12.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1828;
      shortArray0[1] = (short) (-49);
      shortArray0[2] = (short) (-419);
      shortArray0[3] = (short) (-419);
      shortArray0[4] = (short) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 2146575273);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14657523E9F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'M';
      charArray0[2] = 'h';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'M', 795);
      assertEquals(1, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'^', 'M', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3093.007;
      Float float0 = new Float(442.24094869469);
      assertEquals(442.24094F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2749.2083F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {442.24094F, 442.24094F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-1996));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2363.09388512;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3093.007;
      Float float0 = new Float(442.24094869469);
      assertEquals(442.24094F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2749.2083F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {442.24094F, 442.24094F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (-1996));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short) (-765);
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      shortArray0[1] = (short) (-3);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2134, (short) (-3), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 948.737803);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {948.737803, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)2134;
      objectArray0[2] = (Object) (short)2134;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) (short)2134;
      objectArray0[5] = (Object) (short)2134;
      objectArray0[6] = (Object) (short) (-3);
      objectArray0[7] = (Object) (short)2134;
      objectArray0[8] = (Object) 0.0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[7], (-1504));
      assertEquals(1, int0);
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)2134;
      longArray0[3] = (long) (short) (-3);
      longArray0[4] = (long) (-1504);
      longArray0[5] = (long) (short)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short) (-3));
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 2134L, (-3L), (-1504L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-749);
      intArray0[1] = (int) (short) (-765);
      intArray0[2] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-749), (-765), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-667);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)11540, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short) (-667)}, shortArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(99, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1211.742219);
      doubleArray0[1] = (double) (byte) (-79);
      doubleArray0[2] = (double) (byte) (-79);
      doubleArray0[3] = 1410.71908491035;
      doubleArray0[4] = (double) (byte) (-79);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-79.0), Integer.MAX_VALUE);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-1211.742219), (-79.0), (-79.0), 1410.71908491035, (-79.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 2837.50838118);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1211.742219), (-79.0), (-79.0), 1410.71908491035, (-79.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 2.14748365E9F, 2.14748365E9F, 0.0F, 2.14748365E9F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short) (-667);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)11540, (short) (-667)}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'm');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-667);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short)11540;
      objectArray0[3] = (Object) (short) (-667);
      objectArray0[4] = (Object) (short) (-667);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (short)11540;
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, (Object) "bk:\"@rrQ");
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, 2, (-2655));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 14);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1992.27298303578, (-1701), 738.38586);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 14, (-2549));
      assertEquals((-1), int1);
      assertEquals(2, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray1, true);
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[6];
      char char0 = 'n';
      Character character0 = new Character('n');
      assertEquals('n', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('n');
      assertEquals('n', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('n', (char)character2);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('x');
      assertEquals('x', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertEquals('n', (char)character4);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('n');
      assertEquals('n', (char)character5);
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character4));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (int) char0, (-2145422765));
      assertEquals(6, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (short) (-127);
      floatArray0[2] = (float) 'Z';
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[2] = 'z';
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (short) (-127);
      longArray0[2] = 409L;
      longArray0[3] = (long) (short) (-127);
      longArray0[4] = (long) 'Z';
      int int0 = ArrayUtils.indexOf(longArray0, 1397L, (int) (short) (-127));
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-127L), 409L, (-127L), 90L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 352.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1473.854683841489);
      doubleArray0[4] = (-688.02126636);
      doubleArray0[5] = (-0.7607178226457485);
      doubleArray0[6] = (-689.823047196);
      ArrayUtils.shift(doubleArray0, 0, (-139), (-503));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {352.0, (-1.0), (-1.0), (-1473.854683841489), (-688.02126636), (-0.7607178226457485), (-689.823047196)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 352.0, (-1.0));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {352.0, (-1.0), (-1.0), (-1473.854683841489), (-688.02126636), (-0.7607178226457485), (-689.823047196)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-503));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -503, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-2145635554), (-2145635554), 6);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-2145635554));
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 512;
      intArray0[1] = 512;
      ArrayUtils.shift(intArray0, 102);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {512, 512}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift((boolean[]) null, (-55));
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '3';
      charArray0[2] = '}';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = 'x';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '^');
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'&', '3', '}', '3', '3', '3', 'x'}, charArray1);
      assertArrayEquals(new char[] {'&', '3', '}', '3', '3', '3', 'x'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals("0", mutableInt1.toString());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertNotNull(mutableInt1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, 2);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.shift(floatArray0, (-1193), 13, (-2342));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)1, (int) (byte)1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (byte) (-123));
      assertFalse(boolean0);
      
      ArrayUtils.reverse((byte[]) null, (int) (byte)1, 8);
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      ArrayUtils.shift(floatArray0, (-1193), 13, (-2342));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)32);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt(0.0F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)32);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(32L, mutableInt1.longValue());
      assertEquals(32, mutableInt1.intValue());
      assertEquals(32.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)32, mutableInt1.shortValue());
      assertEquals("32", mutableInt1.toString());
      assertEquals(32, (int)mutableInt1.getValue());
      assertEquals((byte)32, mutableInt1.byteValue());
      assertEquals(32.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(32, (int)mutableInt1.toInteger());
      assertNotNull(mutableInt1);
      
      mutableInt0.decrement();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertNotSame(mutableInt0, mutableInt1);
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      mutableIntArray0[0] = mutableInt1;
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt1;
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1), (short)0, (short)88, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 295L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (byte)53;
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (short) (-1);
      longArray0[5] = (long) (byte)53;
      longArray0[6] = (long) (short)88;
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) (short)88;
      ArrayUtils.reverse(longArray0, (int) (short) (-1), 2263);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {88L, 0L, 88L, 53L, (-1L), (-1L), 53L, 0L, 295L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147483647L);
      assertFalse(boolean0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {88L, 0L, 88L, 53L, (-1L), (-1L), 53L, 0L, 295L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-643));
      assertEquals((short) (-643), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      Short short1 = new Short((short) shortArray0[1]);
      assertEquals((short) (-643), (short)short1);
      assertEquals(7, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123)}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123)}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      
      ArrayUtils.reverse((byte[]) null);
      double[] doubleArray1 = ArrayUtils.removeElement((double[]) null, (double) 0);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1157);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1157.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1157);
      longArray0[1] = (long) (-1157);
      longArray0[2] = (long) (-1157);
      longArray0[3] = (long) (-1157);
      longArray0[4] = (-986L);
      longArray0[5] = (long) (-1157);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1157L), (-1157L), (-1157L), (-1157L), (-986L), (-1157L)}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-1157));
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1157.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1157);
      intArray0[1] = (-1157);
      intArray0[2] = (-1157);
      int int0 = ArrayUtils.indexOf(intArray0, (-1157), 102);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1157), (-1157), (-1157)}, intArray0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1157L), (-1157L), (-1157L), (-986L), (-1157L), (-1157L)}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (int) (byte)47;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      ArrayUtils.shift(charArray0, 1, (-586), 8192);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'V'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1157);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1157.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1157);
      longArray0[1] = (long) (-1157);
      longArray0[2] = (long) (-1157);
      longArray0[3] = (long) (-1157);
      longArray0[4] = (-986L);
      longArray0[5] = (long) (-1157);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1157L), (-1157L), (-1157L), (-1157L), (-986L), (-1157L)}, longArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-1157));
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1157.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1157);
      intArray0[1] = (-1157);
      intArray0[2] = (-1157);
      int int0 = ArrayUtils.indexOf(intArray0, 4379, 102);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1157), (-1157), (-1157)}, intArray0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1157L), (-1157L), (-1157L), (-986L), (-1157L), (-1157L)}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1), (short)0, (short)88, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)53);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray1, (-420), (-521), 2120971504);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1211.742219);
      doubleArray0[1] = (double) (byte) (-79);
      doubleArray0[2] = (double) (byte) (-79);
      doubleArray0[3] = 1410.71908491035;
      doubleArray0[4] = (double) (byte) (-79);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-79.0), Integer.MAX_VALUE);
      assertEquals(5, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-1211.742219), (-79.0), (-79.0), 1410.71908491035, (-79.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 2837.50838118);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1211.742219), (-79.0), (-79.0), 1410.71908491035, (-79.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'm');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-79.0);
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, object0);
      assertEquals(2, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5789;
      intArray0[1] = 54;
      ArrayUtils.reverse(intArray0, 16, 1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {5789, 54}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 54;
      doubleArray0[4] = (double) 54;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 16.0, 16.0, 54.0, 54.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1978.1F;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 16;
      floatArray0[7] = (-1178.9192F);
      floatArray0[8] = (float) 1;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 54);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1978.1F, 1.0F, 0.0F, 16.0F, 16.0F, 1.0F, 16.0F, (-1178.9192F), 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1978.1F, 1.0F, 0.0F, 16.0F, 16.0F, 1.0F, 16.0F, (-1178.9192F), 1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 16.0;
      doubleArray1[1] = (Double) 1.0;
      doubleArray1[2] = (Double) 1.0;
      doubleArray1[3] = (Double) 16.0;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(2, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {5789, 54}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean2);
      assertEquals(2, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {5789, 54}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 54, 54);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[2];
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Character character0 = Character.valueOf('!');
      assertEquals('!', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('!');
      assertEquals('!', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('!');
      assertEquals('!', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = Character.valueOf('z');
      assertEquals('z', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      Character character4 = Character.valueOf('~');
      assertEquals('~', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      Character character5 = new Character('r');
      assertEquals('r', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character2;
      characterArray0[1] = character4;
      Character character6 = new Character('!');
      assertEquals('!', (char)character6);
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character0));
      assertNotNull(character6);
      
      Character character7 = ArrayUtils.get(characterArray0, 104, character6);
      assertEquals('!', (char)character7);
      assertEquals(2, characterArray0.length);
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character7.equals((Object)character5));
      assertTrue(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)character2));
      assertNotNull(character7);
      
      MutableInt mutableInt0 = new MutableInt(0.0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals(0, (int)integer0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.get((Object[]) characterArray0, (-2146247329), (Object) integer0);
      assertEquals(0, object0);
      assertEquals(2, characterArray0.length);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertNotNull(object0);
      
      Character character8 = Character.valueOf('q');
      assertEquals('q', (char)character8);
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character2));
      assertNotNull(character8);
      
      Integer integer1 = new Integer((-2146247329));
      assertEquals((-2146247329), (int)integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) integer1, 49);
      assertEquals(2, characterArray0.length);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int0 = bitSet0.previousClearBit(47);
      assertEquals(47, int0);
      assertEquals(2, characterArray0.length);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 5789;
      intArray0[1] = 54;
      ArrayUtils.reverse(intArray0, 16, 1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {5789, 54}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 54;
      doubleArray0[4] = (double) 54;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 16.0, 16.0, 54.0, 54.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1978.1F;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 16;
      floatArray0[7] = (-1178.9192F);
      floatArray0[8] = (float) 1;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 54);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1978.1F, 1.0F, 0.0F, 16.0F, 16.0F, 1.0F, 16.0F, (-1178.9192F), 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1978.1F, 1.0F, 0.0F, 16.0F, 16.0F, 1.0F, 16.0F, (-1178.9192F), 1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 16.0;
      doubleArray1[1] = (Double) 1.0;
      doubleArray1[2] = (Double) 1.0;
      doubleArray1[3] = (Double) 16.0;
      doubleArray1[4] = (Double) 16.0;
      doubleArray1[5] = (Double) 54.0;
      doubleArray1[6] = (Double) 16.0;
      doubleArray1[7] = (Double) 16.0;
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray1);
      assertTrue(boolean1);
      assertEquals(8, doubleArray1.length);
      assertTrue(boolean1 == boolean0);
      
      Double[] doubleArray2 = new Double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (Double) 1.0;
      doubleArray2[1] = (Double) 16.0;
      Double[] doubleArray3 = ArrayUtils.toArray(doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)70;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)84, (int) (byte)70);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-27), (byte) (-55), (byte)70}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-111);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1259));
      assertEquals((short) (-1259), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1259)}, shortArray1);
      assertNotNull(shortArray1);
      
      Character[] characterArray0 = new Character[8];
      char char0 = '@';
      Character character0 = Character.valueOf('@');
      assertEquals('@', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('@');
      assertEquals('@', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('@');
      assertEquals('@', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertEquals('@', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('n');
      assertEquals('n', (char)character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertEquals('@', (char)character5);
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character1));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('/');
      assertEquals('/', (char)character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('k');
      assertEquals('k', (char)character7);
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character1));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) 2199.59F;
      doubleArray0[2] = (double) (short)shortArray0[0];
      doubleArray0[3] = (double) (short) (-1259);
      doubleArray0[4] = (double) char0;
      doubleArray0[5] = (double) (char)character6;
      doubleArray0[6] = (double) (char)character6;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1259.0));
      assertEquals(2, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {64.0, 2199.590087890625, (-1259.0), (-1259.0), 64.0, 47.0, 47.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) char0;
      intArray0[1] = (int) '@';
      intArray0[2] = (-1);
      intArray0[3] = (int) (char)character1;
      intArray0[4] = (int) '/';
      intArray0[5] = 2;
      intArray0[6] = 2;
      int int1 = ArrayUtils.indexOf(intArray0, (-1091));
      assertEquals((-1), int1);
      assertEquals(7, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {64, 64, (-1), 64, 47, 2, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 0);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 315.57373780349246;
      doubleArray0[4] = 315.57373780349246;
      doubleArray0[5] = (double) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 1515, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1515, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = 2199.59F;
      Short short0 = new Short((short) (-1259));
      assertEquals((short) (-1259), (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-1259);
      longArray0[1] = (long) (short) (-1259);
      ArrayUtils.shift(longArray0, 91);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1259L), (-1259L)}, longArray0);
      
      Integer integer0 = new Integer((-5717));
      assertEquals((-5717), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 6;
      Integer integer1 = new Integer(6);
      assertEquals(6, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-258));
      assertEquals((-258), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.getInteger("hxm0*CP6 6b21-", integer2);
      assertEquals((-258), (int)integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer((-1434));
      assertEquals((-1434), (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer((-258));
      assertEquals((-258), (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer3;
      integerArray0[1] = integer1;
      integerArray0[2] = integer3;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      Integer integer6 = new Integer((-5717));
      assertEquals((-5717), (int)integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      
      integerArray0[5] = integer6;
      integerArray0[6] = integer4;
      integerArray0[7] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertArrayEquals(new int[] {(-258), 6, (-258), (-5717), 6, (-5717), (-1434), 6}, intArray0);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)112);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1259L);
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = 144.10964;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) integerArray0[3], (-648.6106994277));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5717, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      int int0 = 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("C", (Integer) int0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(94);
      assertEquals(94, (int)integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = Integer.getInteger("C", integer4);
      assertEquals(94, (int)integer5);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(0);
      assertEquals(0, (int)integer6);
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      assertNotNull(integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer((-3267));
      assertEquals((-3267), (int)integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer((-3267));
      assertEquals((-3267), (int)integer8);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertNotNull(integer8);
      
      integerArray0[7] = integer8;
      Integer integer9 = new Integer(94);
      assertEquals(94, (int)integer9);
      assertFalse(integer9.equals((Object)integer7));
      assertTrue(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer8));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer3));
      assertTrue(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)integer2));
      assertNotNull(integer9);
      
      integerArray0[8] = integer9;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, (-2172));
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 321;
      intArray0[2] = 78;
      intArray0[3] = 2146575273;
      intArray0[4] = 12;
      intArray0[5] = (-2146845275);
      intArray0[0] = 795;
      ArrayUtils.shift(intArray0, (-2146845275));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {321, 78, 2146575273, 12, (-2146845275), 0, 795}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 78;
      doubleArray0[2] = (double) 2146575273;
      doubleArray0[3] = (double) 12;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 78.0, 2.146575273E9, 12.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1828;
      shortArray0[1] = (short) (-49);
      shortArray0[2] = (short) (-419);
      shortArray0[3] = (short) (-419);
      shortArray0[4] = (short) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 2146575273);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14657523E9F, (-1.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'M';
      charArray0[2] = 'h';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1', 795);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'^', 'M', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1259));
      assertEquals((short) (-1259), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1259)}, shortArray1);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-1259);
      doubleArray0[1] = (double) (short)shortArray0[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1259.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1259.0), (-1259.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1259.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1748, 1748);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-285.6);
      doubleArray0[1] = (double) 1748;
      doubleArray0[2] = (double) 1748;
      doubleArray0[3] = (double) 1748;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-285.6);
      doubleArray0[7] = (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 3, 0.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4, 7}", bitSet0.toString());
      assertArrayEquals(new double[] {(-285.6), 1748.0, 1748.0, 1748.0, (-1.0), 1.0, (-285.6), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short) (-667);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)11540, (short) (-667)}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-4137.37019444), (-1797), (-1708.0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0, (-1178.9192032)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true}, booleanArray0));
      
      Byte byte0 = new Byte((byte)39);
      assertEquals((byte)39, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)39);
      assertNull(byteArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte)29);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 6L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 6L);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {6L}, longArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 6L;
      objectArray0[1] = (Object) 6L;
      objectArray0[2] = (Object) 6L;
      objectArray0[3] = (Object) 6L;
      objectArray0[4] = (Object) 6L;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '6', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 0L);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 755;
      intArray0[1] = (-1410);
      intArray0[2] = 755;
      intArray0[3] = 755;
      intArray0[4] = 755;
      intArray0[5] = (-1410);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 358, 755);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {755, (-1410), 755, 755, 755, (-1410)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-1017));
      assertEquals(4, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(8, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet1.toString());
      assertEquals(8, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1410);
      objectArray0[1] = (Object) 755;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) 755;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) (-1410);
      objectArray0[6] = (Object) 1L;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1410', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'H';
      charArray0[2] = 'J';
      charArray0[3] = '4';
      charArray0[4] = 'C';
      charArray0[5] = 'k';
      charArray0[7] = ';';
      charArray0[7] = '[';
      charArray0[8] = 'k';
      Character character0 = Character.valueOf('4');
      assertEquals('4', (char)character0);
      assertNotNull(character0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'Z';
      objectArray0[1] = (Object) 'J';
      Object object0 = ArrayUtils.get(objectArray0, 3992, objectArray0[1]);
      assertEquals('J', object0);
      assertEquals(3, objectArray0.length);
      assertFalse(object0.equals((Object)character0));
      assertNotNull(object0);
      
      objectArray0[2] = (Object) 'J';
      boolean boolean0 = ArrayUtils.isEquals(character0, '4');
      assertTrue(boolean0);
      assertFalse(character0.equals((Object)object0));
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(3992);
      assertEquals(3992, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(3992, (int)integer1);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3992);
      assertEquals(3992, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertEquals(3992, (int)integer3);
      assertEquals(6, integerArray0.length);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(118);
      assertEquals(118, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      assertEquals((-1), (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {3992, 3992, 3992, 3992, 118, (-1)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, (-2547), 1, (-2547));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-589.0);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3069.12947);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 79.0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, (-589.0), 1.5, (-1.0), (-3069.12947)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (-2145635554), (-2145635554), (-2145635554));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 321;
      intArray0[2] = 12;
      intArray0[3] = 2146575273;
      intArray0[4] = (-1148);
      intArray0[5] = (-2146845275);
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, 10, (-2009));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2146845275);
      doubleArray0[1] = (double) (-1148);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 789;
      doubleArray0[4] = (double) 321;
      doubleArray0[5] = (double) 2146575273;
      doubleArray0[6] = (double) (-1148);
      doubleArray0[7] = (double) 321;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.146845275E9), (-1148.0), (-1.0), 789.0, 321.0, 2.146575273E9, (-1148.0), 321.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      ArrayUtils.reverse(doubleArray0, 1382, 6);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2.146845275E9), (-1148.0), (-1.0), 789.0, 321.0, 2.146575273E9, (-1148.0), 321.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '5');
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-212.289F), (-3412));
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 604, 1199);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-212.289F);
      doubleArray0[2] = (double) (-1.0F);
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1.0), (-212.28900146484375), (-1.0)}, doubleArray0, 0.01);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "|ZZbnr`HuQ<3$Czg");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('O');
      assertEquals('O', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertEquals('(', (char)character2);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)743;
      shortArray0[1] = (short)23;
      shortArray0[2] = (short) (-739);
      shortArray0[3] = (short)1186;
      shortArray0[4] = (short)557;
      shortArray0[5] = (short) (-2278);
      shortArray0[6] = (short)894;
      shortArray0[7] = (short) (-1168);
      shortArray0[8] = (short)874;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)743, (short)23, (short) (-739), (short)1186, (short)557, (short) (-2278), (short)894, (short) (-1168), (short)874}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "*7<C");
      assertEquals(5, characterArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 54, 54);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-2405), (-1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 6271, 2107);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 54;
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean2);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {54.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)14, (-92));
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1174;
      shortArray0[1] = (short)12;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1174, (short)12}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[2];
      Short short0 = new Short((short)12);
      assertEquals((short)12, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)12, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short)1174;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)12;
      longArray0[1] = (long) (short)12;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)1174, (int) (short)12);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {12L, 12L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 90, (int) (short)12);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1174, (short)12}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-109);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)118;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)31, (byte)0, (byte) (-49), (byte) (-50), (byte) (-109), (byte)0, (byte)1, (byte)118}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "KaNaD~KzWx:");
      assertEquals("(", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)121}, byteArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)121}, byteArray0);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "(");
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(3, stringArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)121}, byteArray0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1174;
      shortArray0[1] = (short)12;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1174, (short)12}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = new Object[2];
      Short short0 = new Short((short)12);
      assertEquals((short)12, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)12, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short)1174;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)12;
      longArray0[1] = (long) (short)12;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)1174, (int) (short)12);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {12L, 12L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 90, (int) (short)12);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1174, (short)12}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)118;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)31, (byte)53, (byte) (-49), (byte) (-50), (byte) (-109), (byte)119, (byte)1, (byte)118}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (byte)78;
      long[] longArray2 = ArrayUtils.add(longArray1, 2521L);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {78L}, longArray1);
      assertArrayEquals(new long[] {78L, 2521L}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-1083L));
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {78L}, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotNull(bitSet0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, (int) (byte)121, (int) (byte)2);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertArrayEquals(new long[] {78L}, longArray1);
      assertArrayEquals(new long[] {78L, 2521L}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)0, (int) (short)0);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      ArrayUtils.reverse(floatArray0, (-422), (-422));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-422);
      doubleArray0[3] = (double) (-422);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (-422);
      doubleArray0[7] = (double) (short)0;
      ArrayUtils.swap(doubleArray0, (int) (short)0, (-422), 1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-422.0), (-422.0), 0.0, 0.0, (-422.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 3L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {3L}, longArray0);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift((int[]) null, 1);
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-11782);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)6);
      assertEquals(0, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)0, (short) (-1), (short)0, (short)9, (short) (-11782)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      short[] shortArray0 = new short[7];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Short short0 = new Short((short) (-312));
      assertEquals((short) (-312), (short)short0);
      assertNotNull(short0);
      
      ArrayUtils.shift((int[]) null, 512);
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.shift((boolean[]) null, 512);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'W');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 120;
      intArray0[1] = (-3240);
      intArray0[2] = 34;
      intArray0[3] = 993;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {120, (-3240), 34, 993}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2146;
      shortArray0[2] = (short)37;
      Short short0 = new Short((short) (-592));
      assertEquals((short) (-592), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)37;
      ArrayUtils.shift(intArray0, 66);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {34, 993, 120, (-3240)}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)2146, (short)0, (short)37, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)2146);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-378.0F);
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2217, 2217);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 352.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {352.0, (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-88);
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)80, (byte)97, (byte)56, (byte) (-50), (byte) (-88)}, byteArray0);
      
      ArrayUtils.reverse((Object[]) null, 1136, (int) (byte)97);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 7;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'm';
      charArray0[0] = 'm';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'m'}, charArray0);
      
      int int0 = 1;
      byte[] byteArray0 = ArrayUtils.insert(1, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'm');
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int1 = (-266);
      char char1 = 'G';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray1, (-266), 'G');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -266, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)8;
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)8, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte1;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte3 == byte0);
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = Byte.valueOf(byte0);
      assertEquals((byte)8, (byte)byte8);
      assertFalse(byte0 == byte3);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer(byte3);
      assertEquals(0, (int)integer0);
      assertFalse(byte3 == byte0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)8, object0);
      assertFalse(byte0 == byte3);
      assertFalse(object0.equals((Object)byte7));
      assertFalse(object0.equals((Object)byte6));
      assertFalse(object0.equals((Object)byte3));
      assertTrue(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte5));
      assertTrue(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte4));
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) byteArray0, (int) byte0);
      assertEquals(7, byteArray0.length);
      assertFalse(byte0 == byte3);
      assertSame(byteArray0, byteArray1);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1543);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2852;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2852}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (int) byte3);
      assertEquals(1, booleanArray0.length);
      assertFalse(byte3 == byte0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(2, integerArray1.length);
      assertEquals(2, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = '7';
      charArray0[2] = 'F';
      charArray0[3] = '7';
      charArray0[4] = '[';
      charArray0[5] = 'R';
      charArray0[6] = '-';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'d', '7', 'F', '7', '[', 'R', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray2 = ArrayUtils.add(characterArray0, character1);
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray2.length);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertSame(characterArray0, characterArray1);
      assertNotSame(characterArray0, characterArray2);
      assertNotSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      assertNotNull(characterArray2);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      floatArray0[1] = (float) (short) (-127);
      floatArray0[2] = (float) 'Z';
      Character character1 = new Character((char) character0);
      assertEquals('Z', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray2 = ArrayUtils.add(characterArray0, character1);
      assertEquals(1, characterArray0.length);
      assertEquals(2, characterArray2.length);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertNotSame(characterArray0, characterArray2);
      assertSame(characterArray0, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      assertNotSame(characterArray2, characterArray1);
      assertNotNull(characterArray2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = (char) character0;
      charArray0[2] = 'z';
      int int0 = ArrayUtils.indexOf(charArray0, 'Z', (int) (short) (-127));
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'z'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1270.312786344), (-3999.123));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)127;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)127, 1909);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)127}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean1);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      floatArray0[1] = (float) (short) (-127);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-127);
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) (short) (-127);
      longArray0[3] = (long) (short) (-127);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 90L;
      doubleArray0[1] = (-3999.123);
      doubleArray0[2] = (double) (short) (-127);
      doubleArray0[3] = (double) (short) (-127);
      doubleArray0[4] = (double) (-127.0F);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 937.11975101353, (-1.0));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, (-3999.123), (-127.0), (-127.0), (-127.0)}, doubleArray0, 0.01);
      
      Character character1 = new Character('0');
      assertEquals('0', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray2 = ArrayUtils.add((Character[]) null, character1);
      assertEquals(1, characterArray2.length);
      assertFalse(character1.equals((Object)character0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertNotSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      assertNotNull(characterArray2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = (char) character0;
      charArray0[1] = 'z';
      charArray0[2] = 'Z';
      int int0 = ArrayUtils.indexOf(charArray0, 'z', (int) character0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertFalse(character0.equals((Object)character1));
      assertArrayEquals(new char[] {'Z', 'z', 'Z'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-530);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-530.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-2148);
      intArray0[2] = (-2148);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2148);
      Object object0 = ArrayUtils.get(objectArray0, 57);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (-2148);
      objectArray0[3] = (Object) (-2148);
      objectArray0[4] = (Object) (-2148);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-349));
      assertEquals(1, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-13), (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      Character character0 = new Character('I');
      assertEquals('I', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) character0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int1 = ArrayUtils.hashCode((Object) double0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, (-1), (-1), 24);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.insert((-1), longArray0, (long[]) null);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-74);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)7);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-83), (byte)60, (byte) (-35), (byte) (-74)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-83), (byte)60, (byte) (-35), (byte) (-74)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'q';
      charArray0[2] = '?';
      charArray0[3] = 'z';
      charArray0[4] = 'g';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'p');
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'d', 'q', '?', 'z', 'g'}, charArray0);
      assertArrayEquals(new char[] {'d', 'q', '?', 'z', 'g'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 987);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 987, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1003;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (double) 4437;
      doubleArray0[2] = (double) 1003;
      ArrayUtils.reverse(doubleArray0, 4437, 0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.7, 4437.0, 1003.0}, doubleArray0, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '9');
      assertNull(charArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('t');
      assertEquals('t', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = ArrayUtils.get(characterArray0, (-1073741823));
      assertEquals(2, characterArray0.length);
      assertNull(character2);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      Float float0 = new Float((-1897.61));
      assertEquals((-1897.61F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1996);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1996.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'A';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'V', 'A'}, charArray0);
      assertNotNull(characterArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray2, 0.01F);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      ArrayUtils.shift((boolean[]) null, (-1996), 6, 6);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      ArrayUtils.reverse(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)1, (byte) (-40), (byte)12, (byte)66}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1485.0330484334;
      doubleArray0[6] = (-2977.4648363365927);
      doubleArray0[7] = (-568.47);
      ArrayUtils.shift(doubleArray0, (-382), (-382), 1397);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1485.0330484334, (-2977.4648363365927), (-568.47)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-382);
      intArray0[1] = (-382);
      intArray0[2] = 1397;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) (-382));
      assertEquals((-382.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1039.931);
      assertEquals(1039.931F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-382.0F), 1039.931F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 1397, 2146590351, 59);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)34;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {34.0F, 0.0F}, floatArray0, 0.01F);
      
      Short short0 = new Short((short)32226);
      assertEquals((short)32226, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1475);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)32226, (short)1475, (short)32226}, shortArray1);
      assertNotNull(shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.1, (int) (short)34);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)34;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 1194);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1194, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[4] = 0.0;
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1397);
      intArray0[1] = 27;
      intArray0[2] = 13;
      intArray0[3] = 48;
      intArray0[4] = (-5232);
      intArray0[5] = 1096;
      intArray0[6] = (-3570);
      intArray0[7] = (-1417);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3570));
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1397), 27, 13, 48, (-5232), 1096, (-3570), (-1417)}, intArray0);
      assertArrayEquals(new int[] {(-1397), 27, 13, 48, (-5232), 1096, (-1417)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-2073);
      intArray0[1] = (-2073);
      intArray0[2] = 0;
      intArray0[3] = (-2073);
      ArrayUtils.swap(intArray0, 48, 904, (-1154));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2073), (-2073), 0, (-2073)}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {(-2073), (-2073), 0, (-2073)}, intArray0);
      assertNotNull(integerArray0);
      
      Integer integer0 = new Integer((-2073));
      assertEquals((-2073), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Short short0 = new Short((short)4);
      assertEquals((short)4, (short)short0);
      assertNotNull(short0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, (Object) integer0, (-1154));
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new int[] {(-2073), (-2073), 0, (-2073)}, intArray0);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-2073), (-2073), 0, (-2073)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-844.7F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 490.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 723.4581F;
      floatArray0[7] = 3179.06F;
      floatArray0[8] = (-2624.3F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-844.7F), 0.0F, 0.0F, 490.0F, (-1.0F), 723.4581F, 3179.06F, (-2624.3F)}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      float[] floatArray0 = new float[14];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(14, floatArray0.length);
      assertEquals(28, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null, (-312), (-312));
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1039L);
      ArrayUtils.reverse(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1039.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap((short[]) null, 874, 2146, (-2378));
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = (-127.0);
      doubleArray0[2] = (double) 'Z';
      doubleArray0[3] = (double) (char)character0;
      doubleArray0[4] = (double) (char)character0;
      doubleArray0[5] = (double) (char)character0;
      doubleArray0[6] = (double) (char)character0;
      doubleArray0[7] = 3.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) character0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {90.0, (-127.0), 90.0, 90.0, 90.0, 90.0, 90.0, 3.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1323;
      shortArray0[1] = (short) (-1494);
      shortArray0[2] = (short)1323;
      shortArray0[3] = (short)1323;
      shortArray0[4] = (short) (-1494);
      shortArray0[5] = (short) (-1494);
      shortArray0[6] = (short)1323;
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1323;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1323}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1494), (short)1323, (short)1323, (short) (-1494), (short) (-1494), (short)1323}, shortArray2);
      assertArrayEquals(new short[] {(short)1323, (short) (-1494), (short)1323, (short)1323, (short) (-1494), (short) (-1494), (short)1323}, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3015;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)3015;
      shortArray0[3] = (short)3015;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)3015;
      shortArray0[6] = (short)3015;
      shortArray0[7] = (short)88;
      shortArray0[8] = (short)2352;
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1);
      shortArray1[1] = (short)3015;
      shortArray1[2] = (short) (-3090);
      shortArray1[3] = (short)88;
      shortArray1[4] = (short)2352;
      shortArray1[5] = (short)2352;
      shortArray1[6] = (short)88;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(4, shortArray2.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3015, (short)88, (short)3015, (short)3015, (short) (-1), (short)3015, (short)3015, (short)88, (short)2352}, shortArray0);
      assertArrayEquals(new short[] {(short)3015, (short)3015, (short)3015, (short)3015}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short)3015, (short) (-3090), (short)88, (short)2352, (short)2352, (short)88}, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)3015;
      doubleArray0[1] = (double) (short)3015;
      doubleArray0[2] = (double) (short)3015;
      doubleArray0[3] = (double) (short)88;
      doubleArray0[4] = (double) (short)3015;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short)88;
      doubleArray0[7] = (double) (short)3015;
      doubleArray0[8] = (double) (short)2352;
      int[] intArray0 = new int[5];
      intArray0[0] = 1588;
      intArray0[1] = (int) (short)3015;
      intArray0[2] = (int) (short)88;
      intArray0[3] = (int) (short)3015;
      intArray0[4] = (int) (short)3015;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3015, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      ArrayUtils.shift(byteArray0, (int) (byte)58);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58, (byte)58}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)58;
      floatArray0[1] = (float) (byte)58;
      floatArray0[2] = (float) (byte)58;
      floatArray0[3] = (float) (byte)58;
      floatArray0[4] = (float) (byte)58;
      floatArray0[5] = (float) (byte)58;
      floatArray0[7] = (float) (byte)58;
      Long long0 = new Long((byte)58);
      assertEquals(58L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((byte)58);
      assertEquals(58L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long((-2303L));
      assertEquals((-2303L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long1;
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {58L, 58L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1133;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1133;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-10);
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 1133, 0, 0, 1133, 0, 0, (-10)}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-257L);
      longArray0[1] = (long) (-10);
      longArray0[2] = (long) 1133;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, (-295));
      assertEquals(7, longArray0.length);
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{3, 4, 5, 6}", bitSet0.toString());
      assertArrayEquals(new long[] {(-257L), (-10L), 1133L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(2010, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3570);
      shortArray0[1] = (short) (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)90;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)121}, byteArray0);
      
      Character character0 = Character.valueOf('s');
      assertEquals('s', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('s', object0);
      assertNotNull(object0);
      
      Short[] shortArray1 = ArrayUtils.removeElement((Short[]) null, object0);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[3] = (short) (-1);
      shortArray0[1] = (short)2270;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2305);
      shortArray0[4] = (short)2270;
      shortArray0[5] = (short) (-1061);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)2270, (short)0, (short) (-2305), (short)2270, (short) (-1061), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1061);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1061L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1061L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)2270;
      doubleArray0[1] = (double) (short)2270;
      ArrayUtils.swap(doubleArray0, 2393, 1835, 1835);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2270.0, 2270.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (short) (-1061);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (short)2270;
      ArrayUtils.swap(floatArray0, (-4309), (int) (short)0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1061.0F), 0.0F, (-1.0F), 0.0F, 2270.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) shortArray1, 0, (int) (short)0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)2270, (short)0, (short) (-2305), (short)2270, (short) (-1061), (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2911);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)2270, (short)0, (short) (-2305), (short)2270, (short) (-1061), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2270, (short)0, (short) (-2305), (short)2270, (short) (-1061), (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), 4);
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)2270, (short)0, (short) (-2305), (short)2270, (short) (-1061), (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = ':';
      charArray0[2] = 'U';
      charArray0[3] = '\"';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ':');
      assertEquals(1, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'%', ':', 'U', '\"'}, charArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'%', ':', 'U', '\"'}, charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)118;
      shortArray0[1] = (short) (-1411);
      shortArray0[2] = (short)536;
      shortArray0[3] = (short) (-1909);
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)1964;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short)118, (short) (-1411), (short)536, (short) (-1909), (short)32, (short)1964}, shortArray0);
      
      boolean boolean3 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-98);
      shortArray0[1] = (short) (byte) (-98);
      shortArray0[2] = (short) (byte) (-98);
      shortArray0[3] = (short) (byte) (-98);
      shortArray0[4] = (short) (byte) (-98);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-98), (short) (-98), (short) (-98), (short) (-98), (short) (-98)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 150.13131538, 1791, 1.0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      
      ArrayUtils.swap(longArray0, 975, 45, 1525);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, 753);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 753, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)10;
      byteArray0[0] = (byte) (-30);
      byteArray0[4] = (byte)94;
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1176.5F));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-30);
      shortArray0[1] = (short) (byte)10;
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)10, (short) (-30)}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 'Z';
      charArray0[2] = '.';
      charArray0[3] = 'V';
      charArray0[4] = 'O';
      charArray0[5] = 'v';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)94;
      intArray0[1] = (int) (byte) (-98);
      intArray0[2] = (int) 'v';
      intArray0[3] = (int) (byte)94;
      intArray0[4] = (int) 'Z';
      intArray0[5] = (int) 'V';
      intArray0[6] = (int) 'v';
      intArray0[7] = (int) 'V';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 118, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Short short0 = new Short((short)217);
      assertEquals((short)217, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short)217);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, 36);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1833);
      assertEquals((-1), int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = 653L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1083L));
      assertEquals((-1), int1);
      assertEquals(5, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 653L, 0L}, longArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(booleanArray0, (-1));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1833);
      assertEquals((-1), int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = 653L;
      longArray0[4] = (long) 0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1083L));
      assertEquals((-1), int1);
      assertEquals(5, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 653L, 0L}, longArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(booleanArray0, (-1));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 653L, (-1), (double) 653L);
      assertEquals(1, doubleArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurences((Object[]) floatArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray0, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-1170), (-1432), (-1170));
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)112;
      byteArray0[2] = (byte)63;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)69, (byte)63, (byte)69, (byte)112, (byte)20, (byte)20, (byte)112, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)20, (byte)69, (byte)63, (byte)69, (byte)112, (byte)20, (byte)20, (byte)112, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0, (-2547), 43);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1039L);
      longArray0[2] = (-1039L);
      longArray0[3] = (-1039L);
      longArray0[4] = (-1039L);
      longArray0[5] = (-1039L);
      longArray0[6] = (-1039L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2639L));
      assertFalse(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1039L), 0L, (-1039L), (-1039L), (-1039L), (-1039L), (-1039L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[3] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.swap((short[]) null, Integer.MAX_VALUE, (-4056), 1918);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1039L);
      doubleArray0[1] = (double) (-1039L);
      doubleArray0[2] = (double) (-1039L);
      doubleArray0[3] = (double) (-1039L);
      doubleArray0[4] = (double) (-1039L);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1039.0), (-1039.0), (-1039.0), (-1039.0), (-1039.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1039L);
      doubleArray1[1] = (double) (-1039L);
      doubleArray1[2] = (double) (-2639L);
      doubleArray1[3] = (double) (-1039L);
      doubleArray1[4] = (double) (-1039L);
      doubleArray1[5] = (double) (-1039L);
      doubleArray1[6] = (double) (-1039L);
      doubleArray1[7] = (double) (-4056);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertEquals(13, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1039.0), (-1039.0), (-1039.0), (-1039.0), (-1039.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1039.0), (-1039.0), (-2639.0), (-1039.0), (-1039.0), (-1039.0), (-1039.0), (-4056.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(7, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(intArray0, (-4884), 7, (-1849));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1849);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 795;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1849);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(12, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1849.0), (-1.0), 7.0, 795.0, 2.0, (-1849.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-840.7538F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 3179.06F;
      doubleArray0[5] = (double) (-840.7538F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-840.7537841796875), (-1.0), Double.NaN, 3179.06005859375, (-840.7537841796875)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = 1L;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1154), (-1154), (-1));
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1L, (-1L), (-1L), (-1L), (-1L)}, longArray0);
      
      int int1 = ArrayUtils.indexOf(longArray0, (-3206L));
      assertEquals((-1), int1);
      assertEquals(6, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {(-1L), 1L, (-1L), (-1L), (-1L), (-1L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-65);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-2202);
      intArray0[3] = (int) (byte)2;
      intArray0[4] = 100;
      intArray0[5] = 76;
      intArray0[6] = (-2202);
      ArrayUtils.shift(intArray0, 1328);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2202), 2, 100, 76, (-2202), 2, 0}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2202), (-2202));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, 2145743247, 2550, (-2145422765));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1485.0330484334;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-37);
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      Byte[] byteArray1 = new Byte[13];
      byteArray1[0] = byte5;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-124));
      assertEquals(13, byteArray2.length);
      assertEquals(13, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'F';
      charArray0[2] = '8';
      charArray0[3] = '{';
      charArray0[4] = 'S';
      charArray0[5] = '<';
      charArray0[6] = 'F';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)120, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-530);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-530.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-2148);
      intArray0[2] = (-2148);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2148);
      Object object0 = ArrayUtils.get(objectArray0, (-2148));
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (-2148);
      objectArray0[4] = (Object) (-2148);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-349));
      assertEquals(1, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, (-1574), (Object) null);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Character[] characterArray0 = new Character[8];
      char char0 = ':';
      Character character0 = Character.valueOf(':');
      assertEquals(':', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals(':', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char char1 = '~';
      Character character2 = Character.valueOf('~');
      assertEquals('~', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character1);
      assertEquals(':', (char)character3);
      assertFalse(char0 == char1);
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char1));
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('~');
      assertEquals('~', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)char0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character1);
      assertEquals(':', (char)character5);
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(char0 == char1);
      assertTrue(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char1));
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character2));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char1);
      assertEquals('~', (char)character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character4));
      assertFalse(char1 == char0);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('r');
      assertEquals('r', (char)character7);
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char1));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character6));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = ArrayUtils.get(characterArray0, (-2146247329), character3);
      assertEquals(':', (char)character8);
      assertEquals(8, characterArray0.length);
      assertFalse(char0 == char1);
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)char1));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character4));
      assertTrue(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)character5));
      assertTrue(character8.equals((Object)character1));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character7));
      assertTrue(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character5));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char1));
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character3.equals((Object)character7));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character5));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character6));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character4));
      assertNotNull(character8);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1574), (Object) character8);
      assertEquals(':', object1);
      assertEquals(9, objectArray0.length);
      assertEquals(8, characterArray0.length);
      assertFalse(char0 == char1);
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)char1));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character4));
      assertTrue(character8.equals((Object)character0));
      assertTrue(character8.equals((Object)character5));
      assertTrue(character8.equals((Object)character1));
      assertTrue(object1.equals((Object)char0));
      assertFalse(object1.equals((Object)char1));
      assertFalse(object1.equals((Object)character6));
      assertTrue(object1.equals((Object)character0));
      assertFalse(object1.equals((Object)character2));
      assertFalse(object1.equals((Object)character4));
      assertTrue(object1.equals((Object)character5));
      assertFalse(object1.equals((Object)character7));
      assertTrue(object1.equals((Object)character1));
      assertTrue(character1.equals((Object)character8));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character7));
      assertTrue(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character5));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char1));
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character3.equals((Object)character7));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character5));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character6));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character4));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Character character9 = Character.valueOf(char0);
      assertEquals(':', (char)character9);
      assertFalse(char0 == char1);
      assertTrue(character9.equals((Object)character8));
      assertTrue(character9.equals((Object)character1));
      assertFalse(character9.equals((Object)character7));
      assertFalse(character9.equals((Object)character6));
      assertTrue(character9.equals((Object)object1));
      assertFalse(character9.equals((Object)character2));
      assertFalse(character9.equals((Object)character4));
      assertTrue(character9.equals((Object)character3));
      assertFalse(character9.equals((Object)char1));
      assertNotNull(character9);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) character9, (-1574));
      assertEquals(8, characterArray0.length);
      assertFalse(char0 == char1);
      assertTrue(character9.equals((Object)character8));
      assertTrue(character9.equals((Object)character1));
      assertFalse(character9.equals((Object)character7));
      assertFalse(character9.equals((Object)character6));
      assertTrue(character9.equals((Object)object1));
      assertFalse(character9.equals((Object)character2));
      assertFalse(character9.equals((Object)character4));
      assertTrue(character9.equals((Object)character3));
      assertFalse(character9.equals((Object)char1));
      assertEquals("{0, 1, 3, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character4, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      Character character0 = new Character('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      charArray0[2] = '1';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'm', (int) (byte)21);
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'N', 'G', '1', 'X', 'X'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'N';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)21);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {78.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {78.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 698);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(48);
      assertEquals(48, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(48.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)48, mutableInt0.shortValue());
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals("48", mutableInt0.toString());
      assertEquals(48, (int)mutableInt0.toInteger());
      assertEquals(48.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(48, (int)mutableInt0.getValue());
      assertEquals(48, mutableInt0.intValue());
      assertEquals(48L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)89;
      shortArray0[1] = (short)89;
      shortArray0[2] = (short)4962;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)89, (short)89, (short)4962}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3570);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)110;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-9701);
      shortArray0[6] = (short)88;
      shortArray0[7] = (short)3015;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-3570), (short) (-1), (short)110, (short) (-1), (short)2, (short) (-9701), (short)88, (short)3015}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0, (-126), (double) (-126));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 37.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-285.6)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2354);
      shortArray0[1] = (short)116;
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'R');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'R'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) classArray0, (Object) short0);
      assertFalse(boolean1);
      assertEquals(1, classArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean2);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0, (-126), (double) (-126));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 37.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-285.6)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2354);
      shortArray0[1] = (short)116;
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0, (-126), (double) (-126));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 37.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-285.6)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2354);
      shortArray0[1] = (short)116;
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) floatArray1, (Object) boolean0);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean2);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'R');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'R'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      charArray0[2] = '+';
      charArray0[3] = '@';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'@', '+', '@', '@'}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '1');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'@', '+', '@', '@'}, charArray0);
      assertArrayEquals(new char[] {'@', '+', '@', '@', '1'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 9, (-355), (-702));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.shift((short[]) null, 9);
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-469);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-807));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-469)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-469)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      Integer integer0 = new Integer((short) (-807));
      assertEquals((-807), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.swap((boolean[]) null, (-3169), 4416, 2740);
      ArrayUtils.shift(shortArray0, (int) (short) (-807));
      assertEquals(1, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-469)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      floatArray0[1] = (float) (short) (-127);
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) (short) (-127);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2145999554);
      assertEquals(4, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-127.0F), (-127.0F), 90.0F, (-127.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-127);
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) 2145999554;
      longArray0[3] = (long) (short) (-127);
      longArray0[4] = (long) (char)character0;
      longArray0[5] = (long) (char)character0;
      longArray0[6] = (long) 2145999554;
      longArray0[7] = (long) 'Z';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray1);
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(shortArray0, 8192);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((short) (-127));
      assertEquals((-127), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("Array and element cannot both be null", (int) character0);
      assertEquals(90, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(20);
      assertEquals(20, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integer1);
      assertEquals(90, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) character0);
      assertEquals(90, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertArrayEquals(new int[] {(-127), 90, 0, 20, 90, 90}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2466;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)407;
      shortArray0[3] = (short)2;
      ArrayUtils.shift(shortArray0, (-3412));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)2466, (short)52, (short)407, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1178.9192032));
      assertEquals((-1178.9192F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      doubleArray0[1] = (double) (float)float0;
      Float float1 = new Float((-2.0));
      assertEquals((-2.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Short short0 = new Short((short) (-4544));
      assertEquals((short) (-4544), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)255;
      shortArray0[1] = (short)193;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)255, (short)193, (short)255, (short)193}, shortArray1);
      assertArrayEquals(new short[] {(short)255, (short)193}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short)7);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)255, (short)193, (short)255, (short)193}, shortArray1);
      assertArrayEquals(new short[] {(short)255, (short)193, (short)255, (short)193}, shortArray2);
      assertArrayEquals(new short[] {(short)255, (short)193}, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-2147483645));
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      float[] floatArray0 = new float[8];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1680.5881548258674;
      doubleArray0[1] = (double) (short)1636;
      doubleArray0[2] = (double) (short)1791;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)1791);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1680.5881548258674, 1636.0, 1791.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1680.5881548258674, 1636.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1895;
      shortArray0[1] = (short)1791;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1895);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1895, (short)1791, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1791, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (short)1636);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1636.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short) (-1));
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1895, (short)1791, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1791, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)1791, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-1259));
      assertEquals((short) (-1259), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte) (-120);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-127));
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-44), (byte) (-120), (byte) (-44), (byte) (-120), (byte) (-120), (byte) (-120), (byte) (-120), (byte) (-120)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-44), (byte) (-120), (byte) (-44), (byte) (-120), (byte) (-120), (byte) (-120), (byte) (-120), (byte) (-120), (byte) (-127)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1039.931;
      doubleArray0[6] = (-2977.4648363365927);
      doubleArray0[7] = (-568.47);
      ArrayUtils.shift(doubleArray0, (-382), (-382), 1397);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1039.931, (-2977.4648363365927), (-568.47)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-382);
      intArray0[1] = (-382);
      intArray0[2] = 1397;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-382), (-382), 1397, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(8, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-382), (-382), 1397, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      Float float0 = new Float((-1897.61));
      assertEquals((-1897.61F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1996);
      intArray0[1] = (-1996);
      intArray0[2] = (-1996);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1996));
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.shift((Object[]) floatArray0, (-1996));
      assertEquals(1, floatArray0.length);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      float[] floatArray0 = new float[8];
      ArrayUtils.swap(floatArray0, 307, 307, 307);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf("V}LX%4_,(F cQ#");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 307;
      doubleArray0[1] = (double) 307;
      doubleArray0[2] = (double) 307;
      doubleArray0[3] = 1100.3074;
      doubleArray0[4] = (double) 307;
      doubleArray0[5] = (double) 307;
      doubleArray0[6] = (double) 307;
      doubleArray0[7] = (double) 307;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {307.0, 307.0, 307.0, 307.0, 1100.3074, 307.0, 307.0, 307.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte) (-6);
      Byte byte1 = new Byte((byte) (-6));
      assertEquals((byte) (-6), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-92);
      Byte byte3 = new Byte((byte) (-92));
      assertEquals((byte) (-92), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      byte byte4 = (byte) (-124);
      Byte byte5 = new Byte((byte) (-124));
      assertEquals((byte) (-124), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[2] = byte5;
      Byte byte6 = new Byte((byte)18);
      assertEquals((byte)18, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      byteArray0[3] = byte6;
      Byte byte7 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertNotNull(byte7);
      
      byteArray0[4] = byte7;
      Byte byte8 = new Byte(byte2);
      assertEquals((byte) (-92), (byte)byte8);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte0);
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[5] = byte8;
      Byte byte9 = Byte.valueOf(byte4);
      assertEquals((byte) (-124), (byte)byte9);
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte0);
      assertNotNull(byte9);
      
      byteArray0[6] = byte9;
      Byte byte10 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte10);
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte2));
      assertNotNull(byte10);
      
      byteArray0[7] = byte10;
      Byte byte11 = new Byte(byte4);
      assertEquals((byte) (-124), (byte)byte11);
      assertFalse(byte11.equals((Object)byte8));
      assertFalse(byte11.equals((Object)byte2));
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte0));
      assertFalse(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte1));
      assertTrue(byte11.equals((Object)byte5));
      assertTrue(byte11.equals((Object)byte4));
      assertTrue(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte0);
      assertNotNull(byte11);
      
      byteArray0[8] = byte11;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte2);
      assertArrayEquals(new byte[] {(byte) (-6), (byte) (-92), (byte) (-124), (byte)18, (byte) (-90), (byte) (-92), (byte) (-124), (byte)91, (byte) (-124)}, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0, (int) byte0, 1);
      assertEquals(8, booleanArray0.length);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1485.0330484334;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-37);
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = byte5;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-124));
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-112)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'F';
      charArray0[2] = '8';
      charArray0[3] = '~';
      charArray0[4] = 'S';
      charArray0[5] = '<';
      charArray0[6] = 'F';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)120, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1178.9192032));
      assertEquals((-1178.9192F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2.0));
      assertEquals((-2.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1178.9192F), (-2.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short)1382);
      assertEquals((short)1382, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1382);
      assertEquals((short)1382, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.swap(intArray0, 321, 0, (-1949));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-2.0F), (-1178.9192F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1039.931;
      doubleArray0[6] = (-2977.4648363365927);
      ArrayUtils.shift(doubleArray0, (-382), (-382), 1397);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1039.931, (-2977.4648363365927), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-382);
      intArray0[1] = (-382);
      intArray0[2] = 1397;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      
      ArrayUtils.reverse(doubleArray0, (-382), (-382));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1039.931, (-2977.4648363365927), 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 819);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1039.931);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 0.0, (-2977.4648363365927), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1039.931, (-2977.4648363365927), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.shift(objectArray0, 1352);
      assertEquals(1, objectArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 76;
      intArray0[1] = 1352;
      intArray0[2] = 1352;
      intArray0[3] = 1352;
      intArray0[4] = 76;
      intArray0[5] = 76;
      intArray0[6] = 1352;
      ArrayUtils.shift(intArray0, 1352);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1352, 76, 1352, 1352, 1352, 76, 76}, intArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertEquals(7, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 76;
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) 1352;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 76, (-1));
      assertEquals(3, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new double[] {76.0, 76.0, 1352.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2258, 76);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1002.0;
      doubleArray0[1] = (-446.9145838341343);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-873.663369896383);
      doubleArray0[4] = (-12.123);
      doubleArray0[5] = (-2816.2176);
      doubleArray0[6] = (-54.0);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1002.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1002.0, (-446.9145838341343), 3.0, (-873.663369896383), (-12.123), (-2816.2176), (-54.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-446.9145838341343), 3.0, (-873.663369896383), (-12.123), (-2816.2176), (-54.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((Object[]) null);
      long[] longArray0 = new long[7];
      longArray0[0] = 739L;
      longArray0[1] = (-382L);
      longArray0[2] = 1093L;
      longArray0[3] = 1922L;
      longArray0[4] = 3185L;
      longArray0[5] = 1288490189L;
      longArray0[6] = 2329L;
      ArrayUtils.swap(longArray0, (-1092), (-1092), (-1092));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {739L, (-382L), 1093L, 1922L, 3185L, 1288490189L, 2329L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-0.7607178226457485);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 0.0, 0.0, (-1.0), (-0.7607178226457485)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(4, object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object0.equals((Object)int0));
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 795);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shift(intArray0, 4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3245);
      shortArray0[2] = (short) (-2338);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-2143);
      shortArray0[5] = (short)460;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3245));
      assertEquals(6, shortArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)0, (short) (-3245), (short) (-2338), (short) (-1), (short) (-2143), (short)460}, shortArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-2543L));
      assertEquals((-1), int1);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = (-2977.4648363365927);
      ArrayUtils.shift(doubleArray0, (-382), (-382), 1397);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 0.0, 0.0, 0.0, (-2977.4648363365927), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[13];
      intArray0[0] = (-382);
      intArray0[1] = (-382);
      intArray0[2] = 1397;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(13, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(13, intArray0.length);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse(doubleArray0, (-382), (-382));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 0.0, 0.0, 0.0, (-2977.4648363365927), 0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 801);
      assertEquals(13, intArray0.length);
      assertEquals(13, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)27);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      Character[] characterArray0 = new Character[1];
      char char0 = 'l';
      Character character0 = Character.valueOf('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray1, intArray2);
      assertFalse(boolean2);
      assertEquals(0, intArray2.length);
      assertEquals(13, intArray0.length);
      assertEquals(13, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-667);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)11540, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short) (-667)}, shortArray0);
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((double[]) null, (-82));
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-667)}, shortArray0);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = (-2246);
      intArray0[3] = 1968;
      ArrayUtils.shift(intArray0, 1968, 37, 1968);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3, 2, (-2246), 1968}, intArray0);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)512);
      assertEquals((short)512, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short) (-803);
      Short short2 = new Short((short) (-803));
      assertEquals((short) (-803), (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short)512, (short)short3);
      assertEquals(8, shortArray0.length);
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      try { 
        Short.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 0);
      assertEquals(0, int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m'";
      stringArray0[1] = "m'";
      stringArray0[2] = "m'";
      stringArray0[3] = "m'";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1178.9192032));
      assertEquals((-1178.9192F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2.0));
      assertEquals((-2.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1178.9192F), (-2.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short)1382);
      assertEquals((short)1382, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1382);
      assertEquals((short)1382, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      ArrayUtils.shift((Object[]) floatArray0, 404);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 352;
      intArray0[2] = (-1148);
      intArray0[3] = (-2202);
      intArray0[4] = (-2146845275);
      intArray0[5] = (-1148);
      intArray0[6] = (int) (short) (-1);
      ArrayUtils.shift(intArray0, 89);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1148), (-2202), (-2146845275), (-1148), (-1), (-1), 352}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 352, (-1148));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 0.0, (-1178.9192032)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      ArrayUtils.shuffle((Object[]) floatArray0, (Random) mockRandom0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1133.0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)0, 2);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, Integer.MAX_VALUE);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2836.00838118);
      AbstractMap.SimpleEntry<Short, Long>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Short, Long>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 2);
      Short short0 = new Short((short)2131);
      assertEquals((short)2131, (short)short0);
      assertNotNull(short0);
      
      Long long0 = new Long((short)2131);
      assertEquals(2131L, (long)long0);
      assertNotNull(long0);
      
      AbstractMap.SimpleEntry<Short, Long> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Short, Long>(short0, long0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Short, Long> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Short, Long>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2131;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(abstractMap_SimpleEntryArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2131, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("}'h|'wc*");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)78);
      assertEquals(78.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)121);
      assertEquals(121.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      Double double2 = new Double((double) doubleArray0[3]);
      assertEquals(78.0, (double)double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) double2, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)78, (byte)78, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)121;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-803));
      assertEquals(3, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)121}, shortArray0);
      assertNotNull(bitSet0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      MutableInt mutableInt0 = new MutableInt((Number) (byte)0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((Number) (byte)121);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(121, (int)mutableInt1.getValue());
      assertEquals((byte)121, mutableInt1.byteValue());
      assertEquals(121, (int)mutableInt1.toInteger());
      assertEquals(121L, mutableInt1.longValue());
      assertEquals(121.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(121.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("121", mutableInt1.toString());
      assertEquals(121, mutableInt1.intValue());
      assertEquals((short)121, mutableInt1.shortValue());
      assertNotNull(mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertEquals(121, (int)mutableInt1.getValue());
      assertEquals((byte)121, mutableInt1.byteValue());
      assertEquals(121, (int)mutableInt1.toInteger());
      assertEquals(121L, mutableInt1.longValue());
      assertEquals(121.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(121.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("121", mutableInt1.toString());
      assertEquals(121, mutableInt1.intValue());
      assertEquals((short)121, mutableInt1.shortValue());
      assertEquals((short)121, mutableInt2.shortValue());
      assertEquals(121, (int)mutableInt2.getValue());
      assertEquals((byte)121, mutableInt2.byteValue());
      assertEquals("121", mutableInt2.toString());
      assertEquals(121, (int)mutableInt2.toInteger());
      assertEquals(121L, mutableInt2.longValue());
      assertEquals(121, mutableInt2.intValue());
      assertEquals(121.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(121.0, mutableInt2.doubleValue(), 0.01);
      assertNotNull(mutableInt2);
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt((int) (byte)0);
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals((short)0, mutableInt3.shortValue());
      assertEquals(0, (int)mutableInt3.toInteger());
      assertEquals(0.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt3.getValue());
      assertEquals(0L, mutableInt3.longValue());
      assertEquals("0", mutableInt3.toString());
      assertEquals(0, mutableInt3.intValue());
      assertEquals(0.0, mutableInt3.doubleValue(), 0.01);
      assertNotNull(mutableInt3);
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(doubleArray0[2]);
      assertEquals(7, doubleArray0.length);
      assertTrue(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertEquals(121.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(121L, mutableInt4.longValue());
      assertEquals(121.0, mutableInt4.doubleValue(), 0.01);
      assertEquals((short)121, mutableInt4.shortValue());
      assertEquals(121, mutableInt4.intValue());
      assertEquals((byte)121, mutableInt4.byteValue());
      assertEquals(121, (int)mutableInt4.toInteger());
      assertEquals(121, (int)mutableInt4.getValue());
      assertEquals("121", mutableInt4.toString());
      assertNotNull(mutableInt4);
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(double2);
      assertEquals(7, doubleArray0.length);
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(78L, mutableInt5.longValue());
      assertEquals("78", mutableInt5.toString());
      assertEquals(78.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(78.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(78, (int)mutableInt5.getValue());
      assertEquals((byte)78, mutableInt5.byteValue());
      assertEquals(78, (int)mutableInt5.toInteger());
      assertEquals(78, mutableInt5.intValue());
      assertEquals((short)78, mutableInt5.shortValue());
      assertNotNull(mutableInt5);
      
      mutableIntArray0[5] = mutableInt5;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)78;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(mutableIntArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 78, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2134;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-115);
      ArrayUtils.shift(byteArray0, (-519), 253, 2031);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)6, (byte)102, (byte)32, (byte)98}, byteArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-2146500870));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2134;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-115);
      ArrayUtils.shift(byteArray0, (-519), 253, 2031);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)6, (byte)102, (byte)102, (byte)98}, byteArray0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-2146500870));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-941.9470173406951);
      doubleArray0[2] = (-1178.9192032);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)51);
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, 293L);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 293L;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (short)51;
      floatArray0[6] = (float) (short)51;
      floatArray0[7] = (float) (-1);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-334.56134F));
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 293.0F, (-1.0F), 0.0F, 51.0F, 51.0F, (-1.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, (-941.9470173406951), (-1178.9192032)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      Character character0 = Character.valueOf('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) character0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.add(intArray0, 37);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {37}, intArray0);
      assertArrayEquals(new int[] {37, 37}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((byte[]) null, 37, 0);
      ArrayUtils.swap((Object[]) null, (-1), (-1), 0);
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean2);
      assertTrue(boolean3);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[1] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'W';
      charArray0[2] = 'f';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = '%';
      charArray0[7] = 'f';
      charArray0[8] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'f', (-1));
      assertEquals(9, charArray0.length);
      assertEquals(8, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'h', 'W', 'f', 'v', 'v', 'v', '%', 'f', 'v'}, charArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.shift(floatArray0, (-2342), (int) (byte)0, 2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, ']');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-63));
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((-1.0F));
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte) (-65));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((-65.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((short) (-65), mutableInt1.shortValue());
      assertEquals((-65), mutableInt1.intValue());
      assertEquals((-65L), mutableInt1.longValue());
      assertEquals("-65", mutableInt1.toString());
      assertEquals((-65), (int)mutableInt1.toInteger());
      assertEquals((-65), (int)mutableInt1.getValue());
      assertEquals((byte) (-65), mutableInt1.byteValue());
      assertEquals((-65.0), mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      
      mutableInt1.decrement();
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short) (-66), mutableInt1.shortValue());
      assertEquals((-66.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-66.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-66L), mutableInt1.longValue());
      assertEquals("-66", mutableInt1.toString());
      assertEquals((-66), mutableInt1.intValue());
      assertEquals((-66), (int)mutableInt1.getValue());
      assertEquals((byte) (-66), mutableInt1.byteValue());
      assertEquals((-66), (int)mutableInt1.toInteger());
      assertNotSame(mutableInt1, mutableInt0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-4.79F);
      doubleArray0[1] = (double) (-4.79F);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-4.79F);
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4.789999961853027));
      assertEquals(3, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-4.789999961853027), (-4.789999961853027), 1.0, (-4.789999961853027), 1.0, 1.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) (-1193);
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) (-2342);
      ArrayUtils.shift(floatArray0, 3, (-1193), 90);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {3.0F, (-1193.0F), 1.0F, (-2342.0F)}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)26);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt(1.0);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(3);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(3, (int)mutableInt1.getValue());
      assertEquals((byte)3, mutableInt1.byteValue());
      assertEquals(3, (int)mutableInt1.toInteger());
      assertEquals(3.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(3.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(3L, mutableInt1.longValue());
      assertEquals("3", mutableInt1.toString());
      assertEquals((short)3, mutableInt1.shortValue());
      assertEquals(3, mutableInt1.intValue());
      assertNotNull(mutableInt1);
      
      mutableInt0.decrement();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertNotSame(mutableInt0, mutableInt1);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 561.066F;
      floatArray0[2] = 3945.3206F;
      floatArray0[3] = (-168.95F);
      ArrayUtils.shift(floatArray0, 13, 13, 5);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 561.066F, 3945.3206F, (-168.95F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '-');
      assertEquals(1, charArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)43;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)120);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)120, (byte)43}, byteArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((-168.95F));
      assertEquals((-168), (int)mutableInt0.getValue());
      assertEquals((byte)88, mutableInt0.byteValue());
      assertEquals((-168), (int)mutableInt0.toInteger());
      assertEquals("-168", mutableInt0.toString());
      assertEquals((-168L), mutableInt0.longValue());
      assertEquals((-168.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-168), mutableInt0.intValue());
      assertEquals((short) (-168), mutableInt0.shortValue());
      assertEquals((-168.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((int) (byte)43);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(43.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(43, mutableInt1.intValue());
      assertEquals(43, (int)mutableInt1.getValue());
      assertEquals((byte)43, mutableInt1.byteValue());
      assertEquals(43, (int)mutableInt1.toInteger());
      assertEquals("43", mutableInt1.toString());
      assertEquals(43.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)43, mutableInt1.shortValue());
      assertEquals(43L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      
      mutableInt0.decrement();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals((-169), (int)mutableInt0.toInteger());
      assertEquals((-169), (int)mutableInt0.getValue());
      assertEquals((-169.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)87, mutableInt0.byteValue());
      assertEquals((-169L), mutableInt0.longValue());
      assertEquals("-169", mutableInt0.toString());
      assertEquals((-169.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-169), mutableInt0.shortValue());
      assertEquals((-169), mutableInt0.intValue());
      assertNotSame(mutableInt0, mutableInt1);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = ArrayUtils.get(mutableIntArray0, (int) 43, mutableInt1);
      assertEquals(2, mutableIntArray0.length);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertEquals(43.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(43, mutableInt1.intValue());
      assertEquals(43, (int)mutableInt1.getValue());
      assertEquals((byte)43, mutableInt1.byteValue());
      assertEquals(43, (int)mutableInt1.toInteger());
      assertEquals("43", mutableInt1.toString());
      assertEquals(43.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)43, mutableInt1.shortValue());
      assertEquals(43L, mutableInt1.longValue());
      assertEquals(43L, mutableInt2.longValue());
      assertEquals(43, (int)mutableInt2.toInteger());
      assertEquals(43, (int)mutableInt2.getValue());
      assertEquals(43.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)43, mutableInt2.byteValue());
      assertEquals((short)43, mutableInt2.shortValue());
      assertEquals("43", mutableInt2.toString());
      assertEquals(43, mutableInt2.intValue());
      assertEquals(43.0, mutableInt2.doubleValue(), 0.01);
      assertSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotNull(mutableInt2);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      Short short0 = new Short((short)1523);
      assertEquals((short)1523, (short)short0);
      assertNotNull(short0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertEquals(1523.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1523, mutableInt0.intValue());
      assertEquals(1523L, mutableInt0.longValue());
      assertEquals(1523.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1523, mutableInt0.shortValue());
      assertEquals("1523", mutableInt0.toString());
      assertEquals(1523, (int)mutableInt0.getValue());
      assertEquals(1523, (int)mutableInt0.toInteger());
      assertEquals((byte) (-13), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (short)1523);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(1523.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte) (-13), mutableInt1.byteValue());
      assertEquals(1523.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1523, (int)mutableInt1.getValue());
      assertEquals(1523, (int)mutableInt1.toInteger());
      assertEquals(1523, mutableInt1.intValue());
      assertEquals(1523L, mutableInt1.longValue());
      assertEquals((short)1523, mutableInt1.shortValue());
      assertEquals("1523", mutableInt1.toString());
      assertNotNull(mutableInt1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      ArrayUtils.shift(floatArray0, 2);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      ArrayUtils.reverse((char[]) null);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1690);
      assertEquals(1690, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1690);
      assertEquals(1690, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1895);
      assertEquals(1895, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1895);
      assertEquals(1895, (int)integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 121);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1690, 1690, 1895, 1895}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(11540);
      assertEquals(11540, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(11540, (int)integer1);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(11540);
      assertEquals(11540, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt((Number) integer1);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertEquals("11540", mutableInt0.toString());
      assertEquals(11540.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(11540, mutableInt0.intValue());
      assertEquals((short)11540, mutableInt0.shortValue());
      assertEquals(11540, (int)mutableInt0.toInteger());
      assertEquals(11540, (int)mutableInt0.getValue());
      assertEquals(11540L, mutableInt0.longValue());
      assertEquals(11540.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals(11540, (int)integer3);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals("11540", mutableInt0.toString());
      assertEquals(11540.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(11540, mutableInt0.intValue());
      assertEquals((short)11540, mutableInt0.shortValue());
      assertEquals(11540, (int)mutableInt0.toInteger());
      assertEquals(11540, (int)mutableInt0.getValue());
      assertEquals(11540L, mutableInt0.longValue());
      assertEquals(11540.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertEquals(11540, (int)integer4);
      assertEquals(6, integerArray0.length);
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      MutableInt mutableInt1 = new MutableInt((Number) integerArray0[2]);
      assertEquals(6, integerArray0.length);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short)11540, mutableInt1.shortValue());
      assertEquals(11540, (int)mutableInt1.getValue());
      assertEquals(11540.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(11540, (int)mutableInt1.toInteger());
      assertEquals((byte)20, mutableInt1.byteValue());
      assertEquals(11540, mutableInt1.intValue());
      assertEquals("11540", mutableInt1.toString());
      assertEquals(11540.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(11540L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      
      mutableInt0.add((Number) integer2);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer4));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer4));
      assertTrue(integer2.equals((Object)integer3));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(23080.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(23080, (int)mutableInt0.toInteger());
      assertEquals(23080, mutableInt0.intValue());
      assertEquals((short)23080, mutableInt0.shortValue());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals("23080", mutableInt0.toString());
      assertEquals(23080, (int)mutableInt0.getValue());
      assertEquals(23080L, mutableInt0.longValue());
      assertEquals(23080.0F, mutableInt0.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      
      mutableInt0.subtract((int) integerArray0[1]);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer4));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertEquals("11540", mutableInt0.toString());
      assertEquals(11540.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(11540, mutableInt0.intValue());
      assertEquals((short)11540, mutableInt0.shortValue());
      assertEquals(11540, (int)mutableInt0.toInteger());
      assertEquals(11540, (int)mutableInt0.getValue());
      assertEquals(11540L, mutableInt0.longValue());
      assertEquals(11540.0F, mutableInt0.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      
      int int0 = mutableInt1.getAndAdd((Number) integerArray0[3]);
      assertEquals(11540, int0);
      assertEquals(6, integerArray0.length);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(23080, mutableInt1.intValue());
      assertEquals(23080L, mutableInt1.longValue());
      assertEquals(23080.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)23080, mutableInt1.shortValue());
      assertEquals(23080, (int)mutableInt1.getValue());
      assertEquals(23080, (int)mutableInt1.toInteger());
      assertEquals("23080", mutableInt1.toString());
      assertEquals((byte)40, mutableInt1.byteValue());
      assertEquals(23080.0F, mutableInt1.floatValue(), 0.01F);
      assertNotSame(mutableInt1, mutableInt0);
      
      mutableInt0.increment();
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(11541.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("11541", mutableInt0.toString());
      assertEquals((short)11541, mutableInt0.shortValue());
      assertEquals(11541, (int)mutableInt0.toInteger());
      assertEquals(11541, (int)mutableInt0.getValue());
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals(11541, mutableInt0.intValue());
      assertEquals(11541.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(11541L, mutableInt0.longValue());
      assertNotSame(mutableInt0, mutableInt1);
      
      int int1 = mutableInt0.compareTo(mutableInt1);
      assertEquals((-1), int1);
      assertEquals(6, integerArray0.length);
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(11541.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("11541", mutableInt0.toString());
      assertEquals((short)11541, mutableInt0.shortValue());
      assertEquals(11541, (int)mutableInt0.toInteger());
      assertEquals(11541, (int)mutableInt0.getValue());
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals(11541, mutableInt0.intValue());
      assertEquals(11541.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(11541L, mutableInt0.longValue());
      assertEquals(23080, mutableInt1.intValue());
      assertEquals(23080L, mutableInt1.longValue());
      assertEquals(23080.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)23080, mutableInt1.shortValue());
      assertEquals(23080, (int)mutableInt1.getValue());
      assertEquals(23080, (int)mutableInt1.toInteger());
      assertEquals("23080", mutableInt1.toString());
      assertEquals((byte)40, mutableInt1.byteValue());
      assertEquals(23080.0F, mutableInt1.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      Integer integer5 = new Integer(293);
      assertEquals(293, (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1684);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {11540, 11540, 11540, 11540, 11540, 293}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {11540, 11540, 11540, 11540, 293, 11540}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (int)integerArray0[2];
      floatArray0[1] = (float) (int)integerArray0[2];
      floatArray0[2] = (float) 11540;
      floatArray0[3] = (float) (int)integerArray0[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {11540.0F, 11540.0F, 11540.0F, 11540.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(11540);
      assertEquals(11540, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(11540, (int)integer1);
      assertEquals(6, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = 98;
      Integer integer2 = new Integer(98);
      assertEquals(98, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt((Number) integer1);
      assertEquals(6, integerArray0.length);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(11540, (int)mutableInt0.getValue());
      assertEquals((short)11540, mutableInt0.shortValue());
      assertEquals(11540, (int)mutableInt0.toInteger());
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(11540, mutableInt0.intValue());
      assertEquals(11540.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("11540", mutableInt0.toString());
      assertEquals(11540.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(11540L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals(11540, (int)integer3);
      assertEquals(6, integerArray0.length);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(11540, (int)mutableInt0.getValue());
      assertEquals((short)11540, mutableInt0.shortValue());
      assertEquals(11540, (int)mutableInt0.toInteger());
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(11540, mutableInt0.intValue());
      assertEquals(11540.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("11540", mutableInt0.toString());
      assertEquals(11540.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(11540L, mutableInt0.longValue());
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertEquals(11540, (int)integer4);
      assertEquals(6, integerArray0.length);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      MutableInt mutableInt1 = new MutableInt((Number) int0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short)98, mutableInt1.shortValue());
      assertEquals(98, mutableInt1.intValue());
      assertEquals("98", mutableInt1.toString());
      assertEquals(98L, mutableInt1.longValue());
      assertEquals(98, (int)mutableInt1.toInteger());
      assertEquals(98, (int)mutableInt1.getValue());
      assertEquals(98.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)98, mutableInt1.byteValue());
      assertEquals(98.0F, mutableInt1.floatValue(), 0.01F);
      assertNotNull(mutableInt1);
      
      mutableInt0.add((Number) integer2);
      assertEquals(6, integerArray0.length);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(11638, (int)mutableInt0.getValue());
      assertEquals(11638, (int)mutableInt0.toInteger());
      assertEquals("11638", mutableInt0.toString());
      assertEquals(11638L, mutableInt0.longValue());
      assertEquals((short)11638, mutableInt0.shortValue());
      assertEquals(11638.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)118, mutableInt0.byteValue());
      assertEquals(11638, mutableInt0.intValue());
      assertEquals(11638.0, mutableInt0.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      
      mutableInt0.subtract((int) integerArray0[1]);
      assertEquals(6, integerArray0.length);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer3));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertEquals(98L, mutableInt0.longValue());
      assertEquals(98.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(98, (int)mutableInt0.toInteger());
      assertEquals(98.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(98, (int)mutableInt0.getValue());
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals("98", mutableInt0.toString());
      assertEquals((short)98, mutableInt0.shortValue());
      assertEquals(98, mutableInt0.intValue());
      assertNotSame(mutableInt0, mutableInt1);
      
      int int1 = mutableInt1.getAndAdd((Number) integerArray0[3]);
      assertEquals(98, int1);
      assertEquals(6, integerArray0.length);
      assertTrue(int1 == int0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(11638.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(11638, (int)mutableInt1.toInteger());
      assertEquals((byte)118, mutableInt1.byteValue());
      assertEquals(11638, mutableInt1.intValue());
      assertEquals(11638.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(11638, (int)mutableInt1.getValue());
      assertEquals("11638", mutableInt1.toString());
      assertEquals(11638L, mutableInt1.longValue());
      assertEquals((short)11638, mutableInt1.shortValue());
      assertNotSame(mutableInt1, mutableInt0);
      
      mutableInt0.increment();
      assertEquals(6, integerArray0.length);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals(99L, mutableInt0.longValue());
      assertEquals(99.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("99", mutableInt0.toString());
      assertEquals(99, (int)mutableInt0.getValue());
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals(99, (int)mutableInt0.toInteger());
      assertEquals(99, mutableInt0.intValue());
      assertEquals((short)99, mutableInt0.shortValue());
      assertEquals(99.0, mutableInt0.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      
      int int2 = mutableInt0.compareTo(mutableInt1);
      assertEquals((-1), int2);
      assertEquals(6, integerArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer4));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)int1));
      assertTrue(int0 == int1);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(99L, mutableInt0.longValue());
      assertEquals(99.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("99", mutableInt0.toString());
      assertEquals(99, (int)mutableInt0.getValue());
      assertEquals((byte)99, mutableInt0.byteValue());
      assertEquals(99, (int)mutableInt0.toInteger());
      assertEquals(99, mutableInt0.intValue());
      assertEquals((short)99, mutableInt0.shortValue());
      assertEquals(99.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(11638.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(11638, (int)mutableInt1.toInteger());
      assertEquals((byte)118, mutableInt1.byteValue());
      assertEquals(11638, mutableInt1.intValue());
      assertEquals(11638.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(11638, (int)mutableInt1.getValue());
      assertEquals("11638", mutableInt1.toString());
      assertEquals(11638L, mutableInt1.longValue());
      assertEquals((short)11638, mutableInt1.shortValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      Integer integer5 = new Integer(293);
      assertEquals(293, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1684);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {11540, 11540, 98, 11540, 11540, 293}, intArray0);
      assertNotNull(intArray0);
      
      ArrayUtils.shuffle(intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {11540, 98, 11540, 11540, 293, 11540}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) 98;
      floatArray0[3] = (float) (int)integerArray0[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {98.0F, 98.0F, 98.0F, 11540.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      char char0 = 'S';
      charArray0[1] = 'S';
      char char1 = ')';
      charArray0[2] = ')';
      char char2 = '$';
      char[] charArray1 = ArrayUtils.add(charArray0, '$');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Z', 'S', ')'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'S', ')', '$'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte byte0 = (byte)61;
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Number number0 = null;
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 22.0F;
      floatArray0[1] = (-2818.0F);
      floatArray0[2] = 1.0F;
      ArrayUtils.swap(floatArray0, 256, 256, 256);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {22.0F, (-2818.0F), 1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '*';
      charArray0[2] = '1';
      charArray0[3] = '.';
      charArray0[4] = 'x';
      charArray0[5] = '-';
      charArray0[6] = '(';
      charArray0[7] = ':';
      charArray0[8] = '0';
      char[] charArray1 = ArrayUtils.add(charArray0, '}');
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'P', '*', '1', '.', 'x', '-', '(', ':', '0'}, charArray0);
      assertArrayEquals(new char[] {'P', '*', '1', '.', 'x', '-', '(', ':', '0', '}'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1815);
      intArray0[1] = (int) '(';
      intArray0[2] = (int) '0';
      intArray0[3] = (int) '.';
      intArray0[4] = (int) '.';
      intArray0[5] = (int) '.';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1815), 946);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1815, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 5441.27220567;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-52);
      byteArray0[8] = (byte) (-41);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1089), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1089, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(55, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte) (-65);
      byte byte0 = (byte) (-28);
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte)16;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1169, byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1169, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      floatArray0[1] = (float) (short) (-127);
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) (short) (-127);
      char[] charArray0 = new char[4];
      charArray0[0] = (char) character0;
      charArray0[1] = (char) character0;
      charArray0[2] = '0';
      charArray0[3] = 'Z';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2241, 5);
      assertEquals(0, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'Z', 'Z', '0', 'Z'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-29);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-115), (byte)36, (byte)13, (byte)99, (byte)124, (byte) (-29)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      Double double0 = new Double(2772.8173934251);
      assertEquals(2772.8173934251, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-79);
      longArray0[1] = (long) (byte) (-79);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[1] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2732);
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, 8, 1530);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2732.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'l';
      charArray0[2] = '+';
      charArray0[3] = 'z';
      charArray0[4] = ' ';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertArrayEquals(new char[] {'i', 'l', '+', 'z', ' '}, charArray0);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1651);
      shortArray0[1] = (short)1885;
      shortArray0[2] = (short) (-2002);
      shortArray0[3] = (short)14;
      shortArray0[4] = (short)193;
      shortArray0[5] = (short)355;
      shortArray0[6] = (short)255;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1651), (short)1885, (short) (-2002), (short)14, (short)193, (short)355, (short)255}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short) (-667);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)11540, (short) (-667)}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)89;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)89, (byte)89, (byte)89, (byte)89, (byte)89, (byte)89, (byte)89}, byteArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayUtils.swap((char[]) null, 1878, 18688);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2363.09388512;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3093.007;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((-887.0));
      assertEquals((-887.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(592.0F);
      assertEquals(592.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(199.25);
      assertEquals(199.25F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1.0));
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 592.0F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-887.0F), 592.0F, 199.25F, (-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-541);
      intArray0[1] = (-1996);
      intArray0[2] = (-475);
      intArray0[3] = 2683;
      intArray0[4] = 121;
      intArray0[5] = 15;
      intArray0[6] = 128;
      intArray0[7] = 281;
      intArray0[8] = 16;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 15);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-541), (-1996), (-475), 2683, 121, 15, 128, 281, 16}, intArray0);
      assertArrayEquals(new int[] {(-541), (-1996), (-475), 2683, 121, 128, 281, 16}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1), (short)0, (short)88, (short)0, (short) (-1)}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, (int) 0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Double double1 = new Double(2684.703755);
      assertEquals(2684.703755, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) "gnDw,2}B TArND=*fF}", (int) (short)88);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)53}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (byte)78;
      long[] longArray2 = ArrayUtils.add(longArray1, 2521L);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {78L}, longArray1);
      assertArrayEquals(new long[] {78L, 2521L}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray2);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)91, 1845);
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)78);
      assertEquals(78.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)78, (byte)78, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)78, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      ArrayUtils.shift(byteArray1, (int) (byte)78);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)78, (byte)78, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)78, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 43;
      floatArray0[1] = (-1550.0F);
      floatArray0[2] = (float) (byte)121;
      floatArray0[3] = (float) (byte)78;
      floatArray0[4] = (float) (byte)121;
      floatArray0[5] = (float) (byte)121;
      floatArray0[6] = (float) 43;
      floatArray0[7] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(7, int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {43.0F, (-1550.0F), 121.0F, 78.0F, 121.0F, 121.0F, 43.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'H';
      floatArray0[2] = (-3046.7F);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1666);
      shortArray0[2] = (short) (-1232);
      shortArray0[3] = (short)3;
      shortArray0[4] = (short) (-873);
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-1666), (short) (-1232), (short)3, (short) (-873), (short) (-1666), (short) (-1232), (short)3, (short) (-873)}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short) (-1666), (short) (-1232), (short)3, (short) (-873)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      floatArray0[1] = (float) (short) (-127);
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) (short) (-127);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2145999554);
      assertEquals(4, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {(-127.0F), (-127.0F), 90.0F, (-127.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-127);
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) 2145999554;
      longArray0[3] = (long) (short) (-127);
      longArray0[4] = (long) (char)character0;
      longArray0[5] = (long) (char)character0;
      longArray0[6] = (long) 2145999554;
      longArray0[7] = (long) 'Z';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray1);
      assertArrayEquals(new long[] {(-127L), 90L, 2145999554L, (-127L), 90L, 90L, 2145999554L, 90L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)322);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      assertArrayEquals(new short[] {(short)322, (short) (-127)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0, (-126), (double) (-126));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 37.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-285.6)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2354);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2354), (-126));
      assertEquals(0, int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2354), (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2354), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-2354), (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-38));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte) (-38);
      intArray1[1] = 45;
      intArray1[2] = 32;
      intArray1[4] = 32;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      assertEquals((short)6, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)6);
      assertEquals((short)6, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short2);
      assertEquals((short)6, object0);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertTrue(object0.equals((Object)short1));
      assertTrue(object0.equals((Object)short0));
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) short1);
      assertEquals((short)6, object1);
      assertTrue(short1.equals((Object)short2));
      assertTrue(short1.equals((Object)short0));
      assertTrue(short1.equals((Object)object0));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)short0));
      assertTrue(object1.equals((Object)short2));
      assertNotNull(object1);
      
      byte byte0 = (byte)47;
      Byte byte1 = new Byte((byte)47);
      assertEquals((byte)47, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte)47, object2);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object2.equals((Object)byte0));
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[3];
      Object object3 = ArrayUtils.get(objectArray0, (int) 47);
      assertEquals(3, objectArray0.length);
      assertNull(object3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)47;
      intArray0[1] = (int) (byte)47;
      int int0 = 1651;
      intArray0[2] = 1651;
      intArray0[3] = (int) (short)6;
      intArray0[4] = (int) (short)6;
      intArray0[5] = (int) (byte)47;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1651, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotNull(integerArray0);
      
      Integer integer0 = new Integer((-2384));
      assertEquals((-2384), (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = Long.getLong("X");
      assertNull(long0);
      
      Long long1 = new Long(1003);
      assertEquals(1003L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(1);
      assertEquals(1L, (long)long2);
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long long3 = new Long(4913L);
      assertEquals(4913L, (long)long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = 'f';
      charArray0[1] = ';';
      charArray0[2] = 'n';
      charArray0[3] = 'T';
      charArray0[4] = ':';
      charArray0[5] = '>';
      charArray0[6] = 'U';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'U');
      assertEquals(17, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) ':';
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) ':';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 58.0, 87);
      assertEquals(7, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new double[] {102.0, 59.0, 84.0, 58.0, 62.0, 58.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1211.742219);
      doubleArray0[1] = (double) (byte) (-79);
      doubleArray0[2] = (double) (byte) (-79);
      doubleArray0[3] = 1410.71908491035;
      doubleArray0[4] = (double) (byte) (-79);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-79.0), Integer.MAX_VALUE);
      assertEquals(5, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-1211.742219), (-79.0), (-79.0), 1410.71908491035, (-79.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1211.742219), 2837.50838118);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1211.742219), (-79.0), (-79.0), 1410.71908491035, (-79.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 2.14748365E9F, 2.14748365E9F, 0.0F, 2.14748365E9F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1178.9192032));
      assertEquals((-1178.9192F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2.0));
      assertEquals((-2.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1178.9192F), (-2.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      Short short0 = new Short((short)1382);
      assertEquals((short)1382, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1382);
      assertEquals((short)1382, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      ArrayUtils.shift((Object[]) floatArray0, 404);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 321;
      intArray0[2] = (-1148);
      intArray0[3] = (-2202);
      intArray0[4] = (-2146845275);
      intArray0[5] = (-1148);
      intArray0[6] = (int) (short) (-1);
      ArrayUtils.shift(intArray0, 76);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {321, (-1148), (-2202), (-2146845275), (-1148), (-1), (-1)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), 321);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, (-1178.9192032)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      ArrayUtils.swap(longArray0, (-1), (-1), (-1));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2511.4774), 7327.14191003);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 55, (-3095), 172.33411136221);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 57L);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 57L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = new Boolean("!&,Gf`#n,{l;");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-38.0);
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 0.1;
      doubleArray0[3] = (-2483.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-38.0), 3.0, 0.1, (-2483.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      floatArray0[4] = (-843.0F);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(7, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = new Boolean[5];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) true;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) false;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertEquals(5, booleanArray3.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray3));
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'f';
      charArray0[2] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'W', Integer.MAX_VALUE);
      assertEquals(3, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'W', 'f', 'v'}, charArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)217;
      longArray0[1] = (long) (short)217;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {217L, 217L}, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) true;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)(short)217).when(comparator0).compare(any() , any());
      boolean boolean1 = ArrayUtils.isSorted(objectArray0, comparator0);
      assertFalse(boolean1);
      assertEquals(8, objectArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = 0.0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[2] = 'U';
      charArray0[3] = ']';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\u0000');
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'g', '\u0000', 'U', ']'}, charArray0);
      assertArrayEquals(new char[] {'g', 'U', ']'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      ArrayUtils.swap(byteArray0, (-400), 1427);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)7, (byte)7, (byte)7, (byte)7}, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) ']';
      intArray0[1] = (int) (byte)7;
      intArray0[2] = (int) '2';
      intArray0[3] = (int) '2';
      intArray0[4] = (int) ']';
      intArray0[5] = (int) 'U';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)7, (int) (byte)7);
      assertEquals(1, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {93, 7, 50, 50, 93, 85}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      int[] intArray0 = new int[2];
      intArray0[0] = 1114111;
      intArray0[1] = (int) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-59), (int) (byte)2);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1114111, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 1578);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Object[] objectArray0 = new Object[8];
      Object object1 = ArrayUtils.get(objectArray0, (-1796));
      assertEquals(8, objectArray0.length);
      assertNull(object1);
      
      objectArray0[0] = null;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      objectArray0[7] = object0;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 1578);
      assertEquals((-1), int1);
      assertEquals(8, objectArray0.length);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Character character0 = new Character('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      charArray0[2] = '1';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 440;
      intArray0[1] = (int) 'N';
      intArray0[2] = (int) '1';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-59), (int) (byte)2);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {440, 78, 49}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char0 = 'O';
      Character character1 = new Character('O');
      assertEquals('O', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      characterArray0[2] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertEquals('O', (char)character2);
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf(char0);
      assertEquals('O', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[4] = character3;
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertTrue(boolean0);
      assertEquals(5, characterArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-4327);
      ArrayUtils.shift(intArray0, 0, (int) char0, (int) character1);
      assertEquals(1, intArray0.length);
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character2));
      assertArrayEquals(new int[] {(-4327)}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (char)character1;
      floatArray0[2] = 347.887F;
      floatArray0[3] = (float) '(';
      floatArray0[4] = (float) 'O';
      floatArray0[5] = (float) (char)character1;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 79.0F, 347.887F, 40.0F, 79.0F, 79.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 79.0F, 347.887F, 40.0F, 79.0F, 79.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1410), 755);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-4327)}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) char0;
      longArray0[3] = (long) (char)character0;
      longArray0[4] = (long) '(';
      longArray0[5] = (long) (char)character1;
      longArray0[6] = (long) 755;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, 755);
      assertEquals(7, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {79L, (-1L), 79L, 40L, 40L, 79L, 755L}, longArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-378.0F);
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 543, 543);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      Long[] longArray1 = new Long[9];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 0L;
      longArray1[4] = (Long) 0L;
      longArray1[5] = (Long) 0L;
      longArray1[6] = (Long) 0L;
      longArray1[7] = (Long) 0L;
      longArray1[8] = (Long) 0L;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(9, longArray2.length);
      assertEquals(9, longArray1.length);
      assertSame(longArray2, longArray1);
      assertSame(longArray1, longArray2);
      assertNotNull(longArray2);
      
      ArrayUtils.shift((boolean[]) null, (int) (short)0, (int) (short) (-589), (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((short)217);
      assertEquals(217L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(6157L);
      assertEquals(6157L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals(6157L, (long)long2);
      assertEquals(7, longArray0.length);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertEquals(6157L, (long)long3);
      assertEquals(7, longArray0.length);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(0L);
      assertEquals(0L, (long)long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(6157L);
      assertEquals(6157L, (long)long5);
      assertTrue(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long2));
      assertNotNull(long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(0L);
      assertEquals(0L, (long)long6);
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertNotNull(long6);
      
      longArray0[6] = long6;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-126);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-78), (byte) (-126)}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 43;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) longArray0[0]);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 43.0F}, floatArray0, 0.01F);
      assertSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      ArrayUtils.shift(intArray0, 263);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {4, 4, 4, 4}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1505);
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1505), (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (int) (short) (-1505));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short)2852;
      shortArray0[1] = (short)927;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertEquals(12, shortArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      Short short0 = new Short((short)217);
      assertEquals((short)217, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short)217);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, 36);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) (-1.0F);
      objectArray0[3] = (Object) (-1.0F);
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) (-1.0F);
      Integer integer0 = new Integer((-2146845275));
      assertEquals((-2146845275), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2146845275), object0);
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) (-1.0F);
      ArrayUtils.shift(objectArray0, 2146575273);
      assertEquals(8, objectArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 795;
      intArray0[1] = 78;
      intArray0[2] = (-2720);
      intArray0[3] = (-2146845275);
      intArray0[4] = 795;
      intArray0[5] = 2146575273;
      intArray0[6] = 78;
      ArrayUtils.shift(intArray0, 795);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2146845275), 795, 2146575273, 78, 795, 78, (-2720)}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2852;
      shortArray0[1] = (short)265;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)346;
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2852, (short)265, (short)2151, (short)346, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-378.0F);
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 753, (-3532.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 753, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      ArrayUtils.swap(floatArray0, 2146, (-2585), (-2585));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2146;
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) 2146L;
      longArray1[1] = (Long) 2146L;
      longArray1[2] = (Long) 2146L;
      longArray1[3] = (Long) 2146L;
      longArray1[4] = (Long) 2146L;
      longArray1[5] = (Long) 2146L;
      longArray1[7] = (Long) 2146L;
      Long long0 = new Long((long) longArray1[4]);
      assertEquals(2146L, (long)long0);
      assertEquals(8, longArray1.length);
      assertNotNull(long0);
      
      Long[] longArray2 = ArrayUtils.removeAllOccurences(longArray1, long0);
      assertEquals(8, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1212;
      shortArray0[1] = (short)3400;
      shortArray0[2] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3400);
      assertEquals(7, shortArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)1212, (short)3400, (short) (-1), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2585);
      intArray0[1] = (int) (short)1212;
      intArray0[2] = (int) (short) (-1);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2585), 1212, (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 54, 54);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-2405), (-1));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 2, (-943));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1157);
      intArray0[1] = (-1120);
      intArray0[2] = (-1);
      intArray0[3] = 365;
      intArray0[4] = 1;
      intArray0[5] = (-1436);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1157), (-1120), (-1), 365, 1, (-1436)}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1120);
      floatArray0[1] = (float) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 365, 3118.7192F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 365, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-495.588));
      assertEquals((-495.588), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2129.4599435);
      assertEquals(2129.4599435, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2129.4599435);
      assertEquals(2129.4599435, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      assertEquals((-495.588), (double)double4, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-1203.6));
      assertEquals((-1203.6), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-4480.60417));
      assertEquals((-4480.60417), (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double2);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals((double)double2, (double)double4, 0.01);
      assertNotEquals((double)double2, (double)double6, 0.01);
      assertNotEquals((double)double2, (double)double7, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double3, 0.01);
      assertNotEquals((double)double2, (double)double5, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(6, int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 'm';
      floatArray0[2] = (float) 'm';
      floatArray0[3] = (float) 'm';
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (short)11540;
      floatArray0[6] = (-844.0433F);
      floatArray0[7] = (float) (short)11540;
      floatArray0[8] = (float) (short)11540;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 2227.906F);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 109.0F, 109.0F, 109.0F, 0.0F, 11540.0F, (-844.0433F), 11540.0F, 11540.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2227.906F, 0.0F, 109.0F, 109.0F, 109.0F, 0.0F, 11540.0F, (-844.0433F), 11540.0F, 11540.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) (short)11540, 'm');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11540, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      int int0 = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1), '`');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      float[] floatArray0 = new float[14];
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '';
      charArray0[2] = 'C';
      charArray0[3] = '*';
      char[] charArray1 = ArrayUtils.add(charArray0, 2, ' ');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'X', '', 'C', '*'}, charArray0);
      assertArrayEquals(new char[] {'X', '', ' ', 'C', '*'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) 2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) floatArray1, (Object[]) floatArray1);
      assertTrue(boolean0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), 1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, (-2343), (-2343));
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 297.3794F;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 2384, (-1));
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {297.3794F}, floatArray0, 0.01F);
      
      Character character0 = Character.valueOf('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('r');
      assertEquals('r', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('D');
      assertEquals('D', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character character3 = new Character(':');
      assertEquals(':', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 879.78754F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {297.3794F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {297.3794F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 1, 2384, 732);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-127);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)3442);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-378.0F);
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'Y';
      charArray0[2] = 'V';
      charArray0[3] = 'E';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'P', 'Y', 'V', 'E'}, charArray0);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = (-1436);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {10, (-1436)}, intArray0);
      assertArrayEquals(new int[] {10, (-1436)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1436);
      longArray0[1] = (long) 10;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 10);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1436L), 10L}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'D';
      charArray0[2] = '@';
      charArray0[3] = 'i';
      charArray0[4] = '#';
      charArray0[5] = 'E';
      charArray0[6] = 'G';
      charArray0[7] = '/';
      charArray0[8] = 'M';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'`', 'D', '@', 'i', '#', 'E', 'G', '/', 'M'}, charArray0);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 10);
      assertEquals(3, int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-589);
      shortArray0[1] = (short) (-589);
      shortArray0[2] = (short)975;
      shortArray0[3] = (short)975;
      shortArray0[4] = (short) (-589);
      shortArray0[5] = (short)8;
      shortArray0[6] = (short)975;
      shortArray0[7] = (short)8;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 1250.1653F);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ArrayUtils.swap((char[]) null, (int) (short)8, 2146853147);
      int int1 = ArrayUtils.indexOf((boolean[]) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short) (-589);
      intArray0[2] = (int) (short) (-589);
      intArray0[3] = (int) (short) (-589);
      intArray0[4] = (int) (short) (-589);
      intArray0[5] = (int) (short)975;
      intArray0[6] = (-38);
      intArray0[7] = (int) (short)975;
      intArray0[8] = (int) (short)975;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {(-1), (-589), (-589), (-589), (-589), 975, (-38), 975, 975}, intArray0);
      assertArrayEquals(new int[] {(-1), (-589), (-589), (-589), (-589), 975, (-38), 975, 975}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1133.0);
      doubleArray0[1] = (double) (short)217;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3240.0), (-1.0));
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1133.0), 217.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0, (-126), (double) (-126));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 37.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-285.6)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2354);
      shortArray0[1] = (short)116;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)88);
      assertEquals(2, shortArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new short[] {(short) (-2354), (short)116}, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byte byte1 = (byte)10;
      byteArray0[3] = (byte)10;
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-85), (byte)10, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-85), (byte)10, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 4366.0, 4, (double) (byte)0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-253));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -253, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3621L);
      longArray0[1] = 3119L;
      longArray0[2] = 3119L;
      longArray0[3] = 3119L;
      longArray0[4] = 3119L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {3119L, 3119L, 3119L, 3119L, (-3621L)}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'X';
      charArray0[2] = 'V';
      charArray0[3] = 'B';
      charArray0[4] = 'H';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'p', 'X', 'V', 'B', 'H'}, charArray0);
      assertArrayEquals(new char[] {'p', 'X', 'V', 'B', 'H'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) 3119L;
      doubleArray0[2] = (double) 'B';
      int int0 = new Integer('V');
      assertEquals(86, int0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 86, 2146318437);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {177.13183}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = 'H';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = 'H';
      charArray0[6] = 'H';
      charArray0[7] = '3';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'8', '8', 'H', '8', '8', 'H', 'H', '3'}, charArray0);
      assertArrayEquals(new char[] {'8', 'H', '8', '8', 'H', 'H', '3'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Integer integer0 = new Integer((-12));
      assertEquals((-12), (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, Integer.MAX_VALUE, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 803.67611398);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4;
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)4;
      intArray0[1] = (int) (short)4;
      intArray0[2] = (int) (short)4;
      intArray0[3] = (int) (short)4;
      intArray0[4] = (int) (short)4;
      ArrayUtils.shift(intArray0, (int) (short) (-2570), 1913, 10);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {4, 4, 4, 4, 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1109.61591330398);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1109.61591330398}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 293, (-1));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      ArrayUtils.reverse(floatArray0, 2, (-422));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-840.7538F);
      floatArray0[1] = 1896.0F;
      floatArray0[2] = (-843.0F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-840.7538F), 1896.0F, (-843.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-840.7538F), (-843.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 2, 311);
      assertNull(charArray0);
      
      ArrayUtils.reverse((Object[]) classArray0, (-3511), 15);
      assertEquals(1, classArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1156L);
      longArray0[1] = (long) 311;
      int int0 = ArrayUtils.indexOf(longArray0, (long) 311, 5);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1156L), 311L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 5);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (long) (-1);
      longArray0[1] = 3119L;
      longArray0[2] = (long) (-1);
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(";~6Atgq1ZWfl ");
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean4 = Boolean.valueOf("0X");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[0] = boolean4;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean3;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1L), 175);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-628), (-628));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      ArrayUtils.swap((long[]) null, (-24), (-24), (-21));
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 0, (-21));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)217;
      longArray0[1] = (long) (short)217;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {217L, 217L}, longArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) true;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      boolean boolean1 = ArrayUtils.isSorted(objectArray0, comparator0);
      assertTrue(boolean1);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)975;
      shortArray0[2] = (short) (-589);
      shortArray0[3] = (short) (-589);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short)975, (short) (-589), (short) (-589)}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-589);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-589);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short) (-589);
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short) (-589);
      doubleArray0[7] = (double) (short)975;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2172.598876723642);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-589.0), 0.0, (-589.0), 0.0, (-589.0), 0.0, (-589.0), 975.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9Zg{kW}gc|0cW e\"^>";
      stringArray0[1] = "V6KD3qsE";
      boolean boolean1 = ArrayUtils.isSorted(stringArray0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      Short short0 = new Short((short) (-85));
      assertEquals((short) (-85), (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short) (-85), object0);
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object1, object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('r');
      assertEquals('r', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('r');
      assertEquals('r', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character1);
      assertEquals('r', (char)character3);
      assertTrue(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character2);
      assertEquals('r', (char)character4);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('b');
      assertEquals('b', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1886), (int) (byte)0);
      assertEquals(0, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-378.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-378.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-378.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Long long0 = new Long(2714L);
      assertEquals(2714L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) long0, (Object) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-378.0F);
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Long long0 = new Long(2714L);
      assertEquals(2714L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) long0, (Object) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)19;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)88, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)19}, byteArray0);
      
      ArrayUtils.reverse(booleanArray0, (int) (byte)19, (int) (byte) (-1));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-199.16621F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, (-278L), (-1));
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1212);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Float float0 = new Float((float) 1212);
      assertEquals(1212.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(322);
      assertEquals(322, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(float0, integer0);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[6]);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {1212.0F, 1212.0F, 1212.0F, 1212.0F, 1212.0F, 1212.0F, 1212.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)34;
      Short short0 = new Short((short)32226);
      assertEquals((short)32226, (short)short0);
      assertNotNull(short0);
      
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse(booleanArray1, (int) (short)34, 8);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'F';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p', 8);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'p', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) floatArray1, (Object) boolean0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'R', 'R', 'R'}, charArray0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) 'R';
      Character character1 = ArrayUtils.get(characterArray0, 0);
      assertNotNull(character1);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 1, 'g');
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'R');
      assertArrayEquals(new char[] {'R', 'g', 'R', 'R'}, charArray1);
      assertArrayEquals(new char[] {'g'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = (char) character0;
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', 'Z', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-482));
      assertEquals((short) (-482), (short)short0);
      assertNotNull(short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)121, (byte)121}, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3570);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3570)}, shortArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2, "R");
      assertEquals(0, stringArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-3570), (int) (byte)121);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, char0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = ':';
      charArray0[2] = 'U';
      charArray0[3] = '\"';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ':');
      assertEquals(1, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'%', ':', 'U', '\"'}, charArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'%', ':', 'U', '\"'}, charArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 606.18805F, 1);
      assertEquals((-1), int1);
      assertEquals(0, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) ':';
      characterArray0[1] = (Character) '%';
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      ArrayUtils.shift(charArray0, (int) characterArray0[0], 1212, 1);
      assertEquals(4, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertArrayEquals(new char[] {'%', ':', 'U', '\"'}, charArray0);
      assertNotSame(characterArray0, characterArray1);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\"', 'U', ':', '%'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '%';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2820), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2820, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)34;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (byte) (-57);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (byte)22;
      floatArray0[4] = (float) (byte) (-41);
      floatArray0[5] = (float) (byte) (-57);
      floatArray0[6] = (float) (byte)22;
      floatArray0[7] = (float) (byte)22;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (byte) (-41));
      assertTrue(boolean1);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-57.0F), 0.0F, 22.0F, (-41.0F), (-57.0F), 22.0F, 22.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-57.0F);
      objectArray0[1] = (Object) (-41.0F);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (byte)22;
      objectArray0[4] = (Object) 22.0F;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 22.0F;
      objectArray0[7] = (Object) (-57.0F);
      objectArray0[8] = object0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 3119L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {3119L}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-627.4F);
      floatArray0[1] = (-6300.2F);
      floatArray0[2] = (-1337.0F);
      floatArray0[3] = 879.78754F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-820.88F);
      floatArray0[6] = 172.04F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-820.88F));
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-627.4F), (-6300.2F), (-1337.0F), 879.78754F, (-1.0F), (-820.88F), 172.04F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      ArrayUtils.swap(floatArray0, 2146, (-2585), (-2585));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2146;
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) 2146L;
      longArray1[1] = (Long) 2146L;
      longArray1[2] = (Long) 2146L;
      longArray1[3] = (Long) 2146L;
      longArray1[4] = (Long) 2146L;
      longArray1[5] = (Long) 2146L;
      longArray1[7] = (Long) 2146L;
      Long long0 = new Long((long) longArray1[4]);
      assertEquals(2146L, (long)long0);
      assertEquals(8, longArray1.length);
      assertNotNull(long0);
      
      Long[] longArray2 = ArrayUtils.removeAllOccurences(longArray1, long0);
      assertEquals(8, longArray1.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1212;
      shortArray0[1] = (short)3400;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-4);
      shortArray0[4] = (short)253;
      shortArray0[5] = (short)84;
      shortArray0[6] = (short) (-938);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-938));
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1212, (short)3400, (short) (-1), (short) (-4), (short)253, (short)84, (short) (-938)}, shortArray0);
      assertArrayEquals(new short[] {(short)1212, (short)3400, (short) (-1), (short) (-4), (short)253, (short)84}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)57, (byte)0, (byte)57, (byte)53, (byte) (-70), (byte)0}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)53;
      doubleArray0[2] = (double) (byte)57;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {53.0, 57.0, 0.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((byte)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)0);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short)0, (short)short2);
      assertEquals(7, shortArray0.length);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((byte)0);
      assertEquals((short)0, (short)short3);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)430);
      assertEquals((short)430, (short)short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((byte)53);
      assertEquals((short)53, (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)430, (short)53, (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short) (-49);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)15);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)15, (short) (-49)}, shortArray0);
      assertArrayEquals(new short[] {(short)15, (short) (-49), (short)15}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 15;
      intArray0[1] = 57;
      intArray0[2] = 2;
      intArray0[3] = 1288490189;
      intArray0[4] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {15, 57, 2, 1288490189, (-1)}, intArray0);
      assertArrayEquals(new int[] {15, 57, 1288490189, (-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1288490189;
      doubleArray0[2] = (double) 1288490189;
      doubleArray0[3] = (double) 15;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 1288490189;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 1.288490189E9, 1.288490189E9, 15.0, 2.0, (-1.0), 1.288490189E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 1.288490189E9, 1.288490189E9, 15.0, 2.0, (-1.0), 1.288490189E9}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1288490189;
      longArray0[1] = (long) 15;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 57;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 57;
      int int0 = ArrayUtils.indexOf(longArray0, 1L);
      assertEquals((-1), int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1288490189L, 15L, 2L, 57L, 2L, 57L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = '-';
      Character character0 = Character.valueOf('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('-', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('-', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('-');
      assertEquals('-', (char)character3);
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertEquals('-', (char)character4);
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'n');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-'}, charArray0);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)46;
      ArrayUtils.shift(byteArray0, 2810, (int) (byte) (-95), 0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-85), (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2810;
      intArray0[1] = (int) (byte) (-95);
      intArray0[2] = (int) (byte)46;
      intArray0[3] = (int) (byte)46;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-688));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2810, (-95), 46, 46}, intArray0);
      assertArrayEquals(new int[] {2810, (-95), 46, 46}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)16;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (byte)16;
      ArrayUtils.reverse(shortArray0, (int) (byte) (-28), 186);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)16, (short) (-1)}, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 186;
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (-811L);
      longArray0[4] = (long) (byte) (-65);
      longArray0[5] = (long) (byte)2;
      longArray0[6] = (long) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2L);
      assertEquals(5, int0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {186L, (-1L), (-1L), (-811L), (-65L), 2L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = (long) (-1);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (-1);
      longArray0[3] = (-1L);
      ArrayUtils.shift(longArray0, (-530), (-1), (-2213));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L)}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 3119L, (-1));
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3570);
      shortArray0[1] = (short) (-3570);
      shortArray0[2] = (short)110;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)2;
      ArrayUtils.reverse(shortArray0, (-312), (int) (short) (-3570));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3570), (short) (-3570), (short)110, (short) (-1), (short)2, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1933L);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0, 0, 3682);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      Double double2 = new Double(3682);
      assertEquals(3682.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[3] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[4] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[5] = double4;
      Double double5 = new Double(1.0);
      assertEquals(1.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[6] = double5;
      Double double6 = new Double((-4003.0));
      assertEquals((-4003.0), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      
      doubleArray0[7] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3682.0, 0.0, 0.0, 1.0, (-4003.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3682;
      longArray0[1] = (long) 3682;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1906L);
      assertEquals((-1), int1);
      assertEquals(5, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {3682L, 3682L, 2147483647L, 2147483647L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'H';
      floatArray0[2] = (-3046.7F);
      floatArray0[3] = (float) 'H';
      floatArray0[4] = (float) 'H';
      float[] floatArray1 = ArrayUtils.add(floatArray0, 5, 72.0F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {72.0F, 72.0F, (-3046.7F), 72.0F, 72.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {72.0F, 72.0F, (-3046.7F), 72.0F, 72.0F, 72.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = 2199.59F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-749.0F);
      floatArray0[6] = 151.71002F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2199.59F, 2199.59F, 0.0F, 0.0F, (-1.0F), (-749.0F), 151.71002F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-749.0F);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 151.71002F, (-1133.0));
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-749.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-59);
      intArray0[2] = 2888;
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean2);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      int[] intArray0 = new int[7];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3989.285;
      doubleArray0[1] = (-2996.063018275);
      doubleArray0[2] = (-1684.3297823604);
      doubleArray0[3] = 0.1;
      doubleArray0[4] = (-684.939584773);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {3989.285, (-2996.063018275), (-1684.3297823604), 0.1, (-684.939584773)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 321;
      intArray0[2] = 78;
      intArray0[3] = 2146575273;
      intArray0[4] = (-1148);
      intArray0[5] = (-2146845275);
      intArray0[0] = 795;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2146845275);
      ArrayUtils.shift(objectArray0, 78);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(intArray0, (-2146845275));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {321, 78, 2146575273, (-1148), (-2146845275), 0, 795}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 78;
      doubleArray0[2] = (double) 2146575273;
      doubleArray0[3] = (double) 12;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 78.0, 2.146575273E9, 12.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1828;
      shortArray0[1] = (short) (-49);
      shortArray0[2] = (short) (-419);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)9;
      shortArray0[7] = (short)6;
      shortArray0[8] = (short)42;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-11782));
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)1828, (short) (-49), (short) (-419), (short) (-1), (short) (-1), (short)0, (short)9, (short)6, (short)42}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-840.7538F), 3179.06F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      long long0 = 0L;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-988.5644F));
      assertFalse(boolean1);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-840.7538F), 3179.06F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-589.0);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 79.0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, (-589.0), 1.5, (-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, (-1574), (Object) null);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Character[] characterArray0 = new Character[8];
      char char0 = ':';
      Character character0 = Character.valueOf(':');
      assertEquals(':', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals(':', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ':';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) (-5357);
      longArray0[3] = (long) (-5357);
      longArray0[4] = (long) (-5357);
      longArray0[5] = 2622L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-927819929), 1767);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {58L, 58L, (-5357L), (-5357L), (-5357L), 2622L}, longArray1);
      assertArrayEquals(new long[] {58L, 58L, (-5357L), (-5357L), (-5357L), 2622L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1574), (-5357));
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {58.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3255L);
      longArray0[1] = 1L;
      longArray0[2] = 897L;
      longArray0[3] = (-4117L);
      longArray0[4] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 57, 337);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3255L), 1L, 897L, (-4117L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-361L);
      longArray0[1] = (-361L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-361L), (-361L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)100;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-110), (byte)120, (byte)100}, byteArray0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (int) (byte) (-110));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((byte[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)217;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      ArrayUtils.swap(floatArray0, (-37), (-37), (-2585));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 88.0F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {217L, 0L, 217L, 0L}, longArray1);
      assertArrayEquals(new long[] {217L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2585);
      intArray0[1] = (int) (short)217;
      intArray0[2] = (int) (short)217;
      intArray0[3] = (-2585);
      intArray0[4] = (-37);
      intArray0[5] = (-37);
      intArray0[6] = (int) (short)217;
      intArray0[7] = (-2585);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 4);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2585), 217, 217, (-2585), (-37), (-37), 217, (-2585)}, intArray0);
      assertArrayEquals(new int[] {4, (-2585), 217, 217, (-2585), (-37), (-37), 217, (-2585)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1270.312786344), (-3999.123));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-45);
      ArrayUtils.swap(byteArray0, 1351, (int) (byte) (-45));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-45), (byte)10, (byte) (-45), (byte) (-45), (byte) (-45), (byte)10, (byte)10, (byte)10, (byte) (-45)}, byteArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (byte) (-45));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-45)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      MockRandom mockRandom0 = new MockRandom((byte)112);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 321;
      intArray0[2] = 78;
      intArray0[3] = 2146575273;
      intArray0[4] = (-1148);
      intArray0[5] = (-2146845275);
      intArray0[0] = (-1148);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2146845275);
      ArrayUtils.shift(objectArray0, 78);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(intArray0, (-2146845275));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2146845275), (-1148), 321, 78, 2146575273, (-1148)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1156L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = object0;
      ArrayUtils.shift(objectArray0, Integer.MAX_VALUE, 1837, 1837);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 321;
      intArray0[2] = 78;
      intArray0[3] = 2146575273;
      intArray0[4] = (-1148);
      intArray0[5] = (-2146845275);
      intArray0[0] = 795;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2146845275);
      ArrayUtils.shift(objectArray0, 78);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(intArray0, (-2146845275));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {321, 78, 2146575273, (-1148), (-2146845275), 0, 795}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = ':';
      charArray0[2] = 'U';
      charArray0[3] = '\"';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2654.4);
      doubleArray0[1] = (double) 'U';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = 0.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 58.0, 85.0, (-2654.4)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[2];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('O');
      assertEquals('O', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = '@';
      charArray0[2] = 'O';
      charArray0[3] = (char) character0;
      charArray0[4] = '\\';
      ArrayUtils.reverse(charArray0, (-4056), 789);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\\', '(', 'O', '@', 'I'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = (double) (-4056);
      doubleArray0[3] = (double) 789;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {73.0, 64.0, (-4056.0), 789.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {73.0, 64.0, (-4056.0), 789.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {73.0, 64.0, (-4056.0), 789.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      
      ArrayUtils.reverse(doubleArray2, 1382, 789);
      assertEquals(0, intArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {73.0, 64.0, (-4056.0), 789.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {73.0, 64.0, (-4056.0), 789.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) char0;
      floatArray0[2] = (float) char0;
      floatArray0[3] = (float) char0;
      int int0 = ArrayUtils.indexOf(floatArray0, (-125.051F), (int) char0);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {82.0F, 0.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      
      Character character1 = Character.valueOf('7');
      assertEquals('7', (char)character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('1');
      assertEquals('1', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      
      Character character3 = new Character('a');
      assertEquals('a', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      
      Character character4 = new Character('R');
      assertEquals('R', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      Character[] characterArray2 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray2.length);
      assertSame(characterArray0, characterArray2);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray2, characterArray1);
      assertSame(characterArray2, characterArray0);
      assertNotNull(characterArray2);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-125.051F));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {82.0F, 0.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {82.0F, 0.0F, 82.0F, 82.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((char[]) null, (-1), 5, (-2359));
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) 1L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2]);
      assertEquals(6, objectArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean("', has a length less than 2");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("X\"T");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean1);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean("', has a length less than 2");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean("long");
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("char");
      assertFalse(boolean8);
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean5));
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '4';
      charArray0[2] = 'L';
      charArray0[3] = 'M';
      charArray0[4] = '@';
      charArray0[5] = 'S';
      ArrayUtils.swap(charArray0, (-2147068555), 2833);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'R', '4', 'L', 'M', '@', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1485.0330484334;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-37);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)120);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-26), (byte) (-37)}, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-26);
      longArray0[1] = (long) (byte) (-26);
      longArray0[2] = (long) (byte) (-26);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1338L);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-26L), (-26L), (-26L)}, longArray0);
      assertArrayEquals(new long[] {(-26L), (-26L), (-26L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (byte) (-37);
      shortArray0[2] = (short) (byte) (-26);
      shortArray0[3] = (short) (byte) (-37);
      shortArray0[4] = (short) (byte)120;
      shortArray0[5] = (short) (byte)120;
      ArrayUtils.swap(shortArray0, (int) (byte)120, (-2419), (int) (short) (-37));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-37), (short) (-26), (short) (-37), (short)120, (short)120}, shortArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-26);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short)120);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-26)}, intArray0);
      assertArrayEquals(new int[] {(-26)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)32;
      floatArray0[1] = (float) (byte)32;
      floatArray0[2] = (float) (byte)32;
      floatArray0[3] = (float) (byte)32;
      floatArray0[4] = (float) (byte) (-62);
      floatArray0[5] = (float) (byte)32;
      floatArray0[6] = (float) (byte) (-62);
      floatArray0[7] = (float) (byte) (-62);
      floatArray0[8] = (float) (byte) (-62);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, 32.0F, 32.0F, 32.0F, (-62.0F), 32.0F, (-62.0F), (-62.0F), (-62.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte)32);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-62));
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)34);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)34;
      floatArray0[1] = (float) (short)34;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {34.0F, 34.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 8, 21);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {34.0F, 34.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Character character0 = Character.valueOf('V');
      assertEquals('V', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.removeAllOccurrences((Character[]) null, character0);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = '@';
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      charArray0[2] = '+';
      charArray0[3] = '@';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'@', '+', '@', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '@'}, charArray0);
      
      MockRandom mockRandom1 = new MockRandom((-3134L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '\u0000';
      longArray0[1] = 1698L;
      longArray0[2] = (-3134L);
      longArray0[3] = (long) '+';
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      assertEquals(4, longArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new long[] {1698L, (-3134L), 43L, 0L}, longArray0);
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)34);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)34;
      floatArray0[1] = (float) (short)34;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {34.0F, 34.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('i', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertEquals('i', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('}');
      assertEquals('}', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char char0 = '=';
      Character character4 = Character.valueOf('=');
      assertEquals('=', (char)character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3902.19356095205;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1270.312786344));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3902.19356095205, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3902.19356095205, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = (char) character1;
      charArray0[1] = 'i';
      charArray0[2] = char0;
      charArray0[3] = 'i';
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, 2363.09388512);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3902.19356095205, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3902.19356095205, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences((short[]) null, (short)1895);
      assertNull(shortArray1);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-372));
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {34.0F, 34.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {34.0F, 34.0F, (-372.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'i', '=', 'i', 'i'}, charArray0);
      
      ArrayUtils.shuffle(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'i', '=', 'i', 'i', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)1317, 866);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-58);
      floatArray0[1] = (float) (short)247;
      floatArray0[2] = (float) (short) (-58);
      floatArray0[3] = (float) (short)247;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-58.0F), 247.0F, (-58.0F), 247.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-58), 866);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 76;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 76;
      ArrayUtils.swap((long[]) null, 76, 4044, 0);
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, 1578, 1227);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1200);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1200);
      doubleArray0[1] = 1276.1847132157175;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1200.0), 563, (-1200.0));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1200.0), 1276.1847132157175}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)13;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1), (byte)120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1748.0;
      doubleArray0[1] = 1401.1620436;
      int int0 = 256;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 449.78, 256, 1401.1620436);
      assertEquals(1, int1);
      assertEquals(2, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {1748.0, 1401.1620436}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      int int2 = (-771);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-771), (-1.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -771, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (byte)2, (-2611), (-3993.123));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Short short0 = new Short((short) (-312));
      assertEquals((short) (-312), (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-312);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)6;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-23), (byte)6}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[7];
      short short0 = (short) (-643);
      Short short1 = new Short((short) (-643));
      assertEquals((short) (-643), (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      shortArray0[1] = shortArray0[0];
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short) (-643), (short)short2);
      assertEquals(7, shortArray0.length);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) (-643);
      shortArray1[2] = (short) shortArray0[2];
      shortArray0[5] = (Short) (short) (-11);
      shortArray1[5] = (short) shortArray0[0];
      ArrayUtils.swap(shortArray1, (-4056), 394, (int) (short) (-643));
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-643), (short) (-643), (short) (-643), (short)0, (short)0, (short) (-643)}, shortArray1);
      
      Character character0 = new Character('$');
      assertEquals('$', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      long[] longArray0 = new long[6];
      longArray0[0] = (-2147483648L);
      longArray0[1] = (long) (short) (-643);
      longArray0[2] = (long) 52;
      longArray0[3] = (long) (short)shortArray0[2];
      longArray0[5] = (long) '$';
      ArrayUtils.swap(longArray0, (int) (short) (-643), 52);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2147483648L), (-643L), 52L, (-643L), 0L, 36L}, longArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(short1.equals((Object)short2));
      assertEquals((-643.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-643), (int)mutableInt0.toInteger());
      assertEquals((-643.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-643), (int)mutableInt0.getValue());
      assertEquals((-643L), mutableInt0.longValue());
      assertEquals((byte)125, mutableInt0.byteValue());
      assertEquals((short) (-643), mutableInt0.shortValue());
      assertEquals((-643), mutableInt0.intValue());
      assertEquals("-643", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (-2228));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2228, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)128;
      shortArray0[1] = (short)2844;
      shortArray0[2] = (short) (-3723);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)590, 57);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)128, (short)2844, (short) (-3723)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)121;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.reverse(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-4224.18F));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-4224.18F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'v';
      charArray0[7] = 'X';
      charArray0[8] = '<';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', 'v', 'v', 'v', 'X', '<'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', 'v', 'v', 'X', '<'}, charArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2144);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1514;
      shortArray0[3] = (short) (-134);
      shortArray0[4] = (short) (-4468);
      shortArray0[5] = (short) (-2559);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2559));
      assertEquals(5, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2144), (short) (-1), (short)1514, (short) (-134), (short) (-4468), (short) (-2559)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 120;
      intArray0[1] = (-3240);
      intArray0[2] = 34;
      intArray0[3] = 993;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {120, (-3240), 34, 993}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2146;
      shortArray0[1] = (short)3400;
      shortArray0[2] = (short)37;
      shortArray0[3] = (short)3682;
      shortArray0[4] = (short)4366;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1791);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2146, (short)3400, (short)37, (short)3682, (short)4366}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)3682;
      doubleArray0[1] = 1680.5881548258674;
      doubleArray0[2] = (double) (short)3400;
      doubleArray0[3] = (double) (short)2146;
      doubleArray0[4] = (double) (-3240);
      doubleArray0[5] = (double) 34;
      doubleArray0[6] = (double) (short)2146;
      doubleArray0[7] = (double) (short)2146;
      doubleArray0[8] = (double) 993;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)4366);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3682.0, 1680.5881548258674, 3400.0, 2146.0, (-3240.0), 34.0, 2146.0, 2146.0, 993.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3682.0, 1680.5881548258674, 3400.0, 2146.0, (-3240.0), 34.0, 2146.0, 2146.0, 993.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)1895);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2146, (short)3400, (short)37, (short)3682, (short)4366}, shortArray0);
      assertArrayEquals(new short[] {(short)2146, (short)3400, (short)37, (short)3682, (short)4366}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 993;
      floatArray0[1] = (float) 993;
      floatArray0[2] = (float) (short)3400;
      floatArray0[3] = (float) (short)1895;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 525.7887F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {993.0F, 993.0F, 3400.0F, 1895.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {993.0F, 993.0F, 3400.0F, 1895.0F, 525.7887F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, (-1), (-1), 24);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[2] = (-699L);
      longArray0[4] = (long) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(6, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1L), 0L, (-699L), 0L, (-1L), 0L}, longArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      ArrayUtils.swap(floatArray0, 2146, (-2585), (-2585));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2146;
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) 2146L;
      longArray1[1] = (Long) 2146L;
      longArray1[2] = (Long) 2146L;
      longArray1[3] = (Long) 2146L;
      longArray1[4] = (Long) 2146L;
      longArray1[5] = (Long) 2146L;
      longArray1[6] = (Long) 2146L;
      longArray1[7] = (Long) 2146L;
      Long long0 = new Long((long) longArray1[4]);
      assertEquals(2146L, (long)long0);
      assertEquals(8, longArray1.length);
      assertNotNull(long0);
      
      Long[] longArray2 = ArrayUtils.removeAllOccurences(longArray1, long0);
      assertEquals(0, longArray2.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1212;
      shortArray0[1] = (short)3400;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-4);
      shortArray0[4] = (short)253;
      shortArray0[5] = (short)84;
      shortArray0[6] = (short) (-938);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-938));
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1212, (short)3400, (short) (-1), (short) (-4), (short)253, (short)84, (short) (-938)}, shortArray0);
      assertArrayEquals(new short[] {(short)1212, (short)3400, (short) (-1), (short) (-4), (short)253, (short)84}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-941.9470173406951);
      doubleArray0[2] = (-1178.9192032);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 2, 0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      ArrayUtils.shift(byteArray0, (-2305), (int) (byte)78, 1833);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111, (byte)0, (byte)0, (byte)78, (byte)78, (byte)0}, byteArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(1, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0, 0, 3682);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte)106;
      ArrayUtils.shift(byteArray0, (int) (byte) (-98), 3682, 213);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte) (-98), (byte) (-98), (byte) (-98), (byte)106, (byte) (-98), (byte) (-98), (byte) (-98)}, byteArray0);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-2311));
      assertEquals((short) (-2311), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-98));
      assertEquals((short) (-98), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1);
      assertEquals((short)1, (short)short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      try { 
        Short.valueOf("The Array must not be null", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      long[] longArray0 = new long[4];
      longArray0[0] = (-3570L);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (-1039L);
      longArray0[3] = (-1078L);
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[5] = 0.0;
      Float float0 = new Float((-1178.9192032));
      assertEquals((-1178.9192F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ArrayUtils.hashCode((Object) float0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2199.59F;
      doubleArray0[1] = (double) 2199.59F;
      doubleArray0[2] = (double) 2199.59F;
      doubleArray0[3] = (-3993.123);
      doubleArray0[4] = (-3993.123);
      doubleArray0[5] = (-3993.123);
      doubleArray0[6] = (-3993.123);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2199.590087890625, 2199.590087890625, 2199.590087890625, (-3993.123), (-3993.123), (-3993.123), (-3993.123)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('O');
      assertEquals('O', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = (char) character0;
      charArray0[2] = 'O';
      charArray0[3] = (char) character0;
      charArray0[4] = '\\';
      ArrayUtils.reverse(charArray0, (-4056), 789);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\\', '(', 'O', '(', 'I'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) '(';
      doubleArray0[2] = (double) (-4056);
      doubleArray0[3] = (double) 789;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {73.0, 40.0, (-4056.0), 789.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {73.0, 40.0, (-4056.0), 789.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {73.0, 40.0, (-4056.0), 789.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, (-1), (-1), 24);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.insert((-1), longArray0, (long[]) null);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-4531));
      assertEquals(1, int0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 357.8406);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {357.8406}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-643));
      assertEquals((short) (-643), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      Short short1 = new Short((short) shortArray0[1]);
      assertEquals((short) (-643), (short)short1);
      assertEquals(7, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      long[] longArray0 = ArrayUtils.insert((-489), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) shortArray0);
      assertFalse(boolean1);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      ArrayUtils.shift(byteArray0, (-2305), (int) (byte)78, 1833);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111, (byte)0, (byte)0, (byte)78, (byte)78, (byte)0}, byteArray0);
      
      long[] longArray0 = ArrayUtils.insert(32, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-4531));
      assertEquals(0, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 4;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ArrayUtils.shift(byteArray0, (-436), (-436), (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long[] longArray0 = ArrayUtils.insert((-1), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-450));
      assertEquals(0, int1);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 12.0, (-126), (double) (-126));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 37.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-285.6)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-285.6)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2354);
      shortArray0[1] = (short)116;
      int[] intArray0 = new int[5];
      intArray0[0] = (-126);
      intArray0[1] = (int) (short) (-2354);
      intArray0[2] = 1;
      intArray0[3] = (int) (short) (-2354);
      intArray0[4] = (int) (short) (-2354);
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 2, 256);
      assertEquals(5, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new int[] {(-126), (-2354), 1, (-2354), (-2354)}, intArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      ArrayUtils.swap(intArray0, (-2354), 3154, (-2354));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-126), (-2354), 1, (-2354), (-2354)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (-1776);
      intArray0[2] = (int) (byte)118;
      ArrayUtils.swap(intArray0, (-459), 9);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1, (-1776), 118}, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(18688, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      Integer integer0 = new Integer((short) (-85));
      assertEquals((-85), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-85)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {177.13183}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short) (-753);
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)79;
      shortArray0[5] = (short) (-3);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2134, (short) (-753), (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short) (-753));
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2134, (short) (-753), (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short)0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)79;
      longArray0[1] = (long) (short) (-753);
      longArray0[2] = (long) (short) (-753);
      longArray0[3] = (long) (short) (-753);
      longArray0[4] = 3131L;
      longArray0[5] = (long) (short) (-3);
      longArray0[6] = (long) (short)79;
      ArrayUtils.shift(longArray0, (int) (short) (-753));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {3131L, (-3L), 79L, 79L, (-753L), (-753L), (-753L)}, longArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1150);
      assertEquals(1150, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("-rRs=z5Q|a `UC", integer1);
      assertEquals(0, (int)integer2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(43);
      assertEquals(43, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((short) (-3));
      assertEquals((-3), (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1150, 0, 43, (-3)}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 76;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 76;
      ArrayUtils.swap(intArray0, 2579, (-1965));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {76, Integer.MAX_VALUE, 76}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-453), booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, 3562L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {3562L, 0L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      
      double[] doubleArray0 = new double[0];
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      ArrayUtils.reverse((short[]) null, (-2818), (-1135));
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'o';
      charArray0[2] = ';';
      charArray0[3] = 'V';
      charArray0[4] = '\\';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'X', 'o', ';', 'V', '\\'}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2818);
      floatArray0[1] = (float) (-1135);
      floatArray0[2] = (float) '\\';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '\\';
      longArray0[1] = (long) 'X';
      longArray0[2] = (long) 'o';
      long[] longArray1 = ArrayUtils.add(longArray0, 2134L);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {92L, 88L, 111L, 2134L}, longArray1);
      assertArrayEquals(new long[] {92L, 88L, 111L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-530);
      longArray2[1] = (long) (-530);
      longArray2[2] = (long) (-1135);
      longArray2[3] = (long) 'o';
      longArray2[4] = (long) '\\';
      ArrayUtils.shift(longArray2, 9, (-2818), (-2073));
      assertEquals(5, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-530L), (-530L), (-1135L), 111L, 92L}, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 92L;
      objectArray0[1] = (Object) 88L;
      objectArray0[2] = (Object) (-2818.0F);
      objectArray0[3] = (Object) 111L;
      objectArray0[4] = (Object) 'V';
      objectArray0[5] = (Object) (-530L);
      objectArray0[6] = (Object) 111L;
      ArrayUtils.shift(objectArray0, (-1135));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1808L, 3405);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      Double double0 = new Double((-1.0F));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3597;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-982));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3597}, intArray0);
      assertArrayEquals(new int[] {3597}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      Double double0 = new Double(2772.8173934251);
      assertEquals(2772.8173934251, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) 14;
      longArray0[2] = 729L;
      longArray0[3] = (long) 14;
      longArray0[4] = (long) 14;
      longArray0[5] = (long) 14;
      longArray0[6] = 1384L;
      ArrayUtils.reverse(longArray0, 14, 14);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {14L, 14L, 729L, 14L, 14L, 14L, 1384L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1384L);
      assertTrue(boolean0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {14L, 14L, 729L, 14L, 14L, 14L, 1384L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-840.7538F), 3179.06F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1039L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1039L));
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1039L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-436), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -436, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 2952, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2952, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 878;
      floatArray0[2] = (float) 878;
      floatArray0[3] = (float) 878;
      floatArray0[4] = (float) 878;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 878.0F, 878.0F, 878.0F, 878.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (-829.926));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {177.13183}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short)2134;
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)79;
      shortArray0[5] = (short) (-3);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2134, (short)2134, (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short)2134);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2134, (short)2134, (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short)0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[23];
      longArray0[0] = (long) (short)79;
      longArray0[1] = (long) (short)2134;
      longArray0[2] = (long) (short)2134;
      longArray0[3] = (long) (short)2134;
      longArray0[4] = 3128L;
      longArray0[5] = (long) (short) (-3);
      longArray0[6] = (long) (short)79;
      ArrayUtils.shift(longArray0, (int) (short)2134);
      assertEquals(23, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 79L);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 3179.06F;
      doubleArray0[4] = (double) (-1.0F);
      ArrayUtils.swap(doubleArray0, (-113), (-113), (-113));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 3179.06005859375, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 76;
      intArray0[1] = Integer.MAX_VALUE;
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean("long");
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean(" ");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean6));
      assertNotNull(boolean7);
      
      booleanArray0[1] = boolean7;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean5;
      booleanArray0[4] = boolean6;
      booleanArray0[5] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      floatArray0[4] = (-843.0F);
      floatArray0[5] = 755.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2867.8826F;
      floatArray0[8] = 1896.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.swap((long[]) null, (-2406), 2);
      MutableInt mutableInt0 = new MutableInt((-840.7538F));
      assertEquals("-840", mutableInt0.toString());
      assertEquals((-840), mutableInt0.intValue());
      assertEquals((-840.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-840.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-840L), mutableInt0.longValue());
      assertEquals((short) (-840), mutableInt0.shortValue());
      assertEquals((-840), (int)mutableInt0.toInteger());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((-840), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(2);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(2L, mutableInt1.longValue());
      assertEquals(2, mutableInt1.intValue());
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(2, (int)mutableInt1.toInteger());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt1.getValue());
      assertEquals("2", mutableInt1.toString());
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertEquals((-1), int0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals("-840", mutableInt0.toString());
      assertEquals((-840), mutableInt0.intValue());
      assertEquals((-840.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-840.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-840L), mutableInt0.longValue());
      assertEquals((short) (-840), mutableInt0.shortValue());
      assertEquals((-840), (int)mutableInt0.toInteger());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((-840), (int)mutableInt0.getValue());
      assertEquals(2L, mutableInt1.longValue());
      assertEquals(2, mutableInt1.intValue());
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(2, (int)mutableInt1.toInteger());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt1.getValue());
      assertEquals("2", mutableInt1.toString());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      mutableInt0.increment();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals((-839.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-839L), mutableInt0.longValue());
      assertEquals((short) (-839), mutableInt0.shortValue());
      assertEquals((-839), mutableInt0.intValue());
      assertEquals((-839.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-71), mutableInt0.byteValue());
      assertEquals("-839", mutableInt0.toString());
      assertEquals((-839), (int)mutableInt0.toInteger());
      assertEquals((-839), (int)mutableInt0.getValue());
      assertNotSame(mutableInt0, mutableInt1);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-839), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals((-839.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-839L), mutableInt0.longValue());
      assertEquals((short) (-839), mutableInt0.shortValue());
      assertEquals((-839), mutableInt0.intValue());
      assertEquals((-839.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-71), mutableInt0.byteValue());
      assertEquals("-839", mutableInt0.toString());
      assertEquals((-839), (int)mutableInt0.toInteger());
      assertEquals((-839), (int)mutableInt0.getValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      mutableInt0.setValue((-948));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals((-948.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-948), mutableInt0.shortValue());
      assertEquals((-948), mutableInt0.intValue());
      assertEquals((-948), (int)mutableInt0.toInteger());
      assertEquals("-948", mutableInt0.toString());
      assertEquals((-948.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-948L), mutableInt0.longValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals((-948), (int)mutableInt0.getValue());
      assertNotSame(mutableInt0, mutableInt1);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int int1 = (-1400);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-948));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -948, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[1] = 3119L;
      longArray0[2] = (long) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4);
      shortArray0[1] = (short)253;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-469));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-4), (short)253}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4), (short)253}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(22, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 357.8406;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-941.91061066));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {357.8406}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-941.91061066), 357.8406}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray1 = ArrayUtils.remove(longArray0, 16);
      assertEquals(22, longArray0.length);
      assertEquals(21, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1097;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1097}, intArray0);
      assertArrayEquals(new int[] {1097}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-840.7538F);
      floatArray0[1] = (-840.7538F);
      floatArray0[2] = 3179.06F;
      floatArray0[3] = 3179.06F;
      floatArray0[4] = (-840.7538F);
      floatArray0[5] = 3179.06F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {3179.06F, (-840.7538F), 3179.06F, 3179.06F, (-840.7538F), (-840.7538F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 6;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-14);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      
      int int1 = 7;
      IntStream intStream0 = mockRandom0.ints(0L, 6, 7);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 6;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-14);
      mockRandom0.nextBytes(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0}, byteArray0);
      
      int int1 = 7;
      IntStream intStream0 = mockRandom0.ints(0L, 6, 7);
      assertNotNull(intStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean(false);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean((String) null);
      assertFalse(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.indexOf(intArray0, 3);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-127));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte) (-79);
      ArrayUtils.swap(byteArray0, (-20), (int) (byte)0, 2482);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte) (-79), (byte) (-79), (byte) (-79), (byte) (-79), (byte) (-79), (byte) (-79), (byte) (-79)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-79);
      intArray0[1] = (int) (byte) (-79);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-79);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-79), (-79), 0, (-79)}, intArray1);
      assertArrayEquals(new int[] {(-79), (-79), 0, (-79)}, intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ArrayUtils.swap(byteArray0, 1483, 0, 2635);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52}, byteArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte) (-79);
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (byte) (-79);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-79);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, (-79), 0, (-79)}, intArray0);
      assertArrayEquals(new int[] {0, (-79), 0, (-79)}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-317);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-8);
      ArrayUtils.shift(shortArray0, (-853));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-8), (short) (-317)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-79);
      ArrayUtils.swap(byteArray0, (int) (byte) (-41), (int) (byte) (-41), 98);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-57), (byte)51, (byte)22, (byte)34, (byte) (-79)}, byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 98;
      intArray0[1] = (int) (byte)34;
      intArray0[2] = (int) (byte) (-41);
      intArray0[3] = (int) (byte)22;
      intArray0[4] = (int) (byte) (-41);
      intArray0[5] = (int) (byte) (-41);
      intArray0[6] = (int) (byte) (-79);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {98, 34, (-41), 22, (-41), (-41), (-79)}, intArray1);
      assertArrayEquals(new int[] {98, 34, (-41), 22, (-41), (-41), (-79)}, intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.4540026156996575;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[4] = (byte) (-98);
      ArrayUtils.shift(byteArray0, (-923), (int) (byte) (-98), (-923));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte) (-98), (byte)0, (byte) (-98)}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1604, 5431);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 150.13131538, 1791, 1.0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-154);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1776);
      intArray0[4] = 1791;
      intArray0[5] = (int) (byte)21;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      ArrayUtils.swap(intArray0, 76, 1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-154), (-1), 0, (-1776), 1791, 21, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)0, booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-154));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-154L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3996.123), (-3.0));
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-3570);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-3570);
      doubleArray0[1] = (double) (short) (-3570);
      doubleArray0[2] = (double) (short) (-3570);
      doubleArray0[3] = (double) (short) (-3570);
      doubleArray0[4] = (double) (short) (-3570);
      doubleArray0[5] = (double) (short) (-3570);
      doubleArray0[6] = (double) (short) (-3570);
      doubleArray0[7] = (double) (short) (-3570);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short) (-3570), 2);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3570.0), (-3570.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-3570.0));
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3570.0), (-3570.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3570.0), (-3570.0), (-3570.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (short) (-3570);
      floatArray0[3] = (float) (short) (-3570);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) (short) (-3570);
      floatArray0[7] = (float) (short) (-3570);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 2);
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 2.0F, (-3570.0F), (-3570.0F), 2.0F, 2.0F, (-3570.0F), (-3570.0F), 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2.0F, (-3570.0F), (-3570.0F), 2.0F, 2.0F, (-3570.0F), (-3570.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) (-3570.0F), (-2124.232882));
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0), (-3570.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3570.0), (-3570.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 639L);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {639L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 150.13131538, 1791, 1.0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-154);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1776);
      intArray0[4] = 1791;
      intArray0[5] = (int) (byte)12;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      ArrayUtils.swap(intArray0, 76, 1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-154), (-1), 0, (-1776), 1791, 12, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)0, booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-154));
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-154L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3996.123), (-3.0));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)1, (byte)1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-48), (byte)1, (byte)1, (byte)94, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-48), (byte)1, (byte)1, (byte)1, (byte)94, (byte)1}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1157);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1157.0)}, doubleArray0, 0.01);
      
      Boolean boolean0 = new Boolean(" in an array of ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1477.958, (-1157));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1157.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-840.7538F);
      floatArray0[1] = 1896.0F;
      floatArray0[2] = (-843.0F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-840.7538F), 1896.0F, (-843.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-840.7538F), (-843.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 2, 311);
      assertNull(charArray0);
      
      ArrayUtils.reverse((Object[]) classArray0, (-3511), 15);
      assertEquals(1, classArray0.length);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(";~6Atgq1ZWfl ");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-843.0F);
      doubleArray0[4] = (-1492.3430004326);
      doubleArray0[5] = (double) 15;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-3511));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {15.0, 0.0, 0.0, (-843.0), (-1492.3430004326), 15.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2649;
      intArray0[1] = 1;
      intArray0[2] = (-37);
      ArrayUtils.reverse(intArray0, (-37), (-326));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2649, 1, (-37)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 0);
      assertEquals(0, int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2270;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2305);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1061);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1061);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1061L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1061L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Integer integer0 = new Integer(1667);
      assertEquals(1667, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Short short0 = new Short((short) (-1231));
      assertEquals((short) (-1231), (short)short0);
      assertNotNull(short0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short) (-1231), object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)112;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)69, (byte)112}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)69, (byte)112}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer((-2384));
      assertEquals((-2384), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2384), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object1);
      assertNotNull(object1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = 'h';
      charArray0[2] = '@';
      charArray0[3] = '2';
      charArray0[4] = 'E';
      charArray0[5] = 'n';
      charArray0[6] = 'f';
      ArrayUtils.reverse(charArray0, (-4056), (-303));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'<', 'h', '@', '2', 'E', 'n', 'f'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {177.13183}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short) (-765);
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)79;
      shortArray0[5] = (short) (-3);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2134, (short) (-765), (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short) (-765));
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2134, (short) (-765), (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short)0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-3));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)2134;
      longArray0[1] = (long) (short)79;
      longArray0[2] = (long) (short) (-765);
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) (-1);
      ArrayUtils.swap(longArray0, (int) (short) (-3), (int) (short)79, Integer.MAX_VALUE);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2134L, 79L, (-765L), 2147483647L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = 1933L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1039L));
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1933L}, longArray0);
      
      ArrayUtils.reverse((boolean[]) null);
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-840.7538F), 3179.06F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1039L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1039L));
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1039L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 3179.06F, (-840.7538F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      floatArray0[4] = (-843.0F);
      floatArray0[5] = 755.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2867.8826F;
      floatArray0[8] = 1896.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.swap((long[]) null, (-2406), 2);
      MutableInt mutableInt0 = new MutableInt((-840.7538F));
      assertEquals((-840L), mutableInt0.longValue());
      assertEquals((-840), mutableInt0.intValue());
      assertEquals((-840.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((-840), (int)mutableInt0.getValue());
      assertEquals((-840), (int)mutableInt0.toInteger());
      assertEquals((short) (-840), mutableInt0.shortValue());
      assertEquals("-840", mutableInt0.toString());
      assertEquals((-840.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-840), (int)integer0);
      assertEquals((-840L), mutableInt0.longValue());
      assertEquals((-840), mutableInt0.intValue());
      assertEquals((-840.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((-840), (int)mutableInt0.getValue());
      assertEquals((-840), (int)mutableInt0.toInteger());
      assertEquals((short) (-840), mutableInt0.shortValue());
      assertEquals("-840", mutableInt0.toString());
      assertEquals((-840.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      mutableInt0.setValue((-948));
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals((-948L), mutableInt0.longValue());
      assertEquals((-948), (int)mutableInt0.getValue());
      assertEquals((-948), (int)mutableInt0.toInteger());
      assertEquals("-948", mutableInt0.toString());
      assertEquals((-948.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-948), mutableInt0.intValue());
      assertEquals((short) (-948), mutableInt0.shortValue());
      assertEquals((-948.0), mutableInt0.doubleValue(), 0.01);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (-1400));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1400, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      floatArray0[4] = (-843.0F);
      floatArray0[5] = 755.0F;
      floatArray0[6] = (-840.7538F);
      floatArray0[8] = 1896.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.swap((long[]) null, (-2406), 2);
      MutableInt mutableInt0 = new MutableInt((-840.7538F));
      assertEquals((-840), (int)mutableInt0.toInteger());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals((-840), (int)mutableInt0.getValue());
      assertEquals((short) (-840), mutableInt0.shortValue());
      assertEquals((-840), mutableInt0.intValue());
      assertEquals((-840.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-840L), mutableInt0.longValue());
      assertEquals((-840.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-840", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer[] integerArray0 = new Integer[2];
      mutableInt0.setValue((-948));
      assertEquals((-948.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-948), (int)mutableInt0.toInteger());
      assertEquals("-948", mutableInt0.toString());
      assertEquals((-948L), mutableInt0.longValue());
      assertEquals((byte)76, mutableInt0.byteValue());
      assertEquals((-948), (int)mutableInt0.getValue());
      assertEquals((short) (-948), mutableInt0.shortValue());
      assertEquals((-948.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-948), mutableInt0.intValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (-1400));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1400, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0, 2140847419, (-1442));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1178.9192032));
      assertEquals((-1178.9192F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2.0));
      assertEquals((-2.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1178.9192F), (-2.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      short short0 = (short)1382;
      Short short1 = new Short((short)1382);
      assertEquals((short)1382, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short)1382);
      assertEquals((short)1382, (short)short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[1] = short2;
      shortArray0[5] = short1;
      shortArray0[3] = short1;
      doubleArray0[1] = (double) (short)short2;
      shortArray0[5] = short1;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-643));
      assertEquals((short) (-643), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      Short short1 = new Short((short)3090);
      assertEquals((short)3090, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) (-643);
      shortArray1[2] = (short) shortArray0[2];
      shortArray1[3] = (short) (-643);
      shortArray1[4] = (short) (-11);
      shortArray1[5] = (short) shortArray0[0];
      ArrayUtils.swap(shortArray1, (-4056), 394, (int) (short)3090);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-643), (short) (-643), (short)3090, (short) (-643), (short) (-11), (short) (-643)}, shortArray1);
      
      Character character0 = new Character('$');
      assertEquals('$', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$'}, charArray0);
      assertNotNull(charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (char)character0;
      longArray0[1] = (long) (char)character0;
      longArray0[2] = 0L;
      longArray0[3] = (long) (-4056);
      longArray0[4] = 2147483647L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 52, (long) shortArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-941.9470173406951);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 374, (int) (byte)0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte) (-98), (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)12;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 12}, intArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.5;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-45);
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)62, (byte) (-45)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, true, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte) (-45));
      assertTrue(boolean2);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)62, (byte) (-45)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)78;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)78);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)78, (byte)0, (byte)0}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)78);
      assertEquals(78.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("78", mutableInt0.toString());
      assertEquals(78L, mutableInt0.longValue());
      assertEquals(78.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(78, (int)mutableInt0.toInteger());
      assertEquals(78, (int)mutableInt0.getValue());
      assertEquals((byte)78, mutableInt0.byteValue());
      assertEquals((short)78, mutableInt0.shortValue());
      assertEquals(78, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals(1, (int)mutableInt1.getValue());
      assertEquals((byte)1, mutableInt1.byteValue());
      assertEquals(1.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt1.toInteger());
      assertEquals(1L, mutableInt1.longValue());
      assertEquals("1", mutableInt1.toString());
      assertEquals(1.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt1.shortValue());
      assertEquals(1, mutableInt1.intValue());
      assertNotNull(mutableInt1);
      
      mutableInt0.decrement();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertEquals("77", mutableInt0.toString());
      assertEquals(77, mutableInt0.intValue());
      assertEquals(77.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(77L, mutableInt0.longValue());
      assertEquals(77, (int)mutableInt0.getValue());
      assertEquals((byte)77, mutableInt0.byteValue());
      assertEquals(77, (int)mutableInt0.toInteger());
      assertEquals((short)77, mutableInt0.shortValue());
      assertEquals(77.0, mutableInt0.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)217;
      longArray0[1] = (long) (short)217;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {217L, 217L}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-70);
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte) (-70), (byte)57, (byte) (-95), (byte) (-70)}, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertFalse(boolean2);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte) (-70), (byte)57, (byte) (-95), (byte) (-70)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1748, (-1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = 975.0;
      doubleArray0[3] = (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-285.6), 14, (double) (-1));
      assertEquals(4, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-1.0), 14.0, 975.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1109.61591330398);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 14.0, 975.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 14.0, 975.0, (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) (byte)1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)78;
      objectArray0[1] = object0;
      Byte byte0 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-25), object1);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertEquals((byte) (-25), object2);
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      objectArray0[3] = (Object) (byte)78;
      objectArray0[4] = (Object) (byte)78;
      objectArray0[5] = (Object) (byte)78;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(6, objectArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (byte)78);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {78L}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[2] = (byte)72;
      ArrayUtils.shift(byteArray0, 2169);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)72}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-382);
      doubleArray0[3] = (double) 1397;
      ArrayUtils.shift(doubleArray0, 108, 206, (-2389));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-382.0), 0.0, 1397.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-382);
      int[] intArray0 = new int[2];
      intArray0[0] = 206;
      intArray0[1] = 206;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 206, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean(" ;,DaV?KNb} PL");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean((String) null);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = new Boolean("long");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      
      booleanArray0[0] = boolean5;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean3;
      booleanArray0[5] = boolean2;
      booleanArray0[6] = boolean0;
      booleanArray0[7] = boolean3;
      booleanArray0[8] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1135.0F);
      floatArray0[3] = (-3663.97F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1.0F;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2366);
      intArray0[1] = (-2290);
      intArray0[2] = 1431655765;
      intArray0[3] = (-2146278902);
      intArray0[4] = 9;
      intArray0[5] = (-954);
      intArray0[6] = 5093;
      intArray0[7] = (-1927);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1431655765, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 1L);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) 1L;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(3, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 1656L);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 1656L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "Vov{GC4*GLe9E?M.W)");
      assertEquals("2147483647", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 's';
      charArray0[2] = 'e';
      charArray0[3] = 'D';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'e', 's', 'e', 'D'}, charArray0);
      assertArrayEquals(new char[] {'e', 's', 'e', 'D'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'e', 's', 'e', 'D'}, charArray0);
      assertArrayEquals(new char[] {'e', 's', 'e', 'D'}, charArray1);
      assertArrayEquals(new char[] {'e', 's', 'e', 'D'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '^';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = 'L';
      charArray0[5] = '<';
      ArrayUtils.shift(charArray0, 174);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '2';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {50.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {50.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '2';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {50L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '^';
      objectArray0[1] = (Object) 'W';
      objectArray0[2] = (Object) 'L';
      objectArray0[4] = (Object) '<';
      objectArray0[5] = (Object) 'L';
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 174, (Object) byte0);
      assertEquals((byte)35, object0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 'W';
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray0);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (-1499L);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, (-1499L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1499L), 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-954);
      intArray0[1] = 611;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-954), (-954));
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-954), 611}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) (-954));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-954.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 611;
      floatArray0[1] = (float) (-954);
      floatArray0[2] = (float) (-954);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {611.0F, (-954.0F), (-954.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)2270;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2305);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1061);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-13), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1061);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1061L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1061L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.swap(doubleArray0, 2393, 1835, 1835);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)2270;
      floatArray0[1] = (float) (short) (-1061);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-13);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (short)2270;
      ArrayUtils.swap(floatArray0, (-4309), (int) (short)0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {2270.0F, (-1061.0F), 0.0F, (-13.0F), 0.0F, 2270.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) shortArray1, 23, (int) (short) (-13));
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-13), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0, (short)0, (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2911);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-13), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-13), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 4);
      assertEquals(4, int0);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short) (-13), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '(';
      charArray0[2] = '1';
      ArrayUtils.swap((Object[]) characterArray0, (int) character0, (-4041));
      assertEquals(5, characterArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2911;
      shortArray0[1] = (short)2911;
      shortArray0[2] = (short)2911;
      shortArray0[3] = (short)2911;
      shortArray0[4] = (short)2911;
      shortArray0[5] = (short)120;
      shortArray0[6] = (short)2911;
      shortArray0[7] = (short)2911;
      shortArray0[8] = (short)2911;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2911);
      assertEquals(1, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)120}, shortArray1);
      assertArrayEquals(new short[] {(short)2911, (short)2911, (short)2911, (short)2911, (short)2911, (short)120, (short)2911, (short)2911, (short)2911}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)2911, (-3276));
      assertEquals((-1), int0);
      assertEquals(1, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)120}, shortArray1);
      assertArrayEquals(new short[] {(short)2911, (short)2911, (short)2911, (short)2911, (short)2911, (short)120, (short)2911, (short)2911, (short)2911}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('O');
      assertEquals('O', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      Character character2 = new Character('(');
      assertEquals('(', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'J';
      charArray0[2] = (char) character0;
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'X', 'J', '('}, charArray0);
      assertArrayEquals(new char[] {'X', 'J', '(', 'X', 'J', '('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray2 = ArrayUtils.removeAll(charArray0, intArray0);
      assertEquals(3, charArray2.length);
      assertEquals(3, charArray0.length);
      assertEquals(0, intArray0.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'X', 'J', '('}, charArray2);
      assertArrayEquals(new char[] {'X', 'J', '('}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (-2147483648L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, (Object) character0, 1);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)78;
      doubleArray0[1] = (double) (byte)78;
      doubleArray0[2] = (double) (byte)78;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)78;
      doubleArray0[5] = (double) (byte)1;
      doubleArray0[6] = 974.0;
      doubleArray0[7] = (double) (byte)78;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {78.0, 78.0, 78.0, 0.0, 78.0, 1.0, 974.0, 78.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {78.0, 78.0, 78.0, 0.0, 78.0, 1.0, 974.0, 78.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 3);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char char0 = 'R';
      Character character0 = Character.valueOf('R');
      assertEquals('R', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) char0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("R", string0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-469));
      assertEquals((short) (-469), (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) char0);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((Object[]) characterArray0);
      assertEquals(1, characterArray0.length);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 2241, 5);
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)13;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-115), (byte)13, (byte) (-29), (byte)13, (byte)36, (byte)13}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1680.5881548258674;
      doubleArray1[1] = (-2755.0);
      int int0 = ArrayUtils.indexOf(doubleArray1, (-100.933), (-203));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1680.5881548258674, (-2755.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((long[]) null, (-111), (-111));
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 2482, 2, 2146);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-111);
      intArray0[1] = 2482;
      intArray0[2] = 2146;
      intArray0[3] = 2146;
      intArray0[4] = (-111);
      intArray0[5] = 2146;
      intArray0[6] = 2482;
      intArray0[7] = (-111);
      intArray0[8] = 2;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {(-111), 2482, 2146, 2146, (-111), 2146, 2482, (-111), 2}, intArray0);
      assertArrayEquals(new int[] {(-111), 2482, 2146, 2146, (-111), 2146, 2482, (-111), 2}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) 2482);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2482L}, longArray0);
      assertNotNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2003.5962312666;
      doubleArray0[3] = 0.0;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1281.1179200092656));
      assertEquals((-1281.1179200092656), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = double1;
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray1[5] = double3;
      doubleArray1[6] = (Double) 0.0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray1, 12);
      assertFalse(boolean0);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) 12;
      longArray0[2] = (long) 12;
      longArray0[3] = (long) 12;
      longArray0[4] = (long) 12;
      longArray0[5] = (long) 12;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {12L, 12L, 12L, 12L, 12L, 12L}, longArray0);
      assertArrayEquals(new long[] {12L, 12L, 12L, 12L, 12L, 12L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1748, (-1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 76;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 76;
      ArrayUtils.swap(intArray0, 2579, (-1965));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {76, Integer.MAX_VALUE, 76}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-453), booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, (long) (-1965));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {(-1965L), 0L}, longArray2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 4;
      ArrayUtils.swap(intArray0, 18688, (-1776));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 4}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(227, booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), 1748);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1748, booleanArray1, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1748, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1212);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Float float0 = new Float((float) 1212);
      assertEquals(1212.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(322);
      assertEquals(322, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(float0, integer0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 321);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, 322, 1680.5881548258674);
      assertEquals(0, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray1, false);
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1992.27298303578, 14, 738.38586);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'H';
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      ArrayUtils.swap(floatArray0, 2146, (-2585), (-2585));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      
      Long long0 = new Long((-257L));
      assertEquals((-257L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(2146);
      assertEquals(2146L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long(2146);
      assertEquals(2146L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[9];
      longArray0[0] = long0;
      longArray0[1] = long1;
      longArray0[2] = long1;
      longArray0[3] = long2;
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = long2;
      longArray0[7] = long1;
      longArray0[8] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-257L), 2146L, 2146L, 2146L, (-257L), (-257L), 2146L, 2146L, 2146L}, longArray1);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) longArray0[8]);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 6, 7, 8}", bitSet0.toString());
      assertArrayEquals(new long[] {(-257L), 2146L, 2146L, 2146L, (-257L), (-257L), 2146L, 2146L, 2146L}, longArray1);
      assertNotNull(bitSet0);
      
      AbstractMap.SimpleEntry<Short, Long>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Short, Long>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      Short short0 = new Short((short) (-733));
      assertEquals((short) (-733), (short)short0);
      assertNotNull(short0);
      
      AbstractMap.SimpleImmutableEntry<Short, Long> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Short, Long>(short0, long1);
      assertFalse(long1.equals((Object)long0));
      assertTrue(long1.equals((Object)long2));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Short, Long> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Short, Long>(abstractMap_SimpleImmutableEntry0);
      assertFalse(long1.equals((Object)long0));
      assertTrue(long1.equals((Object)long2));
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      int[] intArray0 = new int[1];
      intArray0[0] = 2146;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(abstractMap_SimpleEntryArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 4913L;
      longArray0[2] = (-1499L);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 4913L;
      float float0 = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2728.8806F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 4913.0F, Float.NaN}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 4913.0F;
      int int0 = (-2146687554);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-16L), (-2146687554));
      assertEquals(3, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {0L, 4913L, (-1499L)}, longArray0);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.get((-2146687554), (-2146687554));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -2146687554
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 358L);
      assertEquals(3, longArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (long) (-1);
      longArray0[1] = 3119L;
      longArray0[2] = (long) (-1);
      longArray0[3] = (-1L);
      longArray0[4] = 3119L;
      longArray0[5] = (long) (-1);
      longArray0[6] = 3119L;
      int int0 = ArrayUtils.indexOf(longArray0, 293L, (-1));
      assertEquals((-1), int0);
      assertEquals(22, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) 14;
      longArray0[2] = (long) 14;
      longArray0[3] = (long) 14;
      longArray0[4] = 1L;
      longArray0[5] = (long) 14;
      longArray0[6] = (long) 14;
      longArray0[7] = (long) 14;
      longArray0[8] = (long) 14;
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 2147483647L;
      boolean boolean0 = ArrayUtils.contains(longArray1, 14L);
      assertFalse(boolean0);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((MutableInt[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-643));
      assertEquals((short) (-643), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-643), (short)short1);
      assertEquals(7, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)3090);
      assertEquals((short)3090, (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)273);
      assertEquals((short)273, (short)short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)326);
      assertEquals((short)326, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) (-2667));
      assertEquals((short) (-2667), (short)short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 85.237F;
      floatArray0[1] = 716.5F;
      floatArray0[2] = 1792.14F;
      floatArray0[3] = 92.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-1064.73F);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-589);
      shortArray0[1] = (short) (-589);
      shortArray0[2] = (short)975;
      shortArray0[3] = (short) (-589);
      shortArray0[4] = (short)975;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)8, (int) (short) (-589));
      assertEquals(5, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short) (-589), (short) (-589), (short)975, (short) (-589), (short)975}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 716.5F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap((char[]) null, (int) (short)8, (int) (short) (-589));
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[5] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)88);
      assertEquals(88.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)121);
      assertEquals(121.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      Double double2 = new Double((double) doubleArray0[3]);
      assertEquals(88.0, (double)double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) double2, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[3] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 1L);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      Float float0 = new Float((double) 0L);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0, Integer.MAX_VALUE);
      assertEquals(0, int0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)121);
      assertEquals(121.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      Double double2 = new Double((double) doubleArray0[3]);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) double2, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((byte)78);
      assertEquals(78.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(78.0, (double)double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-2412.40826504));
      assertEquals((-2412.40826504), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-365.6866483740919));
      assertEquals((-365.6866483740919), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, (int) 78);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      Double double5 = new Double((byte)78);
      assertEquals(78.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      Byte byte0 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) byte0, (int) (byte)78);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)78;
      ArrayUtils.reverse(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {78}, intArray0);
      
      char[] charArray0 = ArrayUtils.insert(9, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)78);
      assertEquals(78.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((byte)121);
      assertEquals(121.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      Double double2 = new Double((double) doubleArray0[3]);
      assertEquals(78.0, (double)double2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) double2, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 352.0;
      doubleArray0[1] = 352.0;
      doubleArray0[2] = (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {352.0, 352.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-59);
      intArray0[2] = 2888;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(3, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {7, (-59), 2888}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, (-1), (-1), 24);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[2] = (-711L);
      longArray0[4] = (long) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(6, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-1L), 0L, (-711L), 0L, (-1L), 0L}, longArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean3 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean3);
      assertEquals(0, intArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1485.0330484334;
      doubleArray0[6] = (-2977.4648363365927);
      doubleArray0[7] = (-568.47);
      ArrayUtils.shift(doubleArray0, (-382), (-382), 1397);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1485.0330484334, (-2977.4648363365927), (-568.47)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-382);
      intArray0[1] = (-382);
      intArray0[2] = 1397;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-382), (-382), 1397}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('O');
      assertEquals('O', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertNotNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-1494), (-1));
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      short[] shortArray2 = new short[6];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      shortArray2[1] = (short) (-40);
      shortArray2[2] = (short) (-40);
      shortArray2[3] = (short)699;
      shortArray2[4] = (short) (-40);
      shortArray2[5] = (short) (-40);
      ArrayUtils.swap(shortArray2, (int) (short)0, 1073741824, (int) (short)699);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short) (-40), (short) (-40), (short)699, (short) (-40), (short) (-40)}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1178.9192032);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1178.9192032));
      assertEquals((-1178.9192F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2.0));
      assertEquals((-2.0F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-1178.9192F), (-2.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1382;
      ArrayUtils.swap(shortArray0, (int) (short)1382, (-4056), (-4056));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1382}, shortArray0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('.');
      assertEquals('.', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-1170), (-1432), (-1170));
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)20;
      byteArray0[2] = (byte)63;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)69, (byte)63, (byte)69, (byte)112, (byte)20, (byte)20, (byte)20, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)69, (byte)63, (byte)69, (byte)112, (byte)20, (byte)20, (byte)20, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-20));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -20, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      float[] floatArray0 = new float[8];
      ArrayUtils.swap(floatArray0, 307, 307, 307);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf("V}LX%4_,(F cQ#");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(", '");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean("");
      assertFalse(boolean6);
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      
      booleanArray0[0] = boolean7;
      booleanArray0[1] = boolean4;
      booleanArray0[2] = boolean5;
      booleanArray0[3] = boolean3;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, (boolean) boolean0, 307);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean7));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean6));
      assertFalse(boolean0.equals((Object)boolean5));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray1));
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "V}LX%4_,(F cQ#", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2090.4F;
      floatArray0[1] = 3027.658F;
      floatArray0[2] = 92.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-4536.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2697.5308F;
      floatArray0[7] = 3118.7192F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 14);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2090.4F, 3027.658F, 92.0F, 0.0F, (-4536.3F), 0.0F, 2697.5308F, 3118.7192F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) (-4536.3F);
      Float float0 = new Float((-1586.093661091));
      assertEquals((-1586.0936F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[1] = float0;
      floatArray1[2] = (Float) 2697.5308F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4536.3F), (-1586.0936F), 2697.5308F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 14;
      longArray0[1] = (long) 14;
      longArray0[2] = (long) 14;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 14;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 14;
      ArrayUtils.shift(longArray0, 14);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {14L, (-1L), 14L, (-1L), (-1L), 14L, 14L, 14L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2632.56456637918);
      doubleArray0[1] = 214.38564738839082;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 214.38564738839082, (-136.115671368));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2632.56456637918), 214.38564738839082}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 352.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2632.56456637918), 214.38564738839082}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2632.56456637918), 214.38564738839082}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1463.1274F);
      assertEquals(2, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-35));
      assertEquals((byte) (-35), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, (int) (byte) (-51));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -51, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)8;
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)8, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte1;
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte3 == byte0);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = Byte.valueOf(byte0);
      assertEquals((byte)8, (byte)byte8);
      assertFalse(byte0 == byte3);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte1));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)8;
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)8, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)116;
      Byte byte4 = new Byte((byte)116);
      assertEquals((byte)116, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte)116, (byte)byte5);
      assertFalse(byte3 == byte0);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)116);
      assertEquals((byte)116, (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = Byte.valueOf(byte0);
      assertEquals((byte)8, (byte)byte8);
      assertFalse(byte0 == byte3);
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-840.7538F);
      floatArray0[1] = 1896.0F;
      floatArray0[2] = (-843.0F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-840.7538F), 1896.0F, (-843.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-840.7538F), (-843.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      floatArray0[2] = (float) (char)character0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5164.8529;
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float2;
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 2146590351, 2146590351, 2146590351);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      float[] floatArray0 = new float[8];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 315.57373780349246;
      doubleArray0[1] = (double) (short)1636;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1636.0, (-2067));
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {315.57373780349246, 1636.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (int) (short)1791);
      assertEquals(7, int1);
      assertEquals(8, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((int[]) null, 7, (-2132));
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {177.13183}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short) (-765);
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)79;
      shortArray0[5] = (short)5;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2134, (short) (-765), (short)0, (short)0, (short)79, (short)5}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short) (-765));
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2134, (short) (-765), (short)0, (short)0, (short)79, (short)5}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short)0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)79;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-285.6);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, true, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Character character0 = new Character('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray2, (-3040.45F), 0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(doubleArray0, 315.57373780349246, 0);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 0);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(intArray1, (-1), 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1748, (-1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2090.4F;
      floatArray0[1] = 3027.658F;
      floatArray0[2] = 92.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-4536.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 2697.5308F;
      floatArray0[7] = 3118.7192F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 14);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2090.4F, 3027.658F, 92.0F, 0.0F, (-4536.3F), 0.0F, 2697.5308F, 3118.7192F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) (-4536.3F);
      Float float0 = new Float((-1586.093661091));
      assertEquals((-1586.0936F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[1] = float0;
      floatArray1[2] = (Float) 2697.5308F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4536.3F), (-1586.0936F), 2697.5308F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-840.7538F);
      floatArray0[1] = 1896.0F;
      floatArray0[2] = (-843.0F);
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-840.7538F), 1896.0F, (-843.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-840.7538F), (-843.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 2, 311);
      assertNull(charArray0);
      
      ArrayUtils.reverse((Object[]) classArray0, (-3511), 15);
      assertEquals(1, classArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-3511), (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3511, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2305);
      shortArray0[4] = (short)0;
      Character character0 = new Character('}');
      assertEquals('}', (char)character0);
      assertNotNull(character0);
      
      char char0 = '^';
      Character character1 = Character.valueOf('^');
      assertEquals('^', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character1;
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      characterArray0[4] = character1;
      Character character2 = new Character(char0);
      assertEquals('^', (char)character2);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[6] = character2;
      characterArray0[7] = character0;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(8, characterArray1.length);
      assertEquals(8, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (char)character2;
      longArray0[1] = (long) (short) (-2305);
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (short) (-2305);
      longArray0[4] = (long) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 326, (long) character0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 326, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = 10;
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = (-1375);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(10, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      ArrayUtils.swap(floatArray0, 2146, (-2585), (-2585));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-4536.3F));
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 900L;
      longArray0[1] = 900L;
      longArray0[2] = (long) (-2585);
      longArray0[3] = (long) 2146;
      longArray0[4] = (-1901L);
      longArray0[5] = (-1652L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {900L, 900L, (-2585L), 2146L, (-1901L), (-1652L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '(';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) '(';
      floatArray0[3] = (float) '(';
      floatArray0[4] = (float) '(';
      floatArray0[5] = (float) '(';
      floatArray0[6] = (float) '(';
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 4);
      assertEquals(7, int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {40.0F, 0.0F, 40.0F, 40.0F, 40.0F, 40.0F, 40.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-844.7F);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-1);
      byteArray0[7] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)37, (byte)0, (byte) (-45), (byte) (-63), (byte)7, (byte) (-1), (byte)0, (byte) (-7)}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap((char[]) null, (int) (byte) (-7), 1);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (byte) (-98), 99);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)36;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = 2172.598876723642;
      doubleArray0[3] = (-1476.90710006);
      doubleArray0[4] = 2172.598876723642;
      doubleArray0[5] = (double) (byte)36;
      doubleArray0[6] = (double) (byte)36;
      doubleArray0[7] = (double) 99;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L);
      assertEquals(1, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {36.0, 0.0, 2172.598876723642, (-1476.90710006), 2172.598876723642, 36.0, 36.0, 99.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)975;
      shortArray0[2] = (short) (-589);
      shortArray0[3] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)0, (short)975, (short) (-589), (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short) (-589);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short) (-589);
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short) (-589);
      doubleArray0[7] = (double) (short)975;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2172.598876723642);
      assertEquals((-1), int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-589.0), 0.0, (-589.0), 0.0, (-589.0), 975.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)123;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)123}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0, 0, 3682);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-609.94707262654));
      assertEquals((-609.94707262654), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(3682);
      assertEquals(3682.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1.0);
      assertEquals(1.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-4003.0));
      assertEquals((-4003.0), (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-609.94707262654), 3682.0, 0.0, 0.0, 1.0, (-4003.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 259.3F;
      floatArray0[1] = (-2818.0F);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 3682;
      floatArray0[4] = (float) 3682;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, Integer.MAX_VALUE, 3682);
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {259.3F, (-2818.0F), (-1.0F), 3682.0F, 3682.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 803.67611398);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4;
      shortArray0[4] = (short)4;
      shortArray0[2] = (short)4;
      shortArray0[3] = (short) (-2570);
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-2570);
      shortArray0[6] = (short)4;
      shortArray0[7] = (short) (-2570);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4, (int) (short)4);
      assertEquals(4, int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short)0, (short)4, (short) (-2570), (short)4, (short) (-2570), (short)4, (short) (-2570)}, shortArray0);
      
      Short short0 = new Short((short)4);
      assertEquals((short)4, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-85));
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-643));
      assertEquals((short) (-643), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      Short short1 = new Short((short) shortArray0[1]);
      assertEquals((short) (-643), (short)short1);
      assertEquals(7, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[2] = short1;
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) shortArray0[0];
      shortArray1[1] = (short) (-643);
      shortArray1[2] = (short) shortArray0[2];
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, (short) (-328));
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-643), (short) (-643), (short) (-643), (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-643), (short) (-643), (short) (-643), (short)0, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray2, (short)1, (int) (short) (-328));
      assertEquals((-1), int0);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-643), (short) (-643), (short) (-643), (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-643), (short) (-643), (short) (-643), (short)0, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1072;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1072, (int) (short)1072);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1072}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2270;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2305);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1061);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1061);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1061L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1061L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.swap(doubleArray0, 2393, 1835, 1835);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)2270;
      floatArray0[1] = (float) (short) (-1061);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (short)2270;
      ArrayUtils.swap(floatArray0, (-4309), (int) (short)0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {2270.0F, (-1061.0F), 0.0F, (-1.0F), 0.0F, 2270.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) shortArray1, 0, (int) (short) (-1));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2911);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, 4);
      assertEquals(4, int0);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short) (-1), (short)2270, (short)0, (short) (-2305), (short)0, (short) (-1061), (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = (double) (-1.0F);
      ArrayUtils.shift(doubleArray0, 56);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), 1.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-987);
      shortArray0[1] = (short)348;
      ArrayUtils.swap(booleanArray0, (-2127413707), (int) (short) (-987), (int) (short)348);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      ArrayUtils.shift(shortArray0, (int) (short)348);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-987), (short)348}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = 'f';
      charArray0[1] = ';';
      charArray0[2] = 'n';
      charArray0[3] = 'T';
      charArray0[4] = ':';
      charArray0[5] = '>';
      charArray0[6] = 'U';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'U');
      assertEquals(17, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{6}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) ':';
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) ':';
      doubleArray0[6] = (double) 'T';
      ArrayUtils.shift(doubleArray0, 18);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {58.0, 62.0, 58.0, 84.0, 102.0, 59.0, 84.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-32597);
      Integer integer0 = new Integer(1401);
      assertEquals(1401, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((short) (-32597));
      assertEquals((-32597), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((long[]) null, (-111), (-111));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-111);
      doubleArray0[1] = (double) (-111);
      doubleArray0[2] = (double) (-111);
      doubleArray0[3] = (double) (-111);
      doubleArray0[4] = (double) (-111);
      doubleArray0[5] = (double) (-111);
      doubleArray0[6] = (double) (-111);
      ArrayUtils.shift(doubleArray0, (-111));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-111.0), (-111.0), (-111.0), (-111.0), (-111.0), (-111.0), (-111.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2092);
      shortArray0[1] = (short) (-987);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2092), (short) (-987)}, shortArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2092);
      shortArray0[1] = (short) (-2092);
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2092), (short) (-2092)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 56;
      doubleArray0[1] = (double) 56;
      ArrayUtils.shift(doubleArray0, 51);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {56.0, 56.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(booleanArray0, 511, 511, 56);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      
      ArrayUtils.shift((short[]) null, 48);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = ';';
      charArray0[2] = 'n';
      charArray0[3] = 'T';
      charArray0[4] = ':';
      charArray0[5] = '>';
      charArray0[6] = 'U';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'U');
      assertEquals(7, charArray0.length);
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new char[] {'f', ';', 'n', 'T', ':', '>', 'U'}, charArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) 'T';
      doubleArray0[3] = (double) ':';
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) ':';
      doubleArray0[6] = (double) 'T';
      ArrayUtils.shift(doubleArray0, (-1));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {59.0, 84.0, 58.0, 62.0, 58.0, 84.0, 102.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-32597);
      shortArray0[1] = (short) (-987);
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)348;
      shortArray0[4] = (short) (-1726);
      shortArray0[5] = (short)39;
      shortArray0[6] = (short) (-2092);
      shortArray0[7] = (short)975;
      shortArray0[8] = (short)7;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-32597), (short) (-987), (short)7, (short)348, (short) (-1726), (short)39, (short) (-2092), (short)975, (short)7}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 573.4235345;
      doubleArray0[1] = 79.0;
      doubleArray0[2] = (-47.393326);
      doubleArray0[3] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 7327.14191003);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {573.4235345, 79.0, (-47.393326), (-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {573.4235345, 79.0, (-47.393326), (-1.0), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = (-372);
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-372), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -372, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      Integer integer0 = new Integer(4545);
      assertEquals(4545, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(16);
      assertEquals(16, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("%L$G$JC14k", integer1);
      assertEquals(16, (int)integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-3035));
      assertEquals((-3035), (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      double[] doubleArray1 = ArrayUtils.insert(16, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0, 0, 3682);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-609.94707262654));
      assertEquals((-609.94707262654), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(3682);
      assertEquals(3682.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.0);
      assertEquals(0.0, (double)double5, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1.0);
      assertEquals(1.0, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-4003.0));
      assertEquals((-4003.0), (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotNull(double7);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-609.94707262654), 3682.0, 0.0, 0.0, 1.0, (-4003.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (double) doubleArray0[3]);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, (-609.94707262654), 3682.0, 0.0, 0.0, 1.0, (-4003.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-609.94707262654), 0.0, 0.0, 1.0, (-4003.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-211));
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-4745L));
      assertNull(longArray0);
      
      Short short0 = new Short((short)9);
      assertEquals((short)9, (short)short0);
      assertNotNull(short0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) short0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)34);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)34;
      floatArray0[1] = (float) (short)34;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {34.0F, 34.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[5];
      char char0 = 'i';
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('i', (char)character1);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertEquals('i', (char)character2);
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('}');
      assertEquals('}', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char char1 = '=';
      Character character4 = Character.valueOf('=');
      assertEquals('=', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3902.19356095205;
      doubleArray0[1] = (double) 'i';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1270.312786344));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3902.19356095205, 105.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3902.19356095205, 105.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = (char) character1;
      charArray0[1] = 'i';
      charArray0[2] = char1;
      charArray0[3] = 'i';
      charArray0[4] = (char) character0;
      charArray0[5] = '}';
      charArray0[6] = (char) character1;
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = char1;
      charArray1[1] = char1;
      charArray1[2] = ',';
      charArray1[3] = char0;
      charArray1[4] = char0;
      charArray1[5] = (char) character0;
      charArray1[6] = (char) character1;
      charArray1[7] = 'i';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-372), charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -372, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 177;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 177);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {177, 0}, intArray0);
      assertArrayEquals(new int[] {177, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 177;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {177.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2534);
      assertEquals(1, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      ArrayUtils.shift((short[]) null, 2534, (-2588), 1);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-252), (-252));
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'(', '('}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[2];
      charArray0[0] = (char) character0;
      charArray0[1] = (char) character0;
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-17), 1909);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Character character1 = new Character('[');
      assertEquals('[', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Integer integer0 = new Integer((-61));
      assertEquals((-61), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) integer0);
      assertFalse(boolean0);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      floatArray0[4] = (-843.0F);
      floatArray0[5] = 755.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2867.8826F;
      floatArray0[8] = 1896.0F;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 2);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 3179.06F, (-840.7538F), (-843.0F), 755.0F, 0.0F, 2867.8826F, 1896.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-840.7538F), (-843.0F), 755.0F, 0.0F, 2867.8826F, 1896.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'd';
      charArray0[2] = 'Q';
      charArray0[3] = 'F';
      charArray0[4] = 'g';
      charArray0[5] = '~';
      charArray0[6] = 'r';
      charArray0[7] = '0';
      charArray0[8] = '-';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2146795351, 2);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'c', 'd', 'Q', 'F', 'g', '~', 'r', '0', '-'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[2];
      charArray0[0] = (char) character0;
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-17), 1909);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Z', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'Z', '\u0000'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '-';
      charArray0[2] = '?';
      charArray0[3] = '-';
      charArray0[4] = '0';
      charArray0[5] = '-';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 76, 76);
      assertEquals(0, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'0', '-', '?', '-', '0', '-'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      Character character0 = Character.valueOf('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) floatArray1, (Object) character0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '*';
      charArray0[2] = 'e';
      charArray0[3] = '[';
      charArray0[4] = 'P';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'D', '*', 'e', '[', 'P'}, charArray0);
      assertArrayEquals(new char[] {'D', '*', 'e', '[', 'P'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-127);
      ArrayUtils.reverse(shortArray0, (int) (short) (-127), (int) (short) (-127));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-127)}, shortArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean boolean5 = new Boolean(false);
      assertFalse(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean((String) null);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '^';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = 'L';
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(";~6Atgq1ZWfl ");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3621L);
      longArray0[1] = 3119L;
      longArray0[2] = 3119L;
      longArray0[3] = 3119L;
      longArray0[4] = 3119L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {3119L, 3119L, 3119L, 3119L, (-3621L)}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'X';
      charArray0[2] = 'V';
      charArray0[3] = 'B';
      charArray0[4] = 'H';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'p', 'X', 'V', 'B', 'H'}, charArray0);
      assertArrayEquals(new char[] {'p', 'X', 'V', 'B', 'H'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) 3119L;
      doubleArray0[2] = (double) 'B';
      doubleArray0[3] = (double) 'V';
      doubleArray0[4] = (double) 'X';
      doubleArray0[5] = (double) 3119L;
      doubleArray0[6] = (double) 'H';
      doubleArray0[7] = (double) 3119L;
      doubleArray0[8] = (double) (-3621L);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1368.745580266284));
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {88.0, 3119.0, 66.0, 86.0, 88.0, 3119.0, 72.0, 3119.0, (-3621.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.0, 3119.0, 66.0, 86.0, 88.0, 3119.0, 72.0, 3119.0, (-3621.0), (-1368.745580266284)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((char[]) null, 878, 878);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 878;
      doubleArray0[1] = (double) 878;
      doubleArray0[2] = (double) 878;
      doubleArray0[3] = (-266.110693);
      doubleArray0[4] = (double) 878;
      doubleArray0[5] = (double) 878;
      doubleArray0[6] = (double) 878;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {878.0, 878.0, 878.0, (-266.110693), 878.0, 878.0, 878.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, '+');
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 878;
      doubleArray1[1] = (-266.110693);
      doubleArray1[2] = (-266.110693);
      double[] doubleArray2 = ArrayUtils.insert(6, doubleArray0, doubleArray1);
      assertEquals(10, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {878.0, 878.0, 878.0, (-266.110693), 878.0, 878.0, 878.0, (-266.110693), (-266.110693), 878.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {878.0, 878.0, 878.0, (-266.110693), 878.0, 878.0, 878.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {878.0, (-266.110693), (-266.110693)}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, (double) 1896.0F);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1896.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)55;
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)55;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '^';
      doubleArray0[1] = (-2286.82073);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 94.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {94.0, (-2286.82073)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {94.0, 94.0, (-2286.82073)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = '-';
      Character character0 = Character.valueOf('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('-', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('-', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char char1 = 'n';
      Character character3 = Character.valueOf('n');
      assertEquals('n', (char)character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertEquals('-', (char)character4);
      assertFalse(char0 == char1);
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char1));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)char0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'n');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-', 'n', '-'}, charArray0);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)95;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-85), (byte)46, (byte)0, (byte)0, (byte)0, (byte)30, (byte)115, (byte)95, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-85), (byte)46, (byte)0, (byte)0, (byte)0, (byte)30, (byte)115, (byte)95}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)30;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (-1107.422616091511);
      doubleArray0[3] = (double) (byte) (-85);
      doubleArray0[4] = (double) (byte)30;
      doubleArray0[5] = (double) char1;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 948.737803);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {948.737803, 30.0, 0.0, (-1107.422616091511), (-85.0), 30.0, 110.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {30.0, 0.0, (-1107.422616091511), (-85.0), 30.0, 110.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      Double double0 = new Double(1330.94822294);
      assertEquals(1330.94822294, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(4437);
      assertEquals(4437.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1003);
      assertEquals(1003.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = new Double[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, (-3833));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      Short short0 = new Short((short)217);
      assertEquals((short)217, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short)217);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Short short0 = new Short((short) (-1259));
      assertEquals((short) (-1259), (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-1259);
      longArray0[1] = (long) (short) (-1259);
      ArrayUtils.shift(longArray0, 91);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1259L), (-1259L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)32;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)32);
      assertTrue(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)32, (byte)32, (byte)32, (byte)32, (byte)77, (byte)32}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt(0L);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)77);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertEquals((short)77, mutableInt1.shortValue());
      assertEquals(77L, mutableInt1.longValue());
      assertEquals(77, mutableInt1.intValue());
      assertEquals(77.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(77.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(77, (int)mutableInt1.getValue());
      assertEquals((byte)77, mutableInt1.byteValue());
      assertEquals("77", mutableInt1.toString());
      assertEquals(77, (int)mutableInt1.toInteger());
      assertNotNull(mutableInt1);
      
      org.evosuite.runtime.Random.setNextRandom((byte)77);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {177.13183}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short)2134;
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)79;
      shortArray0[5] = (short) (-3);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2134, (short)2134, (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short)2134);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2134, (short)2134, (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short)0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)79;
      longArray0[1] = (long) (short)2134;
      longArray0[2] = (long) (short)2134;
      longArray0[3] = (long) (short)2134;
      longArray0[4] = 3128L;
      longArray0[5] = (long) (short) (-3);
      longArray0[6] = (long) (short)79;
      ArrayUtils.shift(longArray0, (int) (short)2134);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2134L, 2134L, 2134L, 3128L, (-3L), 79L, 79L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) (short) (-1103));
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1103.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1103);
      longArray0[1] = (long) (short) (-1103);
      longArray0[2] = (long) (short) (-1103);
      ArrayUtils.shift(longArray0, (-398));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1103L), (-1103L), (-1103L)}, longArray0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)32;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-72));
      assertFalse(boolean0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)32, (byte)77, (byte)77, (byte)77, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)32);
      assertEquals("32", mutableInt0.toString());
      assertEquals(32.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(32, mutableInt0.intValue());
      assertEquals(32L, mutableInt0.longValue());
      assertEquals(32, (int)mutableInt0.toInteger());
      assertEquals((byte)32, mutableInt0.byteValue());
      assertEquals(32, (int)mutableInt0.getValue());
      assertEquals(32.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)32, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((int) (byte)32);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(32, (int)mutableInt1.getValue());
      assertEquals(32, (int)mutableInt1.toInteger());
      assertEquals((byte)32, mutableInt1.byteValue());
      assertEquals(32.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("32", mutableInt1.toString());
      assertEquals(32L, mutableInt1.longValue());
      assertEquals(32.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)32, mutableInt1.shortValue());
      assertEquals(32, mutableInt1.intValue());
      assertNotNull(mutableInt1);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((long[]) null, (int) (byte)21);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)21;
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) (byte)21;
      objectArray0[3] = (Object) (byte)21;
      objectArray0[4] = (Object) 1.0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 465L;
      longArray0[1] = (-734L);
      longArray0[2] = 1L;
      longArray0[3] = (-765L);
      longArray0[4] = (-1499L);
      longArray0[5] = 178L;
      longArray0[6] = 1L;
      longArray0[7] = 2147483647L;
      ArrayUtils.shift(longArray0, 2476);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1499L), 178L, 1L, 2147483647L, 465L, (-734L), 1L, (-765L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {177.13183}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short) (-765);
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)79;
      shortArray0[5] = (short) (-3);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2134, (short) (-765), (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short) (-765));
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2134, (short) (-765), (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short)0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)79;
      longArray0[1] = (long) (short) (-765);
      longArray0[2] = (long) (short) (-765);
      longArray0[3] = (long) (short) (-765);
      longArray0[4] = 3128L;
      longArray0[5] = (long) (short) (-3);
      longArray0[6] = (long) (short)79;
      ArrayUtils.shift(longArray0, (int) (short) (-765));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-765L), (-765L), 3128L, (-3L), 79L, 79L, (-765L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3179.06F;
      floatArray0[3] = (-840.7538F);
      floatArray0[4] = (-843.0F);
      floatArray0[5] = 755.0F;
      floatArray0[6] = (-840.7538F);
      floatArray0[8] = 1896.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(14, floatArray0.length);
      
      ArrayUtils.swap((short[]) null, 9, 6, 3400);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      Short short0 = new Short((short)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)1382;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short)6;
      shortArray0[5] = (short) (-40);
      ArrayUtils.swap(shortArray0, 2565, (int) (short)6, (int) (short)1382);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)6, (short)1382, (short)6, (short)6, (short) (-40)}, shortArray0);
      
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      Character character0 = Character.valueOf('%');
      assertEquals('%', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) character0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.add(intArray0, 37);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {37}, intArray0);
      assertArrayEquals(new int[] {37, 37}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      ArrayUtils.reverse((byte[]) null, 37, 0);
      ArrayUtils.swap((Object[]) null, (-1), (-1), 0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3);
      shortArray0[1] = (short) (-3);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-3), (short) (-3)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3), (short) (-3), (short) (-3), (short) (-3)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray1, 935, (-1));
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-3), (short) (-3)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3), (short) (-3), (short) (-3), (short) (-3)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 37);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 37;
      longArray0[1] = 3796L;
      longArray0[2] = (-915L);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short)79;
      longArray0[5] = (long) 935;
      int int1 = ArrayUtils.indexOf(longArray0, 3444L, 37);
      assertEquals((-1), int1);
      assertEquals(6, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {37L, 3796L, (-915L), (-1L), 79L, 935L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('H');
      assertEquals('H', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      float[] floatArray0 = new float[5];
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'H';
      intArray0[2] = (int) 'H';
      intArray0[3] = (int) 'H';
      intArray0[4] = (int) 'H';
      intArray0[5] = (int) 'H';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[1] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'t', 'E', '5', '\u0000', 'E', 'E'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'E';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      ArrayUtils.swap((long[]) null, (-2543), 485, (-985));
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)57, (byte)0, (byte)57, (byte)53, (byte) (-70), (byte)0}, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = '4';
      charArray0[2] = 't';
      charArray0[3] = 'E';
      charArray0[4] = '5';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'q', '4', 't', 'E', '5'}, charArray0);
      assertArrayEquals(new char[] {'q', '4', 't', 'E', '5', 'q', '4', 't', 'E', '5'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      ArrayUtils.swap((long[]) null, (-1362), 8, (-1362));
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)975;
      shortArray0[2] = (short) (-589);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-589));
      assertEquals(4, shortArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new short[] {(short)0, (short)975, (short) (-589), (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (-1367.75F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1367.75F);
      floatArray0[4] = (-994.0F);
      floatArray0[5] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 4030);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1367.75F), 0.0F, (-1367.75F), (-994.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1367.75F), 0.0F, (-1367.75F), (-994.0F), 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2650);
      intArray0[3] = 0;
      MockRandom mockRandom0 = new MockRandom((-2406L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '^';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = 'L';
      charArray0[5] = '<';
      ArrayUtils.shift(charArray0, 174);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '2';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {50.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {50.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '^';
      objectArray0[1] = (Object) 'W';
      objectArray0[2] = (Object) 'L';
      objectArray0[4] = (Object) '<';
      objectArray0[5] = (Object) 'L';
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 174, (Object) byte0);
      assertEquals((byte)35, object0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 'W';
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray0);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-2700), 319);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(8192);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {50.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 4;
      ArrayUtils.swap(doubleArray0, 4, (-1776));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 5441.27220567, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt((-1776));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1776);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 4;
      floatArray0[3] = (float) 319;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 4;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 4.0F, 319.0F, 1.0F, 4.0F, (-1776.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '&');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3621L);
      longArray0[1] = 3119L;
      longArray0[2] = 3119L;
      longArray0[3] = 3119L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {3119L, 3119L, 3119L, 0L, (-3621L)}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'X';
      charArray0[2] = '[';
      charArray0[3] = '8';
      charArray0[4] = 'H';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '8');
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'p', 'X', '[', '8', 'H'}, charArray0);
      assertArrayEquals(new char[] {'p', 'X', '[', 'H'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) '8';
      Integer integer0 = new Integer('[');
      assertEquals(91, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (int) integer0, 2146318437);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)88}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-954);
      intArray0[1] = 611;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-954), 611}, intArray0);
      assertArrayEquals(new int[] {(-954), 611, (-954), 611}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'b';
      charArray0[3] = '2';
      charArray0[4] = 'G';
      charArray0[5] = '.';
      charArray0[6] = 'G';
      charArray0[7] = 't';
      charArray0[8] = 'm';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 't');
      assertEquals(9, charArray0.length);
      assertEquals("{0, 1, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertArrayEquals(new char[] {'t', 't', 'b', '2', 'G', '.', 'G', 't', 'm'}, charArray0);
      assertNotNull(bitSet0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '*');
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'t', 't', 'b', '2', 'G', '.', 'G', 't', 'm'}, charArray0);
      assertArrayEquals(new char[] {'t', 't', 'b', '2', 'G', '.', 'G', 't', 'm'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 611;
      doubleArray0[1] = (double) '2';
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (-589.0);
      doubleArray0[4] = (double) '*';
      ArrayUtils.swap(doubleArray0, 108, (-703));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {611.0, 50.0, 71.0, (-589.0), 42.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)7;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85, (byte)59, (byte)36, (byte) (-46), (byte) (-54), (byte)88, (byte)69, (byte)7, (byte)79}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.7443372616161258;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1485.0330484334;
      doubleArray0[6] = (-2976.615592679914);
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, 98);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1323;
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (short)1323, 160);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2199.59F;
      doubleArray0[1] = (double) (-382);
      doubleArray0[2] = (double) 2199.59F;
      doubleArray0[3] = (double) 1397;
      doubleArray0[4] = (double) 2199.59F;
      doubleArray0[5] = (double) 2199.59F;
      ArrayUtils.shift(doubleArray0, 108, 206, (-2389));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2199.590087890625, (-382.0), 2199.590087890625, 1397.0, 2199.590087890625, 2199.590087890625}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = 10;
      int[] intArray0 = new int[3];
      intArray0[0] = 10;
      intArray0[1] = 10;
      int int1 = (-1375);
      intArray0[2] = (-1375);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(10, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2732);
      Character character0 = new Character('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('t');
      assertEquals('t', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('x');
      assertEquals('x', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      Character character3 = new Character('x');
      assertEquals('x', (char)character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      Character character4 = Character.valueOf('t');
      assertEquals('t', (char)character4);
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1375);
      intArray0[1] = (-2732);
      intArray0[2] = (int) 't';
      intArray0[3] = (int) 'x';
      intArray0[4] = (-2732);
      intArray0[5] = (-1375);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2732), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2732, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-361L);
      longArray0[1] = (-1487L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-361L), (-1487L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)100;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-110), (byte)120, (byte)100}, byteArray0);
      
      Object[] objectArray0 = new Object[0];
      MutableInt mutableInt0 = new MutableInt((-1487L));
      assertEquals((-1487L), mutableInt0.longValue());
      assertEquals((-1487.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1487), (int)mutableInt0.toInteger());
      assertEquals((-1487), (int)mutableInt0.getValue());
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals((short) (-1487), mutableInt0.shortValue());
      assertEquals("-1487", mutableInt0.toString());
      assertEquals((-1487), mutableInt0.intValue());
      assertEquals((-1487.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) mutableInt0);
      assertFalse(boolean1);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1487L), mutableInt0.longValue());
      assertEquals((-1487.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1487), (int)mutableInt0.toInteger());
      assertEquals((-1487), (int)mutableInt0.getValue());
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals((short) (-1487), mutableInt0.shortValue());
      assertEquals("-1487", mutableInt0.toString());
      assertEquals((-1487), mutableInt0.intValue());
      assertEquals((-1487.0), mutableInt0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[12];
      intArray0[0] = (int) (byte)121;
      intArray0[1] = 7;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(12, intArray0.length);
      assertEquals(24, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.insert((int) (byte)121, intArray2, intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 619;
      longArray0[1] = (long) (byte)121;
      longArray0[2] = (long) (byte)121;
      longArray0[3] = (long) (byte)121;
      longArray0[4] = (long) 7;
      longArray0[5] = (long) 121;
      longArray0[6] = (long) 121;
      longArray0[7] = (long) 7;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 7, 6);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {619L, 121L, 121L, 121L, 7L, 121L, 121L, 7L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, 1644);
      assertEquals(6, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-114));
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte)0, (byte)0, (byte)0, (byte)121, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "Comparator should not be null.");
      assertEquals("2147483647", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 1250.1653F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[15];
      intArray0[2] = (-1375);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1680.5881548258674;
      doubleArray0[2] = (double) (short)1791;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      ArrayUtils.swap(byteArray0, (int) (byte) (-45), (int) (byte) (-45));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-45)}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1791;
      intArray0[1] = (int) (byte) (-45);
      intArray0[2] = 1351;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte) (-45));
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1791, (-45), 1351}, intArray0);
      assertArrayEquals(new int[] {(-45), 1791, (-45), 1351}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1375);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2003.5962312666;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1239.25767258013);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-203));
      assertEquals(0, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2003.5962312666, 0.0, 0.0, 0.0, 0.0, 0.0, (-1239.25767258013)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'h', 1508);
      assertEquals(0, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1987);
      intArray0[2] = 1171;
      intArray0[3] = (-4150);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1171, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-2257));
      assertNull(shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-2257);
      intArray0[1] = (int) (short) (-2257);
      intArray0[2] = (int) (short) (-2257);
      intArray0[3] = (int) (short) (-2257);
      intArray0[4] = (int) (short) (-2257);
      intArray0[5] = (int) (short) (-2257);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertArrayEquals(new int[] {(-2257), (-2257), (-2257), (-2257), (-2257), (-2257)}, intArray0);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 85.237F;
      floatArray0[1] = 716.5F;
      floatArray0[2] = 1792.14F;
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-11404));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)34);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)34;
      floatArray0[1] = (float) (short)34;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {34.0F, 34.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('i', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertEquals('i', (char)character2);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('}');
      assertEquals('}', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('=');
      assertEquals('=', (char)character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, Integer.MAX_VALUE, (-1), Integer.MAX_VALUE);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = new Boolean("O;A.,s#=");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = new Boolean("O;A.,s#=");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      
      Boolean boolean6 = new Boolean("%H_09p8Q[/#oCE=.w");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertNotNull(boolean7);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, Integer.MAX_VALUE);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean3, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = (long) (short)34;
      longArray0[1] = (long) (short)34;
      longArray0[2] = (long) (short)34;
      longArray0[3] = (long) (short)34;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 34L, 34L, 34L}, longArray0);
      assertArrayEquals(new long[] {0L, 34L, 34L, 34L}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 34L;
      ArrayUtils.swap(floatArray0, 2217, (-122), (int) (short)34);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {34.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 34L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (short)34, 1188.4371517577526);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {34.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      ArrayUtils.swap(floatArray0, 2146, (-2585), (-2585));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(true);
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean((String) null);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean6));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 637;
      intArray0[2] = 637;
      intArray0[3] = 637;
      intArray0[4] = 637;
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) null);
      assertNull(objectArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {637, 0, 637, 637, 637}, intArray0);
      assertArrayEquals(new int[] {637, 0, 637, 637, 637, 637, 0, 637, 637, 637}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2650);
      intArray0[3] = 0;
      intArray0[4] = 4394;
      intArray0[5] = 0;
      intArray0[6] = (-1099);
      intArray0[7] = (-954);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, (-2650), 0, 4394, 0, (-1099), (-954)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'b';
      charArray0[2] = 'G';
      charArray0[3] = 't';
      charArray0[4] = 'm';
      charArray0[5] = 'b';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ',');
      assertEquals(6, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'.', 'b', 'G', 't', 'm', 'b'}, charArray0);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '(');
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'(', '(', '(', '('}, charArray0);
      assertArrayEquals(new char[] {'(', '(', '('}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (short) (-576));
      assertEquals(4, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.swap((long[]) null, 4044, 4044, 2);
      ArrayUtils.swap(shortArray0, 0, 2, (-122));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      Double double0 = new Double(2772.8173934251);
      assertEquals(2772.8173934251, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-79);
      longArray0[1] = (long) (byte) (-79);
      ArrayUtils.reverse(longArray0, (int) (byte) (-79), 14);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-79L), (-79L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147483647L);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-79L), (-79L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = 2199.59F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      ArrayUtils.shift((double[]) null, 84);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2092);
      shortArray0[1] = (short) (-1726);
      shortArray0[2] = (short) (-1726);
      shortArray0[3] = (short)348;
      shortArray0[4] = (short) (-2092);
      shortArray0[5] = (short)348;
      shortArray0[6] = (short) (-987);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2092), (short) (-1726), (short) (-1726), (short)348, (short) (-2092), (short)348, (short) (-987)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      long[] longArray0 = new long[1];
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((short[]) null, (int) (short) (-3), (-1007));
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 816);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 1717);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      Integer integer0 = new Integer((short)79);
      assertEquals(79, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.getInteger("-rRs=z5Q|a `UC", integer2);
      assertEquals((-1), (int)integer3);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(15);
      assertEquals(15, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(15);
      assertEquals(15, (int)integer5);
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertNotNull(integer5);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short)128;
      shortArray0[2] = (short)1823;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)127, (short)128, (short)1823, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)127, (short)128, (short)1823, (short)0, (short)0, (short)127, (short)128, (short)1823, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1250.1653F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1250.1653F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2146795351);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 344L, 88);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (long) (-1);
      longArray0[1] = 3119L;
      longArray0[2] = (long) (-1);
      longArray0[3] = (-1L);
      longArray0[4] = 3119L;
      longArray0[5] = (long) (-1);
      longArray0[6] = 3119L;
      int int0 = ArrayUtils.indexOf(longArray0, 293L, (-257));
      assertEquals((-1), int0);
      assertEquals(22, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {177.13183}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short) (-765);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)79;
      shortArray0[5] = (short) (-3);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2134, (short) (-765), (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short) (-765));
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2134, (short) (-765), (short)0, (short)0, (short)79, (short) (-3)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (short)0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-765);
      longArray0[2] = (long) (short)2134;
      int int1 = ArrayUtils.indexOf(longArray0, 3119L, (int) (short)0);
      assertEquals((-1), int1);
      assertEquals(3, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {0L, (-765L), 2134L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertEquals(5, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {5441.27220567, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) 5;
      longArray0[3] = (long) 5;
      longArray0[4] = 3119L;
      longArray0[5] = (long) 5;
      longArray0[6] = (long) 5;
      ArrayUtils.swap(longArray0, 2212, 2147010456, 5);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {5L, 5L, 5L, 5L, 3119L, 5L, 5L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2134;
      shortArray0[1] = (short) (-753);
      doubleArray0[0] = (double) (short)0;
      shortArray0[3] = (short)0;
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      int int0 = 76;
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-3184), (int) (short)0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146946121, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146946121, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(longArray0, (-1965), Integer.MAX_VALUE, (-2972));
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1103);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 102, (short) (-1103));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-1494), (-1));
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      Short[] shortArray2 = new Short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray2, 322);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 322, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 0L;
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int int0 = (-1965);
      ArrayUtils.swap(longArray0, (-1965), Integer.MAX_VALUE, (-2972));
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(objectArray0, (-1965));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1965, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-16.577509F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2930.877F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, (-16.577509F));
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-16.577509F), 1.0F, 0.0F, 2930.877F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-16.577509F), 0.0F, 0.0F, 0.0F, (-16.577509F), 1.0F, 0.0F, 2930.877F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      Long long0 = new Long((-3621L));
      assertEquals((-3621L), (long)long0);
      assertNotNull(long0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) long0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 85.237F;
      floatArray0[1] = 716.5F;
      floatArray0[2] = 1792.14F;
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-44));
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-120)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-44)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = '-';
      Character character0 = Character.valueOf('-');
      assertEquals('-', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('-', (char)character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('-', (char)character2);
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('n');
      assertEquals('n', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertEquals('-', (char)character4);
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'n');
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'-', '-', '-', 'n', '-'}, charArray0);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)95;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-85), (byte)46, (byte)0, (byte)0, (byte)0, (byte)30, (byte)115, (byte)95, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-85), (byte)46, (byte)0, (byte)0, (byte)0, (byte)30, (byte)115, (byte)95}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      characterArray0[1] = characterArray0[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 's');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'s', 's', 's'}, charArray0);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-54);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)54, (byte)0, (byte)43, (byte)106, (byte)7, (byte) (-14), (byte) (-109), (byte) (-117), (byte) (-54)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)54, (byte)0, (byte)43, (byte)106, (byte)7, (byte) (-14), (byte) (-109), (byte) (-117), (byte) (-54)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = Character.valueOf('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('s');
      assertEquals('s', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('6');
      assertEquals('6', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 's');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'6', 's', '6'}, charArray0);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[7];
      Character character3 = Character.valueOf('t');
      assertEquals('t', (char)character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      Character[] characterArray1 = ArrayUtils.add(characterArray0, character3);
      assertEquals(3, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertEquals(4, stringArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(stringArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray1);
      assertTrue(boolean0);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)105;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-2145761680));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145761680, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((long[]) null, (-111), (-111));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-111);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1211.742219), (-111));
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-111.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'g';
      charArray0[2] = 'J';
      charArray0[3] = '|';
      charArray0[4] = 'n';
      charArray0[5] = 'V';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'h', 'g', 'J', '|', 'n', 'V'}, charArray0);
      assertArrayEquals(new char[] {'h', 'g', 'J', '|', 'n', 'V'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-170));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -170, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 0, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 0, 4437, 4437}, intArray0);
      assertNotNull(integerArray0);
      
      Integer integer0 = new Integer(4437);
      assertEquals(4437, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(4437, object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals(4437, object1);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals(4437, object2);
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, object2, 0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {1003, 0, 4437, 4437}, intArray0);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1003, 0, 4437, 4437}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt();
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      mutableInt0.increment();
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      
      int int0 = mutableInt0.addAndGet((Number) (byte)1);
      assertEquals(2, int0);
      assertEquals("2", mutableInt0.toString());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals("2", mutableInt0.toString());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt1.intValue());
      assertEquals(2, (int)mutableInt1.getValue());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(2, (int)mutableInt1.toInteger());
      assertEquals("2", mutableInt1.toString());
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(2L, mutableInt1.longValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      Short[] shortArray0 = ArrayUtils.removeElement((Short[]) null, (Object) mutableInt0);
      assertEquals("2", mutableInt0.toString());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertSame(mutableInt0, mutableInt1);
      assertNull(shortArray0);
      
      ArrayUtils.shift((char[]) null, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '^';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = 'L';
      charArray0[5] = '<';
      ArrayUtils.shift(charArray0, 174);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '2';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {50.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {50.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '2';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {50L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray1);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 50L);
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {50.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      ArrayUtils.shift(longArray1, (int) (byte)35, (int) (byte)35, 0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {50L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      ArrayUtils.shift(charArray0, 174);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'W';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {87.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {87.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 87.0F;
      objectArray0[1] = (Object) 87.0F;
      Object object0 = ArrayUtils.get(objectArray0, (-2146500870), objectArray0[0]);
      assertEquals(87.0F, object0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-361L);
      longArray0[1] = (-361L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-361L), (-361L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 65, 646);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      short[] shortArray0 = new short[8];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)90;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)121}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (byte)90;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 90.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 90.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '^';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = 'L';
      charArray0[5] = '<';
      ArrayUtils.shift(charArray0, 174);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'<', '^', 'W', '2', 'L', '<'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '2';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {50.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {50.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '2';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {50L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '^';
      objectArray0[1] = (Object) 'W';
      objectArray0[2] = (Object) 'L';
      objectArray0[3] = (Object) 50L;
      objectArray0[4] = (Object) '<';
      objectArray0[5] = (Object) 'L';
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 174, (Object) byte0);
      assertEquals((byte)35, object0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 'W';
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-85));
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-85), (byte)4, (byte)0, (byte)123}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)0, (byte) (-85), (byte)4, (byte)0, (byte)123}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-127));
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-127), (byte) (-127), (byte) (-127), (byte) (-127), (byte) (-127)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-127), (byte) (-127), (byte) (-127), (byte) (-127), (byte) (-127), (byte) (-127)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1103);
      Character character0 = new Character('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      Character character1 = new Character('_');
      assertEquals('_', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[4] = character1;
      Character[] characterArray1 = new Character[1];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      characterArray1[0] = character0;
      Character[] characterArray2 = ArrayUtils.removeElements(characterArray0, characterArray1);
      assertEquals(1, characterArray1.length);
      assertEquals(4, characterArray2.length);
      assertEquals(5, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertNotSame(characterArray1, characterArray2);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray0, characterArray2);
      assertNotNull(characterArray2);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)310);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1103), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1103), (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-57);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-57);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-57)}, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = (long) (byte)32;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (int) (byte)32);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 32L}, longArray0);
      assertArrayEquals(new long[] {1L, 32L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      Character character0 = Character.valueOf(':');
      assertEquals(':', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 619;
      longArray0[1] = (long) (-5357);
      longArray0[2] = (long) (-5357);
      longArray0[3] = (long) 619;
      longArray0[4] = (long) (-5357);
      longArray0[5] = (long) 619;
      longArray0[6] = (long) 619;
      longArray0[7] = (long) 619;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 40, (-5357));
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {619L, (-5357L), (-5357L), 619L, (-5357L), 619L, 619L, 619L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.7);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3035);
      ArrayUtils.shift(intArray0, (-3035), (-3035), (-3035));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-3035)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-935L);
      longArray0[1] = 508L;
      longArray0[2] = 1L;
      longArray0[3] = 1372L;
      longArray0[4] = 2129L;
      longArray0[5] = 255L;
      longArray0[6] = 798L;
      longArray0[7] = 561L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5193, 5193);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-935L), 508L, 1L, 1372L, 2129L, 255L, 798L, 561L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-451));
      assertEquals((-451), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 120;
      Integer integer1 = new Integer(120);
      assertEquals(120, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.decode("ch");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ch\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-351.6459077));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (long) 0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertEquals(3, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short)1, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 8, 0);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), 0L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('o');
      assertEquals('o', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('o');
      assertEquals('o', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('C');
      assertEquals('C', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character3);
      assertEquals('C', (char)character4);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('z');
      assertEquals('z', (char)character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('z');
      assertEquals('z', (char)character6);
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character5));
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('x');
      assertEquals('x', (char)character7);
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character4));
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('p');
      assertEquals('p', (char)character8);
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character5));
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertEquals(0, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.shift((byte[]) null, 13, 51, 101);
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.hashCode((Object) "");
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-123);
      byteArray0[1] = (byte)32;
      ArrayUtils.shift(byteArray0, (-1576));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)114}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, 0, 46, (-3475));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-97), (byte)0, (byte)1, (byte)0, (byte)0, (byte)1, (byte)118, (byte)112}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, (-1.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 561.066F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2199.59F, (-4.79F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2363.09388512;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 3093.007;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2255.06266651281;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2363.09388512, 3093.007, 0.0, 0.0, 0.0, 2255.06266651281, (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1064.73F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1064.73F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1064.73F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 900L;
      longArray0[1] = (-174L);
      longArray0[2] = (-1652L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1901L);
      longArray0[5] = (-1101L);
      longArray0[6] = (-2507L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {900L, (-174L), (-1652L), (-1L), (-1901L), (-1101L), (-2507L)}, longArray1);
      assertArrayEquals(new long[] {900L, (-174L), (-1652L), (-1L), (-1901L), (-1101L), (-2507L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 1, 917, (-382));
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2199.59F;
      ArrayUtils.shift(doubleArray0, Integer.MIN_VALUE, Integer.MIN_VALUE, 1282);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2199.590087890625}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 695);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 695, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-85), (byte)4, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-85), (byte)4, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte)4);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-38));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer integer0 = new Integer((-2384));
      assertEquals((-2384), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals((-2384), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object1);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertEquals((-2384), object2);
      assertNotNull(object2);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-1170), (-1432), (-1170));
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)112;
      byteArray0[2] = (byte)63;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)69, (byte)63, (byte)69, (byte)112, (byte)20, (byte)20, (byte)112, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)20, (byte)69, (byte)63, (byte)69, (byte)112, (byte)20, (byte)20, (byte)112, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = (-3833);
      ArrayUtils.swap(intArray0, 0, (-2073), (-3833));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, (-3833)}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, (-3833)}, intArray0);
      assertNotNull(integerArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)112;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)69, (byte)112}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)69, (byte)112}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 76;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 76;
      ArrayUtils.swap(intArray0, 2579, (-1965));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {76, Integer.MAX_VALUE, 76}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 85.237F;
      floatArray0[1] = 716.5F;
      floatArray0[2] = 1792.14F;
      floatArray0[3] = 92.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-1064.73F);
      ArrayUtils.shuffle(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {716.5F, 1792.14F, 92.0F, 1.0F, (-1064.73F), 85.237F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3639.493F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 879.78754F;
      floatArray0[3] = 1003.0F;
      floatArray0[4] = (-1.43165568E9F);
      floatArray0[5] = 1003.0F;
      floatArray0[6] = (-1.0F);
      ArrayUtils.swap(floatArray0, (-2145635554), (-2145635554), (-2145635554));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {3639.493F, Float.NaN, 879.78754F, 1003.0F, (-1.43165568E9F), 1003.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      Float float0 = new Float(100.0);
      assertEquals(100.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-199.16621F));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1996);
      intArray0[1] = (-1996);
      intArray0[2] = (-1996);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 3597);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray0);
      assertArrayEquals(new int[] {(-1996), (-1996), (-1996)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-67)}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1072, 1072, 3);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-941.9470173406951);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1774.1678F);
      floatArray0[1] = (float) (short)116;
      floatArray0[2] = (float) (short) (-2354);
      floatArray0[3] = (float) (short) (-2354);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {(-1774.1678F), 116.0F, (-2354.0F), (-2354.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = null;
      Short[] shortArray1 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)116;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short) (-2354);
      intArray0[3] = (-1);
      intArray0[4] = 471;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = (-1);
      intArray0[7] = (int) (short) (-2354);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 1L;
      objectArray0[2] = (Object) 1L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 1L);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0.0F;
      objectArray1[1] = (Object) 1L;
      objectArray1[2] = (Object) 1L;
      ArrayUtils.shuffle(objectArray1);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 1656L);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 1656L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)11540;
      shortArray0[1] = (short)11540;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (int) (short)11540);
      assertEquals(2, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1109.61591330398);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'm');
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)11540;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short)11540;
      objectArray0[3] = (Object) (short)11540;
      objectArray0[4] = (Object) (short)11540;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (short)11540;
      Object[] objectArray1 = ArrayUtils.removeAllOccurences(objectArray0, (Object) "bk:\"@rrQ");
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-469), 5148);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) booleanArray1, (-1), (-2145589922));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)11540);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)102, 384);
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)11540, (short)11540}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-10);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-1898), (byte) (-10));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1898, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 1832.7570194916;
      doubleArray0[3] = 1039.931;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1039.931;
      ArrayUtils.swap(doubleArray0, 1891, (-265), 1588);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1832.7570194916, 1039.931, 0.0, 1039.931, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      Double double0 = new Double(2772.8173934251);
      assertEquals(2772.8173934251, (double)double0, 0.01);
      assertNotNull(double0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (byte) (-79);
      ArrayUtils.reverse(longArray0, (int) (byte) (-79), 14);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-79L), 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147483647L);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-79L), 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (byte) (-79), 556L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -79, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (long) (-1);
      longArray0[1] = 3119L;
      longArray0[2] = (long) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4);
      shortArray0[1] = (short)253;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-469));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-4), (short)253}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4), (short)253}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(22, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-79);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-79)}, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap(byteArray0, 1448, (int) (short) (-79));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte) (-79), (byte) (-79), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)7;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 6, (short)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3177.8179F;
      ArrayUtils.swap((Object[]) null, 284, 284);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, (-1574), (Object) null);
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)110;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)110}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, (-1265));
      assertEquals(3, objectArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[7];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertArrayEquals(new int[] {32, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      
      ArrayUtils.swap(intArray0, (-1159), (int) (byte) (-38), (-1159));
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {32, 0, 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 32);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte) (-38), 32, 68);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) (short) (-1103));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1103.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (short) (-1103);
      doubleArray3[1] = (double) (short) (-1103);
      doubleArray3[2] = (double) (short) (-1103);
      doubleArray3[3] = (double) (short) (-1103);
      doubleArray3[4] = (double) (short) (-1103);
      doubleArray3[5] = (double) (short) (-1103);
      doubleArray3[6] = (double) (short) (-1103);
      doubleArray3[7] = (double) (short) (-1103);
      double[] doubleArray4 = ArrayUtils.addFirst(doubleArray3, (double) (short) (-1103));
      assertEquals(9, doubleArray4.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0), (-1103.0)}, doubleArray3, 0.01);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      Double double0 = new Double((-3993.123));
      assertEquals((-3993.123), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double(1.0);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      
      Double double4 = new Double(2199.59F);
      assertEquals(2199.590087890625, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1103);
      shortArray0[1] = (short)96;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1103), (short)96}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1103), (short)96, (short) (-1103), (short)96}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-4003.0));
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4003.0), 2199.590087890625, 1.0, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2199.590087890625, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0, 0, 3682);
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) (short) (-1103));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1103.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1103);
      floatArray0[1] = (float) (short) (-1103);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1103.0F), (-1103.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1103.0F), (-1103.0F), (-1103.0F), (-1103.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      short[] shortArray0 = new short[14];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2270;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2305);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1041);
      shortArray0[6] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(14, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1041);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1041L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1041L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.swap(doubleArray0, 2393, 1835, 1835);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)2270;
      floatArray0[1] = (float) (short) (-1041);
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 2534);
      assertEquals(2, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      char char0 = 'E';
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      Character character0 = Character.valueOf('E');
      assertEquals('E', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = (Character) 't';
      characterArray0[3] = (Character) 't';
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertTrue(boolean0);
      assertEquals(4, characterArray0.length);
      
      ArrayUtils.shift(charArray0, (-1600), (-1600), 0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)83, (byte)83, (byte)83, (byte)83}, byteArray0);
      
      ArrayUtils.reverse((Object[]) characterArray0, (int) (byte)83, (int) char0);
      assertEquals(4, characterArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)83;
      shortArray0[1] = (short) (byte)83;
      shortArray0[2] = (short)2965;
      shortArray0[3] = (short) (byte)83;
      boolean boolean2 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean2);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short)83, (short)83, (short)2965, (short)83}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = (long) (-1);
      longArray0[1] = 3119L;
      longArray0[2] = (long) (-1);
      longArray0[3] = (-1L);
      ArrayUtils.shift(longArray0, (-530), (-1), (-2213));
      assertEquals(22, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2213);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2213.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2820.9), (-2148));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-2213.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2213);
      intArray0[1] = (-2148);
      intArray0[2] = (-2148);
      intArray0[3] = (-2213);
      intArray0[4] = (-1);
      intArray0[5] = (-530);
      intArray0[6] = (-1);
      intArray0[7] = (-530);
      intArray0[8] = (-1);
      ArrayUtils.shift(intArray0, (-530), (-1), (-1));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-2213), (-2148), (-2148), (-2213), (-1), (-530), (-1), (-530), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[17] = (long) (-1);
      longArray0[1] = 3136L;
      longArray0[2] = (long) (-1);
      Character character0 = Character.valueOf('\\');
      assertEquals('\\', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('w');
      assertEquals('w', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Character[]) null);
      assertFalse(boolean0);
      
      Character character2 = Character.valueOf('\\');
      assertEquals('\\', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = ArrayUtils.subarray((Character[]) null, (-1), (-1));
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      Character character0 = new Character('H');
      ArrayUtils.add((Character[]) null, character0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'H';
      floatArray0[1] = (float) 'H';
      floatArray0[2] = (-3046.7F);
      floatArray0[3] = (float) 'H';
      ArrayUtils.isEmpty(doubleArray0);
      ArrayUtils.indexesOf(doubleArray0, (double) (-3046.7F), (-2148));
      ArrayUtils.shift((int[]) null, (-2148), 0, 12);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1212);
      Float float0 = new Float((float) 1212);
      Integer integer0 = new Integer(322);
      ArrayUtils.isEquals(float0, integer0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-661);
      ArrayUtils.isSorted(intArray0);
      ArrayUtils.isSorted(intArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-661), 12);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 0, 0, 3682);
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(1748.0);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      Character character0 = new Character('^');
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character[] characterArray1 = ArrayUtils.removeElements(characterArray0, characterArray0);
      assertEquals(0, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      characterArray0[0] = character0;
      char char0 = 'O';
      Character character1 = new Character('O');
      characterArray0[1] = character1;
      Character character2 = new Character('(');
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character1);
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      characterArray0[4] = character4;
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 0, 0, 0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-4327);
      ArrayUtils.shift(intArray0, 0, (int) char0, (int) character2);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (char)character2;
      floatArray0[2] = 347.887F;
      floatArray0[3] = (float) '(';
      floatArray0[4] = (float) 'O';
      floatArray0[5] = (float) (char)character1;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 40.0F, 347.887F, 40.0F, 79.0F, 79.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = 2199.59F;
      long[] longArray0 = new long[1];
      longArray0[0] = 3128L;
      ArrayUtils.shift(longArray0, (-1641));
      assertArrayEquals(new long[] {3128L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-3134L);
      longArray0[1] = 1L;
      longArray0[2] = (-3134L);
      longArray0[3] = 1698L;
      MockRandom mockRandom0 = new MockRandom(1L);
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {1L, (-3134L), 1698L, (-3134L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 177.13183;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      ArrayUtils.swap(longArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[17] = (long) (-1);
      longArray0[1] = 3136L;
      ArrayUtils.toObject(longArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 22
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-3134L);
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 1698L;
      MockRandom mockRandom0 = new MockRandom(1L);
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {1L, 0L, 1698L, (-3134L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5441.27220567;
      doubleArray0[1] = 5441.27220567;
      doubleArray0[3] = 5441.27220567;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      ArrayUtils.indexOf(doubleArray0, (-1.0), 4, (-1.0));
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 45;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "[", intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)88, (short)0, (short) (-1), (short)0, (short)88, (short)0, (short) (-1)}, shortArray2);
      assertEquals(8, shortArray2.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)53);
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      
      ArrayUtils.shift(byteArray1, 43);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5164.8529;
      doubleArray0[1] = (-1133.0);
      doubleArray0[2] = 352.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1052.8480537762753);
      doubleArray0[5] = (-285.6);
      doubleArray0[6] = (-500.447568768626);
      doubleArray0[7] = 217.0;
      ArrayUtils.reverse(doubleArray0, 2258, 2258);
      int[] intArray0 = new int[1];
      intArray0[0] = 2258;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 2258);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1833;
      longArray0[1] = (long) 1833;
      longArray0[2] = (long) 1833;
      longArray0[3] = (long) 1833;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 1833;
      longArray0[6] = (long) 1833;
      ArrayUtils.isSameLength(longArray0, longArray0);
      ArrayUtils.contains(doubleArray0, (double) 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 1833;
      intArray0[1] = 1833;
      intArray0[2] = 4379;
      intArray0[3] = 4379;
      intArray0[4] = 1833;
      ArrayUtils.indexOf(intArray0, (-2316), 979);
      ArrayUtils.nullToEmpty((Short[]) null);
      ArrayUtils.shuffle(longArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-82);
      ArrayUtils.reverse(byteArray0);
      ArrayUtils.indexesOf(byteArray0, (byte) (-82));
      int int0 = ArrayUtils.indexOf(longArray0, (long) 1833, 1833);
      assertArrayEquals(new long[] {1833L, 1833L, 1833L, 0L, 1833L, 1833L, 1833L}, longArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      characterArray0[0] = character0;
      Character character1 = new Character('O');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      ArrayUtils.indexesOf(byteArray0, (byte)2, (int) character0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (char)character0;
      ArrayUtils.removeAllOccurences(intArray0, (int) (byte)125);
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 1;
      intArray0[2] = 4437;
      intArray0[3] = 4437;
      ArrayUtils.swap(intArray0, 0, (-2073), 1003);
      ArrayUtils.nullToEmpty((double[]) null);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new int[] {1003, 1, 4437, 4437}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)112;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      Integer integer0 = new Integer((-2384));
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      ArrayUtils.toPrimitive(object0);
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)112, (-2073));
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)69, (byte)112}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      short[] shortArray0 = new short[0];
      ArrayUtils.removeElement(doubleArray0, 1.0);
      ArrayUtils.removeAllOccurrences(shortArray0, (short) (-211));
      ArrayUtils.add((float[]) null, (float) (short)1895);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.addAll(intArray0, intArray0);
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1;
      ArrayUtils.reverse(doubleArray0, (-2660), (-1488));
      int[] intArray0 = new int[1];
      intArray0[0] = (-2660);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2107715432, (-635));
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = 'b';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(99, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      Integer integer0 = new Integer((-2384));
      ArrayUtils.toPrimitive((Object) integer0);
      Long long0 = new Long((-2384));
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-24);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)127);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-121), (byte) (-24), (byte) (-24)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'O';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '\'';
      ArrayUtils.removeElements(charArray0, charArray0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-77), (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1157);
      ArrayUtils.reverse(doubleArray0);
      Boolean boolean0 = new Boolean(" in an array of ");
      ArrayUtils.reverse(doubleArray0, 4327, (-2145469349));
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145469349);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2142425985));
      assertArrayEquals(new int[] {(-2145469349)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(11540);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(98);
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt(11540);
      Integer integer3 = mutableInt0.getValue();
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      integerArray0[4] = integer4;
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[2] = 'g';
      charArray0[2] = 'D';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[0] = 2199.59F;
      float[] floatArray1 = new float[14];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)15;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)125, (int) (byte)0);
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte)78;
      floatArray0[2] = (float) (byte)78;
      floatArray0[3] = (float) (byte)15;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)15;
      intArray0[3] = (int) (byte)125;
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 839);
      assertArrayEquals(new int[] {0, 1, 15, 125, 0}, intArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '@';
      charArray0[2] = 'y';
      charArray0[3] = 'w';
      charArray0[4] = 'P';
      charArray0[5] = 'X';
      charArray0[6] = 'g';
      charArray0[7] = 'D';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '8';
      charArray0[2] = '/';
      charArray0[3] = 'r';
      charArray0[4] = ')';
      ArrayUtils.indexOf(charArray0, '7', (-2072));
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[7] = (-1);
      intArray0[1] = (-1);
      intArray0[1] = 56;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 56;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-1));
      assertArrayEquals(new int[] {0, 56, 0, 56}, intArray1);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.subarray(intArray0, 0, 0);
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.contains(doubleArray0, (double) 0, (double) 0);
      Character character0 = new Character('<');
      ArrayUtils.add((Character[]) null, character0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.removeAllOccurences(booleanArray0, true);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1212);
      Float float0 = new Float((float) 1212);
      Integer integer0 = new Integer(322);
      boolean boolean0 = ArrayUtils.isEquals(float0, integer0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 306);
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexesOf(doubleArray0, (double) 1, 322, 1680.5881548258674);
      boolean boolean1 = ArrayUtils.contains(booleanArray1, false);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, booleanArray1.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 5);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      ArrayUtils.contains(doubleArray0, 1.5, 1.5);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.removeAllOccurrences(booleanArray0, true);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1368.745580266284));
      int int0 = ArrayUtils.indexOf(doubleArray1, (-1368.745580266284), (-464));
      assertEquals(3, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 3;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-464));
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 3);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.removeAllOccurrences(booleanArray0, false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.addFirst(shortArray0, (short)217);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)217;
      floatArray0[1] = (float) (short)217;
      floatArray0[2] = (float) (short)217;
      floatArray0[3] = (float) (short)217;
      floatArray0[4] = (float) (short)217;
      floatArray0[5] = (float) (short)217;
      floatArray0[6] = (float) (short)217;
      floatArray0[7] = (float) (short)217;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (short)217);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 217, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = (-1634);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-1634));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1634, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (-1673.8751064888);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, 69);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (-3787);
      shortArray0[6] = (short)14;
      shortArray0[7] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (-186));
      assertEquals("{0, 1, 2, 3, 5, 7}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1554;
      shortArray0[1] = (short) (-1147);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1147));
      assertEquals("{1}", bitSet0.toString());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)1554;
      doubleArray0[1] = (double) (short)1554;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 37.0, 1598.22150491737);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1109.61591330398);
      Object object0 = new Object();
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-3507), (-2913));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      ArrayUtils.isSorted((long[]) null);
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-667);
      ArrayUtils.indexesOf(shortArray0, (short)11540, (int) (short)11540);
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(66.1);
      doubleArray0[3] = double3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(doubleArray0, 12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      int int0 = (-2928);
      MutableInt mutableInt0 = new MutableInt((-2928));
      ArrayUtils.get(objectArray0, 0, (Object) mutableInt0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      String string0 = "UYK-!xROpVsh7l;Bh";
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-22);
      byteArray0[0] = (byte) (-22);
      int int1 = 2;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 2, (int) (byte) (-22));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, (double) (-4.79F));
      ArrayUtils.indexOf(doubleArray0, (-0.7607178226457485), (-926), (double) 2199.59F);
      Integer integer0 = new Integer(2265);
      Boolean boolean0 = new Boolean(false);
      ArrayUtils.toPrimitive((Object) boolean0);
      ArrayUtils.shift((Object[]) null, (-1));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      ArrayUtils.shift(intArray0, (-1));
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      int[] intArray0 = new int[2];
      double[] doubleArray0 = ArrayUtils.add((double[]) null, (double) 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1427));
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)5036;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)5036;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)5036;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (-1);
      intArray0[7] = (-435);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5036, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.toObject(doubleArray0);
      org.evosuite.runtime.Random.setNextRandom(2);
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      ArrayUtils.contains(charArray0, '.');
      ArrayUtils.reverse(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 32;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      char[] charArray0 = new char[0];
      ArrayUtils.indexesOf(charArray0, 't', 1980);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 11540);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11540, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Byte byte0 = new Byte((byte) (-1));
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '2');
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      ArrayUtils.removeAllOccurences((char[]) null, '-');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      ArrayUtils.swap(byteArray0, (-2157), (-2157));
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ArrayUtils.indexesOf(charArray0, 'g', (-760));
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4536.3F);
      floatArray0[1] = 0.0F;
      ArrayUtils.swap(floatArray0, 2146, (-2585), (-2585));
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.valueOf((String) null);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      booleanArray0[2] = boolean2;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-4536.3F));
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-4536.3F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 900L;
      longArray0[1] = 900L;
      longArray0[2] = (long) (-2585);
      longArray0[3] = (long) 2146;
      longArray0[4] = (-1901L);
      longArray0[5] = (-1652L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(12, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '^';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = 'L';
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean(";~6Atgq1ZWfl ");
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      
      char[] charArray1 = new char[2];
      charArray1[0] = '/';
      charArray1[1] = 'W';
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[1] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      ArrayUtils.addAll(charArray0, charArray0);
      float[] floatArray0 = new float[0];
      Double double0 = new Double((-259.028967087));
      ArrayUtils.toString((Object) double0, "F");
      ArrayUtils.reverse((short[]) null, (-510), (int) (short)2103);
      ArrayUtils.indexesOf(floatArray0, 1.0F, (-123));
      long[] longArray0 = new long[1];
      longArray0[0] = 2147483647L;
      ArrayUtils.clone(longArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.indexesOf(booleanArray0, true);
      ArrayUtils.shift((short[]) null, (-1600), (-510), (-123));
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Character character0 = new Character('<');
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertNotNull(characterArray0);
      
      Float[] floatArray1 = new Float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-3040.45F), 0);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 4913L;
      longArray0[2] = (-1499L);
      long[] longArray1 = ArrayUtils.add(longArray0, 4203L);
      ArrayUtils.shift(longArray1, (-530), (-530), (-530));
      assertArrayEquals(new long[] {0L, 4913L, (-1499L), 4203L}, longArray1);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1528L);
      longArray0[2] = (-1528L);
      longArray0[3] = 0L;
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-1528L));
      assertFalse(boolean0);
      
      ArrayUtils.reverse(longArray0);
      double[] doubleArray0 = new double[6];
      boolean boolean1 = ArrayUtils.contains(floatArray0, 798.0F);
      assertFalse(boolean1);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, (-1528L), (-1528L), 0L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-510.6292231112403));
      assertArrayEquals(new double[] {(-510.6292231112403), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      double[] doubleArray0 = new double[5];
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      shortArray0[0] = short1;
      Long.getLong("org.apache.commons.lang3.mutable.MutableInt");
      Long long0 = new Long(short0);
      Long long1 = new Long(4913L);
      Long long2 = new Long(2696L);
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle((Object[]) shortArray0);
      long[] longArray2 = ArrayUtils.add(longArray1, (-2147483648L));
      assertArrayEquals(new long[] {(-2147483648L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      ArrayUtils.reverse((short[]) null, (-2818), (-1135));
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'o';
      charArray0[2] = ';';
      charArray0[3] = 'V';
      charArray0[4] = '\\';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-2818);
      floatArray0[1] = (float) (-1135);
      floatArray0[2] = (float) '\\';
      floatArray0[3] = (float) 'o';
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1295.09F);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      ArrayUtils.shuffle(objectArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = 2531L;
      longArray0[1] = (long) 'o';
      longArray0[2] = (long) 'V';
      longArray0[3] = (long) '\\';
      longArray0[4] = 2821L;
      longArray0[5] = (long) '\\';
      longArray0[6] = (long) 'X';
      long[] longArray1 = ArrayUtils.add(longArray0, 2531L);
      assertArrayEquals(new long[] {2531L, 111L, 86L, 92L, 2821L, 92L, 88L, 2531L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.subarray(floatArray0, 1819, 89);
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2147010351), (-392));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2199.59F;
      floatArray0[1] = (-4.79F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-749.0F);
      floatArray0[6] = 151.71002F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      ArrayUtils.swap(doubleArray0, (-1155), 0, 1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-941.9470173406951);
      doubleArray0[2] = (-1178.9192032);
      MockRandom mockRandom0 = new MockRandom(0L);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-941.9470173406951), (-1178.9192032), 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      Short short0 = new Short((short)6);
      Short short1 = new Short((short)6);
      ArrayUtils.toPrimitive((Object) short1);
      ArrayUtils.toPrimitive((Object) short0);
      Byte byte0 = new Byte((byte)47);
      ArrayUtils.toPrimitive((Object) byte0);
      Object[] objectArray0 = new Object[3];
      ArrayUtils.get(objectArray0, (int) 47);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)47;
      intArray0[1] = (int) (byte)47;
      ArrayUtils.shift(intArray0, 67);
      assertArrayEquals(new int[] {0, 47, 47, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.get(objectArray0, (-3066));
      objectArray0[0] = null;
      ArrayUtils.swap(objectArray0, (-31), 577);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 577;
      longArray0[1] = 1L;
      longArray0[2] = 1355L;
      longArray0[3] = (long) (-3066);
      longArray0[4] = (long) 577;
      longArray0[5] = (long) (-3066);
      longArray0[6] = (long) (-3066);
      longArray0[7] = (long) (-3066);
      longArray0[8] = (long) (-3066);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Character character0 = Character.valueOf('5');
      ArrayUtils.contains((Object[]) null, (Object) character0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.add(intArray0, 37);
      ArrayUtils.reverse((byte[]) null, 37, 0);
      ArrayUtils.swap((Object[]) null, (-1), (-1), 0);
      ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      MockRandom mockRandom0 = new MockRandom((-699L));
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      long[] longArray0 = new long[0];
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('(');
      characterArray0[0] = character0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      MutableInt mutableInt0 = new MutableInt();
      ArrayUtils.toPrimitive((Object) mutableInt0);
      Short[] shortArray0 = ArrayUtils.removeElement((Short[]) null, (Object) mutableInt0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.clone(longArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 76;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 76;
      ArrayUtils.swap(intArray0, 2579, (-1965));
      ArrayUtils.removeElements((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      int[] intArray0 = new int[6];
      intArray0[0] = 795;
      intArray0[1] = (int) 'v';
      intArray0[2] = (int) 'v';
      intArray0[3] = (int) 'v';
      intArray0[4] = (int) 'v';
      intArray0[5] = (int) 'v';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 795, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      Character character0 = Character.valueOf('5');
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) character0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.add(intArray0, 37);
      assertArrayEquals(new int[] {37, 37}, intArray1);
      
      ArrayUtils.reverse((byte[]) null, 37, 0);
      ArrayUtils.swap((Object[]) null, (-1), (-1), 0);
      Long long0 = new Long(57L);
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('W');
      Integer integer0 = new Integer((-2520));
      boolean boolean0 = ArrayUtils.contains((Object[]) characterArray0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 76;
      ArrayUtils.shift(intArray0, 76);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1216));
      assertArrayEquals(new int[] {76, (-1216)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, (-1), (-1), 0);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[2] = (-699L);
      longArray0[4] = (long) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      Double double0 = new Double(2772.8173934251);
      long[] longArray0 = new long[2];
      int int0 = new Short((short) (-1));
      Long[] longArray1 = new Long[0];
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Character character0 = Character.valueOf('%');
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) character0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '%';
      int[] intArray1 = ArrayUtils.add(intArray0, 37);
      ArrayUtils.reverse((byte[]) null, 37, 0);
      ArrayUtils.swap((Object[]) null, (-1), (-1), 0);
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      
      MockRandom mockRandom0 = new MockRandom((-699L));
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      assertArrayEquals(new int[] {37, 37}, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '%';
      longArray0[2] = (-699L);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) '%';
      long[] longArray1 = new long[0];
      boolean boolean2 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = (-609L);
      longArray0[4] = 0L;
      longArray0[5] = 2664L;
      longArray0[6] = 0L;
      longArray0[7] = 1368L;
      longArray0[8] = 2331L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3119L);
      short[] shortArray0 = new short[0];
      ArrayUtils.insert((-3035), shortArray0, shortArray0);
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      ArrayUtils.isEmpty(byteArray0);
      ArrayUtils.reverse((Object[]) null, 2, 2);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      ArrayUtils.toString((Object) integer0, "Vov{GC4*GLe9E?M.W)");
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$+rDOr";
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1341.8574132;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1323;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)57;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte)65);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shuffle(booleanArray0);
      ArrayUtils.isNotEmpty((long[]) null);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)217);
      assertArrayEquals(new short[] {(short)217}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)217;
      longArray0[1] = (long) (short)217;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
