/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:01:21 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.stream.DoubleStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (short) (-775);
      doubleArray0[2] = (double) (short) (-775);
      doubleArray0[4] = (double) (short) (-775);
      ArrayUtils.shift(doubleArray0, (int) (short) (-775));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-775);
      doubleArray0[2] = (double) (short) (-775);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 3226);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-775);
      longArray0[1] = (long) (short) (-3574);
      longArray0[2] = (long) 3226;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-775L), (-680));
      assertEquals(3, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-775L), (-3574L), 3226L}, longArray0);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-775));
      assertNotNull(short0);
      assertEquals((short) (-775), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)3);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)3, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)834);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)834, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1885));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-1885), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)119);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)119, (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-605));
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short) (-605), (short)short5);
      
      shortArray0[5] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-775), (short)3, (short)834, (short) (-1885), (short)119, (short) (-605)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Object object0 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (int) 0, (Object) "=y");
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(object0);
      assertEquals("=y", object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      MutableInt mutableInt0 = new MutableInt(long0);
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(2147483647L, mutableInt0.longValue());
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(2147483647L, mutableInt0.longValue());
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, (int)mutableInt1.getValue());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals("2147483647", mutableInt1.toString());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals(Integer.MAX_VALUE, mutableInt1.intValue());
      assertEquals(2.147483647E9, mutableInt1.doubleValue(), 0.01);
      assertEquals(2147483647L, mutableInt1.longValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt1.toInteger());
      assertEquals(2.14748365E9F, mutableInt1.floatValue(), 0.01F);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      Object object2 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, 755);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(object2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0.0, 1980);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 5502.46F;
      floatArray0[1] = (-3423.656F);
      floatArray0[2] = (-3423.656F);
      floatArray0[3] = (float) 541;
      floatArray0[4] = 9.292148F;
      floatArray0[0] = (float) 541;
      floatArray0[6] = 25.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 541);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {541.0F, (-3423.656F), (-3423.656F), 541.0F, 9.292148F, 0.0F, 25.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3423.656F);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3423.656005859375)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '@';
      charArray0[2] = 'L';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'Y', (-1));
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '@', 'L'}, charArray0);
      
      ArrayUtils.swap(doubleArray0, (-1), 54);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-3423.656005859375)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 541, (-1));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) true;
      booleanArray2[2] = (Boolean) true;
      Boolean boolean1 = new Boolean((boolean) booleanArray2[0]);
      assertEquals(8, booleanArray2.length);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray2[3] = boolean1;
      booleanArray2[4] = (Boolean) false;
      booleanArray2[5] = (Boolean) false;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[7] = (Boolean) true;
      Boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray2);
      assertEquals(0, booleanArray3.length);
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 371;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 371}, intArray0);
      assertArrayEquals(new int[] {0, 0, 371}, intArray1);
      
      short[] shortArray0 = new short[7];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1407.5668378450837;
      doubleArray0[1] = 1407.5668378450837;
      doubleArray0[2] = (double) 371;
      doubleArray0[3] = (double) 371;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (double) 371;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 100.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1407.5668378450837, 1407.5668378450837, 371.0, 371.0, 100.0, 371.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1407.5668378450837, 1407.5668378450837, 371.0, 371.0, 371.0, 0.0}, doubleArray1, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1885));
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1270L;
      longArray0[1] = (long) (short) (-1885);
      longArray0[2] = (long) (-2091);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      ArrayUtils.shift(longArray0, 0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1270L, (-1885L), (-2091L), 0L, 0L}, longArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 1270L;
      objectArray0[2] = (Object) 371;
      objectArray0[3] = (Object) 0L;
      ArrayUtils.shift(objectArray0, (-1684));
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-153);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[1] = (float) (short) (-153);
      floatArray0[4] = (float) (short) (-153);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (int) (short)0, 4, (-2134145239));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-153.0F), (-153.0F), 0.0F, 0.0F, (-153.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1407.5668378450837);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1885));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2134145239);
      ArrayUtils.shift(longArray0, (-2091));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2134145239L)}, longArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) (-2134145239);
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) (-153.0F);
      objectArray0[3] = (Object) 0.0F;
      ArrayUtils.shift(objectArray0, 4);
      assertEquals(4, objectArray0.length);
      
      short[] shortArray2 = new short[2];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      shortArray2[1] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)4, (byte) (-1), (byte)108, (byte)112, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)108;
      shortArray0[3] = (short) (-173);
      shortArray0[4] = (short) (-22);
      shortArray0[5] = (short) (byte)4;
      shortArray0[6] = (short) (byte)108;
      shortArray0[7] = (short) (byte)2;
      shortArray0[8] = (short) (byte)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-388));
      assertEquals(9, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)108, (short) (-173), (short) (-22), (short)4, (short)108, (short)2, (short)4}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = (short) (-775);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (short) (-775);
      doubleArray0[2] = (double) (short) (-775);
      doubleArray0[4] = (double) (short) (-775);
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '~';
      charArray0[2] = 'H';
      charArray0[3] = '>';
      charArray0[4] = 'U';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-775), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -775, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long[] longArray0 = new long[6];
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = '8';
      charArray0[2] = '';
      charArray0[3] = 'S';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', '8', '', 'S'}, charArray0);
      assertArrayEquals(new char[] {'w', '8', '', 'S', 'w', '8', '', 'S'}, charArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 78;
      intArray0[2] = (int) 'S';
      intArray0[3] = (int) 'w';
      intArray0[4] = (int) 'S';
      intArray0[5] = 80;
      intArray0[6] = (-3254);
      intArray0[7] = 80;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 80);
      assertEquals(8, intArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new int[] {7, 78, 83, 119, 83, 80, (-3254), 80}, intArray0);
      
      ArrayUtils.shift(intArray0, 78);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {83, 119, 83, 80, (-3254), 80, 7, 78}, intArray0);
      
      ArrayUtils.swap(longArray0, 2338, 78);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'S', (-3254));
      assertEquals(4, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals("{3}", bitSet0.toString());
      assertNotSame(charArray0, charArray1);
      assertNotNull(bitSet0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'w', '8', '', 'S'}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) 'S';
      floatArray0[2] = (float) 78;
      floatArray0[3] = (float) 80;
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {7.0F, 83.0F, 78.0F, 80.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(13, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'w';
      charArray0[2] = '|';
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 1645);
      assertEquals(13, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(bitSet0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\u0000';
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) short0, (int) (short) (-1));
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-2490.73F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2490.73F), (float)float1, 0.01F);
      
      Float float2 = new Float(1079.59589067);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1079.596F, (float)float2, 0.01F);
      
      Float float3 = new Float(2004.25F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(2004.25F, (float)float3, 0.01F);
      
      Float float4 = new Float((-1.0F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      Float float5 = new Float((double) (-2490.73F));
      assertNotNull(float5);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((-2490.73F), (float)float5, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertEquals(13, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      ArrayUtils.swap((double[]) null, (-2020), 0, (-2020));
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(117, longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertSame(intArray0, intArray1);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 0, 10);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "Index: ");
      assertNotNull(object0);
      assertEquals("Index: ", object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) boolean1;
      objectArray0[1] = (Object) boolean1;
      objectArray0[2] = (Object) boolean1;
      objectArray0[3] = (Object) "Index: ";
      objectArray0[4] = (Object) "Index: ";
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'k');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'k', 'k'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 80);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1}, intArray0);
      
      ArrayUtils.shift(intArray0, (-644));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (byte)98;
      longArray0[3] = (long) 80;
      longArray0[4] = 6L;
      longArray0[5] = (-1312L);
      longArray0[6] = (long) 1;
      ArrayUtils.swap(longArray0, (-1539), (-1539));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 98L, 80L, 6L, (-1312L), 1L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) characterArray0);
      assertEquals(2, characterArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Float";
      stringArray0[1] = "iC]`TL*AEg2knG";
      String[] stringArray1 = Locale.getISOCountries();
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = new int[5];
      intArray0[1] = 1228;
      intArray0[2] = (-1259);
      intArray0[3] = 37;
      intArray0[1] = 441;
      Float float0 = new Float((-2252.85F));
      assertNotNull(float0);
      assertEquals((-2252.85F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) 1228;
      floatArray0[1] = (float) 441;
      floatArray0[2] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, 0);
      assertEquals(17, floatArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1259));
      assertNotNull(long0);
      assertEquals((-1259L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1942L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1942L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(37);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(37L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 37);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1259L), (-1942L), 37L}, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, 1009L);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-1259L), (-1942L), 37L}, longArray1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long[] longArray0 = new long[11];
      longArray0[0] = (long) (byte)4;
      longArray0[1] = (long) (byte)115;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1949), (int) (byte)4);
      assertEquals(11, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2347.8508F;
      floatArray0[2] = 111.0F;
      floatArray0[3] = (-2775.96F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[2] = (-1110.0F);
      floatArray0[7] = (-1104.6273F);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 2347.8508F, (-1110.0F), (-2775.96F), (-1.0F), 0.0F, 0.0F, (-1104.6273F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 2347.8508F, (-1110.0F), (-2775.96F), (-1.0F), 0.0F, 0.0F, (-1104.6273F)}, floatArray1, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0, class0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)758;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-5432);
      shortArray0[3] = (short)57;
      ArrayUtils.swap(shortArray0, (int) (short)758, (int) (short)2);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)758, (short)2, (short) (-5432), (short)57}, shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)758, (short)2, (short) (-5432), (short)57}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)758;
      intArray0[1] = (int) (short)758;
      intArray0[2] = (int) (short)2;
      int int0 = ArrayUtils.indexOf(intArray0, (-897));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {758, 758, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[11];
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString((Object) "K)1IS.`NM");
      assertNotNull(string0);
      assertEquals("K)1IS.`NM", string0);
      
      int[] intArray0 = new int[0];
      int int0 = new Integer(508);
      assertEquals(508, int0);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.shift(booleanArray0, 508, 2147483646, (-132));
      assertEquals(11, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 870.6438F);
      assertEquals(0, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[7];
      longArray0[1] = (long) (byte)2;
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1935;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1935, (short)2, (short)2, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1935, (short)2, (short)2, (short)0, (short)0, (short)0}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)2, (int) (short)2);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)1935, (short)2, (short)2, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1935, (short)2, (short)2, (short)0, (short)0, (short)0}, shortArray1);
      
      Short[] shortArray2 = new Short[3];
      shortArray2[0] = (Short) (short)2;
      shortArray2[1] = (Short) (short)2;
      Short short0 = new Short((short)564);
      assertNotNull(short0);
      assertEquals((short)564, (short)short0);
      
      shortArray2[2] = short0;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short) (-1));
      assertEquals(3, shortArray3.length);
      assertEquals(3, shortArray2.length);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotNull(shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)564}, shortArray3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-473L);
      longArray0[1] = 0L;
      longArray0[2] = (-1147L);
      longArray0[3] = (-1147L);
      longArray0[4] = (-948L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2358), 951);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-473L), 0L, (-1147L), (-1147L), (-948L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-473L), 0L, (-1147L), (-1147L), (-948L), 0L, 0L}, longArray1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-2174));
      assertNull(shortArray0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) boolean0);
      assertNull(integerArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("ffZs");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("java.lang.Float");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("ffZs");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean2);
      assertNotNull(boolean5);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1342);
      longArray0[1] = (long) (byte)79;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, (-2134145239));
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1342L), 79L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[0];
      long[] longArray2 = ArrayUtils.removeAll(longArray1, intArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1342L), 79L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray2);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = (int) (byte)79;
      intArray1[2] = (int) (byte)79;
      intArray1[3] = 1114111;
      intArray1[4] = (-2134145239);
      intArray1[5] = (-1342);
      intArray1[6] = (-1342);
      boolean boolean6 = ArrayUtils.contains(intArray1, Integer.MAX_VALUE);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean6);
      assertArrayEquals(new int[] {1, 79, 79, 1114111, (-2134145239), (-1342), (-1342)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, (-376), 120, (int) (byte)99);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0, (byte)99}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short)203;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)203;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)99;
      ArrayUtils.shift(shortArray0, 0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)99, (short)99, (short)203, (short)0, (short)203, (short)0, (short)99}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)99;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)203;
      intArray0[3] = (int) (short)203;
      intArray0[4] = 3112;
      intArray0[5] = 0;
      boolean boolean3 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertArrayEquals(new int[] {99, 0, 203, 203, 3112, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[9];
      booleanArray0[0] = boolean3;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      booleanArray0[3] = boolean4;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean2;
      booleanArray0[6] = boolean3;
      booleanArray0[7] = boolean2;
      booleanArray0[8] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean0));
      assertEquals(true, object0);
      
      Integer integer0 = new Integer((byte)5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      Integer integer1 = new Integer((-1493));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1493), (int)integer1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray0, (Object) integer1, 1114111);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(bitSet0);
      assertFalse(integer1.equals((Object)integer0));
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1514));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) arrayUtils0;
      objectArray0[1] = (Object) arrayUtils0;
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils arrayUtils1 = (ArrayUtils)ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(9, objectArray0.length);
      assertSame(arrayUtils1, arrayUtils0);
      assertNotNull(arrayUtils1);
      
      objectArray0[2] = (Object) arrayUtils1;
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = (Object) arrayUtils0;
      objectArray0[5] = (Object) arrayUtils0;
      objectArray0[6] = (Object) arrayUtils0;
      objectArray0[7] = (Object) arrayUtils0;
      objectArray0[8] = (Object) arrayUtils0;
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, objectArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(9, objectArray0.length);
      assertSame(arrayUtils0, arrayUtils1);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertSame(arrayUtils0, arrayUtils1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 1822, 1822);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      
      float[] floatArray3 = ArrayUtils.insert((-1), floatArray2, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(floatArray3);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      
      float[] floatArray4 = ArrayUtils.addFirst(floatArray3, (float) (-1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertEquals(1, floatArray4.length);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray0);
      assertNotNull(floatArray4);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray4, 0.01F);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 1822;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) 1822;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1662L));
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 1822L, (-1L), (-1L), (-1L), 1822L}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 1822L, (-1L), (-1L), (-1L), 1822L}, longArray0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.nullToEmpty(intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      
      AbstractMap.SimpleEntry<Integer, Double>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, Double>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 6);
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Double>((Integer) null, double0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Double>(integer1, double0);
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, Double>((Integer) null, (Double) null);
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Integer, Double>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry3);
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Integer, Double>(abstractMap_SimpleEntry3);
      assertNotNull(abstractMap_SimpleEntry4);
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Integer, Double> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Integer, Double>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry5);
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      AbstractMap.SimpleEntry<Integer, Double>[] abstractMap_SimpleEntryArray1 = ArrayUtils.removeElements(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray0);
      assertEquals(0, abstractMap_SimpleEntryArray1.length);
      assertEquals(6, abstractMap_SimpleEntryArray0.length);
      assertNotSame(abstractMap_SimpleEntryArray1, abstractMap_SimpleEntryArray0);
      assertNotSame(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntryArray1);
      assertNotNull(abstractMap_SimpleEntryArray1);
      assertFalse(abstractMap_SimpleEntryArray1.equals((Object)abstractMap_SimpleEntryArray0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = true;
      Byte byte0 = new Byte((byte)63);
      assertNotNull(byte0);
      assertEquals((byte)63, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-108));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-108), (byte)byte1);
      
      Byte byte2 = new Byte((byte)53);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)53, (byte)byte2);
      
      Byte byte3 = new Byte((byte)53);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)53, (byte)byte3);
      
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte4);
      
      Byte byte5 = new Byte((byte)25);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)25, (byte)byte5);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte3;
      Byte byte6 = new Byte((byte)0);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte6);
      
      byteArray0[1] = byte6;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      Short short1 = new Short((short)3376);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)3376, (short)short1);
      
      Short short2 = new Short((short) (-6115));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-6115), (short)short2);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (byte)63);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)74;
      longArray0[2] = (long) (byte)74;
      longArray0[3] = (long) (byte)74;
      longArray0[4] = (long) (byte)74;
      longArray0[5] = (long) (byte)74;
      longArray0[6] = (long) (byte)74;
      longArray0[7] = (long) (byte)74;
      longArray0[8] = (long) (byte)74;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-110));
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 74L, 74L, 74L, 74L, 74L, 74L, 74L, 74L}, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)74;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (int) (byte)74);
      assertEquals(9, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74, (byte)74, (byte)74, (byte)74, (byte)74, (byte)74, (byte)74}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Float";
      stringArray0[1] = "iC]`TL*AEg2knG";
      String[] stringArray1 = Locale.getISOCountries();
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = new int[5];
      intArray0[1] = 1228;
      intArray0[2] = (-1259);
      intArray0[3] = 37;
      intArray0[1] = 441;
      Float float0 = new Float((-2252.85F));
      assertNotNull(float0);
      assertEquals((-2252.85F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) 1228;
      floatArray0[1] = (float) 441;
      floatArray0[2] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, 0);
      assertEquals(17, floatArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1259));
      assertNotNull(long0);
      assertEquals((-1259L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1942L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1942L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(37);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(37L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) 37);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1259L), (-1942L), 37L}, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, 1009L);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-1259L), (-1942L), 37L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      Boolean[] booleanArray0 = new Boolean[3];
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 1307, 1307);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'P';
      floatArray0[1] = (float) 'P';
      floatArray0[2] = (float) 1307;
      floatArray0[3] = (float) 1307;
      floatArray0[4] = (float) 'P';
      floatArray0[5] = (float) 'P';
      floatArray0[6] = (float) 'P';
      floatArray0[7] = (float) 'P';
      ArrayUtils.shift(floatArray0, 1307, 1, 1070);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {80.0F, 80.0F, 1307.0F, 1307.0F, 80.0F, 80.0F, 80.0F, 80.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_LONG_ARRAY, 0L, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("ffZs");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("java.lang.Float");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("ffZs");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean2);
      assertNotNull(boolean5);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      boolean boolean6 = ArrayUtils.contains(charArray0, '<');
      assertEquals(0, charArray0.length);
      assertFalse(boolean6);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray1 = new boolean[0];
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (int) (byte)79, (int) (byte)79);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      Boolean boolean7 = Boolean.FALSE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7);
      
      Character character0 = new Character('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, 1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79, (byte)79}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 6;
      intArray0[2] = 2340;
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character1;
      Character character2 = new Character((char) character1);
      assertNotNull(character2);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('4', (char)character2);
      
      characterArray0[3] = character2;
      Character[] characterArray1 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte) (-54));
      assertNotNull(byte0);
      assertEquals((byte) (-54), (byte)byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)6, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-31));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-31), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-31));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-31), (byte)byte3);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.0F, (int) (byte)6);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'u';
      charArray0[2] = 'Y';
      charArray0[3] = 'L';
      charArray0[4] = 'Y';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'G', 541);
      assertEquals(5, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'@', 'u', 'Y', 'L', 'Y'}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte) (-31);
      intArray0[3] = 659;
      intArray0[4] = (int) 'G';
      int int2 = ArrayUtils.indexOf(intArray0, (-1), 108);
      assertEquals(5, intArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertArrayEquals(new int[] {(-1), (-1), (-31), 659, 71}, intArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short) (-153);
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 178.63;
      doubleArray0[2] = (-737.2736498169);
      doubleArray0[3] = 432.7865;
      doubleArray0[4] = (double) (short)0;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) (short) (-153);
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short) (-153);
      longArray0[6] = (long) 1431655765;
      longArray0[3] = (long) (short)0;
      longArray0[8] = (long) (short)0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = '/';
      ArrayUtils.reverse(shortArray0, (-1), 32);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-153), (short) (-153)}, shortArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("false", string0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "java.lang.Float";
      stringArray0[0] = "iC]`TL*AEg2knG";
      String[] stringArray1 = Locale.getISOCountries();
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = new int[5];
      intArray0[1] = 116;
      intArray0[1] = 1228;
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[4] = '\'';
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000', 0);
      assertEquals(6, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', '\u0000', '\'', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)18;
      ArrayUtils.reverse((Object[]) stringArray1, 1228, 1228);
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 2145867783, 2145867783, 2145867783);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-655.6918F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 712.36584F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2143528796), (-2143528796));
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-655.6918F), 1.0F, 712.36584F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(intArray0, 1169, 1169);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 712.36584F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 548.893145, (-2143528796), (double) 2145867783);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {712.3658447265625}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = 'G';
      charArray0[2] = 'H';
      charArray0[3] = 'Y';
      charArray0[4] = '{';
      charArray0[5] = 'C';
      charArray0[6] = '_';
      charArray0[7] = 'c';
      charArray0[8] = 't';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'2', 'G', 'H', 'Y', '{', 'C', '_', 'c', 't'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1328.6709F);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 371;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 371}, intArray0);
      assertArrayEquals(new int[] {0, 0, 371}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      shortArray0[5] = (short) (-1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-2313);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short) (-2313);
      ArrayUtils.swap(doubleArray0, (-19), (int) (short) (-1), (int) (short)0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2313.0), 0.0, 0.0, (-2313.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-19);
      longArray0[2] = (long) (-1613);
      longArray0[3] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.insert(4, longArray0, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-19L), (-1613L), (-1L), 0L, (-19L), (-1613L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-19L), (-1613L), (-1L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 371}, intArray0);
      assertArrayEquals(new int[] {0, 0, 371}, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short) (-1), (int) (short)0);
      assertEquals(3, intArray0.length);
      assertSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 371}, intArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 371;
      objectArray0[1] = (Object) (short)0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      
      objectArray0[2] = object0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-958);
      shortArray0[1] = (short)121;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-30935);
      shortArray0[5] = (short)1231;
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-958), (short)121, (short)0, (short) (-30935), (short)0, (short)1231}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (short)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) (-30935));
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1231, (short)0, (short) (-30935), (short)0, (short)121, (short) (-958)}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 2);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 1}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 2}, intArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-787);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (short) (-30935);
      longArray0[4] = (long) 0;
      ArrayUtils.shift(longArray0, 2297, 2297, (int) (short)0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-787L), 1L, 1L, (-30935L), 0L}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)116;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-40), (int) (short)1231);
      assertEquals(8, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)118, (byte)9, (byte) (-49), (byte)0, (byte)91, (byte)1, (byte)116}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-3431));
      assertNotNull(integer0);
      assertEquals((-3431), (int)integer0);
      
      Integer integer1 = new Integer(2878);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2878, (int)integer1);
      
      Integer integer2 = new Integer((byte)101);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(101, (int)integer2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3.0, 2878, (double) 83);
      assertEquals(3, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)101;
      floatArray0[1] = (float) 83;
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-2440.7517F), 2878);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {101.0F, 83.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      ArrayUtils.shift(charArray0, (-1), 57, 1208);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertEquals(5, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1722;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (short)1722;
      floatArray0[4] = (float) (-160L);
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) (-160L);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 1722.0F, (-160.0F), 0.0F, 0.0F, (-160.0F)}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short)1722);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1722, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(5);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(5, (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1722, 5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 5502.46F;
      floatArray0[1] = (-3423.656F);
      floatArray0[2] = (-3423.656F);
      floatArray0[3] = (float) 541;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) 541;
      floatArray0[6] = 25.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 541);
      assertEquals(7, floatArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new float[] {5502.46F, (-3423.656F), (-3423.656F), 541.0F, (-1.0F), 541.0F, 25.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3423.656F);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3423.656005859375)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '@';
      charArray0[2] = 'L';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'Y', 4);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '@', 'L'}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-195225787), byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = Integer.getInteger("x},}uIMe|cQvlz e]\"y", integer1);
      assertNotNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      Integer integer4 = new Integer(3050);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(3050, (int)integer4);
      
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      
      Integer integer6 = new Integer(1301);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals(1301, (int)integer6);
      
      Integer integer7 = new Integer(2640);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertEquals(2640, (int)integer7);
      
      Object[] objectArray0 = new Object[3];
      Character character0 = Character.valueOf('%');
      assertNotNull(character0);
      assertEquals('%', (char)character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-4529L), (-3905));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) 'x';
      intArray0[2] = (-1551);
      intArray0[3] = (int) 'f';
      int int0 = ArrayUtils.indexOf(intArray0, 1528, (-1551));
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {109, 120, (-1551), 102}, intArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short) (-153);
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 178.63;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (-737.2736498169);
      doubleArray0[3] = 432.7865;
      doubleArray0[4] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2857.9340978438345), 2);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {178.63, 0.0, (-737.2736498169), 432.7865, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (int) (short)0, 80, 2172);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[4] = (byte)101;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)0, (byte)0, (byte)0, (byte)101, (byte)0}, byteArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(6, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = 11;
      Integer integer1 = new Integer(11);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(11, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int1);
      assertNotNull(integer2);
      assertFalse(int1 == int0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(11, (int)integer2);
      
      integerArray0[2] = integer2;
      Object[] objectArray0 = ArrayUtils.removeElements((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)101;
      shortArray0[1] = (short) (byte) (-75);
      shortArray0[2] = (short) (-4162);
      shortArray0[3] = (short) (byte) (-75);
      shortArray0[4] = (short) (byte) (-75);
      ArrayUtils.shift(shortArray0, (-2205), 11, 1033);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4162), (short) (-75), (short) (-75), (short)101, (short) (-75)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      ArrayUtils.swap(intArray0, (int) (short)0, (-84), (int) (short)0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Character character0 = Character.valueOf('D');
      assertNotNull(character0);
      assertEquals('D', (char)character0);
      
      Character character1 = Character.valueOf('E');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('E', (char)character1);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      MutableInt mutableInt0 = new MutableInt((-2643));
      assertEquals((-2643.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2643.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2643), (int)mutableInt0.toInteger());
      assertEquals((-2643), (int)mutableInt0.getValue());
      assertEquals((byte) (-83), mutableInt0.byteValue());
      assertEquals((-2643L), mutableInt0.longValue());
      assertEquals("-2643", mutableInt0.toString());
      assertEquals((short) (-2643), mutableInt0.shortValue());
      assertEquals((-2643), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-84));
      assertEquals((-84), mutableInt1.intValue());
      assertEquals("-84", mutableInt1.toString());
      assertEquals((-84.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-84.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-84), mutableInt1.shortValue());
      assertEquals((-84), (int)mutableInt1.getValue());
      assertEquals((-84), (int)mutableInt1.toInteger());
      assertEquals((byte) (-84), mutableInt1.byteValue());
      assertEquals((-84L), mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((-159));
      assertEquals("-159", mutableInt2.toString());
      assertEquals((-159.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-159), (int)mutableInt2.getValue());
      assertEquals((byte)97, mutableInt2.byteValue());
      assertEquals((-159.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-159), (int)mutableInt2.toInteger());
      assertEquals((-159L), mutableInt2.longValue());
      assertEquals((-159), mutableInt2.intValue());
      assertEquals((short) (-159), mutableInt2.shortValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals("-159", mutableInt2.toString());
      assertEquals((-159.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-159), (int)mutableInt2.getValue());
      assertEquals((byte)97, mutableInt2.byteValue());
      assertEquals((-159.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-159), (int)mutableInt2.toInteger());
      assertEquals((-159L), mutableInt2.longValue());
      assertEquals((-159), mutableInt2.intValue());
      assertEquals((short) (-159), mutableInt2.shortValue());
      assertEquals((-159L), mutableInt3.longValue());
      assertEquals((byte)97, mutableInt3.byteValue());
      assertEquals((-159), (int)mutableInt3.getValue());
      assertEquals((-159), (int)mutableInt3.toInteger());
      assertEquals((-159.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((-159.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-159), mutableInt3.intValue());
      assertEquals("-159", mutableInt3.toString());
      assertEquals((short) (-159), mutableInt3.shortValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      int int0 = mutableInt3.getAndAdd((-2643));
      assertEquals("-159", mutableInt2.toString());
      assertEquals((-159.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-159), (int)mutableInt2.getValue());
      assertEquals((byte)97, mutableInt2.byteValue());
      assertEquals((-159.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-159), (int)mutableInt2.toInteger());
      assertEquals((-159L), mutableInt2.longValue());
      assertEquals((-159), mutableInt2.intValue());
      assertEquals((short) (-159), mutableInt2.shortValue());
      assertEquals((-2802.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((-2802), (int)mutableInt3.toInteger());
      assertEquals((-2802), (int)mutableInt3.getValue());
      assertEquals((byte)14, mutableInt3.byteValue());
      assertEquals("-2802", mutableInt3.toString());
      assertEquals((-2802.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-2802L), mutableInt3.longValue());
      assertEquals((-2802), mutableInt3.intValue());
      assertEquals((short) (-2802), mutableInt3.shortValue());
      assertNotSame(mutableInt2, mutableInt3);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt1);
      assertFalse(mutableInt2.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertEquals((-159), int0);
      
      mutableIntArray0[1] = mutableInt2;
      mutableIntArray0[2] = mutableInt3;
      mutableIntArray0[3] = mutableInt2;
      ArrayUtils.shift(intArray0, 1, 1, (-3441));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short)0, 322);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1309.7994F;
      floatArray0[2] = (float) (-467);
      floatArray0[3] = (float) (-467L);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ')';
      charArray0[2] = ')';
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 1309.7994F, (-467.0F), (-467.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1309.7994F, (-467.0F), (-467.0F)}, floatArray2, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\\', ')', ')', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\\', ')', ')', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-802));
      assertEquals(3, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 372.8956F;
      floatArray0[1] = (float) (byte) (-102);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {372.8956F, (-102.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {372.8956F, (-102.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2, 2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 1033, 74);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = '2';
      Character character0 = Character.valueOf('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('2', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = char0;
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'|', '2', '~'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '2';
      doubleArray0[5] = (double) '|';
      doubleArray0[6] = (double) '2';
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 1.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {126.0, 126.0, 1.0, 0.0, 50.0, 124.0, 50.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) character0);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ",dT{ik7W32B[~");
      assertNull(stringArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) char0);
      assertNotNull(object0);
      assertEquals('2', object0);
      
      int int2 = ArrayUtils.indexOf(intArray0, 2, 1033);
      assertEquals(0, intArray0.length);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertArrayEquals(new byte[] {(byte)38}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[6];
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = '8';
      charArray0[2] = '';
      charArray0[3] = 'S';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', '8', '', 'S'}, charArray0);
      assertArrayEquals(new char[] {'w', '8', '', 'S', 'w', '8', '', 'S'}, charArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 78;
      intArray0[2] = (int) '>';
      intArray0[3] = (int) 'w';
      intArray0[4] = (int) '>';
      intArray0[5] = 80;
      intArray0[6] = (-3254);
      intArray0[7] = 80;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 80);
      assertEquals(8, intArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new int[] {7, 78, 62, 119, 62, 80, (-3254), 80}, intArray0);
      
      ArrayUtils.shift(intArray0, 78);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {62, 119, 62, 80, (-3254), 80, 7, 78}, intArray0);
      
      ArrayUtils.swap(longArray0, 2338, 78);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, 2172, (-2284), 2172);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Long long0 = new Long((-306L));
      assertNotNull(long0);
      assertEquals((-306L), (long)long0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = null;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '7';
      charArray0[2] = 'o';
      charArray0[3] = 'K';
      charArray0[4] = '$';
      charArray0[5] = 'o';
      charArray0[6] = 'd';
      charArray0[7] = '9';
      charArray0[8] = 'K';
      ArrayUtils.shift(charArray0, (-364), 4141, 2172);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'d', '9', 'K', 'K', '7', 'o', 'K', '$', 'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray0[3] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      ArrayUtils.swap(booleanArray2, (-1591), (-1591), (-1591));
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true, true}, booleanArray2));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1591);
      doubleArray0[1] = (double) (-1591);
      doubleArray0[2] = (double) (-1591);
      Long long0 = new Long((-1756L));
      assertNotNull(long0);
      assertEquals((-1756L), (long)long0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'K';
      charArray0[2] = 'o';
      charArray0[3] = '$';
      charArray0[4] = 'd';
      charArray0[5] = '?';
      ArrayUtils.shift(charArray0, (-1591), 4141, (-52));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'d', '?', '9', 'K', 'o', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-113);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-93), (byte) (-113)}, byteArray0);
      
      ArrayUtils.swap((int[]) null, (int) (byte) (-113), (int) (byte)64);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'l');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-113);
      doubleArray0[1] = (-646.854578246106);
      doubleArray0[2] = (double) (byte) (-113);
      doubleArray0[3] = (double) (byte) (-93);
      doubleArray0[4] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-113.0), (-646.854578246106), (-113.0), (-93.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-113.0), (-646.854578246106), (-113.0), (-93.0), 1.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-113.0);
      objectArray0[1] = (Object) (-93.0);
      objectArray0[2] = (Object) (-113.0);
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[2]);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap((int[]) null, (int) (byte)64, (-2195));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Random.setNextRandom((-357));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-357);
      doubleArray0[1] = (double) (-357);
      doubleArray0[2] = (double) (-357);
      doubleArray0[3] = (double) (-357);
      doubleArray0[4] = (double) (-357);
      doubleArray0[5] = (double) (-357);
      doubleArray0[6] = (double) (-357);
      doubleArray0[7] = (double) (-357);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-357), 1518);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0)}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0), (-357.0)}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1418);
      shortArray0[1] = (short)625;
      shortArray0[2] = (short) (-117);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)56;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)748;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)6602);
      assertEquals(9, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-1418), (short)625, (short) (-117), (short) (-1), (short)56, (short) (-1), (short)2, (short)1, (short)748}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2665.0F);
      floatArray0[1] = 1626.7507F;
      floatArray0[2] = 387.592F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 224.2F;
      floatArray0[6] = 1.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 387.592F, 2);
      assertEquals(7, floatArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-2665.0F), 1626.7507F, 387.592F, Float.NaN, 0.0F, 224.2F, 1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'G';
      charArray0[2] = 'M';
      charArray0[3] = 'J';
      charArray0[4] = '8';
      charArray0[5] = 's';
      charArray0[6] = '|';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '*');
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'N', 'G', 'M', 'J', '8', 's', '|'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " gI30)?G";
      objectArray0[1] = (Object) " gI30)?G";
      Character character0 = new Character('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'i');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'_', '_', '_'}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-2.146715872E9);
      doubleArray0[3] = (double) (char)character0;
      doubleArray0[4] = (double) (-2993);
      ArrayUtils.shift(doubleArray0, (-2993), 2, (int) character0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 102.0, (-2.146715872E9), 95.0, (-2993.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1773);
      shortArray0[1] = (short) (-1773);
      shortArray0[2] = (short) (-1773);
      shortArray0[3] = (short) (-1773);
      shortArray0[4] = (short) (-1773);
      shortArray0[5] = (short) (-1773);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1773));
      assertEquals(6, shortArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new short[] {(short) (-1773), (short) (-1773), (short) (-1773), (short) (-1773), (short) (-1773), (short) (-1773)}, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (short) (-1773);
      floatArray0[3] = (float) (short) (-1773);
      floatArray0[4] = (float) (short) (-1773);
      floatArray0[5] = (float) (-2993);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 5, 8);
      assertEquals(1, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2993.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {5.0F, 2.0F, (-1773.0F), (-1773.0F), (-1773.0F), (-2993.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-312.136852));
      assertNull(doubleArray0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "|dO";
      stringArray0[3] = "<0=.Bg('(F";
      stringArray0[4] = "nMhS";
      stringArray0[5] = "!)QVr!0&mJ*";
      stringArray0[6] = ",j8-1)";
      stringArray0[7] = "";
      String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) "|dO");
      assertEquals(8, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)0}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)117);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(bitSet0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)0}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, (String) null);
      assertNotNull(string0);
      
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 187.447241214988;
      doubleArray2[1] = 0.7;
      doubleArray2[2] = (double) (byte)0;
      doubleArray2[3] = (double) (byte)0;
      doubleArray2[4] = (double) (byte)84;
      doubleArray2[5] = (double) (byte)117;
      doubleArray2[6] = (double) (byte)0;
      doubleArray2[7] = (-312.136852);
      doubleArray2[8] = (double) (byte)84;
      ArrayUtils.shift(doubleArray2, (-3484), (int) (byte)84, (-3484));
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.7, 0.0, 0.0, 84.0, 117.0, 0.0, (-312.136852), 84.0, 187.447241214988}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '%';
      charArray0[1] = 'F';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = 'z';
      charArray0[5] = 'e';
      charArray0[6] = '=';
      charArray0[7] = 'K';
      charArray0[8] = 'W';
      ArrayUtils.shift(charArray0, (int) (byte) (-96), 116, 1438);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {':', ':', 'z', 'e', '=', 'K', 'W', '%', 'F'}, charArray0);
      
      ArrayUtils.swap(charArray0, (int) (byte) (-96), 1438, (int) (byte) (-96));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {':', ':', 'z', 'e', '=', 'K', 'W', '%', 'F'}, charArray0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'W';
      charArray1[1] = 'e';
      charArray1[2] = 'e';
      charArray1[3] = 'F';
      charArray1[4] = 'F';
      charArray1[5] = 'W';
      charArray1[6] = 'W';
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertNotNull(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'W', 'e', 'e', 'F', 'F', 'W', 'W'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-3431));
      assertNotNull(integer0);
      assertEquals((-3431), (int)integer0);
      
      Integer integer1 = new Integer(2878);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2878, (int)integer1);
      
      Integer integer2 = new Integer((byte)101);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(101, (int)integer2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3.0, 2878, (double) 83);
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)101;
      floatArray0[1] = (float) 83;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {101.0F, 83.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) (byte)0;
      Long long0 = new Long((byte)5);
      assertNotNull(long0);
      assertEquals(5L, (long)long0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 10.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 10.0;
      objectArray0[3] = (Object) 5.0;
      objectArray0[4] = (Object) (byte)5;
      Object object0 = ArrayUtils.get(objectArray0, (-3761), objectArray0[0]);
      assertEquals(5, objectArray0.length);
      assertNotNull(object0);
      assertEquals(10.0, object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      Object object3 = ArrayUtils.get(objectArray0, 755);
      assertEquals(5, objectArray0.length);
      assertNull(object3);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 755, (-3761));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {5.0, 0.0, 0.0, 10.0, 10.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = 91;
      Integer integer0 = new Integer(91);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(91, (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2146684909));
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {91, 91, 91, 91, 91, 91, 91, 91}, intArray0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) int0);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {91.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {91.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2146684909);
      longArray0[1] = (-2184L);
      longArray0[2] = (long) int0;
      longArray0[3] = (long) int0;
      longArray0[4] = (long) int0;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 91L);
      assertEquals(5, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2146684909L), (-2184L), 91L, 91L, 91L}, longArray0);
      assertArrayEquals(new long[] {(-2146684909L), (-2184L)}, longArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '7';
      charArray0[2] = '=';
      charArray0[3] = 'C';
      charArray0[4] = 'N';
      charArray0[5] = '$';
      charArray0[6] = '~';
      charArray0[7] = 'w';
      charArray0[8] = '%';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'b', '7', '=', 'C', 'N', '$', '~', 'w', '%'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((int) (short) (-3381));
      assertEquals((-3381.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3381), (int)mutableInt0.getValue());
      assertEquals((-3381), (int)mutableInt0.toInteger());
      assertEquals((byte) (-53), mutableInt0.byteValue());
      assertEquals((-3381.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3381L), mutableInt0.longValue());
      assertEquals("-3381", mutableInt0.toString());
      assertEquals((-3381), mutableInt0.intValue());
      assertEquals((short) (-3381), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(52);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals(52L, mutableInt1.longValue());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertEquals("52", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(52);
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertEquals(52, mutableInt2.intValue());
      assertEquals("52", mutableInt2.toString());
      assertEquals(52L, mutableInt2.longValue());
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      int int0 = mutableInt2.getAndDecrement();
      assertEquals(51.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)51, mutableInt2.shortValue());
      assertEquals(51.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((byte)51, mutableInt2.byteValue());
      assertEquals(51, (int)mutableInt2.toInteger());
      assertEquals(51, (int)mutableInt2.getValue());
      assertEquals(51, mutableInt2.intValue());
      assertEquals("51", mutableInt2.toString());
      assertEquals(51L, mutableInt2.longValue());
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertEquals(52, int0);
      
      MutableInt mutableInt3 = new MutableInt(mutableInt0);
      assertEquals((-3381.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3381), (int)mutableInt0.getValue());
      assertEquals((-3381), (int)mutableInt0.toInteger());
      assertEquals((byte) (-53), mutableInt0.byteValue());
      assertEquals((-3381.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3381L), mutableInt0.longValue());
      assertEquals("-3381", mutableInt0.toString());
      assertEquals((-3381), mutableInt0.intValue());
      assertEquals((short) (-3381), mutableInt0.shortValue());
      assertEquals((-3381), mutableInt3.intValue());
      assertEquals((-3381.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-3381), (int)mutableInt3.toInteger());
      assertEquals((-3381), (int)mutableInt3.getValue());
      assertEquals((-3381.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals("-3381", mutableInt3.toString());
      assertEquals((-3381L), mutableInt3.longValue());
      assertEquals((short) (-3381), mutableInt3.shortValue());
      assertEquals((byte) (-53), mutableInt3.byteValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      mutableIntArray0[0] = mutableInt2;
      mutableIntArray0[1] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt2);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertEquals(51.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)51, mutableInt2.shortValue());
      assertEquals(51.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((byte)51, mutableInt2.byteValue());
      assertEquals(51, (int)mutableInt2.toInteger());
      assertEquals(51, (int)mutableInt2.getValue());
      assertEquals(51, mutableInt2.intValue());
      assertEquals("51", mutableInt2.toString());
      assertEquals(51L, mutableInt2.longValue());
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt3);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      ArrayUtils.shift((int[]) null, (int) (short) (-3381), (int) (short) (-3381), (-237));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)8);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Byte byte0 = new Byte((byte) (-73));
      assertNotNull(byte0);
      assertEquals((byte) (-73), (byte)byte0);
      
      String[] stringArray0 = new String[0];
      Short short0 = new Short((byte) (-73));
      assertNotNull(short0);
      assertEquals((short) (-73), (short)short0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)8;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short)8}, shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 371.0;
      doubleArray0[1] = (double) (byte) (-73);
      doubleArray0[2] = (double) (byte)8;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (double) (byte)2;
      doubleArray0[7] = (double) (byte)8;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {371.0, (-73.0), 8.0, 2.0, 2.0, 2.0, 2.0, 8.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {371.0, (-73.0), 8.0, 2.0, 2.0, 2.0, 2.0, 8.0}, doubleArray0, 0.01);
      
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray2, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotNull(byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 5502.46F;
      floatArray0[1] = (-3423.656F);
      floatArray0[2] = (-3423.656F);
      floatArray0[3] = (float) 541;
      floatArray0[4] = 9.292148F;
      floatArray0[0] = (float) 541;
      floatArray0[6] = 25.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 541);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {541.0F, (-3423.656F), (-3423.656F), 541.0F, 9.292148F, 0.0F, 25.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3423.656F);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-3423.656005859375)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '@';
      charArray0[2] = 'L';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'Y', (-1));
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '@', 'L'}, charArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 541;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 541;
      longArray0[3] = (long) '@';
      longArray0[4] = (long) 'L';
      longArray0[5] = (long) 'Y';
      ArrayUtils.shift(longArray0, 189, Integer.MAX_VALUE, 1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {541L, (-1L), 541L, 64L, 76L, 89L}, longArray0);
      
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Long[]) null, comparator0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
      
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short short1 = new Short((byte)2);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)2, (short)short1);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2657L;
      longArray0[1] = 2514L;
      ArrayUtils.reverse(longArray0, (-2146715872), (-2144842708));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2657L, 2514L, 0L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-113L);
      longArray1[1] = 2514L;
      longArray1[2] = 2514L;
      longArray1[3] = (long) (-2144842708);
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-113L), 2514L, 2514L, (-2144842708L)}, longArray1);
      assertArrayEquals(new long[] {(-113L), 2514L, 2514L, (-2144842708L)}, longArray2);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('<');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('<', (char)character1);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2514L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2514.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2514.0, 2514.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = new Double[7];
      doubleArray2[0] = (Double) 2514.0;
      doubleArray2[1] = (Double) 2514.0;
      doubleArray2[2] = (Double) 2514.0;
      doubleArray2[3] = (Double) 2514.0;
      Double double0 = new Double((double) doubleArray2[0]);
      assertEquals(7, doubleArray2.length);
      assertNotNull(double0);
      assertEquals(2514.0, (double)double0, 0.01);
      
      doubleArray2[4] = double0;
      doubleArray2[5] = (Double) 2514.0;
      doubleArray2[6] = (Double) 2514.0;
      Double double1 = new Double((-958.0));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-958.0), (double)double1, 0.01);
      
      Double[] doubleArray3 = ArrayUtils.addFirst(doubleArray2, double1);
      assertEquals(7, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2727);
      shortArray0[1] = (short) (-15);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-319));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Boolean boolean0 = Boolean.valueOf("]ka&?`+k-[xU[,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-160L));
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-160.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-160L);
      doubleArray2[1] = (double) (short) (-2727);
      ArrayUtils.shift(doubleArray2, (int) (short) (-319));
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2727.0), (-160.0)}, doubleArray2, 0.01);
      
      Double[] doubleArray3 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = 'V';
      charArray0[1] = 'A';
      charArray0[2] = '<';
      charArray0[3] = '$';
      charArray0[4] = 'S';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertEquals(15, charArray0.length);
      assertEquals(30, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) 1;
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)2, (int) (byte)2);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1309.7994F;
      floatArray0[1] = 1309.7994F;
      floatArray0[2] = (float) (-467);
      floatArray0[3] = (float) (-467L);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 372.8956F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1309.7994F, 1309.7994F, (-467.0F), (-467.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1309.7994F, 1309.7994F, (-467.0F), (-467.0F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ')';
      charArray0[2] = 'n';
      charArray0[3] = '[';
      charArray0[4] = '(';
      charArray0[5] = 'g';
      int int0 = ArrayUtils.indexOf(charArray0, 'g', 1509);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\\', ')', 'n', '[', '(', 'g'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-121);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-121), (int) (byte) (-121));
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-121)}, byteArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (int) (byte)18, (int) (byte)18);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("ffZs");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("fe");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("java.lang.Double");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)90;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)90;
      shortArray0[3] = (short)90;
      shortArray0[4] = (short) (-5056);
      ArrayUtils.shift(shortArray0, 1685);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)90, (short)76, (short)90, (short)90, (short) (-5056)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)76, 50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      Byte[] byteArray1 = new Byte[4];
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      
      byteArray1[1] = byte2;
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-102.0F);
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-127);
      floatArray0[4] = (-153.0F);
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-894), (int) byte0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-102.0F), 2.0F, (-1.0F), (-127.0F), (-153.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short)4077;
      shortArray0[5] = (short)4077;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, 5);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)4077, (short)4077, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Byte byte0 = Byte.valueOf((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertTrue(object0.equals((Object)long1));
      assertTrue(long0.equals((Object)long1));
      assertEquals(1L, object0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'k', '\u0000', 'I', 'I'}, charArray0);
      assertArrayEquals(new char[] {'k', '\u0000', 'I', 'I'}, charArray1);
      
      ArrayUtils.shift(byteArray0, (-229));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (int) (byte)2, 537);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(2, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'k', '\u0000', 'I', 'I'}, charArray0);
      assertArrayEquals(new char[] {'k', '\u0000', 'I', 'I'}, charArray1);
      assertArrayEquals(new char[] {'I', 'I'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-17);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 772);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 117, 3);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_CHAR_ARRAY, '}');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Float float0 = new Float((-294.1F));
      assertNotNull(float0);
      assertEquals((-294.1F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1961.732780111439));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1961.7328F), (float)float1, 0.01F);
      
      Float float2 = new Float((float) 117);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(117.0F, (float)float2, 0.01F);
      
      Float float3 = new Float(446.717F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(446.717F, (float)float3, 0.01F);
      
      Float float4 = new Float(2229.320031103586);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(2229.32F, (float)float4, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) 117);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("nW5fq|ONN?:RRf#?q}j");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = (boolean) boolean0;
      booleanArray2[1] = (boolean) boolean0;
      booleanArray2[2] = (boolean) boolean0;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray2, true, 217);
      assertEquals(3, booleanArray2.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(bitSet0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      
      ArrayUtils.reverse((int[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-11);
      boolean boolean4 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean4);
      assertArrayEquals(new byte[] {(byte)97, (byte)79, (byte)112, (byte) (-11)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, 1518);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) 9.0;
      objectArray0[2] = (Object) 9.0;
      objectArray0[4] = (Object) 9.0;
      objectArray0[5] = (Object) 9.0;
      objectArray0[6] = (Object) 9.0;
      ArrayUtils.swap(objectArray0, (-467), (-25));
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false, true}, booleanArray0));
      
      ArrayUtils.swap(booleanArray1, 9, (-25), (-1591));
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, false, true}, booleanArray0));
      
      ArrayUtils.swap(doubleArray1, (-34), (-2231));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)39);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, 1518);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) 9.0;
      objectArray0[2] = (Object) 9.0;
      objectArray0[3] = (Object) 9.0;
      objectArray0[4] = (Object) 9.0;
      objectArray0[5] = (Object) 9.0;
      objectArray0[6] = (Object) 9.0;
      ArrayUtils.swap(objectArray0, (-467), (-25));
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, true, true}, booleanArray0));
      
      ArrayUtils.swap(booleanArray1, 9, (-25), (-1591));
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, true, true}, booleanArray0));
      
      ArrayUtils.swap(doubleArray1, (-34), (-2231));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)39);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4150.06031953405;
      doubleArray0[1] = (-1126.5147749353);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 4150.06031953405, 2687.5932024195145);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {4150.06031953405, (-1126.5147749353)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)52);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)52}, shortArray1);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)43);
      assertNotNull(byte0);
      assertEquals((byte)43, (byte)byte0);
      
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        Byte.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Character character2 = Character.valueOf('4');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertEquals('4', (char)character2);
      
      Character character3 = Character.valueOf('4');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertEquals('4', (char)character3);
      
      Character character4 = Character.valueOf(')');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertEquals(')', (char)character4);
      
      Character character5 = new Character('4');
      assertNotNull(character5);
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertEquals('4', (char)character5);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character3;
      characterArray0[1] = character5;
      characterArray0[2] = character2;
      characterArray0[3] = character1;
      characterArray0[4] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'4', '4', '4', '4', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2657L;
      longArray0[2] = (-4755L);
      ArrayUtils.reverse(longArray0, (-2146715872), (-2144842708));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2657L, 0L, (-4755L)}, longArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-113L);
      longArray1[1] = (-113L);
      longArray1[2] = 2514L;
      longArray1[3] = (long) (-2144842708);
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-113L), (-113L), 2514L, (-2144842708L)}, longArray1);
      assertArrayEquals(new long[] {(-113L), (-113L), 2514L, (-2144842708L)}, longArray2);
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Character character1 = new Character('<');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('<', (char)character1);
      
      Character character2 = Character.valueOf('d');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('d', (char)character2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2657L;
      longArray0[1] = 2514L;
      longArray0[2] = (-4755L);
      ArrayUtils.reverse(longArray0, (-2146715872), (-2144842708));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2657L, 2514L, (-4755L)}, longArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-113L);
      longArray1[1] = 2514L;
      longArray1[2] = 2514L;
      longArray1[3] = (long) (-2144842708);
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray1, longArray0);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-113L), 2514L, 2514L, (-2144842708L)}, longArray1);
      assertArrayEquals(new long[] {(-113L), 2514L, 2514L, (-2144842708L)}, longArray2);
      
      Character[] characterArray0 = new Character[6];
      char char0 = '\\';
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('<');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('<', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertEquals('\\', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character1);
      assertNotNull(character3);
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertEquals('<', (char)character3);
      
      characterArray0[3] = character3;
      char char1 = 'd';
      Character character4 = Character.valueOf('d');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertEquals('d', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character(char1);
      assertNotNull(character5);
      assertFalse(char1 == char0);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character4));
      assertEquals('d', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\\', '<', '\\', '<', 'd', 'd'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-130L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-130L), (long)long1);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 1290L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      MutableInt mutableInt0 = new MutableInt((-1));
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "java.lang.Float");
      assertNotNull(string0);
      assertEquals("16", string0);
      
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(1693.901);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1693.901, (double)double1, 0.01);
      
      Float float0 = new Float((float) (-130L));
      assertNotNull(float0);
      assertEquals((-130.0F), (float)float0, 0.01F);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-2641), 507);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short) (-1195);
      shortArray0[2] = (short) (-1195);
      shortArray0[3] = (short) (-1195);
      shortArray0[4] = (short) (-1195);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1195), 4580);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1195), (short) (-1195), (short) (-1195), (short) (-1195), (short) (-1195)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1195), (short) (-1195), (short) (-1195), (short) (-1195), (short) (-1195)}, shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 466;
      doubleArray0[1] = (-1.5246482293090002);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (short) (-1195);
      doubleArray0[4] = (double) (short) (-1195);
      doubleArray0[5] = (double) (short) (-1195);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1195), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1195, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short) (-1195);
      shortArray0[2] = (short) (-1195);
      shortArray0[3] = (short) (-1195);
      shortArray0[4] = (short) (-1195);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1195), 4580);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1195), (short) (-1195), (short) (-1195), (short) (-1195), (short) (-1195)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1195), (short) (-1195), (short) (-1195), (short) (-1195), (short) (-1195)}, shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 466;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte) (-23);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-23));
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23), (byte) (-23)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-23), (double) (byte) (-23));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {466.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray2 = new Byte[0];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2347.8508F;
      floatArray0[2] = 111.0F;
      floatArray0[3] = (-2775.96F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1110.0F);
      floatArray0[7] = (-1104.6273F);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 2347.8508F, 111.0F, (-2775.96F), (-1.0F), 0.0F, (-1110.0F), (-1104.6273F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 2347.8508F, 111.0F, (-2775.96F), (-1.0F), 0.0F, (-1110.0F), (-1104.6273F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'f';
      charArray0[2] = 'x';
      charArray0[3] = ';';
      charArray0[4] = '7';
      charArray0[5] = 'H';
      charArray0[6] = '';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-733), ':');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -733, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[2] = 1078;
      ArrayUtils.swap(intArray0, 0, 4668, (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1, 0, 1078}, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1078, 1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4668;
      intArray1[1] = 4668;
      intArray1[2] = 4668;
      intArray1[3] = (-1);
      int[] intArray2 = ArrayUtils.add(intArray1, (int) (byte)2);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4668, 4668, 4668, (-1), 2}, intArray2);
      assertArrayEquals(new int[] {4668, 4668, 4668, (-1)}, intArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'A';
      charArray0[2] = '<';
      charArray0[3] = '$';
      charArray0[4] = 'S';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'A', '<', '$', 'S'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'A', '<', '$', 'S', 'A', '<', '$', 'S'}, charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'V');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'A', '<', '$', 'S'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'A', '<', '$', 'S'}, charArray2);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)1);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)98);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)98, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) "K)1IS.`NM");
      assertNotNull(object1);
      assertEquals("K)1IS.`NM", object1);
      
      int int0 = 1;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, (short[]) null);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(2L);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(40L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(40L, (long)long1);
      
      longArray0[1] = long1;
      try { 
        Long.valueOf("K)1IS.`NM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K)1IS.`NM\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-3431));
      assertNotNull(integer0);
      assertEquals((-3431), (int)integer0);
      
      Integer integer1 = new Integer(2878);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2878, (int)integer1);
      
      Integer integer2 = new Integer((byte)101);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(101, (int)integer2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3.0, 2878, (double) 83);
      assertEquals(3, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)101;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-1348), shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3381);
      shortArray0[3] = (short)1015;
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short)0, (-1));
      assertNull(intArray0);
      
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 1);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      assertNotNull(classArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 0, (int) (short) (-3381));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short) (-3381), (short)0, (short)1015, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-3381), (short)0, (short)1015, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1858.0);
      doubleArray0[1] = 1067.662642470225;
      doubleArray0[2] = (-662.02);
      doubleArray0[3] = 1.0;
      ArrayUtils.swap(doubleArray0, 780, (-1), 780);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1858.0), 1067.662642470225, (-662.02), 1.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)4263, 934);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)4263;
      shortArray1[1] = (short)4263;
      shortArray1[2] = (short)4263;
      shortArray1[3] = (short)4263;
      shortArray1[4] = (short)4263;
      shortArray1[5] = (short)4263;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)4263;
      intArray0[1] = 1;
      intArray0[2] = (int) (short)4263;
      intArray0[3] = (-1);
      intArray0[4] = (int) (short)4263;
      intArray0[5] = 780;
      intArray0[6] = (int) (short)4263;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4263, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) (-4529);
      floatArray0[2] = (float) (-2143528796);
      floatArray0[3] = (float) (-2143528796);
      floatArray0[5] = (float) (byte)1;
      floatArray0[6] = (-75.49F);
      floatArray0[7] = (float) (byte)1;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-4529), (int) (byte)1);
      assertEquals(8, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-4529.0F), (-2.14352883E9F), (-2.14352883E9F), 0.0F, 1.0F, (-75.49F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)74;
      doubleArray0[1] = (double) (byte)74;
      doubleArray0[2] = (double) (byte)74;
      doubleArray0[3] = (double) (byte)74;
      doubleArray0[4] = (double) (byte)74;
      doubleArray0[5] = (double) (byte)74;
      doubleArray0[6] = (double) (byte)74;
      doubleArray0[7] = (double) (byte)74;
      doubleArray0[8] = (-51.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 74.0, 0.1);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, (-51.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte)74;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2143528796), 7);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 74.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 74.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-130L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-130L), (long)long1);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 1290L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-130L), 1.5);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) long1, 580);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(long1.equals((Object)long0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), 2069);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 5664, (-987), (-2167));
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3198);
      assertNotNull(integer0);
      assertEquals(3198, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3198;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5664;
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) (-2167);
      longArray0[3] = (long) 3198;
      longArray0[4] = (long) (byte) (-20);
      longArray0[5] = (long) 3198;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {5664L, 3198L, (-2167L), 3198L, (-20L), 3198L}, longArray0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      charArray0[3] = '@';
      ArrayUtils.reverse(charArray0, (int) (byte) (-20), 4);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'@', '@', '@', '@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (int) (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-21), (byte) (-21)}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1), 4225);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.reverse((long[]) null, (-2778), (-2778));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2778);
      int int0 = ArrayUtils.indexOf(doubleArray0, 3132.736, (-2778), 3132.736);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-2778.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-2778);
      intArray0[2] = (-2778);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {1, (-2778), (-2778)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2778, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-28293);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)6, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-28293), (short)0}, shortArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-32));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (int) (short)1316);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1316;
      intArray0[1] = (int) (short) (-28293);
      ArrayUtils.shuffle(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-28293), 1316}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-28293), 1316}, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-112);
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)59, (byte)85, (byte)7, (byte)9, (byte)37, (byte) (-13), (byte)97, (byte) (-112)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      
      Integer integer0 = new Integer((byte)101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      Integer integer1 = new Integer(1675);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1675, (int)integer1);
      
      Integer integer2 = new Integer(1675);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(1675, (int)integer2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (java.util.Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short)36;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = (Short) (short)36;
      shortArray1[1] = (Short) (short)36;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)24);
      assertEquals(3, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)24, (byte)72, (byte)72}, byteArray2);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)72}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) (short)36, (int) (short)36);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int0);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      String string0 = ArrayUtils.toString((Object) boolean2);
      assertNotNull(string0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4170.6304F);
      floatArray0[1] = 371.912F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1644.934F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4170.6304F), 371.912F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-4170.6304F), 371.912F}, floatArray1, 0.01F);
      
      ArrayUtils.shift(floatArray0, (-498), 102, (-2134145239));
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {371.912F, (-4170.6304F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '2');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse((char[]) null, (-498), 10);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[6] = (long) (byte)2;
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (-4529L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (double) (byte)2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {2.0, (-4529.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '3', (-1));
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'J', 'J'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      Byte[] byteArray1 = new Byte[4];
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      
      byteArray1[1] = byte2;
      byteArray1[2] = (Byte) (byte)2;
      byteArray1[3] = (Byte) (byte)2;
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) byte0;
      floatArray0[5] = (float) (byte)2;
      floatArray0[6] = (float) byte0;
      floatArray0[7] = (float) byte0;
      floatArray0[8] = (float) byte0;
      int int0 = ArrayUtils.indexOf(floatArray0, (-933.9F));
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      Byte byte3 = new Byte((byte) (-30));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-30), (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-43));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte) (-43), (byte)byte4);
      
      Byte byte5 = new Byte((byte)2);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte5);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = ')';
      charArray0[2] = '3';
      charArray0[3] = '[';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'L');
      assertEquals(3, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', '3', '['}, charArray1);
      assertArrayEquals(new char[] {'L', ')', '3', '['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      longArray0[7] = (-1312L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2L);
      assertEquals(8, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-4529L), 2L, 0L, 2L, (-4529L), (-1160L), 2L, (-1312L)}, longArray0);
      assertArrayEquals(new long[] {(-4529L), 0L, (-4529L), (-1160L), (-1312L)}, longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short)127;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)119, 1306);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      
      MutableInt mutableInt0 = new MutableInt((-4529L));
      assertEquals((short) (-4529), mutableInt0.shortValue());
      assertEquals((byte)79, mutableInt0.byteValue());
      assertEquals((-4529), (int)mutableInt0.getValue());
      assertEquals((-4529), (int)mutableInt0.toInteger());
      assertEquals("-4529", mutableInt0.toString());
      assertEquals((-4529.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4529L), mutableInt0.longValue());
      assertEquals((-4529), mutableInt0.intValue());
      assertEquals((-4529.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      mutableInt0.increment();
      assertEquals((byte)80, mutableInt0.byteValue());
      assertEquals((short) (-4528), mutableInt0.shortValue());
      assertEquals((-4528), (int)mutableInt0.toInteger());
      assertEquals((-4528), (int)mutableInt0.getValue());
      assertEquals("-4528", mutableInt0.toString());
      assertEquals((-4528.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4528), mutableInt0.intValue());
      assertEquals((-4528L), mutableInt0.longValue());
      assertEquals((-4528.0F), mutableInt0.floatValue(), 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameType(mutableInt0, mutableInt0);
      assertEquals((byte)80, mutableInt0.byteValue());
      assertEquals((short) (-4528), mutableInt0.shortValue());
      assertEquals((-4528), (int)mutableInt0.toInteger());
      assertEquals((-4528), (int)mutableInt0.getValue());
      assertEquals("-4528", mutableInt0.toString());
      assertEquals((-4528.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4528), mutableInt0.intValue());
      assertEquals((-4528L), mutableInt0.longValue());
      assertEquals((-4528.0F), mutableInt0.floatValue(), 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) (byte)119);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)8);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Byte byte0 = new Byte((byte) (-73));
      assertNotNull(byte0);
      assertEquals((byte) (-73), (byte)byte0);
      
      Short short0 = new Short((byte) (-73));
      assertNotNull(short0);
      assertEquals((short) (-73), (short)short0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)8;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short)8}, shortArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)8;
      doubleArray0[1] = (double) (byte) (-73);
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)2, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {8.0, (-73.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.0, (-73.0), 8.0, (-73.0)}, doubleArray1, 0.01);
      
      Byte byte1 = new Byte((byte)112);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)112, (byte)byte1);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 4, 8.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {8.0, (-73.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.0, (-73.0), 8.0, (-73.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.0, (-73.0), 8.0, (-73.0), 8.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1923.18F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1923.18F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Character character0 = Character.valueOf('Q');
      assertNotNull(character0);
      assertEquals('Q', (char)character0);
      
      Character[] characterArray0 = ArrayUtils.removeAllOccurences((Character[]) null, character0);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)10;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (byte)0);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, false, true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1923.18F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1923.18F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Character character0 = Character.valueOf('Q');
      assertNotNull(character0);
      assertEquals('Q', (char)character0);
      
      Character[] characterArray0 = ArrayUtils.removeAllOccurences((Character[]) null, character0);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)10;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)57, (byte) (-31), (byte) (-68), (byte)5, (byte)48, (byte)10}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (byte)57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-12);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-12);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0), 0.0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-12.0), (-1.0), (-12.0)}, doubleArray0, 0.01);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      ArrayUtils arrayUtils1 = (ArrayUtils)ArrayUtils.get((Object[]) arrayUtils0.EMPTY_FIELD_ARRAY, (-1), (Object) arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertSame(arrayUtils0, arrayUtils1);
      assertSame(arrayUtils1, arrayUtils0);
      assertNotNull(arrayUtils1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Short short0 = new Short((short)2431);
      assertNotNull(short0);
      assertEquals((short)2431, (short)short0);
      
      Short short1 = (Short)ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(short1);
      assertEquals((short)2431, (short)short1);
      
      Object object1 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, 78);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertSame(arrayUtils0, arrayUtils1);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertSame(arrayUtils0, arrayUtils1);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) 0L, 5105);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertSame(arrayUtils0, arrayUtils1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)52, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2727), (int) (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1.0F));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-112)}, byteArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null, class0);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-2347);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-1083);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1573;
      ArrayUtils.swap(shortArray0, (-2346), (int) (short)1);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2347), (short) (-1), (short)1, (short)0, (short)1, (short) (-1083), (short) (-1), (short)1573}, shortArray0);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)1;
      shortArray1[2] = (short)47;
      shortArray1[3] = (short)1;
      shortArray1[4] = (short)1573;
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertEquals(5, shortArray2.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)1, (short)47, (short)1, (short)1573}, shortArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-77);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)3);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)5, (byte) (-57), (byte)2, (byte) (-72), (byte)2, (byte)3, (byte) (-77)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-57), (byte)2, (byte) (-72), (byte)2, (byte) (-77)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      AbstractMap.SimpleEntry<Object, Short>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Short>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 8);
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Short>(character0, (Short) (short)0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Short short0 = new Short((byte)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Short>(character0, short0);
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      Short short1 = new Short((short)117);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)117, (short)short1);
      
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Short>(short0, short1);
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Object, Short>(abstractMap_SimpleEntry2, (Short) (short)0);
      assertNotNull(abstractMap_SimpleEntry3);
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry3;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)0, (short)short2);
      
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Object, Short>(abstractMap_SimpleEntry1, short2);
      assertNotNull(abstractMap_SimpleEntry4);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[4] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Object, Short>(abstractMap_SimpleEntry3);
      assertNotNull(abstractMap_SimpleEntry5);
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short2));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[5] = abstractMap_SimpleEntry5;
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry6 = new AbstractMap.SimpleEntry<Object, Short>(abstractMap_SimpleEntry2);
      assertNotNull(abstractMap_SimpleEntry6);
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short2));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry3));
      
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry7 = new AbstractMap.SimpleEntry<Object, Short>(abstractMap_SimpleEntry5);
      assertNotNull(abstractMap_SimpleEntry7);
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry0));
      assertTrue(abstractMap_SimpleEntry7.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short1));
      assertFalse(short1.equals((Object)short0));
      assertFalse(short1.equals((Object)short2));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry5));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry6));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry6));
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry5));
      
      abstractMap_SimpleEntryArray0[7] = abstractMap_SimpleEntry7;
      boolean boolean0 = ArrayUtils.isNotEmpty(abstractMap_SimpleEntryArray0);
      assertEquals(8, abstractMap_SimpleEntryArray0.length);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1203.2317589791);
      assertNotNull(double0);
      assertEquals(1203.2317589791, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1954.436213342326);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1954.436213342326, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1.4316520645968366E9);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1.4316520645968366E9, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((-1.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals(1203.2317589791, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1160L);
      floatArray0[1] = (float) (-4529);
      floatArray0[2] = 1861.0F;
      floatArray0[3] = (float) (-1160L);
      floatArray0[4] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)2);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1160.0F), (-4529.0F), 1861.0F, (-1160.0F), 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1160.0F), (-4529.0F), 1861.0F, (-1160.0F), 2.0F, 2.0F}, floatArray1, 0.01F);
      
      AbstractMap.SimpleEntry<Object, Short>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Short>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 2);
      MutableInt mutableInt0 = new MutableInt((-4529.0F));
      assertEquals((byte)79, mutableInt0.byteValue());
      assertEquals((-4529.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-4529), (int)mutableInt0.toInteger());
      assertEquals((-4529), (int)mutableInt0.getValue());
      assertEquals("-4529", mutableInt0.toString());
      assertEquals((-4529.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-4529L), mutableInt0.longValue());
      assertEquals((short) (-4529), mutableInt0.shortValue());
      assertEquals((-4529), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      Short short0 = new Short((byte)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      mutableInt0.setValue(34);
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Short>(mutableInt0, short0);
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(abstractMap_SimpleEntry0);
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      Character character0 = Character.valueOf(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      AbstractMap.SimpleEntry<Object, Short> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Short>(character0, (Short) null);
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      boolean boolean0 = ArrayUtils.isNotEmpty(abstractMap_SimpleEntryArray0);
      assertEquals(2, abstractMap_SimpleEntryArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      ArrayUtils.shift(doubleArray0, (int) (byte)2, (int) (byte)2, (int) (byte)2);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(doubleArray0, 1683, (-1406));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-3), 2215);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)10, (int) (byte)10);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2804);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2804));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2804)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2804), (short) (-2804)}, shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-2804);
      doubleArray0[1] = (double) (short) (-2804);
      doubleArray0[2] = (double) (short) (-2804);
      doubleArray0[3] = (double) (short) (-2804);
      doubleArray0[4] = (double) (short) (-2804);
      doubleArray0[5] = (double) (short) (-2804);
      ArrayUtils.shift(doubleArray0, 1455, 1455, 2017);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2804.0), (-2804.0), (-2804.0), (-2804.0), (-2804.0), (-2804.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-2804)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2804), (short) (-2804)}, shortArray1);
      
      ArrayUtils.reverse(doubleArray0, (int) (short) (-2804), 1683);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2804.0), (-2804.0), (-2804.0), (-2804.0), (-2804.0), (-2804.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.swap(booleanArray0, 2, (-2347));
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2804);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2804));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2804)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2804), (short) (-2804)}, shortArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-2804);
      doubleArray0[1] = (double) (short) (-2804);
      doubleArray0[2] = (double) (short) (-2804);
      doubleArray0[3] = (double) (short) (-2804);
      doubleArray0[4] = (double) (short) (-2804);
      doubleArray0[5] = (double) (short) (-2804);
      ArrayUtils.shift(doubleArray0, 1455, 1455, 2017);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2804.0), (-2804.0), (-2804.0), (-2804.0), (-2804.0), (-2804.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-2804)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2804), (short) (-2804)}, shortArray1);
      
      ArrayUtils.reverse(doubleArray0, (int) (short) (-2804), 1683);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2804.0), (-2804.0), (-2804.0), (-2804.0), (-2804.0), (-2804.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.swap(booleanArray0, 2, (-2347));
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)69;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2146251585), (int) (short) (-2804));
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-39), (byte)10, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = new Integer((-3573));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3573), (int)integer1);
      
      Integer integer2 = new Integer(4167);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(4167, (int)integer2);
      
      Integer integer3 = new Integer((-3573));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals((-3573), (int)integer3);
      
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(0, (int)integer4);
      
      Integer integer5 = new Integer(70);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(70, (int)integer5);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'v';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = 'g';
      charArray0[2] = 'd';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '-');
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'-', 'g', 'd'}, charArray0);
      assertArrayEquals(new char[] {'-', '-', 'g', 'd'}, charArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-2778));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-2790);
      longArray0[3] = (long) (byte)0;
      longArray0[5] = (long) (byte) (-102);
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((-2173.2026F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2173.2026F), (float)float1, 0.01F);
      
      Float float2 = new Float(3138.71);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(3138.71F, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 0L);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2173.2026F)}, floatArray1, 0.01F);
      
      ArrayUtils.swap(floatArray1, (int) (byte)12, (-2790), (-2790));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-2173.2026F)}, floatArray1, 0.01F);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2147483648L));
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, (-2790L), 0L, 0L, (-102L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2790L), 0L, 0L, (-102L), 0L}, longArray1);
      
      ArrayUtils.reverse(byteArray0, 0, 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 5502.46F;
      floatArray0[1] = (-3423.656F);
      floatArray0[2] = (-3423.656F);
      floatArray0[3] = (float) 541;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) 541;
      floatArray0[6] = 25.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = 'B';
      charArray0[3] = '3';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = '3';
      ArrayUtils.shift(charArray0, 57, (-1), 256);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', 'B', '3', 'B', 'B', '3'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1923.18F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {5502.46F, (-3423.656F), (-3423.656F), 541.0F, (-1.0F), 541.0F, 25.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {5502.46F, (-3423.656F), (-3423.656F), 541.0F, (-1.0F), 541.0F, 25.0F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'3', '3', 'B', '3', 'B', 'B', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      Long[] longArray0 = new Long[0];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1), long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4170.6304F);
      floatArray0[1] = 371.912F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1644.934F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4170.6304F), 371.912F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-4170.6304F), 371.912F}, floatArray1, 0.01F);
      
      ArrayUtils.shift(floatArray0, (-498), 102, (-2134145220));
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-4170.6304F), 371.912F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '2');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      Character character0 = new Character('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1935);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1935, (short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1842, (int) (short) (-153));
      assertEquals(6, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1560L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1560L);
      assertEquals(1, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1560L}, longArray0);
      
      int[] intArray0 = new int[12];
      intArray0[0] = 78;
      intArray0[1] = (-467);
      intArray0[2] = 0;
      ArrayUtils.shift(intArray0, (-467), (-759), 0);
      assertEquals(12, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'I';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'a');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'a', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'a', 'a', 'I', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 78;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 'I';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-467), (double) 78);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {78.0, 0.0, 0.0, 73.0}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-467));
      assertEquals(4, doubleArray0.length);
      assertEquals("{1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {78.0, 0.0, 0.0, 73.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 78;
      floatArray0[1] = (float) 78;
      ArrayUtils.shift(floatArray0, (-467));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)90;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)90, (-1));
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short)90}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 11, (-3096), (int) (short)0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      ArrayUtils.shift(byteArray0, (-376), 120, (int) (byte)99);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)99, (byte)33, (byte)33, (byte)99}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-376);
      intArray0[1] = (int) (byte)33;
      intArray0[2] = (int) (byte)99;
      intArray0[3] = (int) (byte)33;
      intArray0[4] = (int) (byte)99;
      intArray0[5] = (int) (short)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)33);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-376), 33, 99, 33, 99, 0}, intArray0);
      assertArrayEquals(new int[] {33, (-376), 33, 99, 33, 99, 0}, intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2144955708));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, 8, (Long) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1328L);
      longArray0[1] = (-1328L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1328L), (-1328L)}, longArray0);
      assertArrayEquals(new long[] {(-1328L), (-1328L)}, longArray1);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      Long[] longArray2 = new Long[9];
      longArray2[0] = (Long) (-1328L);
      longArray2[1] = (Long) (-1328L);
      longArray2[2] = (Long) (-1328L);
      longArray2[3] = (Long) (-1328L);
      longArray2[4] = (Long) (-1328L);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) byte0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-428), (-1335));
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'B';
      ArrayUtils.shift(charArray0, (-2147483647), 3981, (-2147483647));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'B', '>'}, charArray0);
      
      Long long0 = new Long((-924L));
      assertNotNull(long0);
      assertEquals((-924L), (long)long0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '>';
      MutableInt mutableInt0 = new MutableInt(120);
      assertEquals(120, (int)mutableInt0.getValue());
      assertEquals(120, (int)mutableInt0.toInteger());
      assertEquals((byte)120, mutableInt0.byteValue());
      assertEquals(120, mutableInt0.intValue());
      assertEquals(120.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)120, mutableInt0.shortValue());
      assertEquals(120L, mutableInt0.longValue());
      assertEquals("120", mutableInt0.toString());
      assertEquals(120.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.get(objectArray0, 78, (Object) mutableInt0);
      assertEquals(1, objectArray0.length);
      assertEquals(120, (int)mutableInt0.getValue());
      assertEquals(120, (int)mutableInt0.toInteger());
      assertEquals((byte)120, mutableInt0.byteValue());
      assertEquals(120, mutableInt0.intValue());
      assertEquals(120.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)120, mutableInt0.shortValue());
      assertEquals(120L, mutableInt0.longValue());
      assertEquals("120", mutableInt0.toString());
      assertEquals(120.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("120", mutableInt1.toString());
      assertEquals(120L, mutableInt1.longValue());
      assertEquals(120.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(120, (int)mutableInt1.getValue());
      assertEquals((byte)120, mutableInt1.byteValue());
      assertEquals(120, (int)mutableInt1.toInteger());
      assertEquals(120.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(120, mutableInt1.intValue());
      assertEquals((short)120, mutableInt1.shortValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Character character0 = Character.valueOf('>');
      assertNotNull(character0);
      assertEquals('>', (char)character0);
      
      Character character1 = (Character)ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(character1);
      assertEquals('>', (char)character1);
      
      Object object1 = ArrayUtils.get(objectArray0, 3981);
      assertEquals(1, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (double) (-924L);
      doubleArray0[2] = (double) (-1160L);
      doubleArray0[3] = (double) '>';
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = (double) (-2147483647);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 78, 3981);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {66.0, (-924.0), (-1160.0), 62.0, 62.0, (-2.147483647E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-983.96326F);
      floatArray0[1] = 3146.4583F;
      floatArray0[2] = 2009.1F;
      floatArray0[3] = 712.36584F;
      floatArray0[4] = (-1.0F);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, ',');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[5];
      floatArray0[3] = (float) (byte) (-102);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-102.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (int) (byte)2);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-102.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte) (-102);
      intArray0[5] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1935);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 0, 2, 2, (-102), 0}, intArray1);
      assertArrayEquals(new int[] {2, 0, 2, 2, (-102), 0}, intArray0);
      
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) 0.0F;
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray1[1] = float0;
      floatArray1[2] = (Float) 0.0F;
      Float float1 = new Float((double) (byte)0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray1[3] = float1;
      floatArray1[4] = (Float) 0.0F;
      floatArray1[5] = (Float) 0.0F;
      floatArray1[6] = (Float) 0.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      ArrayUtils.shift((Object[]) floatArray1, 2, (-102), (int) (byte) (-102));
      assertEquals(8, floatArray1.length);
      assertSame(floatArray1, floatArray2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-102);
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (-166);
      shortArray0[3] = (short) (byte) (-102);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-102);
      shortArray0[6] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (-1480), 1935, 1645);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-102), (short)2, (short) (-166), (short) (-102), (short)0, (short) (-102), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[5];
      floatArray0[3] = (float) (byte) (-102);
      floatArray0[4] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-102.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (int) (byte)2);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-102.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[18];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(36, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte) (-102);
      intArray0[5] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1935);
      assertEquals(6, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 0, 2, 2, (-102), 0}, intArray1);
      assertArrayEquals(new int[] {2, 0, 2, 2, (-102), 0}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 25.0F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-102.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[8];
      floatArray1[0] = (Float) 0.0F;
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray1[1] = float0;
      floatArray1[2] = (Float) 0.0F;
      Float float1 = new Float((double) (byte)0);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray1[3] = float1;
      floatArray1[4] = (Float) 0.0F;
      floatArray1[5] = (Float) 0.0F;
      floatArray1[6] = (Float) 0.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      ArrayUtils.shift((Object[]) floatArray1, 2, (-102), (int) (byte) (-102));
      assertEquals(8, floatArray1.length);
      assertSame(floatArray1, floatArray2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-102);
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (-166);
      shortArray0[3] = (short) (byte) (-102);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-102);
      shortArray0[6] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, (-1480), 1935, 1645);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-102), (short)2, (short) (-166), (short) (-102), (short)0, (short) (-102), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1935;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1935, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1935, (short)2, (short)2, (short)2}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)2, (int) (short)2);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)1935, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1935, (short)2, (short)2, (short)2}, shortArray1);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 2;
      longArray1[1] = (-1L);
      ArrayUtils.swap(longArray1, (int) (byte)2, (-559), 1625);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2L, (-1L)}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2L;
      ArrayUtils.shift(objectArray0, (-4529), 4580, (-2090498273));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((byte) (-112));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-112), (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = Integer.getInteger("Array and element cannot both be null", 0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(0, (int)integer3);
      
      Integer integer4 = new Integer((byte) (-112));
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((-112), (int)integer4);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer5 = new Integer(1627);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(1627, (int)integer5);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-54);
      byteArray0[4] = (byte)43;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)43;
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)43, (short)0}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-49));
      assertNotNull(byte0);
      assertEquals((byte) (-49), (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) mockRandom0, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = 93.1;
      Float float0 = new Float(93.1);
      assertNotNull(float0);
      assertEquals(93.1F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) float0, (Object) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[1] = (-1959L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertEquals(4, intArray0.length);
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = ':';
      charArray0[2] = '0';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'E');
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'7', ':', '0'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[5];
      floatArray0[2] = (float) (byte) (-102);
      floatArray0[3] = (float) (byte) (-102);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-a$}0-l";
      stringArray0[1] = "', has a length less than 2";
      stringArray0[2] = "Arguments cannot both be null";
      stringArray0[3] = "', has a length less than 2";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((byte) (-102));
      assertNotNull(double0);
      assertEquals((-102.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1401.4033794));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1401.4033794), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-983.96326F);
      floatArray0[1] = 3146.4583F;
      floatArray0[2] = 2009.1F;
      floatArray0[3] = 712.36584F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2351.0215F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-983.96326F), 3146.4583F, 2009.1F, 712.36584F, (-1.0F), 2351.0215F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-983.96326F), 3146.4583F, 2009.1F, 712.36584F, (-1.0F), 2351.0215F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1333L);
      longArray0[1] = 40L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1333L), 40L}, longArray0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "%<lvx-m D66OwMS";
      stringArray0[1] = "PxYmm2%{#QBqf[AT";
      stringArray0[2] = "9bM3]AV)wz";
      stringArray0[3] = "java.lang.Float";
      stringArray0[4] = "', is neither of type Map.Entry nor an Array";
      stringArray0[5] = "', has a length less than 2";
      stringArray0[6] = "-a$}0-l";
      stringArray0[7] = ", '";
      stringArray0[8] = "Arguments cannot both be null";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 285.7058017429;
      doubleArray0[1] = (-5025.419017414501);
      doubleArray0[2] = 3519.985043901297;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-5025.419017414501));
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {285.7058017429, (-5025.419017414501), 3519.985043901297}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {285.7058017429, (-5025.419017414501), 3519.985043901297, (-5025.419017414501)}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)101;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)101);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)101}, shortArray0);
      assertArrayEquals(new short[] {(short)101, (short)101}, shortArray1);
      
      String string0 = "HashCodeBuilder requires an odd initial value";
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2707), 2);
      assertEquals(1, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)101}, shortArray0);
      
      int int0 = bitSet0.previousSetBit(2);
      assertEquals(1, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)101}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "HashCodeBuilder requires an odd initial value", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(18, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true, false, false}, booleanArray0));
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)42;
      Byte byte1 = new Byte((byte)42);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)42, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)42, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)46);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)46, (byte)byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)46}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-3381);
      doubleArray0[1] = 4.825488098929743;
      doubleArray0[2] = (double) (short) (-3381);
      doubleArray0[3] = (double) (short) (-3381);
      doubleArray0[4] = 4.825488098929743;
      doubleArray0[5] = (double) (short) (-3381);
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (-773.044786042234);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4.825488098929743);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {(-3381.0), 4.825488098929743, (-3381.0), (-3381.0), 4.825488098929743, (-3381.0), 0.0, (-773.044786042234)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte) (-57), (byte) (-128));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -57, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-18L);
      longArray0[2] = (-160L);
      long[] longArray1 = ArrayUtils.add(longArray0, 2, (long) 2);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-18L), (-160L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-18L), 2L, (-160L)}, longArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1789);
      shortArray0[1] = (short)1481;
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, (-2145824355));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      ArrayUtils.shift((double[]) null, (int) (byte) (-73));
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 130;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (byte) (-73);
      longArray0[3] = (long) (byte) (-73);
      longArray0[4] = (-394L);
      longArray0[1] = (long) (byte) (-73);
      longArray0[6] = (long) 1;
      ArrayUtils.reverse(longArray0, 0, (-498));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {130L, (-73L), (-73L), (-73L), (-394L), 0L, 1L}, longArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {130L, (-73L), (-73L), (-73L), (-394L), 0L, 1L}, longArray0);
      assertArrayEquals(new long[] {130L, (-73L), (-73L), (-73L), (-394L), 0L, 1L}, longArray1);
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)10);
      assertNotNull(short0);
      assertEquals((short)10, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)3360);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)3360, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1496));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-1496), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1496));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-1496), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((byte) (-73));
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-73), (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)0);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)0, (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)15);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertEquals((short)15, (short)short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short)1626);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short5));
      assertEquals((short)1626, (short)short7);
      
      shortArray0[7] = short7;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)10, (short)3360, (short) (-1496), (short) (-1496), (short) (-73), (short)0, (short)15, (short)1626}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte) (-66);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7, (-479));
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)71, (byte)70, (byte)20, (byte)7, (byte) (-59), (byte) (-109), (byte) (-99), (byte) (-66)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)108;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)108;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)111;
      byteArray1[6] = (byte)44;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)111, (byte)108}, byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)111, (byte)44, (byte)55, (byte)44, (byte)111, (byte)44}, byteArray1);
      assertArrayEquals(new byte[] {(byte)111, (byte)108, (byte)108, (byte)111, (byte)44, (byte)55, (byte)44, (byte)111, (byte)44}, byteArray2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)111;
      longArray0[1] = (long) (byte)108;
      longArray0[2] = (long) (byte)108;
      longArray0[3] = (long) (byte)44;
      longArray0[4] = (long) (byte)111;
      longArray0[5] = (long) (byte)108;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)108, 2063);
      assertEquals(6, longArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new long[] {111L, 108L, 108L, 44L, 111L, 108L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2778.0);
      doubleArray0[1] = (-2778.0);
      doubleArray0[2] = 447.9019903268463;
      doubleArray0[3] = (-2778.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-2778.0);
      doubleArray0[6] = (double) (short) (-2950);
      doubleArray0[7] = (-2778.0);
      doubleArray0[8] = (double) (short) (-2950);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2778.0), (-2778.0), 447.9019903268463, (-2778.0), 1.0, (-2778.0), (-2950.0), (-2778.0), (-2950.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 'Y';
      charArray0[2] = '@';
      charArray0[3] = 'Y';
      charArray0[4] = 'L';
      charArray0[5] = '@';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'P', 19);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'(', 'Y', '@', 'Y', 'L', '@'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-2778.0), (-2778.0), 447.9019903268463, (-2778.0), 1.0, (-2778.0), (-2950.0), (-2778.0), (-2950.0)}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2082);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2082, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(9, integerArray0.length);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1219);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(1219, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3326);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(3326, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertEquals(9, integerArray0.length);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals((-1), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((short) (-2950));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertEquals((-2950), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(2839);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertEquals(2839, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(1219);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)int0));
      assertEquals(1219, (int)integer8);
      
      integerArray0[8] = integer8;
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, 1219, (int) integerArray0[1]);
      assertEquals(9, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      intArray0[3] = (-2778);
      ArrayUtils.swap(intArray0, 0, 0, 1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-2778));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'C';
      charArray0[2] = 'w';
      charArray0[3] = 'Y';
      charArray0[4] = ',';
      charArray0[5] = ']';
      charArray0[6] = '0';
      charArray0[7] = '8';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '0');
      assertEquals(8, charArray0.length);
      assertEquals("{6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'_', 'C', 'w', 'Y', ',', ']', '0', '8'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-94);
      floatArray0[1] = (float) (byte) (-94);
      floatArray0[2] = (float) (byte)1;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-94);
      floatArray0[5] = (float) (byte)1;
      floatArray0[6] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)1);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-94.0F), (-94.0F), 1.0F, 0.0F, (-94.0F), 1.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-94.0F), (-94.0F), 1.0F, 0.0F, (-94.0F), 1.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-94);
      doubleArray0[2] = (double) (-94.0F);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-94.0), 0.0, (-94.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1276);
      floatArray0[1] = (-3368.004F);
      ArrayUtils.shift(floatArray0, (-2703));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1276.0F), (-3368.004F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (int) (short)90);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1276.0F), (-3368.004F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3368.004F);
      doubleArray0[1] = (double) (-1276.0F);
      doubleArray0[2] = (double) (-2703);
      doubleArray0[3] = (double) (-1276);
      doubleArray0[4] = (double) (-1276.0F);
      doubleArray0[5] = 1569.5;
      doubleArray0[6] = (double) (-3368.004F);
      doubleArray0[7] = (double) (-2703);
      doubleArray0[8] = (double) (-3368.004F);
      ArrayUtils.shift(doubleArray0, 1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-3368.00390625), (-3368.00390625), (-1276.0), (-2703.0), (-1276.0), (-1276.0), 1569.5, (-3368.00390625), (-2703.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1276);
      ArrayUtils.reverse(longArray0, 0, 130);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1276L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      intArray0[4] = (-2778);
      Byte byte0 = new Byte((byte) (-48));
      assertNotNull(byte0);
      assertEquals((byte) (-48), (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0, (int) (byte)2, 2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1556.6381F));
      assertEquals(1, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)940;
      ArrayUtils.reverse(booleanArray0, 1114111, (int) (short)940);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 2);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Random.setNextRandom((-2778));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 5664, (-979), (-2167));
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3198);
      assertNotNull(integer0);
      assertEquals(3198, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2167);
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-20));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5664;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-2167);
      longArray0[3] = (long) 3198;
      longArray0[4] = (long) (byte) (-20);
      longArray0[5] = (long) (-2167);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2143528796), 3198);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {5664L, (-1L), (-2167L), 3198L, (-20L), (-2167L)}, longArray1);
      assertArrayEquals(new long[] {5664L, (-1L), (-2167L), 3198L, (-20L), (-2167L)}, longArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2167)}, intArray1);
      assertArrayEquals(new int[] {(-2167)}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.0;
      doubleArray0[1] = (double) (-2167L);
      doubleArray0[2] = (double) 5664L;
      doubleArray0[3] = (double) (byte) (-20);
      doubleArray0[4] = (double) (-20L);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte) (-20);
      doubleArray0[7] = (double) 3198L;
      doubleArray0[8] = (double) 3198L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1292.9590174145), (-1545), (-3732.46));
      assertEquals(9, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {5.0, (-2167.0), 5664.0, (-20.0), (-20.0), (-1.0), (-20.0), 3198.0, 3198.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = Integer.getInteger(", Length: 0", integer1);
      assertNotNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      Integer integer4 = new Integer((-1));
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-1), (int)integer4);
      
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      
      Integer integer6 = new Integer((-1));
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals((-1), (int)integer6);
      
      Integer integer7 = new Integer(2640);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals(2640, (int)integer7);
      
      Integer[] integerArray0 = new Integer[0];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 1.0F;
      floatArray0[2] = Float.NaN;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1.0F, Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, Float.NaN, 0.0F, 1.0F, Float.NaN}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[2] = (double) Float.NaN;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, 49);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double(1263.0);
      assertNotNull(double0);
      assertEquals(1263.0, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 0.0;
      Double double1 = new Double((-3478.36653));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3478.36653), (double)double1, 0.01);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = (Double) Double.NaN;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1263.0, 0.0, (-3478.36653), Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 1.0F;
      floatArray0[2] = Float.NaN;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1.0F, Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, Float.NaN, 0.0F, 1.0F, Float.NaN}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) Float.NaN;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, 49);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double(1263.0);
      assertNotNull(double0);
      assertEquals(1263.0, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 0.0;
      Double double1 = new Double((-3478.36653));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3478.36653), (double)double1, 0.01);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = (Double) Double.NaN;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1263.0, 0.0, (-3478.36653), Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte)90;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)96, (byte)2, (byte)123, (byte)18, (byte) (-11), (byte) (-28), (byte)90}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)96, (byte)2, (byte)123, (byte)18, (byte) (-11), (byte) (-28), (byte)90}, byteArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, objectArray0.length);
      assertSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long((-1160L));
      assertNotNull(long0);
      assertEquals((-1160L), (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-4567), (Object) long0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1160L), object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object2);
      assertEquals((-1160L), object2);
      
      Object object3 = ArrayUtils.get(objectArray0, (int) 2);
      assertEquals(0, objectArray0.length);
      assertNull(object3);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-53), (byte)43, (byte) (-63), (byte) (-79), (byte)2, (byte) (-40)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte) (-53), (byte)43, (byte) (-63), (byte) (-79), (byte)2, (byte) (-40)}, byteArray1);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1305), (-2353));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 188, 2);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-958.0);
      doubleArray0[1] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2503.2344, 1.5);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-958.0), 1.5}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-1));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) boolean2, 5);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = Integer.getInteger("x},}uM9|cQvlz e\"y", integer1);
      assertNotNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      Integer integer4 = new Integer(3050);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(3050, (int)integer4);
      
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      
      Integer integer6 = new Integer(1301);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(1301, (int)integer6);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 1301);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) integer3;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer5;
      objectArray0[3] = (Object) integer2;
      objectArray0[4] = (Object) integer4;
      objectArray0[5] = (Object) integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0, 0, (-2473));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (-2473));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1092;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1092, (short)0, (short)0, (short)0}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(floatArray0, 2259.5767F);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertTrue(int1 == int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)4;
      longArray0[1] = (long) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1954), (int) (byte)4);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {4L, (-1L)}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1706.5599F, (-1));
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      int[] intArray0 = new int[4];
      intArray0[0] = (-1954);
      intArray0[1] = (-1954);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)4;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)4;
      longArray0[1] = (long) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1954), (int) (byte)4);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {4L, (-1L)}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1954);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1706.5599F, (-1));
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-1954.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[3];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)boolean3));
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean3));
      assertEquals(true, object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)59;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)97, 3);
      assertEquals(6, byteArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)97, (byte)1, (byte)53, (byte) (-16), (byte)59}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)53;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (-52.998F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (byte) (-66);
      floatArray0[5] = (float) (byte)59;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (float) (byte)97;
      ArrayUtils.shift(floatArray0, (int) (byte)53);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-66.0F), 59.0F, (-1.0F), 97.0F, 53.0F, 1.0F, (-52.998F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[10];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      Boolean[] booleanArray0 = new Boolean[10];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean1;
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(10, booleanArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(10, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean3));
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-66);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)97, 3);
      assertEquals(6, byteArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)97, (byte) (-66), (byte)53, (byte) (-16), (byte) (-66)}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)53;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (-52.998F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (byte) (-16);
      floatArray0[5] = (float) (byte) (-66);
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) (byte) (-66);
      ArrayUtils.shift(floatArray0, (int) (byte)53);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-16.0F), (-66.0F), 0.0F, (-66.0F), 53.0F, 1.0F, (-52.998F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-728.8241);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-728.8241)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-728.8241);
      objectArray0[1] = (Object) (-728.8241);
      objectArray0[2] = (Object) (-728.8241);
      objectArray0[3] = (Object) (-728.8241);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (-728.8241);
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object1);
      assertEquals((byte)7, object1);
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) (-728.8241);
      objectArray0[8] = (Object) (-728.8241);
      ArrayUtils.swap(objectArray0, (int) (byte)7, (int) (byte)7, 117);
      assertEquals(9, objectArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)102);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "m:gs<?d8\"rmZe";
      stringArray0[1] = "DT|Ctt";
      stringArray0[2] = ",9B";
      stringArray0[3] = "3H\"FK=";
      stringArray0[4] = "";
      stringArray0[5] = "%";
      stringArray0[6] = "h}s8O$e3qH)MS_smrQ{";
      stringArray0[7] = "WrJDsN#";
      stringArray0[8] = "m:FX`3?";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[5] = (short)0;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean0);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-2747.7534F));
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-2747.7534F)}, floatArray1, 0.01F);
      
      AbstractMap.SimpleEntry<Object, Short>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Short>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 0);
      boolean boolean2 = ArrayUtils.isNotEmpty(abstractMap_SimpleEntryArray0);
      assertEquals(0, abstractMap_SimpleEntryArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-153);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-94);
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Double double0 = new Double((short) (-153));
      assertNotNull(double0);
      assertEquals((-153.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (byte) (-94);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte) (-94));
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-94.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, (-94.0F), (-94.0F)}, floatArray1, 0.01F);
      
      AbstractMap.SimpleEntry<Object, Short>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Short>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 0);
      boolean boolean0 = ArrayUtils.isNotEmpty(abstractMap_SimpleEntryArray0);
      assertEquals(0, abstractMap_SimpleEntryArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = '#';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'K';
      charArray0[5] = 'V';
      charArray0[6] = '#';
      charArray0[7] = '#';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '#');
      assertEquals(8, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'\u0000', 'F', 'F', 'F', 'K', 'V', '#', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2778.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2778.0);
      doubleArray0[3] = (-2778.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2778.0), 0.0, (-2778.0), (-2778.0)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '@';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '6');
      assertEquals(2, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'@', '@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'T', 114);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'T', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-846.5F);
      floatArray0[1] = (-933.9F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 446.717F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 1675.5F;
      floatArray0[7] = 5502.46F;
      floatArray0[8] = (-3423.656F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-846.5F), 541);
      assertEquals(9, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-846.5F), (-933.9F), 0.0F, 1.0F, 446.717F, (-1.0F), 1675.5F, 5502.46F, (-3423.656F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5502.46F;
      doubleArray0[1] = (-2778.0);
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) (-846.5F);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {5502.4599609375, (-2778.0), 1.0, (-846.5)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 'L';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'Y', 3141);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'@', 'L'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1906.7108F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-467.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2014.0F);
      floatArray0[5] = 74.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 74.0F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new float[] {(-1906.7108F), 0.0F, (-467.0F), 0.0F, (-2014.0F), 74.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)61, (byte)1, (byte) (-81), (byte)85, (byte)11, (byte)69, (byte)45, (byte)59}, byteArray1);
      assertArrayEquals(new byte[] {(byte)61, (byte)1, (byte) (-81), (byte)85, (byte)11, (byte)69, (byte)45, (byte)59}, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)59);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)61, (byte)1, (byte) (-81), (byte)85, (byte)11, (byte)69, (byte)45, (byte)59}, byteArray1);
      assertArrayEquals(new byte[] {(byte)61, (byte)1, (byte) (-81), (byte)85, (byte)11, (byte)69, (byte)45, (byte)59, (byte)59}, byteArray2);
      assertArrayEquals(new byte[] {(byte)61, (byte)1, (byte) (-81), (byte)85, (byte)11, (byte)69, (byte)45, (byte)59}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer((-600));
      assertNotNull(integer0);
      assertEquals((-600), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-687));
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-600), (-600), (-600)}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-687);
      floatArray0[1] = (float) (int)integerArray0[2];
      floatArray0[2] = (float) (-687);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-600));
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-687.0F), (-600.0F), (-687.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("o)`iz,eFrqV/|7|X");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("o)`iz,eFrqV/|7|X");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)38;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)60, (byte)38}, byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte)38, (byte)60, (byte)38}, byteArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)38;
      intArray0[4] = (-2778);
      intArray0[5] = (int) (byte)60;
      intArray0[6] = (int) (byte)60;
      ArrayUtils.swap(intArray0, (-2778), 1, (-2778));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 38, (-2778), 60, 60}, intArray0);
      
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-2778), (-215));
      assertEquals(7, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(boolean2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (byte)8);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      
      byte[] byteArray3 = new byte[4];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)8;
      byteArray3[1] = (byte)114;
      byteArray3[2] = (byte)2;
      byteArray3[3] = (byte)8;
      byte[] byteArray4 = ArrayUtils.removeElements(byteArray3, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray3.length);
      assertEquals(4, byteArray4.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte)114, (byte)2, (byte)8}, byteArray3);
      assertArrayEquals(new byte[] {(byte)8, (byte)114, (byte)2, (byte)8}, byteArray4);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)8;
      shortArray0[1] = (short) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)8, (int) (short)2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)8, (short)2}, shortArray0);
      
      bitSet0.flip((int) (byte)8);
      assertEquals(2, shortArray0.length);
      assertEquals("{8}", bitSet0.toString());
      assertEquals(9, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)8, (short)2}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3381);
      shortArray0[3] = (short)1015;
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(']');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('J');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('J', (char)character2);
      
      characterArray0[2] = character2;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)120);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8, (byte)8, (byte) (-1), (byte)8, (byte)8, (byte)8}, byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8, (byte)8, (byte) (-1), (byte)8, (byte)8, (byte)8}, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8, (byte)8, (byte) (-1), (byte)8, (byte)8, (byte)8}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8, (byte)8, (byte) (-1), (byte)8, (byte)8, (byte)8}, byteArray0);
      
      Byte byte0 = new Byte((byte)37);
      assertNotNull(byte0);
      assertEquals((byte)37, (byte)byte0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-7);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)69);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7)}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7), (byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Byte byte0 = new Byte((byte) (-7));
      assertNotNull(byte0);
      assertEquals((byte) (-7), (byte)byte0);
      
      Integer integer0 = new Integer((byte) (-7));
      assertNotNull(integer0);
      assertEquals((-7), (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("-7", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Short short0 = new Short((byte)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      Short short1 = new Short((byte)2);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)2, (short)short1);
      
      Short short2 = new Short((byte)2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)2, (short)short2);
      
      Short short3 = new Short((short) (-1217));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-1217), (short)short3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1217);
      shortArray0[1] = (short) (-1217);
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1217), (short) (-1217), (short)2, (short)2}, shortArray0);
      
      Float float0 = new Float((-65.613F));
      assertNotNull(float0);
      assertEquals((-65.613F), (float)float0, 0.01F);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)2;
      shortArray1[1] = (short) (byte)2;
      shortArray1[2] = (short) (byte)2;
      shortArray1[3] = (short) (-1217);
      ArrayUtils.shift(shortArray1, (int) (short)2);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short) (-1217), (short)2, (short)2}, shortArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1217);
      intArray0[1] = (int) (short) (-1217);
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (-981);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -981, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, (-467));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1316.0F;
      floatArray0[1] = 1316.0F;
      floatArray0[2] = (float) (-467);
      floatArray0[3] = (float) (-467L);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 371.912F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1316.0F, 1316.0F, (-467.0F), (-467.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1316.0F, 1316.0F, (-467.0F), (-467.0F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ')';
      charArray0[2] = 'n';
      charArray0[3] = '[';
      charArray0[4] = '(';
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000', 1509);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\\', ')', 'n', '[', '(', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-121);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-121), (int) (byte) (-121));
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-121)}, byteArray0);
      
      int int2 = ArrayUtils.indexOf(longArray0, 0L, (-467));
      assertEquals(9, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertArrayEquals(new long[] {(-467L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3132.736;
      doubleArray0[1] = 3132.736;
      doubleArray0[2] = 3132.736;
      doubleArray0[3] = 3132.736;
      Character[] characterArray0 = new Character[5];
      char char0 = 'U';
      Character character0 = Character.valueOf('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      characterArray0[0] = character0;
      char char1 = 'M';
      Character character1 = Character.valueOf('M');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('M', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char1);
      assertNotNull(character2);
      assertFalse(char1 == char0);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals('M', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('M');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)char1));
      assertEquals('M', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('c');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)character0));
      assertEquals('c', (char)character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.toArray(characterArray0);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, (int) char0, (-76));
      assertEquals(0, byteArray0.length);
      assertFalse(char0 == char1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "K6T?mV'j";
      String string0 = "\\u";
      stringArray0[1] = string0;
      stringArray0[2] = "";
      stringArray0[3] = "";
      Class<String[]> class0 = String[].class;
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0, class0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(46);
      assertNotNull(integer0);
      assertEquals(46, (int)integer0);
      
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(integerArray0, (-2752), integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2752, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1328L);
      longArray0[1] = (-1328L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1328L), (-1328L)}, longArray0);
      assertArrayEquals(new long[] {(-1328L), (-1328L)}, longArray1);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      Long[] longArray2 = new Long[9];
      longArray2[0] = (Long) (-1328L);
      longArray2[1] = (Long) (-1328L);
      longArray2[2] = (Long) (-1328L);
      longArray2[3] = (Long) (-1328L);
      longArray2[4] = (Long) (-1328L);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray2, 1065, longArray2[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1065, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-153);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-153);
      floatArray0[4] = (float) (short) (-153);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2330.96);
      doubleArray0[1] = (double) (short)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-153.0F), (-1416.0));
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2330.96), 0.0}, doubleArray0, 0.01);
      
      shortArray0[0] = (short)0;
      ArrayUtils.reverse((long[]) null);
      boolean boolean1 = ArrayUtils.isSameType((short)0, (short)0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, (-954.960501409739), (-1416.0));
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-2330.96), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3109.396F);
      floatArray0[1] = (-954.15753F);
      floatArray0[2] = (-954.15753F);
      floatArray0[3] = (-1567.2F);
      floatArray0[4] = (-1567.2F);
      floatArray0[5] = (-1567.2F);
      floatArray0[6] = (-1567.2F);
      floatArray0[7] = (-1567.2F);
      floatArray0[8] = (-954.15753F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 476.0F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-3109.396F), (-954.15753F), (-954.15753F), (-1567.2F), (-1567.2F), (-1567.2F), (-1567.2F), (-1567.2F), (-954.15753F)}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[2];
      try { 
        Short.valueOf("XNK-k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"XNK-k\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = new short[4];
      float[] floatArray0 = ArrayUtils.insert(2105, arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      shortArray0[1] = (short)282;
      double[] doubleArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-688.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)282);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)282, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)282, (short)1, (short)0, (short)282}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (short)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      try { 
        Short.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1742.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-3368.004F);
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1, (-1613), Integer.MAX_VALUE);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1454;
      longArray0[1] = 5978L;
      longArray0[2] = (long) (-2147483639);
      longArray0[3] = (long) (-2147483639);
      longArray0[4] = (long) 1935;
      long[] longArray1 = ArrayUtils.insert(4, longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1454L, 5978L, (-2147483639L), (-2147483639L), 1935L}, longArray0);
      assertArrayEquals(new long[] {1454L, 5978L, (-2147483639L), (-2147483639L), 1454L, 5978L, (-2147483639L), (-2147483639L), 1935L, 1935L}, longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1935;
      intArray0[2] = 84;
      intArray0[3] = (-1613);
      intArray0[4] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1, 1935, 84, (-1613), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3381);
      short short0 = (short)1015;
      shortArray0[3] = (short)1015;
      Character[] characterArray0 = new Character[3];
      char char0 = ')';
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(']');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals(']', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('J');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('J', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('g');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('g', (char)character3);
      
      Character character4 = Character.valueOf('\\');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertEquals('\\', (char)character4);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) char0;
      floatArray0[2] = (-605.1599F);
      floatArray0[3] = (float) (char)character1;
      floatArray0[4] = (float) (short) (-3381);
      floatArray0[5] = (float) (char)character1;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {41.0F, 41.0F, (-605.1599F), 93.0F, (-3381.0F), 93.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(shortArray0, 1, (-391), (-391));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3381), (short)0, (short)1015, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(1347L);
      assertNotNull(long0);
      assertEquals(1347L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-156L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-156L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = Long.getLong("G");
      assertNull(long2);
      
      longArray0[2] = null;
      Long long3 = new Long((short) (-3381));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-3381L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(2894L);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertEquals(2894L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-156L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long1));
      assertEquals((-156L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = Long.getLong("G", (-2619L));
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertEquals((-2619L), (long)long6);
      
      longArray0[6] = long6;
      try { 
        Long.decode("G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1514));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      int int1 = (-3573);
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), (-2205), (-132));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean2 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_INT_ARRAY, (-3573));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3573, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)0, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, (-132), 88, (-132));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      Class<Integer>[] classArray0 = null;
      Class<Boolean>[] classArray1 = null;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-132);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 88;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-132));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -132, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-28293);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)6, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-28293), (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1316;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1316.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1316.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-12.0), (int) (short)6, (double) (short)1316);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {1316.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-28293), (int) (short) (-28293), (int) (short)1316);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-28293), (short)0}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      
      int int1 = ArrayUtils.indexOf(byteArray2, (byte)122, (int) (byte)0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 11, (-3096), (int) (short)0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Double double0 = new Double(11);
      assertNotNull(double0);
      assertEquals(11.0, (double)double0, 0.01);
      
      Double double1 = new Double(73.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(73.0, (double)double1, 0.01);
      
      Double double2 = new Double(1826.9852373);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1826.9852373, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 243.3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 10, (int) (byte)0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {5.0, 0.0, 0.0, 10.0, 10.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-775.0));
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {5.0, 0.0, 0.0, 10.0, 10.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-351));
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-351)}, intArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-351)}, intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertEquals(1, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-351)}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-351)}, intArray1);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-23));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0, (byte)0}, byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) (byte)5;
      floatArray0[2] = (float) (-351);
      floatArray0[3] = (float) (byte) (-23);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) 10;
      floatArray0[6] = (float) (byte)5;
      floatArray0[7] = (float) (byte)5;
      floatArray0[8] = (float) (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {10.0F, 5.0F, (-351.0F), (-23.0F), 0.0F, 10.0F, 5.0F, 5.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 371;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 371}, intArray0);
      assertArrayEquals(new int[] {0, 0, 371}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      shortArray0[5] = (short) (-1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-2313);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      intArray1[2] = (int) (short) (-2313);
      ArrayUtils.swap(doubleArray0, (-19), (int) (short) (-1), (int) (short)0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2313.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-19);
      longArray0[2] = (long) (-1613);
      longArray0[3] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.insert(4, longArray0, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-19L), (-1613L), (-1L), 0L, (-19L), (-1613L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-19L), (-1613L), (-1L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, (-2313)}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-2313)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[5];
      longArray0[0] = 4L;
      longArray0[1] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 4L;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-653.0F);
      floatArray0[4] = (float) 2L;
      floatArray0[5] = 874.7291F;
      floatArray0[6] = (-1581.92F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-653.0F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-653.0F), 0.0F, (-1581.92F), 874.7291F, 2.0F, (-653.0F), 0.0F, 4.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)111;
      intArray0[1] = (int) (byte)111;
      intArray0[2] = (int) (byte)111;
      floatArray0[2] = (float) (byte)111;
      intArray0[4] = (-2837);
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (int) (byte)2;
      intArray0[8] = (int) (byte)111;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {111, 111, 111, 0, (-2837), 2, 2, 2, 111}, intArray0);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 111;
      longArray1[1] = (long) (-2837);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, (int) (byte)111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0Hx)SbY481AJr,{\")\"";
      stringArray0[1] = " in an array of ";
      stringArray0[2] = "K@[\"o.p<~r8%";
      stringArray0[3] = "^U";
      stringArray0[4] = "org.apache.commons.lang3.StringUtils";
      stringArray0[5] = "(YOWc]&~}pKPXc=";
      stringArray0[6] = "java.lang.Float";
      Class<String[]> class0 = String[].class;
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0, class0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, 1927, 1927);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte) (-121);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)114, (int) (byte) (-121));
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-121), (byte) (-121), (byte) (-121), (byte) (-121), (byte) (-121), (byte) (-121), (byte) (-121), (byte) (-121)}, byteArray0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (-1210L), 2142895007);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, Integer.MAX_VALUE, (-3489));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-3489);
      intArray0[1] = (-3489);
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (-3489);
      MockRandom mockRandom0 = new MockRandom((-2147483648L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-3489), 2, 2, 2, 2, 2, (-3489), (-3489)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-21844.0);
      doubleArray0[1] = (-1831.1872);
      doubleArray0[2] = (-108.022836523293);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-108.022836523293), (-1655.839391874));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-21844.0), (-1831.1872), (-108.022836523293)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-108.022836523293), (-1276));
      assertEquals(3, doubleArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-21844.0), (-1831.1872), (-108.022836523293)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1276);
      floatArray0[1] = (-3368.004F);
      ArrayUtils.shift(floatArray0, (-2703));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1276.0F), (-3368.004F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (int) (short)90);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1276.0F), (-3368.004F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte) (-88);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)13);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-21), (byte)50, (byte) (-77), (byte)45, (byte)60, (byte)27, (byte) (-88), (byte) (-88)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)50, (byte) (-77), (byte)45, (byte)60, (byte)27, (byte) (-88), (byte)13, (byte) (-88)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = false;
      booleanArray0[1] = false;
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      
      Float float0 = new Float((float) 435);
      assertNotNull(float0);
      assertEquals(435.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) 435);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(435.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(2770.326F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(2770.326F, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float2;
      floatArray0[2] = float2;
      floatArray0[3] = float1;
      floatArray0[4] = float2;
      floatArray0[5] = float2;
      floatArray0[6] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {435.0F, 2770.326F, 2770.326F, 435.0F, 2770.326F, 2770.326F, 2770.326F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 435;
      intArray0[1] = 435;
      intArray0[2] = 435;
      intArray0[3] = 435;
      intArray0[4] = 435;
      intArray0[5] = 435;
      intArray0[6] = 435;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {435, 435, 435, 435, 435, 435, 435}, intArray0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integer0);
      assertEquals(1, integerArray0.length);
      assertEquals(0, int0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(466);
      assertNotNull(double0);
      assertEquals(466.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(466.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(466.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(126.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(126.0, (double)double3, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, double3);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      intArray0[2] = 371;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 54, 371}, intArray0);
      assertArrayEquals(new int[] {0, 54, 371}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      shortArray0[5] = (short) (-1);
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2711;
      shortArray0[6] = (short)182;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "E~a5e0gn<oVg}0:3";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "E~a5e0gn<oVg}0:3");
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      ArrayUtils.shift((char[]) null, (int) (short) (-2313));
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'A', 16);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (short)13;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      ArrayUtils.shift(floatArray0, (int) (short)0, (int) (short)182, (-1220));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 13.0F, 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 192;
      floatArray0[1] = (float) (byte) (-63);
      floatArray0[2] = 25.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 25.0F;
      floatArray0[5] = (float) 541;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-901.0F), 160);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {192.0F, (-63.0F), 25.0F, (-1.0F), 25.0F, 541.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 192.0F;
      doubleArray0[1] = (double) 25.0F;
      doubleArray0[2] = (double) 25.0F;
      doubleArray0[3] = (double) 192;
      doubleArray0[4] = (double) 25.0F;
      doubleArray0[5] = (double) 192;
      doubleArray0[6] = (double) 25.0F;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {192.0, 25.0, 25.0, 192.0, 25.0, 192.0, 25.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'Z', 541);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = (-2147483647);
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 96;
      floatArray0[1] = (float) (-2147483647);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) '>';
      floatArray0[4] = (float) 'B';
      floatArray0[5] = (float) 96;
      floatArray0[6] = (float) 96;
      floatArray0[7] = (float) 'B';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(96, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 96, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)55;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)55, (byte)2, (byte)55, (byte)55, (byte)55, (byte)55}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2254L), (int) (byte)55);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {2L}, longArray0);
      
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.insert((-467), byteArray2, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)55;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)55;
      ArrayUtils.swap(longArray0, (-440), (int) (byte)2);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)55;
      doubleArray0[1] = (double) (byte)55;
      doubleArray0[2] = (double) 2679;
      doubleArray0[3] = (double) 2679;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {55.0, 55.0, 2679.0, 2679.0}, doubleArray0, 0.01);
      
      byte[] byteArray4 = ArrayUtils.removeElement(byteArray1, (byte)2);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertEquals(11, byteArray4.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotNull(byteArray4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)55, (byte)2, (byte)55, (byte)55, (byte)55, (byte)55}, byteArray0);
      
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) (byte)55);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'y';
      charArray0[2] = '3';
      charArray0[3] = 't';
      charArray0[4] = 'd';
      charArray0[5] = 'I';
      charArray0[6] = ',';
      charArray0[7] = ':';
      charArray0[8] = 'x';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '$');
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'I', 'y', '3', 't', 'd', 'I', ',', ':', 'x'}, charArray1);
      assertArrayEquals(new char[] {'I', 'y', '3', 't', 'd', 'I', ',', ':', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-38L));
      assertNull(longArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-4795), (-4795));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Long long0 = new Long((-38L));
      assertNotNull(long0);
      assertEquals((-38L), (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) long0, 765);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 883.117594040885;
      doubleArray0[3] = (-2624.484427152);
      doubleArray0[4] = (-3287.0);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(22, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 1425L;
      longArray0[2] = (-1L);
      longArray0[3] = 1131L;
      longArray0[4] = 59L;
      longArray0[5] = 0L;
      longArray0[6] = (-545L);
      longArray0[7] = 107L;
      longArray0[8] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-1949));
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 1425L, (-1L), 1131L, 59L, 0L, (-545L), 107L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-153);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-94);
      byte[] byteArray1 = ArrayUtils.insert((int) (short)0, byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-94), (byte)1, (byte) (-94), (byte) (-94), (byte) (-94)}, byteArray0);
      
      Double double0 = new Double((short) (-153));
      assertNotNull(double0);
      assertEquals((-153.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1195);
      shortArray0[1] = (short) (-1195);
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-110), (int) (byte) (-110));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4, (-3679));
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), 0, 0}, intArray0);
      
      Character character0 = new Character('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      Character character1 = new Character('\\');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('\\', (char)character1);
      
      Character character2 = new Character('4');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('4', (char)character2);
      
      Character character3 = new Character('4');
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('4', (char)character3);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character1;
      characterArray0[1] = character3;
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      characterArray0[4] = character3;
      characterArray0[5] = character2;
      characterArray0[6] = character3;
      characterArray0[7] = character0;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (int) character3, 0);
      assertEquals(0, characterArray1.length);
      assertEquals(8, characterArray0.length);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf("ffZs");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.valueOf("`7six L(-n\"s");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      Boolean boolean5 = new Boolean("', has a length less than 2");
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.valueOf(false);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (int) (byte)52);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1742.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-3368.004F);
      floatArray0[3] = (-3896.0F);
      floatArray0[4] = (-1567.2F);
      floatArray0[5] = (-954.15753F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-954.15753F));
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1742.0F), 1.0F, (-3368.004F), (-3896.0F), (-1567.2F), (-954.15753F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('^');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('^', (char)character1);
      
      Character character2 = Character.valueOf('m');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('m', (char)character2);
      
      Character character3 = new Character('4');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('4', (char)character3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertEquals(8, byteArray2.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = ArrayUtils.insert((-3404), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(6, charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 3184;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(116.0);
      assertNotNull(double0);
      assertEquals(116.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      ArrayUtils.shift(longArray0, 1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 1L, 1L}, longArray0);
      
      ArrayUtils.shift((Object[]) doubleArray0, 2);
      assertEquals(1, doubleArray0.length);
      assertSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 2, (-20));
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.add((int[]) null, 84);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {84}, intArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KTctg[PBXb,Y%n";
      stringArray0[1] = "java.lang.Float";
      stringArray0[2] = "A<[efuZa&p#|k]{";
      stringArray0[3] = "java.lang.Float";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "<size=");
      assertEquals(5, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 5502.46F;
      floatArray0[1] = (-3423.656F);
      floatArray0[2] = (-3423.656F);
      floatArray0[3] = (float) 541;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) 541;
      floatArray0[6] = 25.0F;
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 2, 2);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 1.0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.hashCode((Object) boolean0);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) boolean0;
      objectArray0[2] = (Object) boolean0;
      Float float0 = new Float((-3423.656F));
      assertNotNull(float0);
      assertEquals((-3423.656F), (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals((-3423.656F), object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) boolean0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ",dT{ik7W32B[~");
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object object1 = ArrayUtils.toPrimitive(objectArray0[3]);
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertEquals((-3423.656F), object1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      int int2 = ArrayUtils.lastIndexOf(longArray0, (-1L), (-1));
      assertEquals(1, longArray0.length);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1L));
      assertEquals(1, floatArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-2790);
      longArray0[3] = (long) (byte)0;
      longArray0[5] = (long) (byte) (-102);
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((-2173.2026F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2173.2026F), (float)float1, 0.01F);
      
      Float float2 = new Float(3138.71);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(3138.71F, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 0L);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2173.2026F)}, floatArray1, 0.01F);
      
      boolean[] booleanArray2 = new boolean[1];
      booleanArray2[0] = boolean0;
      ArrayUtils.swap(booleanArray2, (int) (byte) (-102), 4680, (int) (byte) (-102));
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      
      boolean boolean2 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      
      ArrayUtils.swap(booleanArray0, (-2147483647), 734, 7);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3970.6255382822);
      doubleArray0[1] = (double) 734;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) 'B';
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 1987, (double) 734);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1987, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-2950));
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-2950)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-2950);
      longArray0[1] = (-1959L);
      longArray0[2] = (-1959L);
      longArray0[3] = 107L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (short) (-2950);
      longArray0[7] = (long) 0;
      ArrayUtils.swap(longArray0, (-1635), 7, 0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-2950L), (-1959L), (-1959L), 107L, 0L, (-2950L), 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-2950);
      floatArray0[1] = (float) 7;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1635);
      floatArray0[4] = (float) 107L;
      floatArray0[5] = (float) (-2950L);
      floatArray0[6] = (float) (-1959L);
      floatArray0[7] = (float) 107L;
      floatArray0[8] = (float) (-2950L);
      ArrayUtils.shift(floatArray0, (int) (short) (-2950));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {107.0F, (-2950.0F), (-2950.0F), 7.0F, 0.0F, (-1635.0F), 107.0F, (-2950.0F), (-1959.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('?', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('?');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('?', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('W');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('W', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf((char) character0);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character1));
      assertEquals('?', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('=');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertEquals('=', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(']');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertEquals(']', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character(']');
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character6));
      assertEquals(']', (char)character7);
      
      characterArray0[7] = character7;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (-754));
      assertEquals(8, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-96);
      shortArray0[1] = (short) (byte) (-96);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96)}, shortArray0);
      
      Float float0 = new Float((float) 0L);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ArrayUtils.shift(shortArray0, (-95));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96)}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-96);
      intArray1[1] = (int) (short) (-96);
      intArray1[2] = (int) (short) (-96);
      intArray1[3] = (int) (short) (-96);
      intArray1[4] = (-95);
      intArray1[5] = (int) (byte) (-96);
      intArray1[6] = (int) (short) (-96);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -95, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Float float0 = new Float((float) (byte) (-96));
      assertNotNull(float0);
      assertEquals((-96.0F), (float)float0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-4849);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 5, 10);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-4849)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(1658);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1658, (int)integer1);
      
      Integer integer2 = new Integer(1658);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(1658, (int)integer2);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-2950);
      longArray0[1] = (-1959L);
      ArrayUtils.reverse(longArray0, (-192), 0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-2950L), (-1959L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 5807;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (short) (-2950);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-643L);
      floatArray0[5] = (float) 5807;
      ArrayUtils.shift(floatArray0, (-2553));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-643.0F), 5807.0F, 5807.0F, 0.0F, (-2950.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)21);
      assertNull(shortArray0);
      
      MutableInt mutableInt0 = new MutableInt(52);
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("52", mutableInt0.toString());
      assertEquals(52L, mutableInt0.longValue());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(52, mutableInt0.intValue());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(52);
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals("52", mutableInt1.toString());
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52L, mutableInt1.longValue());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals("52", mutableInt1.toString());
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52L, mutableInt1.longValue());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertEquals(52, mutableInt2.intValue());
      assertEquals(52L, mutableInt2.longValue());
      assertEquals("52", mutableInt2.toString());
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertNotNull(mutableInt2);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      mutableIntArray0[0] = mutableInt2;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[3] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableIntArray0[1]);
      assertEquals(4, mutableIntArray0.length);
      assertEquals(2, mutableIntArray1.length);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      String string0 = ArrayUtils.toString((Object) mutableInt2);
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals("52", mutableInt1.toString());
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52L, mutableInt1.longValue());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertEquals(52, mutableInt2.intValue());
      assertEquals(52L, mutableInt2.longValue());
      assertEquals("52", mutableInt2.toString());
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotNull(string0);
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertEquals("52", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 66;
      doubleArray0[1] = (double) 66;
      intArray0[2] = 435;
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 66);
      assertNotNull(float0);
      assertEquals(66.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3894.35246978));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3894.3525F), (float)float1, 0.01F);
      
      Float float2 = new Float((-276.97086F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-276.97086F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)90;
      shortArray0[1] = (short)90;
      ArrayUtils.shift(shortArray0, 2264);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)90, (short)90}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 66, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2657L;
      longArray0[1] = 2514L;
      longArray0[2] = (-4755L);
      ArrayUtils.reverse(longArray0, (-2146715872), (-2144842708));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2657L, 2514L, (-4755L)}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2657L;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1801.4205F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2657.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2657.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) (short)0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (-1);
      intArray0[4] = (-2146715872);
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (-2147483646));
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, (-1), (-2146715872), 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 57;
      doubleArray0[2] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 78.0, Integer.MAX_VALUE, 1.0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 57.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, 3751.3276F, (-1));
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) double0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray1 = new Float[6];
      Float float0 = new Float((double) 3751.3276F);
      assertNotNull(float0);
      assertEquals(3751.3276F, (float)float0, 0.01F);
      
      floatArray1[0] = float0;
      Float float1 = new Float((double) 3751.3276F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3751.3276F, (float)float1, 0.01F);
      
      floatArray1[1] = float1;
      Float float2 = new Float((double) floatArray1[0]);
      assertEquals(6, floatArray1.length);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(3751.3276F, (float)float2, 0.01F);
      
      floatArray1[2] = float2;
      Float float3 = new Float(3751.3276F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(3751.3276F, (float)float3, 0.01F);
      
      floatArray1[3] = float3;
      Float float4 = new Float(59.0F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(59.0F, (float)float4, 0.01F);
      
      floatArray1[4] = float4;
      Float float5 = new Float(1435.5506438647178);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals(1435.5507F, (float)float5, 0.01F);
      
      floatArray1[5] = float5;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(6, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {3751.3276F, 3751.3276F, 3751.3276F, 3751.3276F, 59.0F, 1435.5507F}, floatArray2, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = '-';
      charArray0[2] = '}';
      charArray0[3] = 'j';
      charArray0[5] = '4';
      charArray0[6] = '%';
      charArray0[7] = '*';
      charArray0[8] = 'x';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', '-', '}', 'j', '\u0000', '4', '%', '*', 'x'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) 'x';
      intArray0[2] = (-1551);
      intArray0[3] = (int) 'f';
      int int0 = ArrayUtils.indexOf(intArray0, 1528, (-1551));
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {109, 120, (-1551), 102}, intArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short) (-153);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[2] = (float) (short) (-153);
      floatArray0[3] = (float) (short) (-153);
      floatArray0[0] = (float) (short) (-153);
      floatArray0[5] = (float) (short) (-153);
      floatArray0[6] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-3134.71F), 0);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-153.0F), 0.0F, (-153.0F), (-153.0F), 0.0F, (-153.0F), 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'x', 1277);
      assertEquals(0, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, 1277);
      assertEquals(6, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-153), (short) (-153), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = '-';
      charArray0[2] = '}';
      charArray0[3] = 'j';
      charArray0[4] = 'f';
      charArray0[5] = '4';
      charArray0[6] = '%';
      charArray0[7] = '*';
      charArray0[8] = 'x';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', '-', '}', 'j', 'f', '4', '%', '*', 'x'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(3387.8643);
      assertNotNull(float0);
      assertEquals(3387.8643F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 1.0F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-3301.3F));
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-3301.3F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_CHAR_ARRAY, '(', (-1382));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-121), (int) (byte) (-121));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, Integer.MAX_VALUE, (int) (byte) (-121), (-1036));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((-201.619F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-201.619F), (float)float1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      int[] intArray0 = new int[6];
      intArray0[0] = (-2391);
      intArray0[1] = 8;
      intArray0[2] = 508;
      intArray0[3] = 559;
      intArray0[4] = (-1338);
      intArray0[5] = (-113);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 8;
      longArray0[1] = (-2608L);
      longArray0[2] = (long) (-1338);
      longArray0[3] = (long) 8;
      longArray0[4] = (long) (-2391);
      longArray0[5] = (long) (-113);
      longArray0[6] = (long) (-1338);
      longArray0[7] = (long) 559;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 8L);
      assertEquals(8, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {8L, (-2608L), (-1338L), 8L, (-2391L), (-113L), (-1338L), 559L}, longArray0);
      
      Object object0 = ArrayUtils.removeAll(objectArray0[0], bitSet0);
      assertEquals(4, objectArray0.length);
      assertEquals(8, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertNull(object0);
      assertArrayEquals(new long[] {8L, (-2608L), (-1338L), 8L, (-2391L), (-113L), (-1338L), 559L}, longArray0);
      
      objectArray0[1] = null;
      Object object1 = ArrayUtils.removeAll(object0, bitSet0);
      assertEquals(4, objectArray0.length);
      assertEquals(8, longArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertNull(object1);
      assertArrayEquals(new long[] {8L, (-2608L), (-1338L), 8L, (-2391L), (-113L), (-1338L), 559L}, longArray0);
      
      objectArray0[2] = null;
      Double double0 = new Double((-2391));
      assertNotNull(double0);
      assertEquals((-2391.0), (double)double0, 0.01);
      
      Object object2 = ArrayUtils.get(objectArray0, (-607), (Object) double0);
      assertEquals(4, objectArray0.length);
      assertNotNull(object2);
      assertEquals((-2391.0), object2);
      
      objectArray0[3] = object2;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(4, objectArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[2] = ' ';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'P';
      floatArray0[1] = (float) 'P';
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'P';
      floatArray0[4] = (float) ' ';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {80.0F, 80.0F, 105.0F, 80.0F, 32.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {80.0F, 80.0F, 105.0F, 80.0F, 32.0F}, floatArray1, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) ' ';
      longArray0[2] = (long) 'P';
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {32L, 0L, 80L}, longArray1);
      assertArrayEquals(new long[] {32L, 0L, 80L}, longArray0);
      
      ArrayUtils.shift(charArray0, (-2134145239), (-2134145239), (-551));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'P', '\u0000', ' ', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2727);
      shortArray0[1] = (short) (-15);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-319));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) (short) (-15));
      assertNull(doubleArray0);
      
      Boolean boolean0 = Boolean.valueOf("]ka&?`+k-[xU[,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-6232));
      assertEquals(3, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-6232), (short) (-2727), (short) (-15)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)1935, (int) (short) (-319));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(int1 == int0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 6;
      intArray0[2] = 2340;
      intArray0[3] = 4;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 3498, (-1619));
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {5, 6, 2340, 4}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1935;
      shortArray0[1] = (short)1935;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1935);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1935, (short)1935}, shortArray0);
      assertArrayEquals(new short[] {(short)1935, (short)1935, (short)1935}, shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray1, (short)1935, 2056);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertArrayEquals(new short[] {(short)1935, (short)1935}, shortArray0);
      assertArrayEquals(new short[] {(short)1935, (short)1935, (short)1935}, shortArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.1}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[1] = true;
      booleanArray0[6] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)37;
      shortArray0[1] = (short) (-6232);
      shortArray0[2] = (short)1935;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)37);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)37, (short) (-6232), (short)1935}, shortArray0);
      assertArrayEquals(new short[] {(short)37, (short)37, (short) (-6232), (short)1935}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-6232), (int) (short)37);
      assertEquals(3, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)37, (short) (-6232), (short)1935}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2657L;
      longArray0[1] = 2514L;
      longArray0[2] = (-4755L);
      ArrayUtils.reverse(longArray0, (-2146715872), (-2144842708));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2657L, 2514L, (-4755L)}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '@';
      ArrayUtils.reverse(charArray0, (-384), (-5659));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'@', '@'}, charArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte) (-109);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-83), (byte)91, (byte) (-66), (byte) (-1), (byte)97, (byte)103, (byte)17, (byte) (-109)}, byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-83), (byte)91, (byte) (-66), (byte) (-1), (byte)97, (byte)103, (byte)17, (byte) (-109)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("o)`iz,eFrqV/|7|X");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("o)`iz,eFrqV/|7|X");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "o)`iz,eFrqV/|7|X";
      stringArray0[1] = "o)`iz,eFrqV/|7|X";
      stringArray0[3] = "o)`iz,eFrqV/|7|X";
      stringArray0[4] = "o)`iz,eFrqV/|7|X";
      stringArray0[5] = "o)`iz,eFrqV/|7|X";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "_}.gSZ$I");
      assertEquals(6, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      ArrayUtils.shift((char[]) null, (-809));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      long[] longArray0 = new long[9];
      longArray0[0] = (-587L);
      longArray0[1] = 1350L;
      longArray0[2] = 1251L;
      longArray0[3] = 1784L;
      longArray0[4] = 1L;
      longArray0[5] = 2894L;
      longArray0[6] = 0L;
      longArray0[7] = (-451L);
      longArray0[8] = (-2167L);
      int int0 = ArrayUtils.indexOf(longArray0, 59L);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-587L), 1350L, 1251L, 1784L, 1L, 2894L, 0L, (-451L), (-2167L)}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1573));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap((Object[]) null, (-2111), (-2111));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.Byte";
      stringArray0[1] = ">X6&H";
      stringArray0[2] = "`<=,#]5IgWo<E";
      stringArray0[3] = "on";
      stringArray0[4] = "array";
      stringArray0[5] = ")C1OH0)1,";
      stringArray0[6] = "u*r";
      stringArray0[7] = ", Length: 0";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "`<=,#]5IgWo<E");
      assertEquals(8, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Character[] characterArray0 = new Character[2];
      char char0 = 't';
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      ArrayUtils.swap((int[]) null, 0, (-138), 0);
      char[] charArray0 = new char[1];
      charArray0[0] = char0;
      int int0 = ArrayUtils.lastIndexOf(charArray0, 't', (-406));
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'t'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 't';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {116.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {116.0F}, floatArray1, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[1];
      booleanArray2[0] = (Boolean) true;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertEquals(1, booleanArray3.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 't');
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'t'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'true', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) arrayUtils0.EMPTY_STRING_ARRAY, (Object) arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, 1321, 1321);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'g';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\'');
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'g'}, charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'g'}, charArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'f';
      longArray0[1] = (long) 'f';
      longArray0[2] = (long) 'f';
      longArray0[3] = (long) 'f';
      longArray0[4] = (long) 'f';
      longArray0[5] = (long) 'f';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {102L, 102L, 102L, 102L, 102L, 102L}, longArray1);
      assertArrayEquals(new long[] {102L, 102L, 102L, 102L, 102L, 102L}, longArray0);
      
      ArrayUtils.reverse((Object[]) null);
      Float float0 = new Float(3440.2138);
      assertNotNull(float0);
      assertEquals(3440.2139F, (float)float0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) float0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)49);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1856.525F), 103);
      assertEquals(6, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'C');
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 10;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-2145821507);
      intArray0[3] = 2140020603;
      intArray0[4] = (int) (byte)5;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)5;
      intArray0[7] = 10;
      intArray0[8] = 2140020603;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 10);
      assertEquals(8, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, (-2145821507), 2140020603, 5, 0, 5, 2140020603}, intArray1);
      assertArrayEquals(new int[] {0, 0, (-2145821507), 2140020603, 5, 0, 5, 10, 2140020603}, intArray0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'P';
      floatArray0[1] = (float) 'P';
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'P';
      floatArray0[4] = (float) ' ';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {80.0F, 80.0F, 105.0F, 80.0F, 32.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {80.0F, 80.0F, 105.0F, 80.0F, 32.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2140020603);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'P';
      floatArray0[1] = (float) 'P';
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'P';
      floatArray0[4] = (float) ' ';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {80.0F, 80.0F, 105.0F, 80.0F, 32.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {80.0F, 80.0F, 105.0F, 80.0F, 32.0F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) 'P';
      longArray0[2] = (long) 'P';
      longArray0[3] = (-2147483648L);
      longArray0[4] = (long) 'P';
      longArray0[5] = (long) 'P';
      longArray0[6] = (long) 'P';
      longArray0[7] = (long) '\u0000';
      longArray0[8] = (long) 'i';
      ArrayUtils.swap(longArray0, (int) '\u0000', (int) '\u0000');
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {32L, 80L, 80L, (-2147483648L), 80L, 80L, 80L, 0L, 105L}, longArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2140020603);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-160L);
      doubleArray0[2] = (double) (-160L);
      doubleArray0[3] = 22.790659;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, 1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, (-160.0), (-160.0), 22.790659, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap((Object[]) null, 1, 8);
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, (-160.0), (-160.0), 22.790659, 1.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, (-160.0), (-160.0), 22.790659, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray3 = ArrayUtils.clone(doubleArray0);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, (-160.0), (-160.0), 22.790659, 1.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0, (-160.0), (-160.0), 22.790659, 1.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(longArray0, 1, 1, (-1011));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-160L), 0L}, longArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-11);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)32, (-1));
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)96, (byte)3, (byte) (-11)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (-1660.93973530215);
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 9;
      doubleArray0[7] = (double) 9;
      doubleArray0[8] = (double) 9;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, 9);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.0, 9.0, (-1660.93973530215), 9.0, 9.0, 9.0, 9.0, 9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {9.0, 9.0, (-1660.93973530215), 9.0, 9.0, 9.0, 9.0, 9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.0, 9.0, (-1660.93973530215), 9.0, 9.0, 9.0, 9.0, 9.0, 9.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1011);
      longArray0[1] = (long) (-1011);
      longArray0[2] = (long) 1;
      ArrayUtils.swap(longArray0, (-2146715872), (-1011), 9);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1011L), (-1011L), 1L}, longArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1011L), 1L, (-1011L)}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)32, 143);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      intArray0[2] = 358;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 54, 358}, intArray0);
      assertArrayEquals(new int[] {0, 54, 358}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      Integer integer0 = new Integer(358);
      assertNotNull(integer0);
      assertEquals(358, (int)integer0);
      
      int[] intArray2 = ArrayUtils.toPrimitive((Integer[]) null, 74);
      assertNull(intArray2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 54;
      floatArray0[1] = (-3171.42F);
      floatArray0[2] = (float) (short) (-2313);
      floatArray0[3] = Float.NaN;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, Float.NaN);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {54.0F, (-3171.42F), (-2313.0F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 54.0F, (-3171.42F), (-2313.0F), Float.NaN}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {54.0F, (-3171.42F), (-2313.0F), Float.NaN}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 54.0F, (-3171.42F), (-2313.0F), Float.NaN}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1514));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (int) (short) (-1514), Integer.MAX_VALUE);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Character character0 = Character.valueOf(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_FLOAT_ARRAY, 1.0F);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1), Integer.MAX_VALUE, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, ',');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[0];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1506;
      shortArray0[3] = (short)1015;
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(']');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('J');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('J', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('W');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('W', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1), (int) character2);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character3));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      boolean boolean0 = ArrayUtils.contains(charArray0, ']');
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.insert(4305, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      char[] charArray0 = new char[0];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3381);
      shortArray0[3] = (short)1015;
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(']');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('J');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('J', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('W');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('W', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1), (int) character2);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character3));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      boolean boolean0 = ArrayUtils.contains(charArray0, ']');
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2727);
      shortArray0[1] = (short) (-15);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-319));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) (short) (-15));
      assertNull(doubleArray0);
      
      Boolean boolean0 = Boolean.valueOf("]ka&?`+k-[xU[,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, (double) (-160L));
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-160.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-160L);
      doubleArray2[1] = (double) (short) (-2727);
      ArrayUtils.shift(doubleArray2, (int) (short) (-319));
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2727.0), (-160.0)}, doubleArray2, 0.01);
      
      Double[] doubleArray3 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (-1416.0);
      doubleArray0[4] = (-2330.96);
      doubleArray0[5] = 1455.18747;
      doubleArray0[6] = 941.8481;
      doubleArray0[7] = (-2330.96);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 286.749);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1416.0), (-2330.96), 1455.18747, 941.8481, (-2330.96)}, doubleArray0, 0.01);
      
      ArrayUtils.shuffle((Object[]) byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      Float float0 = new Float(1455.18747);
      assertNotNull(float0);
      assertEquals(1455.1875F, (float)float0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSameType(byte3, float0);
      assertFalse(boolean1 == boolean0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, (-603.8486743279881), (double) 0L);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1416.0), (-2330.96), 1455.18747, 941.8481, (-2330.96)}, doubleArray0, 0.01);
      
      byte byte4 = (byte) (-1);
      Byte byte5 = new Byte((byte) (-1));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte) (-1), (byte)byte5);
      
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotSame(longArray0, longArray1);
      assertNotNull(bitSet0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte5, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-4795), (-4795));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Long long0 = new Long((-160L));
      assertNotNull(long0);
      assertEquals((-160L), (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) long0, 765);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-160L);
      doubleArray0[2] = (double) (-4795);
      doubleArray0[3] = (double) 765;
      doubleArray0[4] = (double) (-160L);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 765, 0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-160.0), (-4795.0), 765.0, (-160.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-38L));
      assertNull(longArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-4795), 4);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      
      Long long0 = new Long((-38L));
      assertNotNull(long0);
      assertEquals((-38L), (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) long0, 765);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      ArrayUtils.swap(intArray0, (int) (short)0, (-84), (int) (short)0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)111;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)44;
      floatArray0[1] = (float) (byte)111;
      floatArray0[2] = (float) (byte)88;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1614.9445F;
      floatArray0[6] = (float) (byte)88;
      floatArray0[7] = (float) (byte)44;
      floatArray0[8] = 0.0F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 44.0F, 88.0F, 0.0F, 1614.9445F, 0.0F, 88.0F, 111.0F, 44.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      intArray0[2] = 371;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 54, 371}, intArray0);
      assertArrayEquals(new int[] {0, 54, 371}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      shortArray0[5] = (short) (-1);
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)0;
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '3';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'l');
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'3', '3'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      char[] charArray0 = new char[0];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3381);
      shortArray0[3] = (short)1015;
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      Character character1 = new Character(']');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      
      Character character2 = new Character('J');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('J', (char)character2);
      
      Character character3 = new Character('W');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('W', (char)character3);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, ']');
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1.5);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[0];
      char char0 = '-';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 2, '-');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character character2 = Character.valueOf('`');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('`', (char)character2);
      
      Long long0 = new Long((-1160L));
      assertNotNull(long0);
      assertEquals((-1160L), (long)long0);
      
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      Long long2 = new Long((-1238L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1238L), (long)long2);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = long2;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1238L)}, longArray2);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      long[] longArray3 = ArrayUtils.removeAllOccurences(longArray0, 2L);
      assertEquals(8, longArray0.length);
      assertEquals(5, longArray3.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertArrayEquals(new long[] {(-4529L), 2L, 0L, 2L, (-4529L), (-1160L), 2L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-4529L), 0L, (-4529L), (-1160L), 0L}, longArray3);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3802.0F);
      floatArray0[6] = 1263.8828F;
      floatArray0[7] = 5353.11F;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, (-3802.0F), 1263.8828F, 5353.11F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 2);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 2;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-2950);
      longArray0[1] = (-1959L);
      longArray0[2] = (-1959L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2950L);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2950.0));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2950.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2950.0), (-2950.0)}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) (short) (-2950);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertEquals(4, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0, (-2950)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1276);
      floatArray0[1] = (-3368.004F);
      ArrayUtils.shift(floatArray0, (-2703));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1276.0F), (-3368.004F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (int) (short)90);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1276.0F), (-3368.004F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3368.004F);
      doubleArray0[1] = (double) (-1276.0F);
      doubleArray0[2] = (double) (-2703);
      doubleArray0[3] = (double) (-1276);
      doubleArray0[4] = (double) (-1276.0F);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1560L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1560L);
      assertEquals(1, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1560L}, longArray0);
      
      int[] intArray0 = new int[12];
      intArray0[0] = 78;
      intArray0[1] = (-467);
      intArray0[2] = 0;
      ArrayUtils.shift(intArray0, (-467), (-759), 0);
      assertEquals(12, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'I';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'a');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'a', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'a', 'a', 'I', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 78;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 'I';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-467), (double) 78);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {78.0, 0.0, 0.0, 73.0}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-467));
      assertEquals(4, doubleArray0.length);
      assertEquals(3, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{1, 2}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {78.0, 0.0, 0.0, 73.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 78;
      floatArray0[1] = (float) 78;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, (-467));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)90;
      ArrayUtils.shift(floatArray0, 30);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      floatArray0[7] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1156.866F));
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray1, 0.01F);
      
      Random.setNextRandom((-508));
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1797.8890382);
      doubleArray0[1] = (-830.37756292);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) (-2134145239);
      floatArray0[3] = (float) (-2134145239);
      ArrayUtils.swap(floatArray0, (-2145357442), (-2145357442), (-2134145239));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {4.0F, 4.0F, (-2.13414528E9F), (-2.13414528E9F)}, floatArray0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1797.8890382), (-830.37756292), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1797.8890382), (-830.37756292)}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1885);
      shortArray0[1] = (short) (-1885);
      shortArray0[2] = (short) (-1885);
      shortArray0[3] = (short) (-1885);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1885));
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1885), (short) (-1885), (short) (-1885), (short) (-1885)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 4);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shift((Object[]) null, (-3478));
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertEquals(4, booleanArray2.length);
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-53);
      Byte byte1 = new Byte((byte) (-53));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-53), (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte3);
      
      byteArray0[1] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-1)}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (byte) (-53));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) byte2;
      floatArray0[1] = (float) byte2;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) byte2;
      floatArray0[4] = (float) byte0;
      ArrayUtils.swap(floatArray0, (-825), (int) byte2, 1);
      assertEquals(5, floatArray0.length);
      assertFalse(byte2 == byte0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-53.0F), (-1.0F), (-53.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = boolean1;
      booleanArray1[1] = boolean0;
      booleanArray1[2] = boolean0;
      booleanArray1[3] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray1[4] = boolean2;
      booleanArray1[5] = boolean1;
      booleanArray1[6] = boolean0;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = boolean1;
      Boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, boolean1);
      assertEquals(5, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 466;
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = (long) (int)integerArray0[0];
      longArray0[3] = (long) (int)integerArray0[0];
      longArray0[4] = (long) (int)integerArray0[0];
      longArray0[5] = (long) (int)integerArray0[0];
      longArray0[6] = (long) (int)integerArray0[0];
      longArray0[7] = (long) 466;
      int int0 = ArrayUtils.indexOf(longArray0, 1918L, 2);
      assertEquals(8, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {466L, 466L, 466L, 466L, 466L, 466L, 466L, 466L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Character[] characterArray0 = new Character[7];
      char char0 = 'Y';
      Character character0 = Character.valueOf('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('Y');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('Y', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('p');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('p', (char)character2);
      
      characterArray0[2] = character2;
      char char1 = 'm';
      Character character3 = Character.valueOf('m');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('m', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('H');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)char1));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertEquals('H', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('e');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertEquals('e', (char)character5);
      
      characterArray0[5] = character5;
      char char2 = 'W';
      Character character6 = Character.valueOf('W');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character1));
      assertEquals('W', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (char)character5;
      intArray0[1] = (int) 'W';
      intArray0[2] = (int) char1;
      intArray0[3] = (int) 'W';
      intArray0[4] = (int) char2;
      intArray0[5] = (int) (char)character5;
      boolean boolean0 = ArrayUtils.contains(intArray0, 87);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {101, 87, 109, 87, 87, 101}, intArray0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (int) character1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)char2));
      assertFalse(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character5));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {101, 87, 109, 87, 87, 101}, intArray0);
      assertArrayEquals(new int[] {101, 87, 109, 87, 87, 101, 89}, intArray1);
      
      Integer integer0 = new Integer(char0);
      assertNotNull(integer0);
      assertFalse(char0 == char2);
      assertFalse(char0 == char1);
      assertEquals(89, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "3FWra");
      assertNotNull(string0);
      assertFalse(char0 == char2);
      assertFalse(char0 == char1);
      assertEquals("89", string0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 101;
      integerArray0[1] = (Integer) 101;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, (-1191));
      assertEquals(2, intArray2.length);
      assertEquals(2, integerArray0.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {101, 101}, intArray2);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1109L;
      longArray0[1] = 0L;
      longArray0[6] = (-2376L);
      ArrayUtils.shift((byte[]) null, (-2779), (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 5664;
      int int1 = (-979);
      ArrayUtils.shift((byte[]) null, 5664, (-979), (-2167));
      ArrayUtils.reverse((float[]) null);
      Integer[] integerArray0 = new Integer[1];
      int int2 = 3198;
      Integer integer0 = new Integer(3198);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertEquals(3198, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2167);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1419));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1419, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2146318939));
      assertNotNull(integer0);
      assertEquals((-2146318939), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2146318939));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2146318939), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(512);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(512, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(4, integerArray0.length);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-2146318939), (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2146318939), (-2146318939), 512, (-2146318939)}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '2';
      charArray0[2] = '4';
      charArray0[3] = 'D';
      charArray0[4] = 'E';
      charArray0[5] = 'Q';
      Short short0 = new Short((short) (-557));
      assertNotNull(short0);
      assertEquals((short) (-557), (short)short0);
      
      Short short1 = new Short((short) (-557));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-557), (short)short1);
      
      Short short2 = new Short((short)246);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)246, (short)short2);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)52, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2727), (int) (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.swap((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, 2980, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      MutableInt mutableInt0 = new MutableInt((int) (byte) (-112));
      assertEquals((-112), (int)mutableInt0.getValue());
      assertEquals((byte) (-112), mutableInt0.byteValue());
      assertEquals((-112), (int)mutableInt0.toInteger());
      assertEquals((short) (-112), mutableInt0.shortValue());
      assertEquals((-112.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-112", mutableInt0.toString());
      assertEquals((-112.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-112), mutableInt0.intValue());
      assertEquals((-112L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (byte)52, 1293);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)74;
      doubleArray0[1] = (double) (byte)74;
      doubleArray0[2] = (double) (byte)74;
      Long long0 = new Long((-903L));
      assertNotNull(long0);
      assertEquals((-903L), (long)long0);
      
      Object object0 = ArrayUtils.get((Object[]) null, (int) 74, (Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte)74, object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object2);
      assertTrue(byte1.equals((Object)object0));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object2.equals((Object)byte0));
      assertTrue(object2.equals((Object)object0));
      assertEquals((byte)74, object2);
      
      Object object3 = ArrayUtils.toPrimitive((Object) 74.0);
      assertNotNull(object3);
      assertEquals(74.0, object3);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (byte)74);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {74.0, 74.0, 74.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 54;
      floatArray0[2] = (float) 'n';
      ArrayUtils.shift(floatArray0, 338, (-4683), (-1059));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 54.0F, 110.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = 712.36584F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte)2);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.0F, 2.0F, 712.36584F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {712.36584F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 712.36584F;
      objectArray0[1] = (Object) 2.0F;
      objectArray0[2] = (Object) 2.0F;
      objectArray0[3] = (Object) 2.0F;
      objectArray0[4] = (Object) 2.0F;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (byte) (-102);
      shortArray0[2] = (short) (byte)2;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte)2);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-102), (short)2}, shortArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'z');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) (byte)5, (-1063));
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(bitSet0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((long[]) null, 103, (int) (byte)5);
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4244);
      shortArray0[1] = (short) (-1635);
      shortArray0[2] = (short) (-319);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)761;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)605);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-4244), (short) (-1635), (short) (-319), (short)0, (short)761}, shortArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'z');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-4244);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {(-4244L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte3);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 57.0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 178.63;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) byte0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2427.0, (-548));
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {57.0, 0.0, 0.0, 178.63, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, 1431655765, 10, (-1607));
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'F';
      charArray0[2] = 'g';
      charArray0[3] = 'G';
      ArrayUtils.shift(charArray0, 1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'G', 'g', 'F', 'g'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'g';
      floatArray0[1] = (float) 'g';
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {103.0F, 103.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {103.0F, 103.0F}, floatArray1, 0.01F);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)54);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)54}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, (-467));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1316.0F;
      floatArray0[1] = 1316.0F;
      floatArray0[2] = (float) (-467);
      floatArray0[3] = (float) (-467L);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 371.912F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1316.0F, 1316.0F, (-467.0F), (-467.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1316.0F, 1316.0F, (-467.0F), (-467.0F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[2] = 'n';
      ArrayUtils.shift(floatArray0, (-467), 338, (-467));
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-467.0F), 1316.0F, 1316.0F, (-467.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)2);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)39, (byte)2, (byte) (-31), (byte) (-31), (byte)1, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)39, (byte)2, (byte)113, (byte) (-31), (byte) (-31), (byte)1, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 371.912F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-2778));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {371.912F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {371.912F}, floatArray1, 0.01F);
      
      ArrayUtils.shift((float[]) null, (-2778), (-2778), 338);
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray2);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-3982);
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ')', (-2148));
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      ArrayUtils.swap((int[]) null, 0, (-138), 0);
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 826, (-1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 't', (-406));
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '\"';
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), (float) 826);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double double0 = (-1416.0);
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1449.517482266, (-3625.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((long[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-153);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-153);
      floatArray0[4] = (float) (short) (-153);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2330.96);
      doubleArray0[1] = (double) (short)0;
      double double0 = (-1416.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-153.0F), (-1416.0));
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2330.96), 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[4];
      shortArray0[0] = (short)0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (short)0;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(objectArray0[1], objectArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-12));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-12);
      ArrayUtils.swap((float[]) null, (-12), (-1), (-12));
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-958.0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-12.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-12.0), 0.0, 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1885);
      shortArray0[1] = (short) (-1885);
      shortArray0[2] = (short) (-1885);
      shortArray0[3] = (short) (-1885);
      shortArray0[4] = (short) (-1885);
      shortArray0[5] = (short) (-1885);
      shortArray0[6] = (short) (-1885);
      shortArray0[7] = (short) (-1885);
      ArrayUtils.swap(doubleArray0, 2147078613, (int) (short) (-1885), (int) (short) (-1885));
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-12.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 6;
      intArray0[2] = 2340;
      intArray0[3] = 4;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 3498, (-1619));
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {5, 6, 2340, 4}, intArray0);
      
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character1;
      Character character2 = new Character((char) character1);
      assertNotNull(character2);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('4', (char)character2);
      
      characterArray0[3] = character2;
      Character character3 = new Character('f');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('f', (char)character3);
      
      characterArray0[4] = character3;
      characterArray0[5] = character0;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (int) character2, 5);
      assertEquals(0, characterArray1.length);
      assertEquals(6, characterArray0.length);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character3));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2340, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-1613), (-1613), (-19));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) 4;
      longArray0[2] = (long) (-1613);
      longArray0[3] = (long) (short) (-2313);
      long[] longArray1 = ArrayUtils.insert(4, longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 4L, (-1613L), (-2313L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 4L, (-1613L), (-2313L), (-1L), 4L, (-1613L), (-2313L)}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 4, (-1613));
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)2, (int) (byte) (-102));
      assertNull(doubleArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte) (-102));
      assertEquals((-102.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-102), (int)mutableInt0.toInteger());
      assertEquals((-102), (int)mutableInt0.getValue());
      assertEquals((byte) (-102), mutableInt0.byteValue());
      assertEquals((short) (-102), mutableInt0.shortValue());
      assertEquals("-102", mutableInt0.toString());
      assertEquals((-102L), mutableInt0.longValue());
      assertEquals((-102), mutableInt0.intValue());
      assertEquals((-102.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((-102.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-102), (int)mutableInt0.toInteger());
      assertEquals((-102), (int)mutableInt0.getValue());
      assertEquals((byte) (-102), mutableInt0.byteValue());
      assertEquals((short) (-102), mutableInt0.shortValue());
      assertEquals("-102", mutableInt0.toString());
      assertEquals((-102L), mutableInt0.longValue());
      assertEquals((-102), mutableInt0.intValue());
      assertEquals((-102.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-102), (int)mutableInt1.toInteger());
      assertEquals((byte) (-102), mutableInt1.byteValue());
      assertEquals((-102), (int)mutableInt1.getValue());
      assertEquals((-102.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-102", mutableInt1.toString());
      assertEquals((-102), mutableInt1.intValue());
      assertEquals((short) (-102), mutableInt1.shortValue());
      assertEquals((-102L), mutableInt1.longValue());
      assertEquals((-102.0F), mutableInt1.floatValue(), 0.01F);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      Object object0 = ArrayUtils.get((Object[]) null, 1503);
      assertNull(object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (int) 2);
      assertNull(object1);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'Y';
      charArray0[2] = '6';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'e', 'Y', '6'}, charArray0);
      
      ArrayUtils.swap(byteArray0, 99, 0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) 0, 1503);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) "K)1IS.`NM");
      assertNotNull(object1);
      assertEquals("K)1IS.`NM", object1);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1573));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1573), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-4085));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-4085), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = ArrayUtils.get(integerArray0, (int) integerArray0[1]);
      assertEquals(3, integerArray0.length);
      assertNull(integer3);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1573);
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (int)integerArray0[0];
      floatArray0[5] = (float) (int)integerArray0[0];
      floatArray0[6] = (float) (int)integerArray0[2];
      floatArray0[7] = (float) (int)integerArray0[1];
      floatArray0[8] = (float) (int)integerArray0[1];
      ArrayUtils.shift(floatArray0, (int) integerArray0[2], (-4085), 383);
      assertEquals(9, floatArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new float[] {(-1573.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-4085.0F), (-1573.0F), (-1573.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) 383);
      assertNull(longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-4085);
      intArray0[1] = (-4085);
      intArray0[2] = (-105);
      intArray0[3] = 903;
      intArray0[4] = (int) (byte) (-102);
      intArray0[5] = (int) integerArray0[0];
      intArray0[6] = (-1573);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1573), 0, (-102), 903, (-105), (-4085), (-4085)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, (-467));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1316.0F;
      floatArray0[1] = 1316.0F;
      floatArray0[2] = (float) (-467);
      floatArray0[3] = (float) (-467L);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 371.912F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1316.0F, 1316.0F, (-467.0F), (-467.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1316.0F, 1316.0F, (-467.0F), (-467.0F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ')';
      charArray0[2] = 'n';
      ArrayUtils.shift(floatArray0, (-467), 338, (-467));
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-467.0F), 1316.0F, 1316.0F, (-467.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[5];
      longArray0[0] = 4L;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4L, 2L, 2L, 2L, 2L}, longArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      ArrayUtils.reverse(charArray0, (-384), 4);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-153);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-153);
      floatArray0[4] = (float) (short) (-153);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (int) (short)0, 4, (-2134145239));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-153.0F), 0.0F, 0.0F, (-153.0F), (-153.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1407.5668378450837);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1885));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2134145239);
      ArrayUtils.shift(longArray0, (-2091));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2134145239L)}, longArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-153.0F);
      objectArray0[1] = (Object) (-153.0F);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      ArrayUtils.shift(objectArray0, 4);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (-1660.93973530215);
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 9;
      doubleArray0[7] = (double) 9;
      doubleArray0[8] = (double) 9;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, 9);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.0, 9.0, (-1660.93973530215), 9.0, 9.0, 9.0, 9.0, 9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap((Object[]) null, 2, 9);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {9.0, 9.0, (-1660.93973530215), 9.0, 9.0, 9.0, 9.0, 9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.0, 9.0, (-1660.93973530215), 9.0, 9.0, 9.0, 9.0, 9.0, 9.0}, doubleArray2, 0.01);
      
      double[] doubleArray3 = ArrayUtils.clone(doubleArray0);
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {9.0, 9.0, (-1660.93973530215), 9.0, 9.0, 9.0, 9.0, 9.0, 9.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {9.0, 9.0, (-1660.93973530215), 9.0, 9.0, 9.0, 9.0, 9.0, 9.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 8, 8, 2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-93.0F);
      floatArray0[1] = 2770.326F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 619.431F;
      floatArray0[4] = (-1240.0F);
      floatArray0[5] = (-2471.354F);
      floatArray0[6] = (-28293.0F);
      floatArray0[7] = 122.50729F;
      floatArray0[8] = (-653.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 122.50729F);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-93.0F), 2770.326F, 1.0F, 619.431F, (-1240.0F), (-2471.354F), (-28293.0F), 122.50729F, (-653.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-93.0F), 2770.326F, 1.0F, 619.431F, (-1240.0F), (-2471.354F), (-28293.0F), (-653.0F)}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) (-28293.0F);
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) (-2471.354F);
      MutableInt mutableInt0 = new MutableInt(122.50729F);
      assertEquals(122, mutableInt0.intValue());
      assertEquals(122L, mutableInt0.longValue());
      assertEquals((short)122, mutableInt0.shortValue());
      assertEquals(122, (int)mutableInt0.getValue());
      assertEquals(122, (int)mutableInt0.toInteger());
      assertEquals((byte)122, mutableInt0.byteValue());
      assertEquals(122.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("122", mutableInt0.toString());
      assertEquals(122.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) mutableInt0);
      assertEquals(4, objectArray0.length);
      assertEquals(122, mutableInt0.intValue());
      assertEquals(122L, mutableInt0.longValue());
      assertEquals((short)122, mutableInt0.shortValue());
      assertEquals(122, (int)mutableInt0.getValue());
      assertEquals(122, (int)mutableInt0.toInteger());
      assertEquals((byte)122, mutableInt0.byteValue());
      assertEquals(122.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("122", mutableInt0.toString());
      assertEquals(122.0, mutableInt0.doubleValue(), 0.01);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-102);
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte) (-102);
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)2;
      floatArray0[7] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 483.5621F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-102.0F), 2.0F, 2.0F, (-102.0F), 2.0F, 0.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-102.0F), 2.0F, 2.0F, (-102.0F), 2.0F, 0.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.add((float[]) null, (int) (byte)0, (-3259.5215F));
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-3259.5215F)}, floatArray2, 0.01F);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'R');
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray2 = new Boolean[3];
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray2[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray2[1] = boolean1;
      Boolean boolean2 = new Boolean("g8ltQS:M7:B{)Cm=_[");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray2[2] = boolean2;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertEquals(3, booleanArray3.length);
      assertEquals(3, booleanArray2.length);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
      assertNotNull(booleanArray3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R', (-2778));
      assertEquals(0, charArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (byte) (-110));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray2);
      
      ArrayUtils.shift(booleanArray0, (-1), (-2778), (-1));
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean3 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 466;
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      byte byte0 = (byte) (-96);
      short[] shortArray0 = null;
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float((float) (byte) (-96));
      assertNotNull(float0);
      assertEquals((-96.0F), (float)float0, 0.01F);
      
      ArrayUtils.shift((short[]) null, (int) (byte) (-96));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 466, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      String[] stringArray0 = new String[0];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3805.8F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 471.01F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-3805.8F), 1.0F, 0.0F, 471.01F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3805.8F), 1.0F, 0.0F, 471.01F, (-3805.8F), 1.0F, 0.0F, 471.01F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2657L;
      byte byte0 = (byte) (-96);
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float((float) 2657L);
      assertNotNull(float0);
      assertEquals(2657.0F, (float)float0, 0.01F);
      
      ArrayUtils.shift((short[]) null, 920);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-96);
      intArray0[1] = (int) (byte) (-96);
      intArray0[2] = 920;
      intArray0[3] = (int) (byte) (-96);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 920, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1109L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = 2248L;
      longArray0[5] = 1023L;
      longArray0[6] = 1056L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-4529), (-4529));
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1109L, 0L, 0L, (-1L), 2248L, 1023L, 1056L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1109L;
      longArray0[1] = 0L;
      longArray0[2] = (-2376L);
      longArray0[3] = (-1L);
      longArray0[4] = 2248L;
      longArray0[5] = 1023L;
      longArray0[6] = 1056L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-4529), 0);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1109L, 0L, (-2376L), (-1L), 2248L, 1023L, 1056L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Integer integer0 = new Integer((-1556));
      assertNotNull(integer0);
      assertEquals((-1556), (int)integer0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 92;
      intArray0[1] = (-1556);
      intArray0[2] = 8;
      intArray0[3] = (-3179);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      int[] intArray0 = new int[6];
      int int0 = (-2391);
      intArray0[0] = (-2391);
      int int1 = 8;
      intArray0[1] = 8;
      intArray0[2] = 508;
      int int2 = 556;
      intArray0[3] = 556;
      int int3 = (-1338);
      intArray0[4] = (-1338);
      intArray0[5] = (-113);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 556, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'P';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'P';
      doubleArray0[1] = (double) 'P';
      doubleArray0[2] = (double) 80.0F;
      doubleArray0[3] = (double) 'P';
      doubleArray0[4] = (double) 'P';
      doubleArray0[5] = (double) 'P';
      doubleArray0[6] = (double) 'i';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 105.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 80.0F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)145);
      assertNotNull(short0);
      assertEquals((short)145, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1, (short)short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1033;
      floatArray0[1] = (float) 1033;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 224.2F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1033.0F, 1033.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1033.0F, 1033.0F, 224.2F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1033;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1033.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      shortArray0[5] = (short)0;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = (Short) (short)0;
      shortArray1[3] = (Short) (short)0;
      shortArray1[4] = (Short) (short)0;
      shortArray1[5] = (Short) (short)0;
      shortArray1[6] = (Short) (short)0;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) short0;
      floatArray0[1] = (float) short0;
      floatArray0[2] = (float) short0;
      floatArray0[3] = (float) short0;
      floatArray0[4] = (float) short0;
      floatArray0[5] = (float) short0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) short0);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) short0;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) short0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      doubleArray0[8] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object object2 = ArrayUtils.get((Object[]) stringArray0, 1790);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNull(object2);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '6';
      charArray0[2] = 'Y';
      charArray0[3] = '$';
      charArray0[4] = 'T';
      charArray0[5] = 'e';
      charArray0[6] = 'J';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'{', '6', 'Y', '$', 'T', 'e', 'J'}, charArray0);
      
      ArrayUtils.swap((byte[]) null, 59, (-1807));
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) "K)1IS.`NM");
      assertNotNull(object1);
      assertEquals("K)1IS.`NM", object1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1212, 508);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('F');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('F', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, 1412, (int) 0);
      assertEquals(2, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte)43;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('W');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('W', (char)character1);
      
      Character character2 = new Character('`');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('`', (char)character2);
      
      Character character3 = new Character('G');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('G', (char)character3);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (int) 43, (int) 43);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long((-1160L));
      assertNotNull(long0);
      assertEquals((-1160L), (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-4529), (Object) long0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1160L), object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object2);
      assertEquals((-1160L), object2);
      
      Object object3 = ArrayUtils.get(objectArray0, (int) 2);
      assertEquals(0, objectArray0.length);
      assertNull(object3);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1160L), (-2322));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-2322);
      longArray0[2] = (long) (-4529);
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (-643L);
      longArray0[6] = (long) (byte)2;
      longArray0[7] = (-1160L);
      ArrayUtils.reverse(longArray0, (-4529), 5807);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1160L), 2L, (-643L), 2L, 2L, (-4529L), (-2322L), (-1L)}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1160L), 2L, (-643L), 2L, 2L, (-4529L), (-2322L), (-1L)}, longArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2322L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (-4529);
      floatArray0[3] = (float) 2L;
      floatArray0[4] = (float) (-1160L);
      floatArray0[5] = (float) 2L;
      floatArray0[6] = (float) (short)2;
      floatArray0[7] = (float) (short)2;
      ArrayUtils.shift(floatArray0, (-2322));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-4529.0F), 2.0F, (-1160.0F), 2.0F, 2.0F, 2.0F, (-2322.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-12));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-12);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-12);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2330.96), 0.0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-12.0), (-1.0), (-12.0)}, doubleArray0, 0.01);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-12);
      longArray0[2] = (long) (-12);
      longArray0[3] = (long) (-12);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      ArrayUtils.reverse(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-12L), (-12L), (-12L), (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, (-467));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1316.0F;
      floatArray0[1] = 1316.0F;
      floatArray0[2] = (float) (-467);
      floatArray0[3] = (float) (-467L);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 371.912F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1316.0F, 1316.0F, (-467.0F), (-467.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1316.0F, 1316.0F, (-467.0F), (-467.0F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ')';
      charArray0[2] = 'n';
      charArray0[3] = '[';
      charArray0[4] = '(';
      charArray0[5] = 'g';
      int int0 = ArrayUtils.indexOf(charArray0, 'g', 1509);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\\', ')', 'n', '[', '(', 'g'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-121);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-121), (int) (byte) (-121));
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-121)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('^');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('^', (char)character1);
      
      Character character2 = Character.valueOf('m');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('m', (char)character2);
      
      Character character3 = new Character('4');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('4', (char)character3);
      
      Double[] doubleArray0 = new Double[6];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'm';
      longArray0[1] = (long) '4';
      longArray0[2] = (long) 'm';
      longArray0[3] = (long) 'm';
      ArrayUtils.shift(longArray0, 1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {109L, 109L, 52L, 109L}, longArray0);
      
      ArrayUtils.shift((Object[]) doubleArray0, 1);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)1;
      ArrayUtils.swap((float[]) null, (int) (short)1, (-1), (-1177));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 4);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-214));
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1, (short)0}, shortArray1);
      
      ArrayUtils.shift((long[]) null, 2141977279);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)1;
      objectArray0[1] = (Object) (short)1;
      Object object0 = ArrayUtils.get(objectArray0, (-2134145239));
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (short)1;
      objectArray0[4] = (Object) (short)1;
      objectArray0[5] = (Object) (short)1;
      objectArray0[6] = (Object) (short)1;
      objectArray0[7] = (Object) (short)1;
      objectArray0[8] = (Object) (short)1;
      ArrayUtils.shift(objectArray0, 954);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('^');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('^', (char)character1);
      
      Character character2 = Character.valueOf('m');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('m', (char)character2);
      
      Character character3 = new Character('4');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('4', (char)character3);
      
      Double[] doubleArray0 = new Double[6];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'm';
      longArray0[1] = (long) '4';
      longArray0[2] = (long) 'm';
      longArray0[3] = (long) 'm';
      ArrayUtils.shift(longArray0, 1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {109L, 109L, 52L, 109L}, longArray0);
      
      ArrayUtils.shift((Object[]) doubleArray0, 1);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {''}, charArray0);
      assertArrayEquals(new char[] {'', ''}, charArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) arrayUtils0;
      long[] longArray0 = ArrayUtils.add((long[]) null, 114L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {114L}, longArray0);
      
      long[] longArray1 = ArrayUtils.insert(91, longArray0, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {114L}, longArray0);
      assertArrayEquals(new long[] {114L}, longArray1);
      
      objectArray0[1] = (Object) arrayUtils0;
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = (Object) arrayUtils0;
      objectArray0[5] = (Object) arrayUtils0;
      objectArray0[6] = (Object) arrayUtils0;
      objectArray0[7] = (Object) arrayUtils0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (-2288));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-2288));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2288, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      
      Integer integer1 = new Integer((-572));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-572), (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(11);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(11, (int)integer3);
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-28));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-28), (byte)byte1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte1);
      assertNotNull(object1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertEquals((byte) (-28), object1);
      
      ArrayUtils.swap((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, (-1), 4594, 507);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-23));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_STRING_ARRAY, arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_SHORT_ARRAY, (-4777), (short) (-3585));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4777, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)1}, shortArray0);
      
      float[] floatArray0 = new float[26];
      floatArray0[0] = (-1580.86F);
      floatArray0[1] = (float) (short) (-153);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)1;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-88);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)67);
      assertEquals(7, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte) (-88), (byte)67, (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88)}, byteArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt mutableInt0 = new MutableInt(0.0F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurences(mutableIntArray0, mutableInt0);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1797.8890382);
      doubleArray0[1] = (-830.37756292);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 178.63;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-830.37756292), 10);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-1797.8890382), (-830.37756292), 0.0, 1.5, 178.63}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, 1431655765, 1431655765, 1431655765);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1797.8890382), (-830.37756292), 0.0, 1.5, 178.63}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new double[] {(-1797.8890382), 0.0, 1.5, 178.63}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      Byte byte0 = new Byte((byte) (-48));
      assertNotNull(byte0);
      assertEquals((byte) (-48), (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte) (-48);
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)2, (short) (-48), (short)5, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-48), (short)5, (short)2, (short)2, (short)2, (short)2}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[2] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, boolean0);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "K6A-0\"";
      stringArray0[1] = "blZi7 =O~t><>wAi";
      stringArray0[2] = "|K";
      stringArray0[3] = "NHvBP1iy";
      stringArray0[4] = "int";
      stringArray0[5] = "2O9D|qK,<L7xN|5";
      stringArray0[6] = "6PuSv>3tygumtJ";
      stringArray0[7] = "+Gs7J.cX(+5!0KDia";
      stringArray0[8] = "!nTT8*'9";
      String[] stringArray1 = ArrayUtils.removeAllOccurences(stringArray0, "org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle");
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (-2147483648L);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray0.length);
      assertEquals(2, intArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-2147483648L)}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-2147483648L)}, longArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)5);
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)424);
      assertNotNull(short0);
      assertEquals((short)424, (short)short0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)5;
      longArray0[1] = 415L;
      longArray0[2] = (long) (byte)52;
      longArray0[3] = (long) (short)424;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte) (-89);
      longArray0[6] = (long) (byte)5;
      longArray0[7] = (long) (short)424;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {5L, 415L, 52L, 424L, 0L, (-89L), 5L, 424L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-653L);
      ArrayUtils.shift(longArray0, 6, 653, 2);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-653L)}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 653;
      floatArray0[1] = (float) (-653L);
      floatArray0[2] = (float) (-653L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1556.6381F), 6);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {653.0F, (-653.0F), (-653.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3109.396F);
      floatArray0[1] = (-954.15753F);
      floatArray0[2] = (-954.15753F);
      floatArray0[3] = (-1567.2F);
      floatArray0[4] = (-1567.2F);
      floatArray0[5] = (-1567.2F);
      floatArray0[6] = (-1567.2F);
      floatArray0[7] = (-1567.2F);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      charArray0[2] = '3';
      charArray0[3] = 'B';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      ArrayUtils.shift(charArray0, (-492), (-492), 98);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'3', 'B', '3', 'B', '(', '(', '('}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'B', '3', 'B', '(', '(', '(', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = ';';
      charArray0[2] = ' ';
      charArray0[3] = 'i';
      charArray0[4] = 'a';
      charArray0[5] = 'e';
      charArray0[6] = '\\';
      charArray0[7] = ':';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'P', ';', ' ', 'i', 'a', 'e', '\\', ':'}, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 68.69F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {68.69F}, floatArray1, 0.01F);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) '\\';
      characterArray0[1] = (Character) ':';
      Character character0 = Character.valueOf('a');
      assertNotNull(character0);
      assertEquals('a', (char)character0);
      
      characterArray0[2] = character0;
      characterArray0[3] = (Character) 'a';
      characterArray0[4] = (Character) ':';
      characterArray0[5] = (Character) 'P';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(6, characterArray1.length);
      assertEquals(6, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {68.69F}, floatArray1, 0.01F);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1309.7994F;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-467L), (-1540.8));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte byte0 = (byte)4;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)115;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)82);
      assertEquals(4, byteArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)4, (byte)82, (byte)115, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)82;
      doubleArray0[1] = (double) (byte)4;
      doubleArray0[2] = (double) (byte)115;
      doubleArray0[3] = (double) (byte)82;
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = (double) (byte)4;
      doubleArray0[7] = (double) (byte)82;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {82.0, 4.0, 115.0, 82.0, 4.0, 100.0, 4.0, 82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {82.0, 4.0, 115.0, 82.0, 4.0, 100.0, 4.0, 82.0}, doubleArray1, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((byte)4);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (java.util.Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean("void");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'Q';
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {81}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'g';
      doubleArray0[1] = (double) '_';
      doubleArray0[2] = (double) 'q';
      doubleArray0[3] = (double) 'Q';
      doubleArray0[4] = (double) 81;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 81);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 81, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      Character character0 = new Character('/');
      assertNotNull(character0);
      assertEquals('/', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2120;
      intArray0[1] = (int) (short) (-153);
      intArray0[2] = (int) (short) (-153);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short) (-153));
      assertEquals(3, intArray0.length);
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {2120, (-153), (-153)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) (-153);
      doubleArray0[2] = (double) 2120;
      doubleArray0[3] = (double) (-153);
      doubleArray0[4] = (double) (-153);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2120, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-38L));
      assertNull(longArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-4795), 4);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      Long long0 = new Long((-160L));
      assertNotNull(long0);
      assertEquals((-160L), (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) long0, 765);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-160L);
      doubleArray0[2] = (double) (-4795);
      doubleArray0[3] = (double) 765;
      doubleArray0[4] = (double) (-160L);
      int int1 = 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 765, 0);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-160.0), (-4795.0), 765.0, (-160.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int int0 = 466;
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = null;
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      
      int int1 = (-3248);
      ArrayUtils.swap(intArray1, (int) (short) (-2313), (-3248), 2);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 466, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int2 = 32;
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-3248), 118, 2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)52, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2727), (int) (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.swap((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, 2980, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)52;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1937);
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1), (-1), 52}, intArray0);
      
      ArrayUtils.shift(intArray0, 1584);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 52}, intArray0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_LONG_ARRAY, 1600, 1584);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean2 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0, (String) null);
      assertNotNull(string0);
      assertEquals("false", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = '\'';
      charArray0[2] = '&';
      charArray0[3] = '';
      charArray0[4] = '\\';
      charArray0[5] = '8';
      charArray0[6] = 'S';
      charArray0[7] = '>';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'z', '\'', '&', '', '\\', '8', 'S', '>'}, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3254);
      intArray0[1] = 7;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 80);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-3254), 7}, intArray0);
      
      ArrayUtils.shift(intArray0, (-3254));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3254), 7}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '\'';
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (-1312L);
      longArray0[3] = (long) 'S';
      longArray0[4] = (long) '>';
      ArrayUtils.swap(longArray0, 80, (-395));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {39L, (-1L), (-1312L), 83L, 62L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[1] = true;
      booleanArray0[6] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[8] = true;
      Character[] characterArray0 = new Character[0];
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)37;
      shortArray0[1] = (short) (-6232);
      shortArray0[2] = (short)1935;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)37);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)37, (short) (-6232), (short)1935}, shortArray0);
      assertArrayEquals(new short[] {(short)37, (short)37, (short) (-6232), (short)1935}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-6232), (int) (short)37);
      assertEquals(3, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)37, (short) (-6232), (short)1935}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1328.0);
      doubleArray0[2] = 883.117594040885;
      doubleArray0[3] = (-2624.484427152);
      doubleArray0[4] = (-3287.0);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3287.0), (-2624.484427152), 883.117594040885, (-1328.0), 1.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 1425L;
      longArray0[2] = (-1L);
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(9, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, 1425L, (-1L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 97, 9);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3287.0), (-2624.484427152), 883.117594040885, (-1328.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap((Object[]) null, 8, 0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      long[] longArray0 = new long[22];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 0L);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.insert(79, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      try { 
        Double.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)192;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1145;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)963);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)192, (short) (-1), (short)1145}, shortArray0);
      assertArrayEquals(new short[] {(short)192, (short) (-1), (short)1145}, shortArray1);
      
      ArrayUtils.swap(doubleArray0, (-1), (-1512), (-1));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short)68);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)192, (short) (-1), (short)1145}, shortArray0);
      assertArrayEquals(new short[] {(short)192, (short) (-1), (short)1145}, shortArray2);
      
      ArrayUtils.shift(shortArray0, 256, (int) (short) (-1), 23);
      assertEquals(3, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)192, (short) (-1), (short)1145}, shortArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short) (-1);
      objectArray0[2] = (Object) (short)1145;
      objectArray0[3] = (Object) (short)192;
      ArrayUtils.swap(objectArray0, (-2288), 91, 3);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)1935);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (-4529);
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1160L);
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (-940.37574445057);
      doubleArray0[7] = 1.0;
      ArrayUtils.swap(doubleArray0, 3265, 0, (-1159));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-4529.0), 2.0, 0.0, (-1160.0), 2.0, (-940.37574445057), 1.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)1935);
      assertNull(shortArray1);
      
      ArrayUtils.shift((short[]) null, (-979), 0, (-979));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, 0, 2439, (-1));
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1797.8890382);
      doubleArray0[1] = (-830.37756292);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 178.63;
      int int0 = 1935;
      int int1 = (-1613);
      ArrayUtils.swap(doubleArray0, 1935, (-2147483639), (-1613));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1797.8890382), (-830.37756292), 0.0, 1.5, 178.63}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1613);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (-2147483639);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1613), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1613, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (int) (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-21), (byte) (-21)}, byteArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (double) (byte) (-21));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '\\';
      charArray0[2] = 'y';
      charArray0[3] = '>';
      charArray0[4] = ',';
      charArray0[5] = '1';
      char[] charArray1 = ArrayUtils.add(charArray0, ',');
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'<', '\\', 'y', '>', ',', '1'}, charArray0);
      assertArrayEquals(new char[] {'<', '\\', 'y', '>', ',', '1', ','}, charArray1);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3703L);
      assertNotNull(long0);
      assertEquals(3703L, (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 1.0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.hashCode((Object) boolean0);
      assertFalse(int1 == int0);
      
      Float float0 = new Float((-2681.0F));
      assertNotNull(float0);
      assertEquals((-2681.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Long long0 = Long.valueOf((-1892L));
      assertNotNull(long0);
      assertEquals((-1892L), (long)long0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long1 = Long.valueOf(1381L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1381L, (long)long1);
      
      Long long2 = new Long((-1892L));
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1892L), (long)long2);
      
      Long long3 = new Long((-160L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-160L), (long)long3);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1892L)}, longArray1);
      
      Long[] longArray2 = new Long[3];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = long0;
      longArray2[1] = long1;
      longArray2[2] = long1;
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertEquals(3, longArray2.length);
      assertEquals(3, longArray3.length);
      assertSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray0);
      assertSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      
      int int2 = ArrayUtils.indexOf(longArray1, (-1328L), 1559);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertTrue(int2 == int0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray3));
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {(-1892L)}, longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.swap(intArray0, (int) (short) (-2313), (-3254), 2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 466, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-67);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-9), (byte) (-2), (byte) (-67)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, (-467));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-30935);
      shortArray0[1] = (short) (-787);
      shortArray0[2] = (short) (-1496);
      shortArray0[3] = (short) (-787);
      shortArray0[4] = (short)1231;
      shortArray0[5] = (short)1231;
      shortArray0[6] = (short)1231;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-30935), (short) (-787), (short) (-1496), (short) (-787), (short)1231, (short)1231, (short)1231}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, 2648.815575);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1231, (short)1231, (short)1231, (short) (-787), (short) (-1496), (short) (-787), (short) (-30935)}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-1588);
      intArray0[2] = (int) (short) (-1496);
      intArray0[3] = (int) (short) (-787);
      intArray0[4] = (int) (short)1231;
      intArray0[5] = (int) (short) (-787);
      int[] intArray1 = ArrayUtils.add(intArray0, (-1503));
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, (-1588), (-1496), (-787), 1231, (-787)}, intArray0);
      assertArrayEquals(new int[] {2, (-1588), (-1496), (-787), 1231, (-787), (-1503)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 59);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 59;
      intArray0[1] = (int) (byte) (-21);
      ArrayUtils.swap(intArray0, 1323, 2146562104, (-5164));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {59, (-21)}, intArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray0, ' ');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-21)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21)}, byteArray1);
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('k');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('k', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character0.equals((Object)character1));
      assertEquals(' ', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('5');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals('5', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 10);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short) (-25);
      shortArray0[2] = (short) (-25);
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short)48;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short)48;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)48, (short) (-25), (short) (-25), (short)2, (short)48, (short)2, (short)48}, shortArray0);
      assertArrayEquals(new short[] {(short)48, (short) (-25), (short) (-25), (short)2, (short)48, (short)2, (short)48}, shortArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short)48;
      objectArray0[1] = (Object) (byte)2;
      objectArray0[2] = (Object) 2;
      objectArray0[3] = (Object) (short)48;
      objectArray0[4] = (Object) (byte)2;
      objectArray0[5] = (Object) (short)48;
      objectArray0[6] = (Object) (short) (-25);
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertEquals(2, object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.shift(byteArray0, 2, 2090, 256);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(3, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-3171.42F));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3171.42F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3171.42F)}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, 2269);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2269, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1580.86F);
      floatArray0[1] = (float) (short) (-153);
      floatArray0[2] = (float) (short) (-3381);
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short) (-153);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) (short)1;
      ArrayUtils.swap(floatArray0, (int) (short)1, (int) (short)0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-153.0F), (-1580.86F), (-3381.0F), 1.0F, 0.0F, (-153.0F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      charArray0[2] = '=';
      ArrayUtils.shift(charArray0, (int) (short)0, Integer.MAX_VALUE, 57);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'3', 'B', '='}, charArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-3423.656F));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-153.0F), (-1580.86F), (-3381.0F), 1.0F, 0.0F, (-153.0F), 0.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-153.0F), (-1580.86F), (-3381.0F), 1.0F, 0.0F, (-153.0F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'3', 'B', '='}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, (-376), (int) (byte)33, (int) (short)0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)33, (byte)99}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray0[3] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      ArrayUtils.swap(booleanArray2, (-1591), (-1591), (-1591));
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true, true}, booleanArray2));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1591);
      doubleArray0[1] = (double) (-1591);
      doubleArray0[3] = (double) (-1591);
      doubleArray0[4] = (double) (-1591);
      doubleArray0[5] = (double) (-1591);
      doubleArray0[6] = (double) (-1591);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1591), (-3970.6255382822));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1591, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      
      int int0 = (-1591);
      boolean[] booleanArray2 = new boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray2[5] = true;
      booleanArray2[6] = true;
      booleanArray2[7] = true;
      ArrayUtils.swap(booleanArray2, (-1591), (-1591), (-1591));
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray2));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1591);
      doubleArray0[1] = (double) (-1591);
      doubleArray0[2] = (double) (-1591);
      doubleArray0[3] = (double) (-1591);
      doubleArray0[4] = (double) (-1591);
      doubleArray0[5] = (double) (-1591);
      doubleArray0[6] = (double) (-1591);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1591), (-3970.6255382822));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1591, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-51.0);
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (-51.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 161.149841, (-51.0));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-51.0), 2.0, (-51.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      doubleArray0[0] = (double) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-2143528796);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, (-2143528796));
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), (-1.0F), 2.0F, (-1.0F), (-2.14352883E9F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-51.0), 2.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1328.0);
      doubleArray0[2] = 883.117594040885;
      doubleArray0[3] = (-2624.484427152);
      doubleArray0[4] = (-3287.0);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3287.0), (-2624.484427152), 883.117594040885, (-1328.0), 1.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 1425L;
      longArray0[2] = (-1L);
      longArray0[3] = 1131L;
      longArray0[4] = 59L;
      longArray0[5] = 836L;
      longArray0[6] = (-514L);
      longArray0[7] = 107L;
      longArray0[8] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-1949));
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 1425L, (-1L), 1131L, 59L, 836L, (-514L), 107L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 10);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, (-1191), 1, 605);
      ArrayUtils.shift((long[]) null, 10, 32, (-548));
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 32, 32);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[0] = ';';
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, 3981, Integer.MAX_VALUE);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {';', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 712.36584F;
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) 57;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = 178.63;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3981);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {59.0, 178.63}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, 1431655765, 10, Integer.MAX_VALUE);
      ArrayUtils.shift((long[]) null, (-2106185884), 1431655765, 10);
      ArrayUtils.swap(charArray0, 12, (-2106185884));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {';', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      Object object0 = null;
      Long long0 = Long.getLong("java.lang.Byte");
      assertNull(long0);
      
      MutableInt mutableInt0 = null;
      try {
        mutableInt0 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      double[] doubleArray0 = ArrayUtils.insert((int) (byte)2, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1342), (-1342));
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-4529L), 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)37);
      assertNull(shortArray0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) byte0);
      assertNull(integerArray0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-4529L), 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      ArrayUtils.swap((double[]) null, (int) (byte)2, (int) (byte) (-102), 630);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-15));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1265.946168443));
      assertNull(doubleArray0);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      Boolean boolean0 = Boolean.valueOf("]ka&?`+k-[xU[,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[3] = boolean0;
      booleanArray1[4] = booleanArray1[0];
      booleanArray1[5] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      double[] doubleArray1 = ArrayUtils.insert((int) (byte) (-102), (double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      Byte byte0 = new Byte((byte) (-102));
      assertNotNull(byte0);
      assertEquals((byte) (-102), (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) boolean0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1580.86F);
      floatArray0[1] = (float) (short) (-153);
      floatArray0[2] = (float) (short) (-3381);
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short) (-153);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = 0.0F;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)10, (int) (short)0);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-153);
      longArray0[1] = (long) (short) (-153);
      longArray0[2] = (long) (short) (-3381);
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)10;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-153L), (-153L), (-3381L), 1L, 10L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1580.86F);
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 0.0F;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3.0);
      assertEquals(3, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1580.8599853515625), 1.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 2305, (byte) (-57));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2305, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'a');
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'2', 'a'}, charArray0);
      assertArrayEquals(new char[] {'a', '2', 'a'}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-1949), (double) (byte)115);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-1), (int) (byte)4);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'a';
      floatArray0[1] = (float) (byte)115;
      floatArray0[2] = (float) '2';
      floatArray0[3] = (float) 'a';
      floatArray0[4] = (float) '2';
      ArrayUtils.shift(floatArray0, (-113));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {97.0F, 50.0F, 97.0F, 115.0F, 50.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (-5));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {97.0F, 50.0F, 97.0F, 115.0F, 50.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)115;
      longArray0[1] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {115L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertEquals(10, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '/');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) 'k';
      longArray0[2] = (long) (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 107L);
      assertEquals(3, longArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 107L, (-1L)}, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '!', 1792);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'k'}, charArray0);
      
      bitSet0.or(bitSet1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(3, longArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertArrayEquals(new long[] {(-1L), 107L, (-1L)}, longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      bitSet0.clear(16);
      assertEquals(3, longArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotSame(bitSet0, bitSet1);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertArrayEquals(new long[] {(-1L), 107L, (-1L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (byte)2, 107L);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 107L, 107L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 107L, (-1L)}, longArray0);
      
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)2;
      BitSet bitSet2 = BitSet.valueOf(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("{1, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 34, 36, 41, 42, 43, 44, 46, 49}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertFalse(bitSet2.isEmpty());
      assertEquals(29, bitSet2.cardinality());
      assertEquals(50, bitSet2.length());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotNull(bitSet2);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-9), (byte) (-1), (byte) (-53), (byte)20, (byte)94, (byte)2}, byteArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 2);
      assertEquals(1, characterArray0.length);
      
      byte[] byteArray1 = bitSet0.toByteArray();
      assertEquals(3, longArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotSame(longArray0, longArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet0, bitSet1);
      assertNotNull(byteArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bitSet0.equals((Object)bitSet2));
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertArrayEquals(new long[] {(-1L), 107L, (-1L)}, longArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 1033, 74);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = '2';
      Character character0 = Character.valueOf('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('2', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = char0;
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'|', '2', '~'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '2';
      doubleArray0[5] = (double) '|';
      doubleArray0[6] = (double) '2';
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 1.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {126.0, 126.0, 1.0, 0.0, 50.0, 124.0, 50.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) character0);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ",dT{ik7W32B[~");
      assertNull(stringArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) char0);
      assertNotNull(object0);
      assertEquals('2', object0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-775.0));
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {126.0, 126.0, 1.0, 0.0, 50.0, 124.0, 50.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {126.0, 126.0, 1.0, 0.0, 50.0, 124.0, 50.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, 742.786858442634, 1020, (double) 0);
      assertEquals(2, doubleArray2.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(bitSet0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character character2 = Character.valueOf('`');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('`', (char)character2);
      
      Long long0 = Long.valueOf(2L);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      Long long2 = new Long((-1238L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1238L), (long)long2);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = long2;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1238L)}, longArray2);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)52;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89));
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-74), (byte)52}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) (byte) (-74);
      doubleArray0[2] = (double) (byte)52;
      doubleArray0[3] = (double) (byte) (-74);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[5] = (double) (byte) (-74);
      doubleArray0[6] = (double) (byte) (-74);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {52.0, (-74.0), 52.0, (-74.0), (-89.0), (-74.0), (-74.0)}, doubleArray0, 0.01);
      
      Short short0 = new Short((short)1383);
      assertNotNull(short0);
      assertEquals((short)1383, (short)short0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) (byte)52;
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[5] = (double) (byte) (-74);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 52.0, 0.0, (-89.0), (-74.0), 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4244);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-252L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)82);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)82, (byte)byte1);
      
      Byte byte2 = new Byte((byte)82);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)82, (byte)byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      Byte byte4 = new Byte((byte)74);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte4);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-2));
      assertNull(shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)74;
      doubleArray0[1] = (double) (short) (-4244);
      doubleArray0[2] = (-389.0);
      doubleArray0[3] = (double) (byte)74;
      ArrayUtils.swap(doubleArray0, 1618, 46, (int) (short) (-1635));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {74.0, (-4244.0), (-389.0), 74.0}, doubleArray0, 0.01);
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (-4244);
      shortArray2[1] = (short) (byte)0;
      shortArray2[2] = (short) (-1635);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 260.1F;
      floatArray0[1] = (-1513.4F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 66.0F;
      floatArray0[5] = (-1422.4692F);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (-1328L);
      longArray0[2] = 1L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-55L), (-2046));
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, (-1328L), 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)2);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-28293);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)6;
      floatArray0[1] = (float) (short) (-28293);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {6.0F, (-28293.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)2, (int) (byte) (-102));
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 653;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)2);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {653L}, longArray0);
      assertArrayEquals(new long[] {2L, 653L}, longArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)2, (int) (byte) (-102));
      assertNull(doubleArray0);
      
      ArrayUtils.swap((Object[]) null, (-1956), 854);
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-102);
      floatArray0[1] = (float) 653;
      floatArray0[2] = (float) (byte) (-102);
      floatArray0[3] = (float) 854;
      floatArray0[4] = (float) (byte) (-102);
      floatArray0[5] = (-1993.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-102.0F), 653.0F, (-102.0F), 854.0F, (-102.0F), (-1993.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-319));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Boolean boolean0 = Boolean.valueOf("G(;xr/AI<bF");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (short) (-15);
      doubleArray2[4] = 1371.2870256985857;
      doubleArray2[5] = (double) (-1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[2] = ' ';
      Boolean boolean0 = Boolean.valueOf("ffZs");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean(", Length: 0");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean2;
      Boolean boolean4 = Boolean.valueOf(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      booleanArray0[1] = boolean4;
      booleanArray0[2] = boolean2;
      Boolean boolean5 = Boolean.TRUE;
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      
      booleanArray0[3] = boolean5;
      booleanArray0[4] = boolean2;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean2;
      booleanArray0[7] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (short) (-1191));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray2 = new boolean[0];
      boolean boolean6 = ArrayUtils.isEmpty(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertTrue(boolean6);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      short[] shortArray0 = new short[6];
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short) (-1013));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1013), (short)short1);
      
      Short short2 = Short.valueOf((short)1);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)1, (short)short2);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)66;
      shortArray0[1] = (short) (-883);
      shortArray0[2] = (short)2663;
      shortArray0[3] = (short) (-436);
      shortArray0[4] = (short) (-28476);
      shortArray0[5] = (short) (-881);
      shortArray0[6] = (short)51;
      shortArray0[7] = (short)5248;
      shortArray0[8] = (short) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)66, (short) (-883), (short)2663, (short) (-436), (short) (-28476), (short) (-881), (short)51, (short)5248, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.1, double0, 0.01);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 66;
      doubleArray0[1] = (double) 66;
      intArray0[2] = 435;
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) 66);
      assertNotNull(float0);
      assertEquals(66.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3894.35246978));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3894.3525F), (float)float1, 0.01F);
      
      Float float2 = new Float((-276.97086F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-276.97086F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('o');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('o', (char)character1);
      
      Character character2 = Character.valueOf('d');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('d', (char)character2);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long[] longArray0 = new Long[9];
      longArray0[1] = long0;
      longArray0[4] = long0;
      Long long1 = new Long(1L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1L, (long)long1);
      
      longArray0[6] = long1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      charArray0[2] = '3';
      charArray0[3] = 'B';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      ArrayUtils.shift(charArray0, (-492), (-492), 98);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'3', 'B', '3', 'B', '(', '(', '('}, charArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 98, 1212);
      assertEquals(0, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, 3981, Integer.MAX_VALUE);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'3', 'B'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 712.36584F;
      floatArray0[1] = (float) '3';
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) 57;
      floatArray0[4] = (float) 57;
      floatArray0[5] = (float) 'B';
      floatArray0[6] = (float) 'B';
      floatArray0[7] = (-3423.656F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {712.36584F, 51.0F, 2.14748365E9F, 57.0F, 57.0F, 66.0F, 66.0F, (-3423.656F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {712.36584F, 51.0F, 2.14748365E9F, 57.0F, 57.0F, 66.0F, 66.0F, (-3423.656F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'3', 'B'}, charArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertNotNull(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " gI30)?G";
      objectArray0[1] = (Object) " gI30)?G";
      Character character0 = new Character('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'i');
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'_', '_', '_'}, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'f';
      longArray0[1] = (long) (char)character0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {102L, 95L}, longArray0);
      
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertArrayEquals(new char[] {'_', '_', '_'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, (-467));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      ArrayUtils.swap((int[]) null, 4, 4, 0);
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 826, (-652));
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'b', (-3701));
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'b', '\"', '\"'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) (-406));
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-406.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('4', (char)character1);
      
      Character character2 = Character.valueOf('`');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('`', (char)character2);
      
      Character character3 = new Character('?');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertEquals('?', (char)character3);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character3;
      characterArray0[1] = character1;
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'f');
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'?', '4', '`'}, charArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-4529L), 2L, 0L, 2L, (-4529L), (-1160L), 2L, 0L}, longArray0);
      
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray1.length);
      assertEquals(3, characterArray0.length);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertArrayEquals(new char[] {'?', '4', '`'}, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 54, (int) (byte)2);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      Character character0 = Character.valueOf('o');
      assertNotNull(character0);
      assertEquals('o', (char)character0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (-4170.6304F);
      floatArray0[2] = (-3824.0F);
      floatArray0[3] = (float) 't';
      floatArray0[4] = 371.912F;
      floatArray0[5] = 371.912F;
      floatArray0[6] = 371.912F;
      floatArray0[7] = (float) (-12);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1.0F));
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {111.0F, (-4170.6304F), (-3824.0F), 116.0F, 371.912F, 371.912F, 371.912F, (-12.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {111.0F, (-4170.6304F), (-3824.0F), 116.0F, 371.912F, 371.912F, 371.912F, (-12.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (-709), 2206, (-2134145239));
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-12.0F), 111.0F, (-4170.6304F), (-3824.0F), 116.0F, 371.912F, 371.912F, 371.912F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '|');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertEquals(5, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, false, true}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '8');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '3');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) true;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertSame(booleanArray2, booleanArray3);
      assertSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertEquals(1, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {466}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) booleanArray2[0]);
      assertEquals(2, booleanArray2.length);
      assertSame(booleanArray2, booleanArray3);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      boolean[] booleanArray4 = new boolean[6];
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      
      booleanArray4[0] = false;
      booleanArray4[1] = true;
      booleanArray4[2] = true;
      booleanArray4[3] = (boolean) object0;
      booleanArray4[4] = true;
      booleanArray4[5] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray4);
      assertEquals(6, booleanArray4.length);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray4));
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 100);
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1722;
      shortArray0[1] = (short)1722;
      shortArray0[2] = (short)1722;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1722;
      doubleArray0[1] = (double) (short)1722;
      doubleArray0[2] = (-2330.96);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0, (double) (short)1722);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1722.0, 1722.0, (-2330.96)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-12));
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short)6, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (-12);
      longArray0[2] = (long) (short)6;
      ArrayUtils.swap(longArray0, 3281, 2, 0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-12L), 6L}, longArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-2950);
      longArray0[1] = (-1959L);
      longArray0[2] = (-1959L);
      longArray0[3] = 107L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (short) (-2950);
      longArray0[6] = (-1959L);
      longArray0[7] = (long) 0;
      ArrayUtils.swap(longArray0, (-1635), 7, 0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-2950L), (-1959L), (-1959L), 107L, 0L, (-2950L), (-1959L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 1.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0, (String) null);
      assertNotNull(string0);
      assertEquals("false", string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short) (-1);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F));
      assertEquals(5, floatArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-28293);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)6, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-28293), (short)0}, shortArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short) (-28293));
      assertNotNull(integer0);
      assertEquals((-28293), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3891);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(3891, (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-28293), 3891}, intArray0);
      
      Integer integer2 = new Integer(2180);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2180, (int)integer2);
      
      Integer integer3 = new Integer(0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0, (int)integer3);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (int) (short)1316);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-28293), 3891}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (int) integerArray0[0], (float) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -28293, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[4] = (byte)43;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[3];
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)43;
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)43, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-855.658063984);
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3321);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)116;
      shortArray0[4] = (short) (-3321);
      shortArray0[5] = (short)9;
      shortArray0[6] = (short)70;
      shortArray0[7] = (short) (-349);
      ArrayUtils.swap(shortArray0, (-550), (int) (short)0, (-803));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3321), (short) (-1), (short)116, (short) (-3321), (short)9, (short)70, (short) (-349)}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '?';
      int int0 = ArrayUtils.indexOf(charArray0, '.');
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'P', '?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Float float0 = Float.valueOf(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1094.642041942635));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1094.6421F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1094.6421F), (-1094.6421F), (-1094.6421F), 1.0F, (-1094.6421F), 1.0F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurrences((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, (Object) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'h';
      charArray0[2] = '|';
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1645);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(bitSet0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '2';
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) short0, (int) (short) (-1));
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2490.73F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2490.73F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-692.6962));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-692.6962F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(2004.25F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(2004.25F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1.0F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1.0F));
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((-1.0F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) (-2490.73F));
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((-2490.73F), (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = Float.valueOf(2592.3262F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals(2592.3262F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((double) floatArray0[5]);
      assertEquals(9, floatArray0.length);
      assertNotNull(float8);
      assertEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertEquals((-1.0F), (float)float8, 0.01F);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, (-2490.73F), (-692.6962F), 2004.25F, (-1.0F), (-1.0F), (-2490.73F), 2592.3262F, (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2950);
      shortArray0[1] = (short) (-2950);
      shortArray0[2] = (short) (-1919);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)17, (int) (byte)17);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '#');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)17);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift(byteArray0, (int) (short) (-2950));
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)33;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)17;
      byteArray2[3] = (byte)17;
      byteArray2[4] = (byte)17;
      byteArray2[5] = (byte)17;
      byteArray2[6] = (byte)17;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)17, (byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1172);
      shortArray0[1] = (short) (-26510);
      ArrayUtils.swap(shortArray0, (int) (short) (-26510), 3614, 2);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1172), (short) (-26510)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Character character0 = Character.valueOf('n');
      assertNotNull(character0);
      assertEquals('n', (char)character0);
      
      Character character1 = Character.valueOf('`');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('`', (char)character1);
      
      Long long0 = Long.valueOf(1065L);
      assertNotNull(long0);
      assertEquals(1065L, (long)long0);
      
      Long long1 = new Long((-2025L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-2025L), (long)long1);
      
      Long long2 = new Long((-1238L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1238L), (long)long2);
      
      Long[] longArray0 = new Long[6];
      Long long3 = new Long(707L);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals(707L, (long)long3);
      
      longArray0[0] = long3;
      longArray0[1] = long2;
      longArray0[2] = long0;
      Long long4 = new Long(2350L);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertEquals(2350L, (long)long4);
      
      longArray0[3] = long4;
      longArray0[4] = long1;
      longArray0[5] = long1;
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1580.86F);
      floatArray0[2] = (float) (short) (-3381);
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) (short)1;
      ArrayUtils.swap(floatArray0, (int) (short)1, (int) (short)0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1580.86F), (-3381.0F), 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      ArrayUtils.shift(charArray0, (int) (short)0, Integer.MAX_VALUE, 57);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'3', 'B', '\u0000'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-3423.656F));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1580.86F), (-3381.0F), 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1580.86F), (-3381.0F), 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'3', 'B', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-3381);
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.insert((int) (short)0, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3381.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3381.0), 0.0, (-3381.0), 0.0}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      ArrayUtils.reverse(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)78, (byte)40, (byte) (-2)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)8;
      ArrayUtils.reverse(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte)107, (byte) (-82), (byte) (-93), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      intArray0[4] = (-2778);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Float float0 = new Float((float) (byte) (-96));
      assertNotNull(float0);
      assertEquals((-96.0F), (float)float0, 0.01F);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-4849), 10);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), (-2778), 0}, intArray0);
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), (-2778), 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-775);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-775);
      intArray0[1] = (int) (short) (-775);
      intArray0[2] = (int) (short) (-775);
      intArray0[3] = (int) (short) (-775);
      intArray0[4] = (int) (short) (-775);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 122, (-775));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-775), (-775), (-775), (-775), (-775)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1514));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (short) (-1514);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-1514);
      intArray0[5] = (-1);
      intArray0[6] = (int) (short) (-1514);
      intArray0[7] = (-1923);
      int[] intArray1 = ArrayUtils.removeAll(intArray0, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1514), (-1), (-1), (-1514), (-1), (-1514), (-1923)}, intArray0);
      assertArrayEquals(new int[] {0, (-1514), (-1), (-1), (-1514), (-1), (-1514), (-1923)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1, (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, 92);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Byte byte0 = new Byte((byte) (-118));
      assertNotNull(byte0);
      assertEquals((byte) (-118), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-118), object0);
      
      objectArray0[0] = object0;
      Short short0 = new Short((byte) (-118));
      assertNotNull(short0);
      assertEquals((short) (-118), (short)short0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) short0);
      assertEquals(1, objectArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-118), (byte) (-118), (byte) (-118), (byte) (-118)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-118), (byte) (-118), (byte) (-118), (byte) (-118)}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)102;
      shortArray0[1] = (short) (byte) (-118);
      shortArray0[2] = (short) (byte) (-118);
      shortArray0[3] = (short) (byte)102;
      shortArray0[4] = (short) (byte) (-118);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)102, (short) (-118), (short) (-118), (short)102, (short) (-118)}, shortArray0);
      assertArrayEquals(new short[] {(short)102, (short) (-118), (short) (-118), (short)102, (short) (-118), (short)102, (short) (-118), (short) (-118), (short)102, (short) (-118)}, shortArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-118);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2339, (-2628));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-118)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertArrayEquals(new int[] {(-118)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray2, true, (-2628));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(int1 == int0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-118)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      Byte byte0 = new Byte((byte)53);
      assertNotNull(byte0);
      assertEquals((byte)53, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)53;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2413, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2413, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)74);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)74, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)1;
      Byte byte6 = new Byte((byte)1);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte)1, (byte)byte6);
      
      byteArray0[4] = byte6;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)74;
      byteArray1[1] = byte0;
      byteArray1[2] = byte5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(80, byteArray1, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'V');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertArrayEquals(new char[] {'V', '{'}, charArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 114L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {114L}, longArray0);
      
      double[] doubleArray0 = ArrayUtils.insert((-431), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) byte0);
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      ArrayUtils.reverse(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray1));
      
      ArrayUtils.reverse(longArray0, 2343, 2143550527);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {114L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-855.658063984);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1199.47));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray1, 0.01);
      
      byte[] byteArray0 = ArrayUtils.insert((-510), (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      try { 
        Double.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2387);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (-797);
      ArrayUtils.reverse(shortArray0, 972, 2340);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2387), (short)1, (short) (-797)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3265);
      assertEquals(3, shortArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-2387), (short)1, (short) (-797)}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-2387);
      intArray0[1] = (int) (short)3265;
      intArray0[2] = (int) (short)3265;
      intArray0[3] = 2340;
      intArray0[4] = (int) (short) (-2387);
      intArray0[5] = (int) (short)1;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-2387), 3265, 3265, 2340, (-2387), 1}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-12), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -12, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 110, 110);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1328L);
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1328L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1328L)}, longArray1);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)74);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)1);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)24);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte)24, (byte)byte6);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = '^';
      Character character1 = Character.valueOf('^');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('^', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('m');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('m', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('4');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('4', (char)character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'T');
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'J', '^', 'm', '4'}, charArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((double) character3);
      assertNotNull(double0);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals(52.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) character3);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals(52.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(char0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(94.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2507.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(2507.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) character3);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals(52.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[3]);
      assertEquals(6, doubleArray0.length);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals(2507.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 575.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {52.0, 52.0, 94.0, 2507.0, 52.0, 2507.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = '^';
      Character character1 = Character.valueOf('^');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('^', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('m');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('m', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('4');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('4', (char)character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'T');
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'J', '^', 'm', '4'}, charArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((double) character3);
      assertNotNull(double0);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals(52.0, (double)double0, 0.01);
      
      doubleArray0[1] = double0;
      Double double1 = new Double(char0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(94.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double(2507.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(2507.0, (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      Double double3 = new Double((double) character3);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals(52.0, (double)double3, 0.01);
      
      doubleArray0[4] = double3;
      Double double4 = new Double((double) doubleArray0[3]);
      assertEquals(6, doubleArray0.length);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(2507.0, (double)double4, 0.01);
      
      doubleArray0[5] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 575.0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {575.0, 52.0, 94.0, 2507.0, 52.0, 2507.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Double double0 = new Double((-738.81898));
      assertNotNull(double0);
      assertEquals((-738.81898), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[2]);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-738.81898), (-738.81898), (-738.81898)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 59);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 59.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(charArray0, 2147407751, 2538, (-3214));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-153);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-153);
      floatArray0[4] = (float) (short) (-153);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (int) (short)0, 4, (-2134145239));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-153.0F), 0.0F, 0.0F, (-153.0F), (-153.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1407.5668378450837);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1885));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-174.02400720866), (-158));
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, (int) (short)0, 49, (-158));
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-153.0F);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (-153.0F);
      objectArray0[4] = (Object) (-153.0F);
      objectArray0[5] = (Object) (short) (-153);
      objectArray0[6] = (Object) (-153.0F);
      objectArray0[7] = (Object) (-153.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (int) (short)0);
      assertEquals(8, objectArray0.length);
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      int int0 = 3981;
      char char0 = '3';
      char char1 = 'B';
      int int1 = Integer.MAX_VALUE;
      long[] longArray0 = new long[16];
      longArray0[0] = (long) 3981;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 16
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      ArrayUtils.swap((double[]) null, (int) (byte)2, (int) (byte) (-102), 630);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-15));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1265.946168443));
      assertNull(doubleArray0);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      Boolean boolean0 = Boolean.valueOf("]ka&?`+k-[xU[,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[3] = boolean0;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray2));
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (short) (-15), (int) (byte)2, (-1265.946168443));
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[1];
      short short0 = (short) (-2025);
      shortArray0[0] = (short) (-2025);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = '@';
      charArray0[2] = 'I';
      charArray0[3] = '#';
      charArray0[4] = 'W';
      charArray0[5] = '-';
      charArray0[6] = 'a';
      char char0 = 'b';
      charArray0[7] = 'b';
      int int0 = 38;
      ArrayUtils.shift(charArray0, 38, (int) (short) (-2025), (int) (short) (-2025));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '@', 'I', '#', 'W', '-', 'a', 'b'}, charArray0);
      
      int int1 = 1030;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1030);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1030, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-4529);
      intArray0[2] = (int) 'J';
      intArray0[3] = 6;
      ArrayUtils.shift(intArray0, 79, 1878, (int) (byte)2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-4529), 0, 74, 6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2025);
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-2025));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'd';
      charArray0[2] = '7';
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 'd';
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {100L, 100L, 0L}, longArray0);
      assertArrayEquals(new long[] {100L, 100L, 0L}, longArray1);
      
      try { 
        Float.valueOf(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = Integer.getInteger("x},}uM9|cQvlz e\"y", integer1);
      assertNotNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      Integer integer4 = new Integer((-1));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-1), (int)integer4);
      
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)41);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (byte)41;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 3981;
      ArrayUtils.reverse(floatArray0, (-1), (-710));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 41.0F, 2.14748365E9F, (-1.0F), 3981.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "x},}uM9|cQvlz e\"y";
      objectArray0[1] = (Object) integer2;
      objectArray0[2] = (Object) integer3;
      objectArray0[3] = (Object) integer3;
      objectArray0[4] = (Object) 3981.0F;
      objectArray0[5] = (Object) "x},}uM9|cQvlz e\"y";
      objectArray0[6] = (Object) 2.14748365E9F;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(7, objectArray0.length);
      assertEquals(5, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(objectArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 2422L;
      longArray0[2] = 104L;
      longArray0[3] = (-1199L);
      longArray0[4] = 4853L;
      longArray0[5] = (-1L);
      longArray0[6] = (-1160L);
      longArray0[7] = 1451L;
      longArray0[8] = (-1419L);
      long[] longArray1 = ArrayUtils.add(longArray0, (-1199L));
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 2422L, 104L, (-1199L), 4853L, (-1L), (-1160L), 1451L, (-1419L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 2422L, 104L, (-1199L), 4853L, (-1L), (-1160L), 1451L, (-1419L), (-1199L)}, longArray1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 104L);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(104.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)119, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)119, (byte)0}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)119, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)2, (byte)119, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, 3981, Integer.MAX_VALUE);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'3', 'B'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 712.36584F;
      floatArray0[1] = (float) '3';
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) 57;
      floatArray0[4] = (float) 57;
      floatArray0[5] = (float) 'B';
      floatArray0[6] = (float) 'B';
      floatArray0[7] = (-3423.656F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {712.36584F, 51.0F, 2.14748365E9F, 57.0F, 57.0F, 66.0F, 66.0F, (-3423.656F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {712.36584F, 51.0F, 2.14748365E9F, 57.0F, 57.0F, 66.0F, 66.0F, (-3423.656F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'3', 'B'}, charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 66.0F;
      doubleArray0[2] = (double) 712.36584F;
      doubleArray0[3] = (double) 57.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3981, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3981, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-2025);
      short[] shortArray0 = new short[0];
      int int0 = new Short((short) (-2025));
      assertEquals((short) (-2025), int0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2025L)}, longArray0);
      assertArrayEquals(new long[] {(-2025L), (-2025L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      int[] intArray0 = new int[1];
      Short short0 = new Short((byte)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)2);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-940.37574445057);
      doubleArray0[3] = (-940.37574445057);
      doubleArray0[4] = (double) (short) (-1708);
      doubleArray0[5] = (double) (short) (-1708);
      doubleArray0[6] = (double) (short)2;
      doubleArray0[7] = (double) 2284;
      doubleArray0[8] = (double) (short) (-1708);
      ArrayUtils.swap(doubleArray0, (int) (short)2, (int) (short)2, (int) (short) (-1708));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 1.0, (-940.37574445057), (-940.37574445057), (-1708.0), (-1708.0), 2.0, 2284.0, (-1708.0)}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (-1708));
      assertNull(shortArray1);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 2284.0);
      assertNull(doubleArray1);
      
      short[] shortArray2 = new short[8];
      shortArray2[0] = (short)2;
      shortArray2[1] = (short) (-1708);
      shortArray2[2] = (short) (-1708);
      shortArray2[3] = (short) (-1708);
      shortArray2[4] = (short)2;
      shortArray2[5] = (short)2;
      shortArray2[6] = (short)2;
      shortArray2[7] = (short) (-1708);
      short[] shortArray3 = ArrayUtils.insert(512, (short[]) null, shortArray2);
      assertEquals(8, shortArray2.length);
      assertNull(shortArray3);
      assertArrayEquals(new short[] {(short)2, (short) (-1708), (short) (-1708), (short) (-1708), (short)2, (short)2, (short)2, (short) (-1708)}, shortArray2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1708);
      intArray0[1] = (int) (short)2;
      intArray0[2] = (-2365);
      intArray0[3] = 2284;
      intArray0[4] = (int) (short) (-1708);
      intArray0[5] = (int) (short) (-1708);
      intArray0[6] = (-3503);
      intArray0[7] = 2284;
      intArray0[8] = (int) (short) (-1708);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1708), 2, (-2365), 2284, (-1708), (-1708), (-3503), 2284, (-1708)}, intArray1);
      assertArrayEquals(new int[] {(-1708), 2, (-2365), 2284, (-1708), (-1708), (-3503), 2284, (-1708)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      String[] stringArray1 = ArrayUtils.toStringArray(objectArray0, "'9\"1@7fxY");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Byte byte0 = new Byte((byte)116);
      assertNotNull(byte0);
      assertEquals((byte)116, (byte)byte0);
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 1307);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)116, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-1)}, byteArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte)116;
      intArray0[4] = 13;
      intArray0[5] = (-2933);
      intArray0[6] = (int) (byte)116;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      intArray0[3] = (-2778);
      ArrayUtils.swap(intArray0, 0, 0, 1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-2778));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-2778));
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), 0, 0, (-2778)}, intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = ' ';
      charArray0[2] = '5';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', ' ', '5', 'w', ' ', '5'}, charArray1);
      assertArrayEquals(new char[] {'w', ' ', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2679;
      longArray0[1] = (long) (-498);
      ArrayUtils.swap(longArray0, 2289, 2679);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2679L, (-498L), 0L}, longArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '8';
      charArray0[2] = 'h';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '\\');
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\\', '8', 'h'}, charArray0);
      assertArrayEquals(new char[] {'8', 'h'}, charArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "java.lang.Float";
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 2679, 2679);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1999L;
      doubleArray0[1] = (double) 1999L;
      doubleArray0[2] = (double) 1999L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1999.0, 1999.0, 1999.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 103, 71);
      assertEquals(6, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)5;
      longArray0[1] = (long) 71;
      ArrayUtils.swap(longArray0, (int) (byte)5, 36);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {5L, 71L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 2146594364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146594364, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-855.658063984);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1199.47));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)96);
      assertEquals((-1), int0);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 5);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<Long> class4 = Long.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'B';
      MutableInt mutableInt0 = new MutableInt((-855.658063984));
      assertEquals((-855L), mutableInt0.longValue());
      assertEquals((-855.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-855", mutableInt0.toString());
      assertEquals((-855), (int)mutableInt0.toInteger());
      assertEquals((-855), (int)mutableInt0.getValue());
      assertEquals((byte) (-87), mutableInt0.byteValue());
      assertEquals((short) (-855), mutableInt0.shortValue());
      assertEquals((-855), mutableInt0.intValue());
      assertEquals((-855.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) classArray1, (Object) mutableInt0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertEquals((-855L), mutableInt0.longValue());
      assertEquals((-855.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-855", mutableInt0.toString());
      assertEquals((-855), (int)mutableInt0.toInteger());
      assertEquals((-855), (int)mutableInt0.getValue());
      assertEquals((byte) (-87), mutableInt0.byteValue());
      assertEquals((short) (-855), mutableInt0.shortValue());
      assertEquals((-855), mutableInt0.intValue());
      assertEquals((-855.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) class0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      Byte byte2 = new Byte((byte)41);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)41, (byte)byte2);
      
      Byte byte3 = new Byte((byte)6);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)6, (byte)byte3);
      
      Byte byte4 = new Byte((byte)6);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)6, (byte)byte4);
      
      Byte byte5 = new Byte((byte)6);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertEquals((byte)6, (byte)byte5);
      
      Byte byte6 = new Byte((byte)6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte3));
      assertEquals((byte)6, (byte)byte6);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (byte)74);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)41;
      doubleArray0[1] = (double) (byte)74;
      doubleArray0[2] = (double) (byte)41;
      doubleArray0[3] = (double) (byte)6;
      doubleArray0[4] = (double) (byte)1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-261.5264449687169);
      ArrayUtils.swap(doubleArray0, (int) (byte)41, 80, (-1));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {41.0, 74.0, 41.0, 6.0, 1.0, 0.0, (-261.5264449687169)}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)887);
      assertNull(shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1149);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-3481));
      assertNotNull(integer0);
      assertEquals((-3481), (int)integer0);
      
      Integer integer1 = new Integer(2878);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2878, (int)integer1);
      
      Integer integer2 = new Integer((byte)101);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(101, (int)integer2);
      
      Object object0 = ArrayUtils.get((Object[]) byteArray1, 83);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNull(object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 83;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 2878;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) (-3481);
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {83.0, 0.0, 2878.0, 0.0, (-3481.0)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)222, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      ArrayUtils.reverse(longArray0, 113, (int) (short)1);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Character[] characterArray0 = new Character[7];
      char char0 = 'e';
      Character character0 = Character.valueOf('e');
      assertNotNull(character0);
      assertEquals('e', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('e', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('f');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('f', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('}');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertEquals('}', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('e');
      assertNotNull(character4);
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertEquals('e', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('B');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertEquals('B', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertEquals('e', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-153);
      longArray0[1] = (long) (short) (-3381);
      longArray0[2] = (long) (short) (-153);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short) (-3381);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 358);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 358, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "m:FX`3?";
      stringArray0[1] = "m:FX`3?";
      stringArray0[2] = "m:FX`3?";
      stringArray0[3] = "m:FX`3?";
      stringArray0[4] = "m:FX`3?";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 80);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Long long0 = new Long(80);
      assertNotNull(long0);
      assertEquals(80L, (long)long0);
      
      Long long1 = new Long((-1312L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1312L), (long)long1);
      
      Long long2 = new Long((-3142L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-3142L), (long)long2);
      
      Long long3 = Long.getLong("_s", (-2128L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-2128L), (long)long3);
      
      Long long4 = new Long((-804L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertEquals((-804L), (long)long4);
      
      Long[] longArray0 = new Long[6];
      Long long5 = new Long(80);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertEquals(80L, (long)long5);
      
      longArray0[5] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2128L));
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2128L), (-2128L), (-2128L), (-2128L), (-2128L), (-2128L)}, longArray1);
      
      MutableInt mutableInt0 = new MutableInt(8192);
      assertEquals(8192, (int)mutableInt0.toInteger());
      assertEquals(8192, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(8192, mutableInt0.intValue());
      assertEquals("8192", mutableInt0.toString());
      assertEquals(8192.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(8192L, mutableInt0.longValue());
      assertEquals((short)8192, mutableInt0.shortValue());
      assertEquals(8192.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "The String did not match any specified value");
      assertEquals(8192, (int)mutableInt0.toInteger());
      assertEquals(8192, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(8192, mutableInt0.intValue());
      assertEquals("8192", mutableInt0.toString());
      assertEquals(8192.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(8192L, mutableInt0.longValue());
      assertEquals((short)8192, mutableInt0.shortValue());
      assertEquals(8192.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(string0);
      assertEquals("8192", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1856.525F), 103);
      assertEquals(6, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      Float[] floatArray2 = new Float[1];
      Float float0 = new Float((-2608.9495F));
      assertNotNull(float0);
      assertEquals((-2608.9495F), (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotNull(floatArray3);
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      Long[] longArray1 = new Long[7];
      Long long0 = Long.valueOf(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((-957));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-957L), (long)long1);
      
      longArray1[1] = long1;
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray1[2] = long2;
      Long long3 = new Long((-4345L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-4345L), (long)long3);
      
      longArray1[3] = long3;
      Long long4 = new Long((-2128L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertEquals((-2128L), (long)long4);
      
      longArray1[4] = long4;
      Long long5 = Long.getLong("_s", (-218L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertEquals((-218L), (long)long5);
      
      longArray1[5] = long5;
      Long long6 = new Long((long) longArray1[3]);
      assertEquals(7, longArray1.length);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertEquals((-4345L), (long)long6);
      
      longArray1[6] = long6;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) longArray1[1]);
      assertEquals(7, longArray2.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-957L), 0L, (-4345L), (-2128L), (-218L), (-4345L)}, longArray2);
      
      MutableInt mutableInt0 = new MutableInt((-724));
      assertEquals((-724.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)44, mutableInt0.byteValue());
      assertEquals((-724L), mutableInt0.longValue());
      assertEquals((-724), (int)mutableInt0.toInteger());
      assertEquals((-724), (int)mutableInt0.getValue());
      assertEquals((short) (-724), mutableInt0.shortValue());
      assertEquals("-724", mutableInt0.toString());
      assertEquals((-724.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-724), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, (String) null);
      assertEquals((-724.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)44, mutableInt0.byteValue());
      assertEquals((-724L), mutableInt0.longValue());
      assertEquals((-724), (int)mutableInt0.toInteger());
      assertEquals((-724), (int)mutableInt0.getValue());
      assertEquals((short) (-724), mutableInt0.shortValue());
      assertEquals("-724", mutableInt0.toString());
      assertEquals((-724.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-724), mutableInt0.intValue());
      assertNotNull(string0);
      assertEquals("-724", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)74);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)74, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)1);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[4] = (Byte) byte0;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (byte)0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-940.37574445057);
      doubleArray0[2] = (double) 0;
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (int) (byte)1, (int) byte0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-940.37574445057), 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray1);
      
      ArrayUtils.shift((short[]) null, 91, (-979), (-2288));
      ArrayUtils.swap((Object[]) byteArray0, (int) byte0, (-1), (int) (byte)74);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '$';
      charArray0[4] = 'S';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', '\u0000', 'V', '$', 'S'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', '\u0000', 'V', '$', 'S', '\u0000', 'V', '$', 'S'}, charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'A';
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-4034);
      ArrayUtils.shift(shortArray0, 3184, 7, (int) (short) (-4034));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4034)}, shortArray0);
      
      ArrayUtils.shift(doubleArray0, 1355);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 65.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((long[]) null, 7, 845);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'P';
      longArray0[1] = (long) 'P';
      longArray0[2] = (long) ';';
      longArray0[3] = (long) 'P';
      longArray0[4] = (long) ';';
      longArray0[5] = (long) 'P';
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-476);
      intArray0[1] = (int) 'P';
      intArray0[2] = (int) 'P';
      intArray0[3] = (int) ';';
      intArray0[4] = (int) 'P';
      intArray0[5] = (int) 'P';
      intArray0[6] = (int) 'P';
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 80;
      doubleArray0[1] = (double) 80;
      doubleArray0[2] = (double) 80L;
      doubleArray0[3] = (double) 80L;
      doubleArray0[4] = (double) 80;
      doubleArray0[5] = (double) 80L;
      ArrayUtils.shift(doubleArray0, 92);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {80.0, 80.0, 80.0, 80.0, 80.0, 80.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.swap(intArray0, (int) (short) (-2313), (-3254), 2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = ',';
      charArray0[2] = '4';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', ',', '4'}, charArray0);
      
      String[] stringArray0 = ArrayUtils.toArray((String[]) null);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-105);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(byteArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      Byte byte2 = new Byte((byte)41);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)41, (byte)byte2);
      
      Byte byte3 = new Byte((byte)6);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)6, (byte)byte3);
      
      Byte byte4 = new Byte((byte)6);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)6, (byte)byte4);
      
      Byte byte5 = new Byte((byte)6);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)6, (byte)byte5);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte4;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)2115);
      assertNotNull(short0);
      assertEquals((short)2115, (short)short0);
      
      Short short1 = new Short((byte)24);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)24, (short)short1);
      
      Short[] shortArray0 = new Short[9];
      Short short2 = new Short((short)2627);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)2627, (short)short2);
      
      shortArray0[0] = short2;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short1;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short1;
      shortArray0[8] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2627, (short)2115, (short)2115, (short)2115, (short)24, (short)2115, (short)2115, (short)24, (short)24}, shortArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)2627;
      longArray0[1] = (long) (byte)24;
      longArray0[2] = (long) (short)shortArray0[4];
      longArray0[3] = (long) (byte)74;
      longArray0[4] = (long) (byte)6;
      longArray0[5] = (long) (short)shortArray0[4];
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {2627L, 24L, 24L, 74L, 6L, 24L}, longArray0);
      
      Object[] objectArray0 = ArrayUtils.toArray((Object[]) byteArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, byteArray0.length);
      assertSame(byteArray0, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)2);
      assertNull(shortArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 972.649430494146);
      assertNull(doubleArray0);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, (-5.481887190242));
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5.481887190242)}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-3005));
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-5.481887190242)}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-3005), (-1147));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, (-467));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      longArray0[1] = (long) (-467);
      longArray0[2] = (long) (-467);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-467);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-467L);
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) ' ';
      floatArray0[5] = (float) 'i';
      floatArray0[6] = (float) (-467);
      floatArray0[7] = (float) 'i';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-467.0F), 1.0F, (-467.0F), Float.NaN, 32.0F, 105.0F, (-467.0F), 105.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-467.0F), 1.0F, (-467.0F), Float.NaN, 32.0F, 105.0F, (-467.0F), 105.0F}, floatArray0, 0.01F);
      
      Boolean boolean0 = Boolean.valueOf("0X");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'q');
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {' ', ' ', ' ', ' '}, charArray0);
      assertArrayEquals(new char[] {' ', ' ', ' ', ' '}, charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 358;
      intArray0[2] = 358;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 358;
      longArray0[1] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[4] = (long) 54;
      longArray0[5] = (long) 0;
      int int1 = 32;
      int int2 = 982;
      ArrayUtils.shift(longArray0, 0, 32, 982);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 54L, 0L, 358L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 358, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer((-800));
      assertNotNull(integer0);
      assertEquals((-800), (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1.5, 2878, (-2288.2980622623));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 371;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 371;
      floatArray0[1] = (float) 54;
      floatArray0[2] = (float) 371;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1556.6381F));
      assertEquals(3, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {371.0F, 54.0F, 371.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'h';
      charArray0[2] = '|';
      charArray0[3] = '$';
      char char0 = '1';
      charArray0[4] = '1';
      charArray0[5] = '5';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'2', 'h', '|', '$', '1', '5'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)4;
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte)39);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-112), (byte) (-128), (byte)52, (byte)4}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-112), booleanArray1, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -112, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {79}, intArray0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)36);
      assertNotNull(short0);
      assertEquals((short)36, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)36);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)36, (short)short1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-1217);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      
      Integer integer1 = new Integer((-572));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-572), (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(11);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(11, (int)integer3);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 32);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2146318939));
      assertNotNull(integer0);
      assertEquals((-2146318939), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2146318939));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2146318939), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(512);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(512, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertEquals(4, integerArray0.length);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-2146318939), (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2146318939), (-2146318939), 512, (-2146318939)}, intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = '2';
      charArray0[2] = '4';
      charArray0[3] = 'D';
      charArray0[4] = 'E';
      charArray0[5] = 'Q';
      charArray0[6] = '.';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 512, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      long[] longArray0 = new long[6];
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(object0.equals((Object)boolean3));
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      
      Integer integer0 = new Integer(1114111);
      assertNotNull(integer0);
      assertEquals(1114111, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) integer0, (-1493));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-2025);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2025), (-25));
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = 'x';
      charArray0[2] = '?';
      charArray0[3] = 'Q';
      charArray0[4] = '\\';
      charArray0[5] = 'v';
      charArray0[6] = '[';
      charArray0[7] = '&';
      charArray0[8] = 'X';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {']', 'x', '?', 'Q', '\\', 'v', '[', '&', 'X'}, charArray1);
      assertArrayEquals(new char[] {']', 'x', '?', 'Q', '\\', 'v', '[', '&', 'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)74;
      doubleArray0[1] = (double) (byte)74;
      doubleArray0[2] = (double) (byte)74;
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1580.86F);
      floatArray0[1] = (float) (short) (-153);
      floatArray0[2] = (float) (short) (-3381);
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short) (-153);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) (short)1;
      ArrayUtils.swap(floatArray0, (int) (short)1, (int) (short)0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-153.0F), (-1580.86F), (-3381.0F), 1.0F, 0.0F, (-153.0F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      charArray0[2] = 'K';
      ArrayUtils.shift(charArray0, (int) (short)0, Integer.MAX_VALUE, 57);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'3', 'B', 'K'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-3423.656F));
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-153.0F), (-1580.86F), (-3381.0F), 1.0F, 0.0F, (-153.0F), 0.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-153.0F), (-1580.86F), (-3381.0F), 1.0F, 0.0F, (-153.0F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'3', 'B', 'K'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-3381);
      doubleArray0[1] = (double) (-153.0F);
      double[] doubleArray1 = ArrayUtils.insert((int) (short)0, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3381.0), (-153.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3381.0), (-153.0), (-3381.0), (-153.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-3389), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long((-1160L));
      assertNotNull(long0);
      assertEquals((-1160L), (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-4529), (Object) long0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1160L), object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object2);
      assertEquals((-1160L), object2);
      
      Object object3 = ArrayUtils.get(objectArray0, (int) 2);
      assertEquals(0, objectArray0.length);
      assertNull(object3);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)2;
      ArrayUtils.swap(shortArray0, 18, 324);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)52;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89));
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-74), (byte)52}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) (byte) (-74);
      doubleArray0[2] = (double) (byte) (-74);
      doubleArray0[3] = (double) (byte) (-74);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[5] = (double) (byte)52;
      doubleArray0[6] = (double) (byte) (-74);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {52.0, (-74.0), (-74.0), (-74.0), (-89.0), 52.0, (-74.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-89);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (byte) (-89);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte) (-89);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {(-89L), 0L, (-89L), 0L, (-89L)}, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-89);
      shortArray0[1] = (short) (byte)52;
      shortArray0[2] = (short) (byte) (-89);
      ArrayUtils.swap(shortArray0, 2146562755, 106, 106);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-89), (short)52, (short) (-89)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1328L);
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1328L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1328L)}, longArray1);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)74;
      Byte byte5 = new Byte((byte)74);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)74, (byte)byte5);
      
      byteArray0[3] = byte5;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) byte0;
      ArrayUtils.shift(shortArray0, (-5352));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)1, (short)0}, shortArray0);
      
      Character character0 = Character.valueOf('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      Byte byte6 = Byte.valueOf((byte)1);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte6);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte6);
      assertNotNull(object0);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte5));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte4));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte3));
      assertEquals((byte)1, object0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = '|';
      charArray0[3] = '|';
      charArray0[4] = 'v';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'B', '|', '\u0000', '|', 'v'}, charArray0);
      assertArrayEquals(new char[] {'B', '|', '\u0000', '|', 'v'}, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte4);
      assertEquals(9, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals("{3}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertFalse(byte4 == byte0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("o)`iz,eFrqV/|7|X");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'j', 'j', 'j'}, charArray0);
      assertArrayEquals(new char[] {'j', 'j'}, charArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, class0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'P';
      floatArray0[1] = (float) 'P';
      floatArray0[3] = (float) 'P';
      floatArray0[4] = (float) ' ';
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {80.0F, 80.0F, 0.0F, 80.0F, 32.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {80.0F, 80.0F, 0.0F, 80.0F, 32.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-153);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-153);
      floatArray0[4] = (float) (short) (-153);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (int) (short)0, 4, (-2134145239));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-153.0F), 0.0F, 0.0F, (-153.0F), (-153.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1407.5668378450837);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1885));
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, (-2091), 4);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[2] = ' ';
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(", Length: 0");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(64, longArray0, (long[]) null);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1449.517482266, (-3625.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((long[]) null);
      Float float0 = new Float((-4621.36));
      assertNotNull(float0);
      assertEquals((-4621.36F), (float)float0, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-12));
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-12);
      doubleArray0[1] = (double) (-12);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-12);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2330.96), (-12.0));
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-12.0), (-12.0), (-1.0), (-12.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, comparator0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurrences((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, (Object) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[5] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte)2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)2);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = ArrayUtils.get(integerArray0, (-440));
      assertEquals(2, integerArray0.length);
      assertNull(integer2);
      
      ArrayUtils.reverse((char[]) null);
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integerArray0[1]);
      assertEquals(2, integerArray0.length);
      assertNotNull(object0);
      assertTrue(object0.equals((Object)integer0));
      assertTrue(object0.equals((Object)integer1));
      assertEquals(2, object0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "GVf+y#J*nHL'+c^Mb,m";
      stringArray0[2] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[4] = "=tCq7p}7m";
      stringArray0[6] = "(7ML`!P5`g,HJ;Zec";
      stringArray0[7] = "GVf+y#J*nHL'+c^Mb,m";
      stringArray0[8] = "=tCq7p}7m";
      String string0 = ArrayUtils.get(stringArray0, 1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("GVf+y#J*nHL'+c^Mb,m", string0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1);
      assertEquals(5, booleanArray0.length);
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'Z');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'f';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-153);
      doubleArray0[1] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-153.0));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-153.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Random.setNextRandom(4);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2133538948);
      floatArray0[1] = (float) (-2133538948);
      floatArray0[2] = (float) (-2133538948);
      float float0 = Float.NaN;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) (-2133538948);
      floatArray0[5] = (float) (-2133538948);
      floatArray0[6] = (float) (-2133538948);
      floatArray0[7] = (float) (-2133538948);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2133538948), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2133538948, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = 712.36584F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte)2);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2.0F, 2.0F, 712.36584F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {712.36584F}, floatArray1, 0.01F);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 712.36584F;
      objectArray0[1] = (Object) 2.0F;
      objectArray0[2] = (Object) 2.0F;
      objectArray0[3] = (Object) 2.0F;
      objectArray0[4] = (Object) 2.0F;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1742.0F);
      floatArray0[3] = (-3896.0F);
      floatArray0[4] = (-1567.2F);
      floatArray0[5] = (-1742.0F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1742.0F), (-3896.0F), (-1567.2F), (-1742.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.reverse(longArray0, (int) (short) (-3381), (int) (short)0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-3431));
      assertNotNull(integer0);
      assertEquals((-3431), (int)integer0);
      
      Integer integer1 = new Integer(2878);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2878, (int)integer1);
      
      Integer integer2 = new Integer((byte)101);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(101, (int)integer2);
      
      Object object0 = ArrayUtils.get((Object[]) byteArray1, 83);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNull(object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = (-3431);
      Integer integer0 = new Integer((-3431));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-3431), (int)integer0);
      
      Integer integer1 = new Integer(2878);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2878, (int)integer1);
      
      Integer integer2 = new Integer((byte)101);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(101, (int)integer2);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals("-3431", mutableInt0.toString());
      assertEquals((-3431.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3431), mutableInt0.intValue());
      assertEquals((-3431L), mutableInt0.longValue());
      assertEquals((-3431), (int)mutableInt0.getValue());
      assertEquals((-3431), (int)mutableInt0.toInteger());
      assertEquals((byte) (-103), mutableInt0.byteValue());
      assertEquals((short) (-3431), mutableInt0.shortValue());
      assertEquals((-3431.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals("-3431", mutableInt0.toString());
      assertEquals((-3431.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3431), mutableInt0.intValue());
      assertEquals((-3431L), mutableInt0.longValue());
      assertEquals((-3431), (int)mutableInt0.getValue());
      assertEquals((-3431), (int)mutableInt0.toInteger());
      assertEquals((byte) (-103), mutableInt0.byteValue());
      assertEquals((short) (-3431), mutableInt0.shortValue());
      assertEquals((-3431.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer3);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals((-3431), (int)integer3);
      
      int int1 = (-2226);
      Integer integer4 = new Integer(804);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(804, (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(0, (int)integer5);
      
      Integer integer6 = new Integer((-2226));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals((-2226), (int)integer6);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer6;
      integerArray0[1] = integer2;
      mutableInt0.add((Number) integer2);
      assertEquals("-3330", mutableInt0.toString());
      assertEquals((-3330.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3330), (int)mutableInt0.toInteger());
      assertEquals((-3330.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3330), (int)mutableInt0.getValue());
      assertEquals((-3330L), mutableInt0.longValue());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((short) (-3330), mutableInt0.shortValue());
      assertEquals((-3330), mutableInt0.intValue());
      assertFalse(integer0.equals((Object)integer4));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer5));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer6));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer6));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer4));
      
      integerArray0[2] = integer4;
      integerArray0[3] = integer3;
      Integer[] integerArray1 = new Integer[6];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer3;
      integerArray1[2] = integer5;
      integerArray1[3] = integer5;
      integerArray1[4] = integer1;
      integerArray1[5] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 72, integerArray0, integerArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short) (-958);
      shortArray0[0] = (short) (-958);
      shortArray0[1] = (short)121;
      shortArray0[2] = (short)0;
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short short1 = (short)43;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)2138, (int) (short)121);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      char char0 = ']';
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 321, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      char[] charArray0 = new char[0];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1506;
      shortArray0[3] = (short)1015;
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(']');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(']', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('J');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('J', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('W');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('W', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1), (int) character2);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character3));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      boolean boolean0 = ArrayUtils.contains(charArray0, ']');
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      ArrayUtils.swap(objectArray0, 101, 1346);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1346;
      intArray0[1] = 1937;
      intArray0[2] = (-498);
      intArray0[3] = 101;
      intArray0[4] = 1937;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1346);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1346, 1937, (-498), 101, 1937}, intArray0);
      
      ArrayUtils.shift(intArray0, 704);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1937, (-498), 101, 1937, 1346}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1346;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      intArray0[2] = 371;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 54, 371}, intArray0);
      assertArrayEquals(new int[] {0, 54, 371}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      shortArray0[5] = (short) (-1);
      shortArray0[3] = (short)13;
      Object[] objectArray0 = new Object[28];
      objectArray0[0] = (Object) 54;
      objectArray0[1] = (Object) (short) (-2313);
      objectArray0[2] = (Object) 371;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 54;
      objectArray0[5] = (Object) 54;
      objectArray0[6] = (Object) 54;
      objectArray0[7] = (Object) (short) (-1);
      objectArray0[8] = (Object) (short) (-2313);
      ArrayUtils.swap(objectArray0, (int) (short) (-1), (-661), 8);
      assertEquals(28, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(intArray0, intArray1);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 54, 371}, intArray0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 759, 1518);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[7];
      Byte byte0 = ArrayUtils.get((Byte[]) null, 759, (Byte) null);
      assertNull(byte0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 1518, (Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 9.0;
      objectArray0[2] = (Object) 9.0;
      objectArray0[3] = (Object) 9.0;
      objectArray0[4] = (Object) 9.0;
      objectArray0[5] = (Object) 9.0;
      objectArray0[6] = (Object) 9.0;
      ArrayUtils.swap(objectArray0, (-467), (-25));
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true, true}, booleanArray0));
      
      ArrayUtils.swap(booleanArray1, 9, (-25), (-1591));
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1309.7994F;
      floatArray0[1] = 1309.7994F;
      floatArray0[2] = (float) (-467);
      floatArray0[3] = (float) (-467L);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = ')';
      charArray0[2] = 'n';
      charArray0[3] = '[';
      charArray0[4] = '(';
      charArray0[5] = 'g';
      int int0 = ArrayUtils.indexOf(charArray0, 'g', (int) '(');
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\\', ')', 'n', '[', '(', 'g'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-121);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-121), (int) (byte) (-121));
      assertEquals(2, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-121)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-467L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.shift(byteArray0, (-1036), 1789569706, (-467));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)18}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-452), (int) (byte)17);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17}, byteArray1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.add((char[]) null, '(');
      assertEquals(1, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'('}, charArray1);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)17;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)17;
      byteArray2[3] = (byte)17;
      byteArray2[4] = (byte)17;
      byteArray2[5] = (byte)4;
      byteArray2[6] = (byte)17;
      byteArray2[7] = (byte)17;
      int int0 = ArrayUtils.indexOf(byteArray2, (byte)17);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17, (byte)4, (byte)17, (byte)17}, byteArray2);
      
      ArrayUtils.shift(byteArray1, (int) (byte)17);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1;
      doubleArray0[1] = (double) (-160L);
      doubleArray0[2] = (double) (-160L);
      doubleArray0[3] = 22.790659;
      doubleArray0[4] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 9, 1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-160.0), (-160.0), 22.790659, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap((Object[]) null, 1, 8);
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)17;
      ArrayUtils.shift(byteArray0, 1837);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-48), (byte) (-54), (byte) (-99), (byte)17, (byte)85, (byte) (-63), (byte)56}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2950);
      shortArray0[1] = (short) (-2950);
      shortArray0[2] = (short) (-1919);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)17, (int) (byte)17);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '\"');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'\"'}, charArray1);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)17);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift(byteArray0, (int) (short) (-2950));
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = Integer.getInteger("x},}uM9|cQvlz e\"y", integer1);
      assertNotNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      Integer integer4 = new Integer(3066);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(3066, (int)integer4);
      
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)41);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 3066;
      floatArray0[1] = (float) (byte)41;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 3981;
      ArrayUtils.reverse(floatArray0, (-1), (-710));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {3066.0F, 41.0F, 2.14748365E9F, (-1.0F), 3981.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte)4, (int) (byte)4, 79);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = null;
      int int0 = (-3275);
      double double0 = 466.0;
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (-3275), 466.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3275, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 66;
      doubleArray0[1] = (double) 66;
      intArray0[2] = 435;
      intArray0[3] = (-3595);
      ArrayUtils.reverse(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-3595), 435, 0, 66}, intArray0);
      
      double[] doubleArray2 = ArrayUtils.remove(doubleArray1, 1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 66.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 66.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, integer0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(integerArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, class0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)112;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)47;
      intArray0[1] = (int) (byte)125;
      intArray0[2] = (int) (byte) (-21);
      intArray0[3] = (int) (byte)112;
      intArray0[4] = (int) (byte)47;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)47;
      intArray0[7] = (int) (byte)9;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-2025);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2025), (int) (short) (-2025));
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 358;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 358;
      longArray0[1] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 54;
      longArray0[5] = (long) 0;
      int int0 = 32;
      int int1 = 686;
      ArrayUtils.shift(longArray0, 0, 32, 686);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {54L, 0L, 358L, 0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 358, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 358;
      intArray0[2] = 358;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 358;
      longArray0[1] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 54;
      longArray0[5] = (long) 0;
      int int1 = 32;
      int int2 = 686;
      ArrayUtils.shift(longArray0, 0, 32, 686);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {54L, 0L, 358L, 0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 358, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1191.2535661257, (-1), (-2944.1843));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)1, object0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (int) (byte) (-78));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 1033, 74);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = '2';
      Character character0 = Character.valueOf('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('2', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = char0;
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'|', '2', '~'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '2';
      doubleArray0[5] = (double) '|';
      doubleArray0[6] = (double) '2';
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 1.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {126.0, 126.0, 1.0, 0.0, 50.0, 124.0, 50.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) character0);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ",dT{ik7W32B[~");
      assertNull(stringArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) char0);
      assertNotNull(object0);
      assertEquals('2', object0);
      
      ArrayUtils.swap((Object[]) null, 6, (int) char0);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 2);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {126.0, 126.0, 0.0, 50.0, 124.0, 50.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {126.0, 126.0, 1.0, 0.0, 50.0, 124.0, 50.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) 466;
      doubleArray0[3] = (double) 466;
      doubleArray0[4] = (double) (int)integerArray0[0];
      doubleArray0[5] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-297.5060693), 466.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new double[] {466.0, 466.0, 466.0, 466.0, 466.0, 1.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, ",dT{ik7W32B[~");
      assertEquals(1, integerArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1600, 466);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 90);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, " gI30)?G");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Byte byte0 = new Byte((byte)116);
      assertNotNull(byte0);
      assertEquals((byte)116, (byte)byte0);
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)116;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 1307);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)116, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[2] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[3] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray0, booleanArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean2));
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      
      Integer integer0 = new Integer(1114111);
      assertNotNull(integer0);
      assertEquals(1114111, (int)integer0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) integer0, (-1493));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = false;
      booleanArray0[1] = false;
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2025);
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-2025));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'd';
      charArray0[2] = '7';
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 'd';
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {100L, 100L, 0L}, longArray0);
      assertArrayEquals(new long[] {100L, 100L, 0L}, longArray1);
      
      Float[] floatArray0 = new Float[4];
      try { 
        Float.valueOf(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (int) (byte)5, 1228, 1228);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-2346), (int) (byte)5);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)5;
      byteArray1[1] = (Byte) (byte)5;
      Byte byte1 = new Byte(byte0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)5, (byte)byte1);
      
      byteArray1[2] = byte1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)10);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)5}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = false;
      booleanArray0[1] = false;
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2025);
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray2));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-2025));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'd';
      charArray0[2] = '7';
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 'd';
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {100L, 100L, 0L}, longArray0);
      assertArrayEquals(new long[] {100L, 100L, 0L}, longArray1);
      
      Float[] floatArray0 = new Float[4];
      try { 
        Float.valueOf(", '");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'Z');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'f';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {102L}, longArray0);
      assertArrayEquals(new long[] {102L}, longArray1);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1328L);
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1328L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-1328L)}, longArray1);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)74);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)74, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)1);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)24);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertEquals((byte)24, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)51);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte)51, (byte)byte7);
      
      Byte byte8 = new Byte((byte)0);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte)0);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte6));
      assertEquals((byte)0, (byte)byte9);
      
      byteArray0[8] = byte9;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)byte0, 1032).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)4799);
      assertNotNull(short0);
      assertEquals((short)4799, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)0);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4799, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3385;
      intArray0[1] = 690;
      intArray0[2] = (-1888);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 53;
      int[] intArray1 = ArrayUtils.add(intArray0, 2, 0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3385, 690, (-1888), 0, 0, 53}, intArray0);
      assertArrayEquals(new int[] {3385, 690, 0, (-1888), 0, 0, 53}, intArray1);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 53;
      intArray2[1] = 3385;
      intArray2[2] = 690;
      intArray2[3] = 690;
      intArray2[5] = 0;
      intArray2[6] = 690;
      intArray2[7] = (-1888);
      int[] intArray3 = ArrayUtils.removeElements(intArray0, intArray2);
      assertEquals(0, intArray3.length);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray2.length);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray3);
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {3385, 690, (-1888), 0, 0, 53}, intArray0);
      assertArrayEquals(new int[] {53, 3385, 690, 690, 0, 0, 690, (-1888)}, intArray2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1971.5978);
      doubleArray0[1] = (double) 690;
      doubleArray0[2] = (double) 53;
      doubleArray0[3] = (double) 690;
      doubleArray0[4] = (double) 690;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1971.5978), 690.0, 53.0, 690.0, 690.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1971.5978), 690.0, 53.0, 690.0, 690.0, (-1971.5978), 690.0, 53.0, 690.0, 690.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)100;
      intArray0[2] = (int) (short)100;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 100, 100}, intArray0);
      assertArrayEquals(new int[] {2, 100, 100, 2, 100, 100}, intArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)115;
      ArrayUtils.swap(byteArray0, (int) (byte)104, 2997, 0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-1), (byte)122, (byte)104, (byte)115}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)100;
      intArray0[2] = (int) (short)100;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 100, 100}, intArray0);
      assertArrayEquals(new int[] {2, 100, 100, 2, 100, 100}, intArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)115;
      ArrayUtils.swap(byteArray0, 116, 2997, 0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-1), (byte)122, (byte)104, (byte)115}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-855.658063984);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1199.47));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      char char0 = 't';
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = Character.valueOf('b');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('b', (char)character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2147483646, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483646, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-38L));
      assertNull(longArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-4795), 4);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Long long0 = new Long((-160L));
      assertNotNull(long0);
      assertEquals((-160L), (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) long0, 765);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-160L);
      doubleArray0[2] = (double) (-4795);
      doubleArray0[3] = (double) 765;
      doubleArray0[4] = (double) (-160L);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 765, 0);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-160.0), (-4795.0), 765.0, (-160.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-2050), (-2050));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      intArray0[2] = 358;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 54, 358}, intArray0);
      assertArrayEquals(new int[] {0, 54, 358}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)0;
      ArrayUtils.swap(intArray1, (int) (short) (-1), 358, (int) (short)0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 54, 358}, intArray0);
      assertArrayEquals(new int[] {0, 54, 358}, intArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 120, 358);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2657L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2594, 2594);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      Integer integer2 = Integer.getInteger("x},}uM9|cQvlz e\"y", integer1);
      assertNotNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(Integer.MAX_VALUE, (int)integer3);
      
      Integer integer4 = new Integer(3050);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(3050, (int)integer4);
      
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      
      Integer integer6 = new Integer(1301);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals(1301, (int)integer6);
      
      Integer integer7 = new Integer(2640);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertEquals(2640, (int)integer7);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 3050);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 2640;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (-347L);
      longArray0[4] = (long) 3050;
      longArray0[5] = (-2080L);
      longArray0[6] = 0L;
      ArrayUtils.swap(longArray0, 9, (-853), 2);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 2640L, 2147483647L, (-347L), 3050L, (-2080L), 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1L), 2640L, 2147483647L, (-347L), 3050L, (-2080L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-498);
      longArray0[1] = (-2237L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-498L), (-2237L)}, longArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 't';
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      char char1 = 'b';
      Character character1 = Character.valueOf('b');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('b', (char)character1);
      
      characterArray0[1] = character1;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, 81);
      assertEquals(2, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = char1;
      charArray0[2] = char0;
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = char1;
      charArray0[6] = char1;
      charArray0[7] = char1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) char0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, true, false, true}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '8');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.swap(charArray0, 2245, 1134, 2245);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2717.1263199138634);
      doubleArray0[1] = 365.2;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 1065.87855913;
      doubleArray0[4] = 2583.8563261449;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1154.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 2583.8563261449);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2717.1263199138634), 365.2, 1.5, 1065.87855913, 2583.8563261449, (-1.0), 1154.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2717.1263199138634), 365.2, 1.5, 1065.87855913, (-1.0), 1154.8}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-855.658063984);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1199.47));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray1, 0.01);
      
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      Double[] doubleArray2 = new Double[3];
      doubleArray2[0] = (Double) (-855.658063984);
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) (-855.658063984);
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertSame(doubleArray2, doubleArray3);
      assertSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Integer integer0 = new Integer(3981);
      assertNotNull(integer0);
      assertEquals(3981, (int)integer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, 3981, Integer.MAX_VALUE);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {';', '\u0000'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 712.36584F;
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) 57;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = 178.63;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3981);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {59.0, 178.63}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, 1431655765, 10, Integer.MAX_VALUE);
      ArrayUtils.shift((long[]) null, (-2106185884), 1431655765, 10);
      ArrayUtils.swap(charArray0, 12, (-2106185884));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {';', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)8);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      Byte byte0 = new Byte((byte) (-120));
      assertNotNull(byte0);
      assertEquals((byte) (-120), (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) boolean1);
      assertNotNull(string0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-855.658063984);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1199.47));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-855.658063984)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)96);
      assertEquals((-1), int0);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 5);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<Long> class4 = Long.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(5, classArray1.length);
      assertNotNull(classArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'B';
      charArray0[2] = 'z';
      charArray0[3] = 'v';
      charArray0[4] = '+';
      charArray0[5] = 'o';
      charArray0[6] = '=';
      ArrayUtils.swap(charArray0, (int) (byte)96, (int) (byte)96, (int) (byte)96);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'L', 'B', 'z', 'v', '+', 'o', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (-365), (-1240), (-446));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)51;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)109, (byte)1, (byte)31, (byte)1, (byte)51}, byteArray0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 2342);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2342, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Character character0 = Character.valueOf('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Character character1 = Character.valueOf('E');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('E', (char)character1);
      
      boolean[] booleanArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Character character2 = Character.valueOf('L');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertEquals('L', (char)character2);
      
      Character character3 = Character.valueOf('4');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('4', (char)character3);
      
      Character character4 = new Character('0');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertEquals('0', (char)character4);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[5];
      floatArray0[2] = (float) (byte) (-102);
      floatArray0[3] = (float) (byte) (-102);
      floatArray0[4] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-102.0F), (-102.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (int) (byte)2);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-102.0F), 0.0F, 0.0F, 0.0F, (-102.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[18];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(36, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-102);
      intArray0[1] = (int) (byte) (-102);
      intArray0[2] = (int) (byte) (-102);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -102, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-160L);
      doubleArray0[2] = (double) 0;
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = '(';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {',', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)52;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89));
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-74), (byte)52}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) (byte) (-74);
      doubleArray0[2] = (double) (byte)52;
      doubleArray0[3] = (double) (byte) (-74);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[5] = (double) (byte) (-74);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {52.0, (-74.0), 52.0, (-74.0), (-89.0), (-74.0), 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'o');
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '(';
      charArray0[2] = ',';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'&', '(', ','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-2790);
      longArray0[3] = (long) (byte)0;
      longArray0[5] = (long) (byte) (-102);
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-645.2128F);
      floatArray0[1] = (float) (byte)12;
      floatArray0[2] = (float) (byte) (-102);
      floatArray0[3] = (float) (byte)12;
      floatArray0[4] = 712.36584F;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) (byte)12;
      floatArray0[7] = (float) (byte) (-102);
      floatArray0[8] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 12.0F);
      assertEquals(6, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-645.2128F), (-102.0F), 712.36584F, 0.0F, (-102.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-645.2128F), 12.0F, (-102.0F), 12.0F, 712.36584F, 0.0F, 12.0F, (-102.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1923.18F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-949.5189F), (int) (byte) (-63));
      assertEquals(1, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1923.18F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1923.18F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((long[]) null, 103, (-1));
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', 4225);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      charArray0[2] = '3';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '3';
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) '3';
      floatArray0[5] = (float) 'B';
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 51.0F, 51.0F, 66.0F, 51.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      Byte byte0 = new Byte((byte)61);
      assertNotNull(byte0);
      assertEquals((byte)61, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      Byte byte2 = new Byte((byte)74);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte2);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 444);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Character character0 = Character.valueOf('');
      assertNotNull(character0);
      assertEquals('', (char)character0);
      
      Byte byte3 = Byte.valueOf((byte) (-42));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-42), (byte)byte3);
      
      Short short0 = new Short((byte)74);
      assertNotNull(short0);
      assertEquals((short)74, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)74, object0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)90);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-121), (byte)111, (byte)100, (byte) (-21), (byte)90, (byte)47, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-121), (byte)111, (byte)100, (byte) (-21), (byte)47, (byte)0}, byteArray1);
      
      ArrayUtils.reverse((int[]) null, 1, (-488));
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-1993L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, Integer.MAX_VALUE);
      assertEquals(2, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-1993L)}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1993L);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1993.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1993.0F), (-1993.0F)}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 0L);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1993.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = 4998;
      int int2 = 51;
      ArrayUtils.shift(booleanArray0, (-132), 51, (-603));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      
      Class<Integer>[] classArray0 = null;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4998;
      intArray0[1] = 2014;
      intArray0[2] = 88;
      intArray0[3] = 51;
      intArray0[4] = 51;
      intArray0[5] = 1;
      intArray0[6] = 4998;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-2124141434));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2124141434, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      
      Byte[] byteArray0 = new Byte[6];
      try { 
        Byte.valueOf("s?8=yRr@z8nI!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s?8=yRr@z8nI!\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-3573), 192, (-132));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3573);
      intArray0[1] = (int) (byte) (-63);
      intArray0[2] = (int) (byte) (-63);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-132));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -132, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = 192;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = (-3573);
      int int2 = (-132);
      ArrayUtils.shift(booleanArray0, (-3573), 192, (-132));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3573);
      intArray0[1] = (int) (byte) (-63);
      intArray0[2] = (int) (byte) (-63);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-132));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -132, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) "K)1IS.`NM");
      assertNotNull(object1);
      assertEquals("K)1IS.`NM", object1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[2] = boolean1;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      
      ArrayUtils.shift(booleanArray0, (-1932), (int) (byte)0, (int) (byte)0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-130L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-130L), (long)long1);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 1290L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      MutableInt mutableInt0 = new MutableInt((-1));
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "java.lang.Float");
      assertNotNull(string0);
      assertEquals("16", string0);
      
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(1693.901);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1693.901, (double)double1, 0.01);
      
      Double double2 = new Double((-2177.8605768));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-2177.8605768), (double)double2, 0.01);
      
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-2023.2956858138255));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-2971), 1738L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2971, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1797.8890382);
      doubleArray0[1] = (-830.37756292);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 178.63;
      ArrayUtils.swap(doubleArray0, 1935, (-2147483639), (-1613));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1797.8890382), (-830.37756292), 0.0, 1.5, 178.63}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1613);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1454;
      longArray0[3] = (long) (-2147483639);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1454, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1454, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      Float float0 = Float.valueOf(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1094.642041942635));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1094.6421F), (float)float1, 0.01F);
      
      Double double0 = new Double((-1094.642041942635));
      assertNotNull(double0);
      assertEquals((-1094.642041942635), (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1094.642041942635));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      Byte byte0 = new Byte((byte) (-67));
      assertNotNull(byte0);
      assertEquals((byte) (-67), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-67));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-67), (byte)byte1);
      
      Byte byte2 = new Byte((byte)46);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)46, (byte)byte2);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-1698));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (int)integerArray0[0];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-940.37574445057);
      doubleArray0[3] = (double) (byte) (-67);
      doubleArray0[4] = (-940.37574445057);
      ArrayUtils.swap(doubleArray0, 804, 2284, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {466.0, 1.0, (-940.37574445057), (-67.0), (-940.37574445057)}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (byte)74);
      assertNull(shortArray1);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, (-67.0));
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1797.8890382);
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)88);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)88, (byte)byte1);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-2180));
      assertNull(shortArray0);
      
      ArrayUtils.swap(doubleArray0, 270, 0, 30);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1797.8890382), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (byte)74);
      assertNull(shortArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte1;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte1;
      objectArray0[0] = (Object) byte1;
      ArrayUtils.swap(objectArray0, 0, (-2288), 256);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray2 = ArrayUtils.add((short[]) null, (short)1109);
      assertEquals(1, shortArray2.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)1109}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift((short[]) null, (-2778), (-2778), (-3085));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-2778);
      objectArray0[1] = (Object) (-2778);
      ArrayUtils.swap(objectArray0, Integer.MAX_VALUE, 2562, 850);
      assertEquals(2, objectArray0.length);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2778);
      intArray1[1] = (-1268);
      intArray1[2] = Integer.MAX_VALUE;
      intArray1[3] = 2562;
      intArray1[4] = (-1268);
      intArray1[5] = (-1268);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2778), (-1268), Integer.MAX_VALUE, 2562, (-1268), (-1268)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1328L);
      longArray0[1] = (-1328L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1328L), (-1328L)}, longArray0);
      assertArrayEquals(new long[] {(-1328L), (-1328L)}, longArray1);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)74);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)74, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)1;
      Byte byte6 = new Byte((byte)1);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertEquals((byte)1, (byte)byte6);
      
      byteArray0[4] = byte6;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (byte)0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1328L);
      doubleArray0[1] = (-940.37574445057);
      doubleArray0[2] = (double) 0;
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (int) (byte)1, (int) byte5);
      assertEquals(3, doubleArray0.length);
      assertFalse(byte5 == byte0);
      assertArrayEquals(new double[] {(-940.37574445057), (-1328.0), 0.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray1);
      
      ArrayUtils.shift((short[]) null, 91, (-979), (-2288));
      ArrayUtils.swap((Object[]) byteArray0, (int) byteArray0[4], (-1), (int) (byte)74);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = (double) (-7);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertEquals(14, doubleArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short)1722;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)1722, (short)2, (short)2, (short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)2);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)2);
      assertEquals(8, shortArray0.length);
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 4, 5, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)1722, (short)2, (short)2, (short)2, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      int int0 = (-467);
      Object object0 = ArrayUtils.get(objectArray0, (-467));
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-467);
      longArray0[1] = (long) (-467);
      longArray0[2] = (long) (-467);
      longArray0[3] = (long) (-467);
      longArray0[4] = (long) (-467);
      longArray0[5] = (long) (-467);
      longArray0[6] = (long) (-467);
      longArray0[7] = (long) (-467);
      longArray0[8] = (long) (-467);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(531, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(576, bitSet0.size());
      assertEquals(576, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-467L), (-467L), (-467L), (-467L), (-467L), (-467L), (-467L), (-467L), (-467L)}, longArray0);
      
      Object object1 = ArrayUtils.removeAll(object0, bitSet0);
      assertEquals(8, objectArray0.length);
      assertEquals(9, longArray0.length);
      assertEquals(531, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(576, bitSet0.size());
      assertEquals(576, bitSet0.length());
      assertNull(object1);
      assertArrayEquals(new long[] {(-467L), (-467L), (-467L), (-467L), (-467L), (-467L), (-467L), (-467L), (-467L)}, longArray0);
      
      objectArray0[1] = null;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)115;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)82);
      assertEquals(3, byteArray0.length);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)74, (byte)4, (byte)115}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 1.0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.hashCode((Object) boolean0);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) boolean0;
      objectArray0[2] = (Object) boolean0;
      Float float0 = new Float((-3423.656F));
      assertNotNull(float0);
      assertEquals((-3423.656F), (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals((-3423.656F), object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) boolean0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ",dT{ik7W32B[~");
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object object1 = ArrayUtils.toPrimitive(objectArray0[3]);
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertEquals((-3423.656F), object1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2124392425), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2124392425, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-406);
      ArrayUtils.shift(shortArray0, (-3595));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-406)}, shortArray0);
      
      Character character0 = Character.valueOf('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('v', object0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'B';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3595);
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) 'v';
      intArray0[3] = (int) (short) (-406);
      intArray0[4] = (int) (short) (-406);
      intArray0[5] = (int) (short) (-406);
      intArray0[6] = (int) (short) (-406);
      intArray0[7] = (int) 'v';
      ArrayUtils.swap(intArray0, (-406), (-406), (-2147149668));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-3595), 66, 118, (-406), (-406), (-406), (-406), 118, 0}, intArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, 'v');
      assertEquals(2, charArray2.length);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray2);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-406);
      integerArray0[3] = (Integer) (-3595);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1021), integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1021, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0, (String) null);
      assertNotNull(string0);
      assertEquals("false", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = '\'';
      charArray0[2] = '&';
      charArray0[3] = '';
      charArray0[4] = '\\';
      charArray0[5] = '8';
      Integer integer0 = new Integer(172);
      assertNotNull(integer0);
      assertEquals(172, (int)integer0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer1 = new Integer(9);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(9, (int)integer1);
      
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3725, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3725, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 59);
      assertEquals(0, integerArray0.length);
      assertNull(integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)0;
      MutableInt mutableInt0 = new MutableInt(59.0);
      assertEquals((short)59, mutableInt0.shortValue());
      assertEquals((byte)59, mutableInt0.byteValue());
      assertEquals(59.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(59.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(59, (int)mutableInt0.toInteger());
      assertEquals(59, (int)mutableInt0.getValue());
      assertEquals(59, mutableInt0.intValue());
      assertEquals("59", mutableInt0.toString());
      assertEquals(59L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((short)59, mutableInt0.shortValue());
      assertEquals((byte)59, mutableInt0.byteValue());
      assertEquals(59.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(59.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(59, (int)mutableInt0.toInteger());
      assertEquals(59, (int)mutableInt0.getValue());
      assertEquals(59, mutableInt0.intValue());
      assertEquals("59", mutableInt0.toString());
      assertEquals(59L, mutableInt0.longValue());
      assertNotNull(integer1);
      assertEquals(59, (int)integer1);
      
      Integer integer2 = new Integer(59);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(59, (int)integer2);
      
      Integer integer3 = new Integer(804);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(804, (int)integer3);
      
      mutableInt0.add((Number) 59.0);
      assertEquals(118, mutableInt0.intValue());
      assertEquals(118L, mutableInt0.longValue());
      assertEquals("118", mutableInt0.toString());
      assertEquals(118.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)118, mutableInt0.shortValue());
      assertEquals(118.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(118, (int)mutableInt0.getValue());
      assertEquals((byte)118, mutableInt0.byteValue());
      assertEquals(118, (int)mutableInt0.toInteger());
      
      Integer[] integerArray1 = ArrayUtils.insert(0, integerArray0, integerArray0);
      assertEquals(0, integerArray1.length);
      assertEquals(0, integerArray0.length);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 59;
      floatArray0[1] = (float) 59;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 59;
      floatArray0[4] = (float) 804;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (short)0);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {59.0F, 59.0F, 0.0F, 59.0F, 804.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {59.0F, 0.0F, 59.0F, 804.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 5664, (-979), (-2167));
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(3198);
      assertNotNull(integer0);
      assertEquals(3198, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2167);
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      Double double1 = new Double(3.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3.0, (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertEquals(5, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1722;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1722}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-55);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)8, (byte)72, (byte)97, (byte)101, (byte) (-55)}, byteArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(6, (int)integer0);
      
      integerArray0[0] = integer0;
      int int2 = 11;
      Integer integer1 = new Integer(11);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(11, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int2);
      assertNotNull(integer2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)int2));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(11, (int)integer2);
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt((Number) (byte)8);
      assertEquals(8, (int)mutableInt0.getValue());
      assertEquals((byte)8, mutableInt0.byteValue());
      assertEquals(8L, mutableInt0.longValue());
      assertEquals(8, (int)mutableInt0.toInteger());
      assertEquals("8", mutableInt0.toString());
      assertEquals(8.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(8.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(8, mutableInt0.intValue());
      assertEquals((short)8, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer3 = mutableInt0.getValue();
      assertEquals(8, (int)mutableInt0.getValue());
      assertEquals((byte)8, mutableInt0.byteValue());
      assertEquals(8L, mutableInt0.longValue());
      assertEquals(8, (int)mutableInt0.toInteger());
      assertEquals("8", mutableInt0.toString());
      assertEquals(8.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(8.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(8, mutableInt0.intValue());
      assertEquals((short)8, mutableInt0.shortValue());
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int2));
      assertEquals(8, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-2226));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertEquals((-2226), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-406));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-406), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(74);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals(74, (int)integer6);
      
      integerArray0[6] = integer6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(74, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 74, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertEquals(10, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '4');
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) 'k';
      longArray0[2] = (long) (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 107L);
      assertEquals(3, longArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 107L, (-1L)}, longArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 2);
      assertEquals(1, characterArray0.length);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-78));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-37);
      doubleArray0[1] = (double) (byte) (-37);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)52, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2727), (int) (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.swap((Object[]) arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, 2980, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, 2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      
      Integer integer1 = new Integer((-572));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-572), (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-1), (int)integer2);
      
      Integer integer3 = new Integer(11);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(11, (int)integer3);
      
      int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, 4210);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4210, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'B';
      ArrayUtils.shift(charArray0, (-2147483647), 3981, (-2147483647));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'B', '>'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 712.36584F;
      int[] intArray0 = new int[1];
      intArray0[0] = 3981;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 6);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3981}, intArray0);
      assertArrayEquals(new int[] {3981}, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 3981);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {712.36584F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 712.36584F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      short short0 = (short) (-319);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-319);
      shortArray0[1] = (short) (-319);
      shortArray0[2] = (short) (-319);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-319));
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-319), (short) (-319), (short) (-319)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-319), (short) (-319)}, shortArray1);
      
      Double[] doubleArray0 = null;
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 3083.1322078);
      assertNull(doubleArray1);
      
      Boolean boolean0 = Boolean.valueOf("]ka&?`+k-[xU[,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[0] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)19);
      assertNull(shortArray0);
      
      MutableInt mutableInt0 = new MutableInt(52);
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals("52", mutableInt0.toString());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals(52L, mutableInt0.longValue());
      assertEquals(52, mutableInt0.intValue());
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(52);
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52L, mutableInt1.longValue());
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals("52", mutableInt1.toString());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(52);
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals(52, mutableInt2.intValue());
      assertEquals("52", mutableInt2.toString());
      assertEquals(52L, mutableInt2.longValue());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertNotNull(mutableInt2);
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals(52, mutableInt2.intValue());
      assertEquals("52", mutableInt2.toString());
      assertEquals(52L, mutableInt2.longValue());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(52, mutableInt3.intValue());
      assertEquals(52, (int)mutableInt3.toInteger());
      assertEquals((byte)52, mutableInt3.byteValue());
      assertEquals("52", mutableInt3.toString());
      assertEquals((short)52, mutableInt3.shortValue());
      assertEquals(52, (int)mutableInt3.getValue());
      assertEquals(52.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(52.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(52L, mutableInt3.longValue());
      assertNotNull(mutableInt3);
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)91);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)19;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {19.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (int) (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      Double double0 = new Double((byte) (-21));
      assertNotNull(double0);
      assertEquals((-21.0), (double)double0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) double0, "]m#<z");
      assertNotNull(string0);
      assertEquals("-21.0", string0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2993), 2, (-2993));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSorted(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1773));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_LONG_ARRAY, (-650L));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Byte byte0 = new Byte((byte) (-119));
      assertNotNull(byte0);
      assertEquals((byte) (-119), (byte)byte0);
      
      byte byte1 = (byte)2;
      Byte byte2 = new Byte((byte)2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      
      Byte byte3 = new Byte((byte)6);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)6, (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-62));
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-62), (byte)byte4);
      
      Byte byte5 = new Byte((byte) (-62));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertEquals((byte) (-62), (byte)byte5);
      
      Byte[] byteArray2 = new Byte[6];
      byteArray2[0] = byte2;
      byteArray2[1] = byte2;
      byteArray2[2] = byte3;
      Byte byte6 = new Byte((byte)2);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals((byte)2, (byte)byte6);
      
      byteArray2[3] = byte6;
      byteArray2[4] = byte5;
      byteArray2[5] = byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray2, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      ArrayUtils.swap(intArray0, (int) (short)0, (-84), (int) (short)0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)55;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)88, (byte)44, (byte)92, (byte)111, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)44, (byte)92, (byte)111, (byte)55, (byte)88, (byte)44, (byte)92, (byte)111, (byte)55}, byteArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)55;
      longArray0[1] = (long) (short)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 413L, (int) (byte)92);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {55L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-406);
      ArrayUtils.shift(shortArray0, (-3595));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-406)}, shortArray0);
      
      Character character0 = Character.valueOf('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('v', object0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'B';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3595);
      intArray0[1] = (int) 'B';
      intArray0[2] = (int) 'v';
      intArray0[3] = (int) (short) (-406);
      intArray0[4] = (int) (short) (-406);
      intArray0[5] = (int) (short) (-406);
      intArray0[6] = (int) (short) (-406);
      intArray0[7] = (int) 'v';
      intArray0[8] = (int) 'B';
      ArrayUtils.swap(intArray0, (-406), (-406), (-2147149668));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-3595), 66, 118, (-406), (-406), (-406), (-406), 118, 66}, intArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, 'v');
      assertEquals(2, charArray2.length);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray2);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-90);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)103, (byte) (-121), (byte)49, (byte)103, (byte) (-90)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-121), (byte)49, (byte)103, (byte) (-90)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)2, 2827);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (double) 2827;
      doubleArray0[7] = (double) 2827;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2827.0, 2827.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2827.0, 2827.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-151.5), 1753.0);
      assertEquals(3, doubleArray0.length);
      assertSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      int[] intArray0 = new int[3];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("");
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse((Object[]) booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.swap(longArray0, (-1635), 7, 7);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 100);
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1722;
      shortArray0[1] = (short)1722;
      shortArray0[2] = (short)1722;
      shortArray0[3] = (short)1722;
      shortArray0[4] = (short)1722;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1722, (short)1722, (short)1722, (short)1722, (short)1722}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) (short)1722;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short)1722;
      longArray0[4] = (long) (short)1722;
      longArray0[5] = (long) (-1);
      longArray0[6] = (-1959L);
      longArray0[7] = (long) (short)1722;
      longArray0[8] = (long) (short)1722;
      ArrayUtils.swap(longArray0, 2, 100, (int) (short)1722);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {100L, 1722L, (-1L), 1722L, 1722L, (-1L), (-1959L), 1722L, 1722L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, true, true}, booleanArray1));
      
      boolean[] booleanArray3 = new boolean[6];
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = false;
      booleanArray3[3] = false;
      booleanArray3[4] = true;
      booleanArray3[5] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray3, false);
      assertEquals(6, booleanArray3.length);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray3));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-160L));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, false, true}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '8');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '3');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) true;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertSame(booleanArray2, booleanArray3);
      assertSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0, 0, (-2473));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (-2473));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1092;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1092, (short)0, (short)0, (short)0}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(floatArray0, 2292.217F);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertTrue(int1 == int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2473));
      assertEquals(0, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      char[] charArray0 = new char[0];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3381);
      shortArray0[2] = (short) (-3381);
      shortArray0[3] = (short)1015;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short) (-21844);
      shortArray0[6] = (short) (-3381);
      shortArray0[7] = (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-3381), (short) (-3381), (short)1015, (short) (-3381), (short) (-21844), (short) (-3381), (short)0}, shortArray0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'f');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-3381);
      longArray0[1] = (long) (short)0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3381L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3381L), 0L}, longArray1);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2391);
      intArray0[1] = 8;
      intArray0[2] = 508;
      intArray0[3] = 556;
      intArray0[4] = (-1338);
      Float float0 = new Float((double) (-2391));
      assertNotNull(float0);
      assertEquals((-2391.0F), (float)float0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2391);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2391L)}, longArray0);
      assertArrayEquals(new long[] {(-2391L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[3] = false;
      booleanArray0[1] = false;
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2025);
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray2));
      
      ArrayUtils.shuffle(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-2025));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'd';
      charArray0[2] = '7';
      charArray0[3] = 'f';
      charArray0[4] = 'e';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '^');
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'h', 'd', '7', 'f', 'e'}, charArray1);
      assertArrayEquals(new char[] {'h', 'd', '7', 'f', 'e'}, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'h';
      longArray0[1] = (long) 'e';
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {104L, 101L}, longArray0);
      assertArrayEquals(new long[] {104L, 101L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1560L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1560L);
      assertEquals(1, longArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1560L}, longArray0);
      
      int[] intArray0 = new int[12];
      intArray0[0] = 78;
      intArray0[1] = (-467);
      intArray0[2] = 0;
      ArrayUtils.shift(intArray0, (-467), (-759), 0);
      assertEquals(12, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'I';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'a');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'a', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'a', 'a', 'I', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 78;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 'I';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-467), (double) 78);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {78.0, 0.0, 0.0, 73.0}, doubleArray0, 0.01);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-467));
      assertEquals(4, doubleArray0.length);
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{1, 2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {78.0, 0.0, 0.0, 73.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 78;
      floatArray0[1] = (float) 78;
      floatArray0[2] = (float) 0;
      ArrayUtils.shift(floatArray0, (-467));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 78.0F, 78.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)90;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)90}, shortArray0);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(intArray0, (-981), 1981);
      assertEquals(12, intArray0.length);
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotNull(bitSet2);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      short short0 = (short)36;
      Short short1 = new Short((short)36);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)36, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)36);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)36, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-1217));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-1217), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short) (-1217));
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertEquals((short) (-1217), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short(short0);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertEquals((short)36, (short)short5);
      
      shortArray0[4] = short5;
      short[] shortArray1 = new short[2];
      shortArray1[0] = short0;
      shortArray1[1] = short0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)36;
      doubleArray0[1] = (double) (short)36;
      doubleArray0[2] = (double) (short)shortArray0[3];
      doubleArray0[3] = (double) short0;
      doubleArray0[4] = (double) (short)36;
      doubleArray0[5] = (double) short0;
      doubleArray0[6] = (double) short0;
      doubleArray0[7] = (double) (short)36;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-829.1230072634));
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {36.0, 36.0, (-1217.0), 36.0, 36.0, 36.0, 36.0, 36.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) (short)36;
      intArray0[2] = (int) short0;
      intArray0[3] = (int) (short)shortArray0[2];
      intArray0[4] = (int) (short)36;
      int[] intArray1 = ArrayUtils.add(intArray0, (int) shortArray0[3]);
      assertEquals(6, intArray1.length);
      assertEquals(6, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {36, 36, 36, (-1217), 36, (-1217)}, intArray1);
      assertArrayEquals(new int[] {36, 36, 36, (-1217), 36}, intArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {36, 36, 36, (-1217), 36}, intArray0);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(6, shortArray0.length);
      assertEquals(12, intArray2.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {36, 36, 36, (-1217), 36, (-1217)}, intArray1);
      assertArrayEquals(new int[] {36, 36, 36, (-1217), 36}, intArray0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      short short0 = (short)36;
      Short short1 = new Short((short)36);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)36, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)36);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)36, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-1217));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-1217), (short)short3);
      
      shortArray0[2] = short1;
      Short short4 = new Short((short) (-1217));
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertEquals((short) (-1217), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short(short0);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertEquals((short)36, (short)short5);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)36;
      doubleArray0[2] = (double) short0;
      doubleArray0[2] = (double) short0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {36.0, 0.0, 36.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0, (-1), (-1));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0));
      assertEquals(2, doubleArray0.length);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) "K)1IS.`NM");
      assertNotNull(object1);
      assertEquals("K)1IS.`NM", object1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-885);
      intArray0[1] = (-5004);
      intArray0[2] = (-885);
      intArray0[3] = (-885);
      int[] intArray1 = ArrayUtils.add(intArray0, 508);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-885), (-5004), (-885), (-885)}, intArray0);
      assertArrayEquals(new int[] {(-885), (-5004), (-885), (-885), 508}, intArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-885), (-5004), (-885), (-885)}, intArray0);
      assertArrayEquals(new int[] {(-885), (-5004), (-885), (-885), 508}, intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-885), (-5004), (-885), (-885)}, intArray0);
      assertArrayEquals(new int[] {(-885), (-5004), (-885), (-885), (-885), (-5004), (-885), (-885)}, intArray2);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2005.26951863925));
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)5;
      ArrayUtils.reverse(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)5}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-505);
      intArray0[1] = (int) (short)5;
      intArray0[2] = (int) (byte)5;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-505), 5, 5, 2, 2, 0}, intArray0);
      assertArrayEquals(new int[] {(-505), 5, 5, 2, 2, 0, 1}, intArray1);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-958);
      shortArray0[1] = (short)121;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-30935);
      shortArray0[4] = (short) (-787);
      shortArray0[5] = (short)1231;
      short[] shortArray1 = ArrayUtils.removeElements((short[]) null, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-958), (short)121, (short)0, (short) (-30935), (short) (-787), (short)1231}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-787);
      doubleArray0[1] = (double) (short)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) (-30935));
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-787.0), 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1231, (short) (-787), (short) (-30935), (short)0, (short)121, (short) (-958)}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      int int0 = 1;
      intArray0[2] = 1;
      int[] intArray1 = ArrayUtils.add(intArray0, 2);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 1, 2}, intArray1);
      assertArrayEquals(new int[] {0, 0, 1}, intArray0);
      
      Byte byte0 = new Byte((byte) (-77));
      assertNotNull(byte0);
      assertEquals((byte) (-77), (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(13, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[2] = '|';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', (-693));
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'w');
      assertEquals(8, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '|', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      
      short[] shortArray0 = new short[1];
      short short0 = (short)2138;
      shortArray0[0] = (short)2138;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)43, (int) (short)2138);
      assertEquals(1, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2138}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      char char0 = ']';
      charArray0[1] = ']';
      int int0 = 321;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 321, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2727);
      shortArray0[1] = (short) (-15);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-319));
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2727), (short) (-15)}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) (short) (-15));
      assertNull(doubleArray0);
      
      Boolean boolean0 = Boolean.valueOf("]ka&?`+k-[xU[,");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) (short) (-2727), (-285), (-2944.1843));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 1033, 74);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = '2';
      Character character0 = Character.valueOf('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('2', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = char0;
      charArray0[2] = '~';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'|', '2', '~'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '2';
      doubleArray0[5] = (double) '|';
      doubleArray0[6] = (double) '2';
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 1.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {126.0, 126.0, 1.0, 0.0, 50.0, 124.0, 50.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.hashCode((Object) character0);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ",dT{ik7W32B[~");
      assertNull(stringArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) char0);
      assertNotNull(object0);
      assertEquals('2', object0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(",dT{ik7W32B[~");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("Array and element cannot both be null");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean(false);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean5);
      assertNotNull(boolean6);
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf("cK*9-1+&J-Y_r");
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = new Boolean("Array and element cannot both be null");
      assertNotNull(boolean8);
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8);
      
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 3.0;
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      charArray0[2] = '3';
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3468.3264F;
      floatArray0[1] = (-302.0F);
      floatArray0[2] = 1814.03F;
      floatArray0[3] = (-1840.9996F);
      floatArray0[4] = 871.8994F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-3209.0F);
      floatArray0[8] = (-1.0F);
      ArrayUtils.reverse(floatArray0, (-4254), 3253);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-3209.0F), 0.0F, 1.0F, 871.8994F, (-1840.9996F), 1814.03F, (-302.0F), 3468.3264F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-302.0F);
      doubleArray0[1] = (double) (-4254);
      doubleArray0[2] = (double) 871.8994F;
      doubleArray0[3] = (double) (-1840.9996F);
      doubleArray0[4] = (double) (-302.0F);
      doubleArray0[5] = (double) (-302.0F);
      doubleArray0[6] = (double) (-1.0F);
      MockRandom mockRandom0 = new MockRandom((-643L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-4254.0), 871.8994140625, (-1840.9996337890625), (-302.0), (-302.0), (-1.0), (-302.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)19);
      assertNull(shortArray0);
      
      MutableInt mutableInt0 = new MutableInt(52);
      assertEquals(52, mutableInt0.intValue());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("52", mutableInt0.toString());
      assertEquals(52L, mutableInt0.longValue());
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals((byte)52, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(52);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals(52L, mutableInt1.longValue());
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertEquals("52", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(52);
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(52L, mutableInt2.longValue());
      assertEquals(52, mutableInt2.intValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals("52", mutableInt2.toString());
      assertNotNull(mutableInt2);
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(52L, mutableInt2.longValue());
      assertEquals(52, mutableInt2.intValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals("52", mutableInt2.toString());
      assertEquals(52, (int)mutableInt3.getValue());
      assertEquals((byte)52, mutableInt3.byteValue());
      assertEquals(52.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals("52", mutableInt3.toString());
      assertEquals(52, (int)mutableInt3.toInteger());
      assertEquals(52.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(52L, mutableInt3.longValue());
      assertEquals((short)52, mutableInt3.shortValue());
      assertEquals(52, mutableInt3.intValue());
      assertNotNull(mutableInt3);
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      mutableIntArray0[0] = mutableInt3;
      mutableIntArray0[3] = mutableInt1;
      mutableIntArray0[2] = mutableInt3;
      mutableIntArray0[3] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableIntArray0[1]);
      assertEquals(4, mutableIntArray0.length);
      assertEquals(3, mutableIntArray1.length);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-237);
      intArray0[1] = (-3621);
      ArrayUtils.shift(intArray0, (-237), (-237), 111);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-237), (-3621)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)1);
      assertNull(shortArray0);
      
      MutableInt mutableInt0 = new MutableInt(52);
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals("52", mutableInt0.toString());
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(52, mutableInt0.intValue());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(52L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(52);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals("52", mutableInt1.toString());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(52);
      assertEquals(52, mutableInt2.intValue());
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(52L, mutableInt2.longValue());
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals("52", mutableInt2.toString());
      assertNotNull(mutableInt2);
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals(52, mutableInt2.intValue());
      assertEquals(52, (int)mutableInt2.getValue());
      assertEquals(52, (int)mutableInt2.toInteger());
      assertEquals(52.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(52L, mutableInt2.longValue());
      assertEquals((short)52, mutableInt2.shortValue());
      assertEquals((byte)52, mutableInt2.byteValue());
      assertEquals("52", mutableInt2.toString());
      assertEquals("52", mutableInt3.toString());
      assertEquals(52, mutableInt3.intValue());
      assertEquals((short)52, mutableInt3.shortValue());
      assertEquals(52, (int)mutableInt3.toInteger());
      assertEquals((byte)52, mutableInt3.byteValue());
      assertEquals(52, (int)mutableInt3.getValue());
      assertEquals(52L, mutableInt3.longValue());
      assertEquals(52.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(52.0, mutableInt3.doubleValue(), 0.01);
      assertNotNull(mutableInt3);
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      mutableIntArray0[0] = mutableInt3;
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt3;
      mutableIntArray0[3] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt1);
      assertEquals(4, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(52, mutableInt1.intValue());
      assertEquals(52, (int)mutableInt1.toInteger());
      assertEquals((byte)52, mutableInt1.byteValue());
      assertEquals((short)52, mutableInt1.shortValue());
      assertEquals(52, (int)mutableInt1.getValue());
      assertEquals("52", mutableInt1.toString());
      assertEquals(52.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(52.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(52L, mutableInt1.longValue());
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt3);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-237);
      intArray0[1] = (-3621);
      ArrayUtils.shift(intArray0, (-237), (-237), 111);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-237), (-3621)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1514));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_THROWABLE_ARRAY, (Object) arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurrences((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, (Object) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 59);
      assertEquals(0, integerArray0.length);
      assertNull(integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 59;
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 59;
      int[] intArray0 = new int[8];
      intArray0[0] = 59;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)1);
      assertNull(shortArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[4];
      MutableInt mutableInt0 = new MutableInt((-237));
      assertEquals((-237.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-237), mutableInt0.shortValue());
      assertEquals((-237), mutableInt0.intValue());
      assertEquals((-237L), mutableInt0.longValue());
      assertEquals((-237), (int)mutableInt0.toInteger());
      assertEquals((-237), (int)mutableInt0.getValue());
      assertEquals("-237", mutableInt0.toString());
      assertEquals((byte)19, mutableInt0.byteValue());
      assertEquals((-237.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-237));
      assertEquals((-237), (int)mutableInt1.toInteger());
      assertEquals("-237", mutableInt1.toString());
      assertEquals((byte)19, mutableInt1.byteValue());
      assertEquals((-237L), mutableInt1.longValue());
      assertEquals((-237), mutableInt1.intValue());
      assertEquals((short) (-237), mutableInt1.shortValue());
      assertEquals((-237.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-237.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-237), (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((-3621));
      assertEquals("-3621", mutableInt2.toString());
      assertEquals((-3621), (int)mutableInt2.toInteger());
      assertEquals((-3621), (int)mutableInt2.getValue());
      assertEquals((-3621), mutableInt2.intValue());
      assertEquals((-3621.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-3621.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-3621), mutableInt2.shortValue());
      assertEquals((byte) (-37), mutableInt2.byteValue());
      assertEquals((-3621L), mutableInt2.longValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals("-3621", mutableInt2.toString());
      assertEquals((-3621), (int)mutableInt2.toInteger());
      assertEquals((-3621), (int)mutableInt2.getValue());
      assertEquals((-3621), mutableInt2.intValue());
      assertEquals((-3621.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-3621.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-3621), mutableInt2.shortValue());
      assertEquals((byte) (-37), mutableInt2.byteValue());
      assertEquals((-3621L), mutableInt2.longValue());
      assertEquals((-3621), (int)mutableInt3.getValue());
      assertEquals((-3621), (int)mutableInt3.toInteger());
      assertEquals((-3621.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((byte) (-37), mutableInt3.byteValue());
      assertEquals("-3621", mutableInt3.toString());
      assertEquals((-3621.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-3621L), mutableInt3.longValue());
      assertEquals((-3621), mutableInt3.intValue());
      assertEquals((short) (-3621), mutableInt3.shortValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt0);
      assertEquals(4, mutableIntArray0.length);
      assertEquals(2, mutableIntArray1.length);
      assertEquals((-237.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-237), mutableInt0.shortValue());
      assertEquals((-237), mutableInt0.intValue());
      assertEquals((-237L), mutableInt0.longValue());
      assertEquals((-237), (int)mutableInt0.toInteger());
      assertEquals((-237), (int)mutableInt0.getValue());
      assertEquals("-237", mutableInt0.toString());
      assertEquals((byte)19, mutableInt0.byteValue());
      assertEquals((-237.0F), mutableInt0.floatValue(), 0.01F);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      ArrayUtils.shift(intArray0, 85, (-3621), 59);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {59, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {''}, charArray0);
      assertArrayEquals(new char[] {'', ''}, charArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) arrayUtils0;
      long[] longArray0 = ArrayUtils.add((long[]) null, 114L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {114L}, longArray0);
      
      objectArray0[1] = (Object) arrayUtils0;
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = (Object) arrayUtils0;
      objectArray0[5] = (Object) arrayUtils0;
      objectArray0[6] = (Object) arrayUtils0;
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1.5, 1.5);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)116);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      longArray0[2] = (-1312L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2L);
      assertEquals(8, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-4529L), 2L, (-1312L), 2L, (-4529L), (-1160L), 2L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-4529L), (-1312L), (-4529L), (-1160L), 0L}, longArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '\'';
      intArray0[1] = (-4529);
      intArray0[2] = (-4529);
      intArray0[3] = (-4529);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      Object[] objectArray0 = new Object[0];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      longArray0[7] = (-1312L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2L);
      assertEquals(8, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-4529L), 2L, 0L, 2L, (-4529L), (-1160L), 2L, (-1312L)}, longArray0);
      assertArrayEquals(new long[] {(-4529L), 0L, (-4529L), (-1160L), (-1312L)}, longArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'J');
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '\'';
      intArray0[1] = (-4529);
      intArray0[2] = (-4529);
      intArray0[3] = (-4529);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = 1;
      intArray0[1] = 1;
      ArrayUtils.swap(intArray0, 1048, 0, 1040);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 0, 0, 1, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)52;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-120));
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-74), (byte)52}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) (byte) (-74);
      doubleArray0[2] = (double) (byte)52;
      doubleArray0[3] = (double) (byte) (-74);
      doubleArray0[4] = (double) (byte) (-120);
      doubleArray0[5] = (double) (byte)52;
      doubleArray0[6] = (double) (byte) (-74);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {52.0, (-74.0), 52.0, (-74.0), (-120.0), 52.0, (-74.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(4, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false}, booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-74);
      intArray0[1] = (int) (byte)52;
      intArray0[2] = (int) (byte) (-120);
      intArray0[3] = (int) (byte)52;
      intArray0[4] = (int) (byte)52;
      intArray0[5] = 0;
      intArray0[6] = (-166);
      ArrayUtils.swap(intArray0, 52, (int) (byte) (-120), 1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-74), 52, (-120), 52, 52, 0, (-166)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-2288), (-2288), (-979));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap((Object[]) arrayUtils0.EMPTY_FIELD_ARRAY, (-979), (-1268), 2562);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[9];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((long[]) null, (int) (byte)5, (int) (byte)5, (int) (byte)5);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)5, (int) (byte)5);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-1), 116, (int) (byte)5);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[3] = (long) (byte)2;
      Character character0 = new Character('`');
      assertNotNull(character0);
      assertEquals('`', (char)character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[1] = character0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-4529);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-4529)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4529);
      doubleArray0[1] = (double) (byte)2;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-4529.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-4529));
      assertEquals(1, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(bitSet0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-546.763302), (int) (byte)2);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)2);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)5;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3292), (int) (byte)0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      char[] charArray0 = new char[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'H';
      Character character0 = Character.valueOf('H');
      assertNotNull(character0);
      assertEquals('H', (char)character0);
      
      characterArray0[0] = character0;
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt((Number) (byte) (-21));
      assertEquals((byte) (-21), mutableInt0.byteValue());
      assertEquals((-21), (int)mutableInt0.getValue());
      assertEquals((-21), (int)mutableInt0.toInteger());
      assertEquals("-21", mutableInt0.toString());
      assertEquals((-21.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-21.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-21), mutableInt0.intValue());
      assertEquals((short) (-21), mutableInt0.shortValue());
      assertEquals((-21L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals((byte) (-21), mutableInt0.byteValue());
      assertEquals((-21), (int)mutableInt0.getValue());
      assertEquals((-21), (int)mutableInt0.toInteger());
      assertEquals("-21", mutableInt0.toString());
      assertEquals((-21.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-21.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-21), mutableInt0.intValue());
      assertEquals((short) (-21), mutableInt0.shortValue());
      assertEquals((-21L), mutableInt0.longValue());
      assertEquals((-21), (int)mutableInt1.toInteger());
      assertEquals((-21), (int)mutableInt1.getValue());
      assertEquals((byte) (-21), mutableInt1.byteValue());
      assertEquals("-21", mutableInt1.toString());
      assertEquals((-21.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-21.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-21), mutableInt1.shortValue());
      assertEquals((-21), mutableInt1.intValue());
      assertEquals((-21L), mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(59);
      assertEquals(59, mutableInt2.intValue());
      assertEquals(59.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(59, (int)mutableInt2.toInteger());
      assertEquals(59.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)59, mutableInt2.byteValue());
      assertEquals("59", mutableInt2.toString());
      assertEquals((short)59, mutableInt2.shortValue());
      assertEquals(59, (int)mutableInt2.getValue());
      assertEquals(59L, mutableInt2.longValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt1);
      assertEquals((-21L), mutableInt3.longValue());
      assertEquals((-21), (int)mutableInt3.getValue());
      assertEquals((short) (-21), mutableInt3.shortValue());
      assertEquals((-21.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals("-21", mutableInt3.toString());
      assertEquals((-21), mutableInt3.intValue());
      assertEquals((-21.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-21), (int)mutableInt3.toInteger());
      assertEquals((byte) (-21), mutableInt3.byteValue());
      assertEquals((byte) (-21), mutableInt0.byteValue());
      assertEquals((-21), (int)mutableInt0.getValue());
      assertEquals((-21), (int)mutableInt0.toInteger());
      assertEquals("-21", mutableInt0.toString());
      assertEquals((-21.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-21.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-21), mutableInt0.intValue());
      assertEquals((short) (-21), mutableInt0.shortValue());
      assertEquals((-21L), mutableInt0.longValue());
      assertEquals((-21), (int)mutableInt1.toInteger());
      assertEquals((-21), (int)mutableInt1.getValue());
      assertEquals((byte) (-21), mutableInt1.byteValue());
      assertEquals("-21", mutableInt1.toString());
      assertEquals((-21.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-21.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-21), mutableInt1.shortValue());
      assertEquals((-21), mutableInt1.intValue());
      assertEquals((-21L), mutableInt1.longValue());
      assertNotNull(mutableInt3);
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'H';
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) (byte) (-21);
      doubleArray0[3] = (double) char0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-21), (int) (byte) (-21));
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {72.0, 72.0, (-21.0), 72.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Integer integer0 = new Integer(1099);
      assertNotNull(integer0);
      assertEquals(1099, (int)integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1099);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1099, 1099, 1099, 1099, 1099}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 57.0F;
      floatArray0[1] = (float) (int)integerArray0[4];
      floatArray0[2] = (float) (int)integerArray0[0];
      floatArray0[3] = (float) (int)integerArray0[0];
      floatArray0[4] = (float) (int)integerArray0[1];
      floatArray0[5] = (float) 'a';
      floatArray0[6] = 3891.0F;
      floatArray0[7] = (float) '\\';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1121.69F));
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1121.69F), 57.0F, 1099.0F, 1099.0F, 1099.0F, 1099.0F, 97.0F, 3891.0F, 92.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {57.0F, 1099.0F, 1099.0F, 1099.0F, 1099.0F, 97.0F, 3891.0F, 92.0F}, floatArray0, 0.01F);
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1121.69F), 57.0F, 1099.0F, 1099.0F, 1099.0F, 1099.0F, 97.0F, 3891.0F, 92.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {57.0F, 1099.0F, 1099.0F, 1099.0F, 1099.0F, 97.0F, 3891.0F, 92.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (short) (-775);
      doubleArray0[2] = (double) (short) (-775);
      doubleArray0[4] = (double) (short) (-775);
      ArrayUtils.shift(doubleArray0, (int) (short) (-775));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-775);
      doubleArray0[2] = (double) (short) (-775);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 3226);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 3226;
      ArrayUtils.swap(doubleArray2, 0, Integer.MAX_VALUE, 0);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3226.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-775);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-775));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-775)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-775), (short) (-775)}, shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-775);
      doubleArray0[1] = (double) (short) (-775);
      doubleArray0[2] = (double) (short) (-775);
      doubleArray0[4] = (double) (short) (-775);
      ArrayUtils.shift(doubleArray0, (int) (short) (-775));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-775.0), (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-775);
      floatArray0[1] = (float) (short) (-775);
      ArrayUtils.swap(floatArray0, 0, 3226, 3226);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-775.0F), (-775.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 3226);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-775.0), (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-775.0), (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray1, 0.01);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-3574));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-775)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-775)}, shortArray2);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 3226;
      ArrayUtils.swap(doubleArray2, 0, Integer.MAX_VALUE, 0);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3226.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_DOUBLE_ARRAY, 0, 0, 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      ArrayUtils.shift(floatArray0, 181);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-54);
      ArrayUtils.shift(charArray0, (-594), 0, (int) (byte) (-54));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      float[] floatArray0 = new float[10];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1742.0F));
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = 2715.7717240606135;
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2625.184427152), 0.7);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.7, 2715.7717240606135, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (-4104));
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (-112), (-319));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      byte byte0 = (byte) (-102);
      Byte byte1 = new Byte((byte) (-102));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-102), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-102));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-102), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-102));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-102), (byte)byte3);
      
      byte byte4 = (byte)0;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte5);
      
      Byte byte6 = new Byte((byte) (-38));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte) (-38), (byte)byte6);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte5;
      byteArray0[2] = byte1;
      byteArray0[3] = byte6;
      Byte byte7 = new Byte((byte) (-20));
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertEquals((byte) (-20), (byte)byte7);
      
      byteArray0[4] = byte7;
      byteArray0[6] = byte1;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-2425));
      assertNotNull(short0);
      assertEquals((short) (-2425), (short)short0);
      
      Short short1 = new Short((byte)51);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)51, (short)short1);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)51, (short)51, (short) (-2425)}, shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-2425);
      doubleArray0[1] = (double) (short)shortArray0[1];
      doubleArray0[2] = (double) byte4;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) (short)shortArray0[0];
      doubleArray0[6] = (double) (byte)51;
      doubleArray0[7] = (double) (short)shortArray0[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-102.0));
      assertEquals(8, doubleArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {(-2425.0), 51.0, 0.0, (-102.0), (-102.0), 51.0, 51.0, 51.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)52;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89));
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-74), (byte)52}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) (byte) (-74);
      doubleArray0[2] = (double) (byte)52;
      doubleArray0[3] = (double) (byte) (-74);
      doubleArray0[4] = (double) (byte) (-89);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {52.0, (-74.0), 52.0, (-74.0), (-89.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'o');
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)52);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-19));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1312L);
      longArray0[1] = (-1312L);
      longArray0[2] = (-1312L);
      longArray0[3] = (-1312L);
      longArray0[4] = (-1312L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-2666L));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1312L), (-1312L), (-1312L), (-1312L), (-1312L)}, longArray0);
      assertArrayEquals(new long[] {(-1312L), (-1312L), (-1312L), (-1312L), (-1312L)}, longArray1);
      
      Short short0 = new Short((short)653);
      assertNotNull(short0);
      assertEquals((short)653, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)653, object0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1312L), (-1312L), (-1312L), (-1312L), (-1312L)}, longArray0);
      assertArrayEquals(new long[] {(-1312L), (-1312L), (-1312L), (-1312L), (-1312L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)52;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89));
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-74), (byte)52}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) (byte) (-74);
      doubleArray0[2] = (double) (byte)52;
      doubleArray0[3] = (double) (byte) (-74);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[5] = (double) (byte)52;
      doubleArray0[6] = (double) (byte) (-74);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {52.0, (-74.0), 52.0, (-74.0), (-89.0), 52.0, (-74.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-89);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (byte) (-89);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte) (-89);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {(-89L), 0L, (-89L), 0L, (-89L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (-3142L);
      longArray0[3] = 4053L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2376L));
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1L), 0L, (-3142L), 4053L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4554;
      shortArray0[1] = (short)101;
      shortArray0[2] = (short)1212;
      shortArray0[3] = (short) (-1478);
      shortArray0[4] = (short) (-33);
      shortArray0[5] = (short)1887;
      shortArray0[6] = (short)508;
      shortArray0[7] = (short) (-1069);
      ArrayUtils.shuffle(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)101, (short)1212, (short) (-1478), (short) (-33), (short)1887, (short)508, (short) (-1069), (short)4554}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1742.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-3368.004F);
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2711;
      intArray0[1] = (-2147483639);
      intArray0[2] = (int) (short)2711;
      intArray0[3] = (-2147483639);
      intArray0[4] = 5104;
      intArray0[5] = (int) (short)182;
      intArray0[6] = (int) (short)182;
      intArray0[7] = (int) (short)182;
      intArray0[8] = (-2147483639);
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(18, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2711, (-2147483639), 2711, (-2147483639), 5104, 182, 182, 182, (-2147483639)}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt((int) (short)182);
      assertEquals(182, (int)mutableInt0.getValue());
      assertEquals((byte) (-74), mutableInt0.byteValue());
      assertEquals(182, (int)mutableInt0.toInteger());
      assertEquals(182.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)182, mutableInt0.shortValue());
      assertEquals(182, mutableInt0.intValue());
      assertEquals(182.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(182L, mutableInt0.longValue());
      assertEquals("182", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      try { 
        Long.valueOf("c#/_PXbW+l\"p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c#/_PXbW+l\"p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      intArray0[2] = 371;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 54, 371}, intArray0);
      assertArrayEquals(new int[] {0, 54, 371}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      shortArray0[5] = (short) (-1);
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2711;
      shortArray0[6] = (short)182;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 371;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)182;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) (short)0;
      int[] intArray2 = ArrayUtils.insert((int) (short)0, intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertEquals(6, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 54, 371}, intArray0);
      assertArrayEquals(new int[] {0, 54, 371}, intArray1);
      assertArrayEquals(new int[] {0, 54, 371, 0, 54, 371}, intArray2);
      
      MutableInt mutableInt0 = new MutableInt((int) (short) (-2313));
      assertEquals("-2313", mutableInt0.toString());
      assertEquals((byte) (-9), mutableInt0.byteValue());
      assertEquals((-2313), (int)mutableInt0.toInteger());
      assertEquals((-2313.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2313), (int)mutableInt0.getValue());
      assertEquals((-2313L), mutableInt0.longValue());
      assertEquals((short) (-2313), mutableInt0.shortValue());
      assertEquals((-2313), mutableInt0.intValue());
      assertEquals((-2313.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals("-2313", mutableInt0.toString());
      assertEquals((byte) (-9), mutableInt0.byteValue());
      assertEquals((-2313), (int)mutableInt0.toInteger());
      assertEquals((-2313.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2313), (int)mutableInt0.getValue());
      assertEquals((-2313L), mutableInt0.longValue());
      assertEquals((short) (-2313), mutableInt0.shortValue());
      assertEquals((-2313), mutableInt0.intValue());
      assertEquals((-2313.0F), mutableInt0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-2288), (-2288), (-979));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_INT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt(909);
      assertEquals(909, (int)mutableInt0.toInteger());
      assertEquals((byte) (-115), mutableInt0.byteValue());
      assertEquals((short)909, mutableInt0.shortValue());
      assertEquals(909, mutableInt0.intValue());
      assertEquals("909", mutableInt0.toString());
      assertEquals(909.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(909L, mutableInt0.longValue());
      assertEquals(909.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(909, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, (long) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-319));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_INT_ARRAY, 5);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {5}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.addFirst(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (short) (-15);
      doubleArray2[4] = 1371.2870256985857;
      doubleArray2[5] = (double) (-1);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-28293);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)6, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-28293), (short)0}, shortArray0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short) (-28293));
      assertNotNull(integer0);
      assertEquals((-28293), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3891);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(3891, (int)integer1);
      
      integerArray0[1] = integer1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-28293);
      doubleArray0[1] = (double) (-2147483639);
      doubleArray0[2] = (double) (int)integerArray0[0];
      ArrayUtils.swap(doubleArray0, (-2430), (-2147483639), 2);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-28293.0), (-2.147483639E9), (-28293.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (short) (-28293), (long[]) null, longArray0);
      assertEquals(0, longArray0.length);
      assertNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0, 0, (-2473));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (byte)0);
      assertNull(shortArray0);
      
      ArrayUtils.swap(doubleArray0, 0, 2144683799, (-2473));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      Long long0 = new Long((-1160L));
      assertNotNull(long0);
      assertEquals((-1160L), (long)long0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 82);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = '-';
      charArray0[4] = '?';
      charArray0[5] = '!';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'!', '?', '-', 'H', 'H', '?'}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) '!';
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = (double) 'H';
      doubleArray0[4] = (double) '!';
      doubleArray0[5] = (double) 'H';
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (byte)2;
      ArrayUtils.swap(doubleArray0, 1, (-476), 974);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {33.0, 72.0, 72.0, 33.0, 72.0, (-1.0), 2.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)1}, shortArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1580.86F);
      floatArray0[1] = (float) (short) (-153);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short) (-153);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) (short)1;
      ArrayUtils.swap(floatArray0, (int) (short)1, (int) (short)0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-153.0F), (-1580.86F), 0.0F, 1.0F, 0.0F, (-153.0F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'B';
      charArray0[2] = '=';
      ArrayUtils.shift(charArray0, (int) (short)0, Integer.MAX_VALUE, (int) 'B');
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'3', 'B', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1797.8890382);
      doubleArray0[1] = (-830.37756292);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 178.63;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 10);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-1797.8890382), (-830.37756292), 0.0, 1.5, 178.63}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 10;
      intArray0[3] = 2;
      intArray0[4] = (-434);
      intArray0[5] = 10;
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 2, 10, 2, (-434), 10, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (-434));
      assertNull(longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) (-434);
      floatArray0[2] = (float) 10;
      floatArray0[3] = (-1520.098F);
      floatArray0[4] = (float) 0;
      ArrayUtils.swap(floatArray0, 2, 0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {10.0F, (-434.0F), 10.0F, (-1520.098F), 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '3';
      charArray0[2] = 'B';
      charArray0[3] = '(';
      ArrayUtils.shift(charArray0, 102, 0, 0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'=', '3', 'B', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long((-1160L));
      assertNotNull(long0);
      assertEquals((-1160L), (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-4529), (Object) long0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1160L), object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object2);
      assertEquals((-1160L), object2);
      
      Object object3 = ArrayUtils.get(objectArray0, (int) 2);
      assertEquals(0, objectArray0.length);
      assertNull(object3);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1160L), (-2322));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-141.798));
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)2;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-2790);
      longArray0[3] = (long) (byte)0;
      longArray0[5] = (long) (byte) (-102);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2790);
      intArray0[1] = (-2790);
      intArray0[2] = (int) (byte) (-102);
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2790), (-2790), (-102), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, 339L);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2790);
      floatArray0[1] = (float) (-2790);
      floatArray0[2] = (float) (-2790);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) (byte) (-102);
      floatArray0[6] = (float) 0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-2790.0F), (-2790.0F), (-2790.0F), (-1.0F), 2.0F, (-102.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2790.0F), (-2790.0F), (-2790.0F), (-1.0F), 2.0F, (-102.0F), 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte) (-102);
      shortArray0[2] = (short) (byte) (-102);
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte) (-102);
      shortArray0[7] = (short) (byte) (-102);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2);
      assertEquals(4, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-102), (short) (-102), (short) (-102), (short) (-102)}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-102), (short) (-102), (short)2, (short)2, (short)2, (short) (-102), (short) (-102)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1797.8890382);
      doubleArray0[1] = (-830.37756292);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 178.63;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 10);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-1797.8890382), (-830.37756292), 0.0, 1.5, 178.63}, doubleArray0, 0.01);
      
      ArrayUtils.shift((long[]) null, 1431655765, 1431655765, 1431655765);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((long[]) null, (int) (byte)5, (int) (byte)5, (int) (byte)5);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)5, (int) (byte)5);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((int[]) null, (int) (byte)5, 116);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 4);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-113);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-93), (byte) (-113)}, byteArray0);
      
      ArrayUtils.swap((int[]) null, (-2143902772), (int) (byte)64);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)1, (-553));
      assertEquals(3, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-93), (byte) (-113)}, byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'l');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'l'}, charArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-113);
      doubleArray0[1] = (-646.854578246106);
      doubleArray0[2] = (double) (byte) (-113);
      doubleArray0[3] = (double) (byte) (-93);
      doubleArray0[4] = (double) (byte)1;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-113.0), (-646.854578246106), (-113.0), (-93.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-113.0), (-646.854578246106), (-113.0), (-93.0), 1.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-113.0);
      objectArray0[1] = (Object) (-93.0);
      objectArray0[2] = (Object) (-113.0);
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[2]);
      assertEquals(3, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap((int[]) null, (-2143902772), (-2195));
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      intArray0[4] = (-2778);
      ArrayUtils.swap(intArray0, (-2778), (-2778), 1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2778), (-2778), 0, (-2778), (-2778), 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-2778));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (int) (short) (-153));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -153, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1958.53736854957, (int) (byte)0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {5.0, 0.0, 0.0, 10.0, 10.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)0;
      intArray1[1] = (int) (byte)0;
      intArray1[2] = 0;
      intArray1[3] = (int) (byte)5;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 90;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 5, 0, 0, 90}, intArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'm';
      charArray0[1] = '`';
      charArray0[2] = '5';
      charArray0[3] = '/';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', '`', '5', '/'}, charArray0);
      assertArrayEquals(new char[] {'`', '5', '/'}, charArray1);
      
      ArrayUtils.swap(intArray1, (-288), 5);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 5, 0, 0, 90}, intArray1);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-997);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2241);
      shortArray0[4] = (short)1344;
      shortArray0[5] = (short) (-647);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (short)1344);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) (short) (-997);
      doubleArray0[2] = (double) (short)1344;
      doubleArray0[3] = (-2495.1294602);
      doubleArray0[4] = (double) (short) (-2241);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short) (-997), (int) (short)1344);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.5, (-997.0), 1344.0, (-2495.1294602), (-2241.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {''}, charArray0);
      assertArrayEquals(new char[] {'', ''}, charArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) arrayUtils0;
      long[] longArray0 = ArrayUtils.add((long[]) null, 114L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {114L}, longArray0);
      
      objectArray0[1] = (Object) arrayUtils0;
      objectArray0[2] = (Object) arrayUtils0;
      objectArray0[3] = (Object) arrayUtils0;
      objectArray0[4] = (Object) arrayUtils0;
      objectArray0[5] = (Object) arrayUtils0;
      objectArray0[6] = (Object) arrayUtils0;
      objectArray0[7] = (Object) arrayUtils0;
      double[] doubleArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.reverse((long[]) null, (-1), (-1178));
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[5];
      longArray0[0] = 4L;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4L, 0L, 2L, 2L, 2L}, longArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      ArrayUtils.reverse(charArray0, (-384), 4);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      String string0 = ArrayUtils.toString((Object) arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(string0);
      
      byte[] byteArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-22));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {''}, charArray0);
      assertArrayEquals(new char[] {'', ''}, charArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) arrayUtils0;
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-1478.0), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Boolean boolean0 = Boolean.valueOf("no");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1), 1636.9638538461077);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      float[] floatArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_FLOAT_ARRAY, 2, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3511;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)48;
      shortArray0[4] = (short)3511;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)48;
      shortArray0[7] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)3511, (short)0, (short)2, (short)48, (short)3511, (short)2, (short)48, (short)0}, shortArray0);
      
      Character character0 = Character.valueOf('7');
      assertNotNull(character0);
      assertEquals('7', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('7', object0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'7'}, charArray1);
      assertArrayEquals(new char[] {'7'}, charArray0);
      
      Short short0 = new Short((short)21845);
      assertNotNull(short0);
      assertEquals((short)21845, (short)short0);
      
      String string0 = ArrayUtils.toString((Object) character0, "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("7", string0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)18688);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3511, (short)0, (short)2, (short)48, (short)3511, (short)2, (short)48, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3511, (short)0, (short)2, (short)48, (short)3511, (short)2, (short)48, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96)}, byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-96);
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short) (byte) (-96);
      shortArray0[3] = (short) (byte) (-96);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96)}, shortArray0);
      
      Float float0 = new Float((-5267.2847F));
      assertNotNull(float0);
      assertEquals((-5267.2847F), (float)float0, 0.01F);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-96));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96)}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 920;
      intArray0[1] = 920;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 920, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      short short0 = (short)36;
      Short short1 = new Short((short)36);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)36, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)36);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)36, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-1217));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-1217), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short) (-1217));
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-1217), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short(short0);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short1));
      assertEquals((short)36, (short)short5);
      
      shortArray0[4] = short5;
      short[] shortArray1 = new short[2];
      shortArray1[0] = short0;
      shortArray1[1] = short0;
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)36, (short)36}, shortArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((short)36);
      assertNotNull(double0);
      assertEquals(36.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(36.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, doubleArray0[0]);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) doubleArray0[1];
      doubleArray2[1] = (double) (short)36;
      doubleArray2[2] = 4497.28;
      doubleArray2[3] = (double) doubleArray0[0];
      doubleArray2[4] = (double) short0;
      doubleArray2[5] = (-2857.9340978438345);
      doubleArray2[6] = (double) (short) (-1217);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (double) (short) (-1217), 78.11079523);
      assertEquals(7, doubleArray2.length);
      assertEquals("{6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {36.0, 36.0, 4497.28, 36.0, 36.0, (-2857.9340978438345), (-1217.0)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte) (-17), (-737.2736498169));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.reverse((long[]) null, (-2144842708), (-2778));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2144842708);
      int int0 = ArrayUtils.indexOf(doubleArray0, 3132.736, (-2144842708), 3132.736);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-2.144842708E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 116);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 0.0;
      objectArray0[6] = (Object) 0.0;
      Boolean boolean1 = Boolean.valueOf("El9p`4YGE,~");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-298.23084514), 0.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      short[] shortArray0 = new short[6];
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Short short1 = new Short((short) (-1104));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1104), (short)short1);
      
      Short short2 = Short.valueOf((short)1);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)1, (short)short2);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.insert(1226, (short[]) null, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) 1226;
      longArray0[2] = (long) (short) (-1104);
      longArray0[3] = (long) 1226;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1L, 1226L, (-1104L), 1226L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-33);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-33), (byte)0, (byte)0, (byte) (-33)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-33), (byte)0, (byte)0, (byte) (-33), (byte) (-1), (byte) (-33), (byte)0, (byte)0, (byte) (-33)}, byteArray1);
      
      Character character0 = Character.valueOf('n');
      assertNotNull(character0);
      assertEquals('n', (char)character0);
      
      MutableInt mutableInt0 = new MutableInt(2146384930);
      assertEquals(2.1463849E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2146384930, (int)mutableInt0.toInteger());
      assertEquals(2146384930, mutableInt0.intValue());
      assertEquals(2146384930, (int)mutableInt0.getValue());
      assertEquals((short)15394, mutableInt0.shortValue());
      assertEquals("2146384930", mutableInt0.toString());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(2.14638493E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2146384930L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0);
      assertEquals(2.1463849E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2146384930, (int)mutableInt0.toInteger());
      assertEquals(2146384930, mutableInt0.intValue());
      assertEquals(2146384930, (int)mutableInt0.getValue());
      assertEquals((short)15394, mutableInt0.shortValue());
      assertEquals("2146384930", mutableInt0.toString());
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(2.14638493E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2146384930L, mutableInt0.longValue());
      assertNotNull(string0);
      assertEquals("2146384930", string0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-33);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte) (-33);
      shortArray0[5] = (short) (byte) (-33);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short)53;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-33));
      assertEquals(8, shortArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-33), (short)0, (short)0, (short) (-33), (short) (-33), (short)0, (short)53}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-325);
      ArrayUtils.reverse(shortArray0, (int) (short) (-325), 1320);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-325)}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short) (-325), (-1949));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1430), 961);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0}, byteArray1);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '1');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'1'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)17, (int) (byte)17);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-112);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)98, (-1592));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-63), (byte)2, (byte)34, (byte)98, (byte)17, (byte) (-112)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString((Object) "K)1IS.`NM");
      assertNotNull(string0);
      assertEquals("K)1IS.`NM", string0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1212, 508);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2147078613, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147078613, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2, 0, 0, 2, 0, 0}, intArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)115;
      ArrayUtils.swap(byteArray0, (int) (byte)104, 2997, 0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-1), (byte)122, (byte)104, (byte)115}, byteArray0);
      
      ArrayUtils.swap(byteArray0, 2332, (-377), (int) (byte)104);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-1), (byte)122, (byte)104, (byte)115}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2332, 2997);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) "K)1IS.`NM");
      assertNotNull(object1);
      assertEquals("K)1IS.`NM", object1);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1212, 508);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2147078613, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147078613, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[7];
      longArray0[1] = (long) (byte)2;
      longArray0[5] = (-1160L);
      int[] intArray0 = new int[7];
      intArray0[0] = (-4529);
      intArray0[1] = (-4529);
      intArray0[2] = (int) (byte)2;
      intArray0[3] = 64;
      intArray0[4] = (-4529);
      intArray0[5] = (-4529);
      intArray0[6] = (int) (byte)2;
      ArrayUtils.swap(intArray0, (-4529), (int) (byte)2);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2, (-4529), (-4529), 64, (-4529), (-4529), 2}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-4529), 2);
      assertEquals(7, intArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {2, (-4529), (-4529), 64, (-4529), (-4529), 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      char[] charArray0 = new char[8];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '\u0000';
      floatArray0[1] = (float) 'P';
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'P';
      floatArray0[4] = (float) ' ';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[0] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2309));
      assertEquals(4, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (-2309), (-2309), 1);
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      ArrayUtils.swap(objectArray0, 101, 1346);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1346;
      intArray0[1] = 1937;
      intArray0[2] = (-498);
      intArray0[3] = 101;
      intArray0[4] = 1937;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1346);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1346, 1937, (-498), 101, 1937}, intArray0);
      
      ArrayUtils.shift(intArray0, 704);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1937, (-498), 101, 1937, 1346}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1346;
      ArrayUtils.swap(longArray0, 1937, (-498));
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1346L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'B';
      ArrayUtils.shift(charArray0, (int) '>', 3981, (int) '>');
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 712.36584F;
      int[] intArray0 = new int[1];
      intArray0[0] = 3981;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 6);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3981}, intArray0);
      assertArrayEquals(new int[] {3981}, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 3981);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {712.36584F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) 712.36584F;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)10;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-2), (byte) (-128), (byte) (-9), (byte)10}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-128);
      intArray0[1] = (int) (byte) (-9);
      intArray0[2] = (int) (byte) (-128);
      intArray0[3] = (int) (byte)10;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte) (-9));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-128), (-9), (-128), 10}, intArray0);
      assertArrayEquals(new int[] {(-128), (-128), 10}, intArray1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte) (-9);
      byteArray1[3] = (byte)100;
      ArrayUtils.reverse(byteArray1);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)100, (byte) (-9), (byte) (-9), (byte) (-2)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      int[] intArray0 = new int[3];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      String string0 = "";
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-132));
      assertEquals(3, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        bitSet0.set((-1), (-132), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)52, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (int) (byte)4);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_LONG_ARRAY, (int) (byte)4, 526);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(108);
      assertNotNull(integer0);
      assertEquals(108, (int)integer0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      Short short1 = new Short((short)30253);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)30253, (short)short1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Float";
      stringArray0[1] = "iC]`TL*AEg2knG";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "java.lang.Float");
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 116;
      intArray0[1] = 1228;
      intArray0[2] = (-1259);
      intArray0[3] = 37;
      intArray0[4] = 441;
      int int0 = ArrayUtils.indexOf(intArray0, (-1551), (-1259));
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {116, 1228, (-1259), 37, 441}, intArray0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3381);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1078);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-3381);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-2628);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short) (-3381), (-2315));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1078), 0, (-3381), 0, (-2628)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertArrayEquals(new int[] {(-1078), 0, (-3381), 0, (-2628)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray2, false, (-2315));
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1078), 0, (-3381), 0, (-2628)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_INT_ARRAY, (-2003));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1646);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BYTE_ARRAY, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_INT_ARRAY, 1004);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1), (-4645));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'u', (-519));
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-110);
      doubleArray0[1] = 73.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-193.20027), Integer.MAX_VALUE);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-110.0), 73.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-110);
      objectArray0[1] = (Object) 73.0;
      ArrayUtils.swap(objectArray0, 15, (int) (byte) (-110), 15);
      assertEquals(2, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 2103, 2472);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2472, 13);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-2404.2334), 1254);
      assertEquals(2, doubleArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {(-110.0), 73.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_INT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_INT_ARRAY, (-1342));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-112));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)52, arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean2 = ArrayUtils.contains(arrayUtils0.EMPTY_INT_ARRAY, 2);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = true;
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2778));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[2] = (-1);
      intArray0[3] = (-2778);
      intArray0[4] = (-2778);
      intArray0[5] = (-1);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 10);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2778), (-2778), (-1), (-2778), (-2778), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-2778), (-2778), (-1), (-2778), (-2778), (-1)}, intArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-25);
      shortArray0[1] = (short)48;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-25), (short)48}, shortArray1);
      assertArrayEquals(new short[] {(short) (-25), (short)48}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray1, 508, 1212);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-2778), (-2778), (-1), (-2778), (-2778), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-2778), (-2778), (-1), (-2778), (-2778), (-1)}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 936;
      longArray0[1] = 1056L;
      longArray0[2] = (-1L);
      longArray0[3] = 1023L;
      longArray0[4] = 2248L;
      longArray0[5] = 1L;
      longArray0[6] = 1784L;
      longArray0[7] = (long) 936;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1619), 936);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {936L, 1056L, (-1L), 1023L, 2248L, 1L, 1784L, 936L}, longArray0);
      assertArrayEquals(new long[] {936L, 1056L, (-1L), 1023L, 2248L, 1L, 1784L, 936L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {''}, charArray0);
      assertArrayEquals(new char[] {'', ''}, charArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 14L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {14L}, longArray0);
      
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)79, (-132));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {14L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("o)`iz,eFrqV/|7|X");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("o)`iz,eFrqV/|7|X");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)68;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)68);
      assertEquals(2, byteArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte)68}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-20);
      longArray0[1] = (-28L);
      longArray0[2] = (long) (byte)68;
      longArray0[3] = (long) (byte) (-20);
      longArray0[4] = (long) (byte)68;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, (int) (byte)68);
      assertEquals(4, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-28L), 68L, (-20L), 68L}, longArray1);
      assertArrayEquals(new long[] {(-20L), (-28L), 68L, (-20L), 68L}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)68;
      intArray0[1] = (int) (byte) (-20);
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)68;
      intArray0[4] = (int) (byte) (-20);
      intArray0[5] = 4002;
      intArray0[6] = (int) (byte)68;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {68, (-20), 1, 68, (-20), 4002, 68}, intArray0);
      assertArrayEquals(new int[] {68, (-20), 1, 68, (-20), 4002, 68}, intArray1);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-102);
      floatArray0[1] = (-972.1F);
      floatArray0[2] = (float) (byte) (-102);
      floatArray0[3] = (float) (byte) (-102);
      floatArray0[4] = (float) (byte)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-102.0F), (-972.1F), (-102.0F), (-102.0F), 2.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, (int) (byte)2);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-102.0F), 2.0F, (-102.0F), (-972.1F), (-102.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-102);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-102.0), (-102.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-102.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-102);
      intArray0[1] = (int) (byte) (-102);
      intArray0[2] = (int) (byte) (-102);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -102, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Float float0 = Float.valueOf(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1094.642041942635));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1094.6421F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      floatArray0[4] = float1;
      floatArray0[5] = float0;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = (float) floatArray0[4];
      ArrayUtils.shift(floatArray1, (-851));
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1094.6421F), 1.0F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 431;
      floatArray0[1] = (float) 431;
      floatArray0[2] = (-153.0F);
      floatArray0[3] = (float) 431;
      floatArray0[4] = (float) 431;
      floatArray0[5] = (float) 431;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 431;
      ArrayUtils.shift(floatArray0, (-1599), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {431.0F, (-153.0F), 431.0F, 431.0F, 431.0F, 1.0F, 431.0F, 431.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift((float[]) null, 30);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1827.12F;
      floatArray0[1] = (-640.5F);
      floatArray0[2] = (-1252.0F);
      ArrayUtils.shift(floatArray0, (-344), (-344), 114);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1827.12F, (-640.5F), (-1252.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurrences((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, (Object) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_FLOAT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1478), (-1478));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1478);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1478);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1478);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-1478.0));
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1478.0), 0.0, (-1478.0), 0.0, (-1478.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 1.0, (-2778));
      assertEquals(3, doubleArray1.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(bitSet0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1478);
      floatArray0[3] = (float) (-1478);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-2778);
      floatArray0[6] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-1110));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-2778.0F), (-1.0F), 1.0F, (-1.0F), (-1478.0F), (-1478.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      int int0 = (-1632);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-1632));
      assertEquals(1, doubleArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = (long) (byte)4;
      longArray0[1] = (long) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1954), (int) (byte)4);
      assertEquals(10, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {4L, (-1L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1954);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1706.5599F, (-1));
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-1954.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)4;
      longArray0[1] = (long) (byte)115;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1949), (int) (byte)4);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {4L, 115L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) (byte) (-3);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (-1949), (int) (byte) (-3));
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, (-3L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 59);
      assertEquals(0, integerArray0.length);
      assertNull(integer0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(59, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 59;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-372L));
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {59L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)99;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)104, (byte)0, (byte)0, (byte) (-1), (byte)0, (byte)0, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)104, (byte)0, (byte)0, (byte) (-1), (byte)0, (byte)0, (byte)99}, byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)104;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-643L));
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {104L}, longArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)104;
      objectArray0[1] = (Object) 104L;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 59);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Long long0 = new Long(59);
      assertNotNull(long0);
      assertEquals(59L, (long)long0);
      
      Long long1 = new Long(59);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(59L, (long)long1);
      
      Long long2 = new Long((-1312L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-1312L), (long)long2);
      
      Long long3 = new Long((-3142L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-3142L), (long)long3);
      
      Long long4 = Long.getLong("_s", (-2128L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertEquals((-2128L), (long)long4);
      
      Long long5 = new Long((-804L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertEquals((-804L), (long)long5);
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long0;
      Long long6 = new Long(59);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long4));
      assertEquals(59L, (long)long6);
      
      longArray0[1] = long6;
      longArray0[4] = long3;
      longArray0[5] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2128L));
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {59L, 59L, (-2128L), (-2128L), (-3142L), (-2128L)}, longArray1);
      
      MutableInt mutableInt0 = new MutableInt(8192);
      assertEquals(8192, mutableInt0.intValue());
      assertEquals(8192.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(8192L, mutableInt0.longValue());
      assertEquals(8192, (int)mutableInt0.toInteger());
      assertEquals("8192", mutableInt0.toString());
      assertEquals(8192, (int)mutableInt0.getValue());
      assertEquals((short)8192, mutableInt0.shortValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(8192.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0, "The String did not match any specified value");
      assertEquals(8192, mutableInt0.intValue());
      assertEquals(8192.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(8192L, mutableInt0.longValue());
      assertEquals(8192, (int)mutableInt0.toInteger());
      assertEquals("8192", mutableInt0.toString());
      assertEquals(8192, (int)mutableInt0.getValue());
      assertEquals((short)8192, mutableInt0.shortValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(8192.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(string0);
      assertEquals("8192", string0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)49;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)16);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)49, (byte)1, (byte)0, (byte)1, (byte)1, (byte) (-127), (byte)0, (byte)0, (byte)49}, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)1, (byte)0, (byte)1, (byte)1, (byte) (-127), (byte)0, (byte)0, (byte)49}, byteArray1);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1288490189);
      assertNotNull(integer0);
      assertEquals(1288490189, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      Integer integer3 = Integer.getInteger("x},}uM9|cQvlz e\"y", integer2);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((byte)16);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(16, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer((byte) (-127));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals((-127), (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(317);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(317, (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(1404);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertEquals(1404, (int)integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer((int) integerArray0[5]);
      assertEquals(8, integerArray0.length);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertEquals(317, (int)integer8);
      
      integerArray0[7] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)49);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1288490189, 1, 0, 16, (-127), 317, 1404, 317}, intArray0);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1, (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, 92);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-904));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)5;
      doubleArray0[5] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1958.53736854957, (int) (byte)0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {5.0, 0.0, 0.0, 0.0, 5.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)948;
      shortArray0[1] = (short) (byte)5;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)948, (short)5}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-2790);
      longArray0[3] = (long) (byte)0;
      longArray0[5] = (long) (byte) (-102);
      longArray0[6] = (long) (byte)2;
      ArrayUtils.shift(longArray0, (int) (byte)2, (-107), 3226);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-2790L), 0L, 0L, (-102L), 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 117, 3);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_CHAR_ARRAY, '}');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Float float0 = new Float((-294.1F));
      assertNotNull(float0);
      assertEquals((-294.1F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1961.732780111439));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1961.7328F), (float)float1, 0.01F);
      
      Float float2 = new Float((float) 117);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(117.0F, (float)float2, 0.01F);
      
      Float float3 = new Float(446.717F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(446.717F, (float)float3, 0.01F);
      
      Float float4 = new Float(2229.320031103586);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(2229.32F, (float)float4, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY, (float) 117);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_BYTE_ARRAY, 117, 2, 2147078613);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_CHAR_ARRAY, 2147078613, 665, 117);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1328L);
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((double) (-1328L));
      assertNotNull(float0);
      assertEquals((-1328.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1275.1F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1275.1F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (-1328L));
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1328.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.1);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1328.0F), 1275.1F, (-1328.0F), 0.1F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '`';
      charArray0[2] = 'g';
      charArray0[3] = 'Q';
      charArray0[4] = 'j';
      charArray0[5] = 'N';
      charArray0[6] = 'O';
      charArray0[7] = 'I';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '^');
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\\', '`', 'g', 'Q', 'j', 'N', 'O', 'I'}, charArray0);
      assertArrayEquals(new char[] {'\\', '`', 'g', 'Q', 'j', 'N', 'O', 'I'}, charArray1);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean("void");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("ffZs");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("void");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("ffZs");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean2);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(2175.725046209778);
      assertNotNull(float0);
      assertEquals(2175.725F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals(3, floatArray0.length);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2175.725F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals(3, floatArray0.length);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2175.725F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2175.725F, 2175.725F, 2175.725F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)465;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)3511;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)100;
      ArrayUtils.shift(shortArray0, (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)100, (short)465, (short)0, (short)3511}, shortArray0);
      
      Character character0 = Character.valueOf('v');
      assertNotNull(character0);
      assertEquals('v', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('v', object0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'v';
      charArray0[6] = 'B';
      charArray0[7] = '|';
      charArray0[8] = 'B';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'v', 'v', 'B', 'B', 'B', 'v', 'B', '|', 'B'}, charArray1);
      assertArrayEquals(new char[] {'v', 'v', 'B', 'B', 'B', 'v', 'B', '|', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_SHORT_ARRAY, (-2288), (-2288), (-979));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = new Integer((short) (-1195));
      assertEquals((-1195), int0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_LONG_ARRAY, (java.util.Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-3381);
      longArray0[1] = 1L;
      longArray0[2] = (long) (short)1;
      MockRandom mockRandom0 = new MockRandom((short)1);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, (-3381L), 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byteArray0[0] = byte0;
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1228L);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      double double0 = mockRandom1.nextDouble();
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0, double0, 0.01);
      
      int int1 = mockRandom0.nextInt();
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = (-3142L);
      longArray0[3] = 4053L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2376L));
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1L), 0L, (-3142L), 4053L}, longArray0);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 0L;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      ArrayUtils.swap(charArray0, (-4754), (-4754), 2147407751);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)5;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 10, (int) (byte)0);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {5.0, 0.0, 0.0, 10.0, 10.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double double0 = (-775.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-775.0));
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {5.0, 0.0, 0.0, 10.0, 10.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, integerArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotNull(integerArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-351), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -351, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 759, 1518);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.0, 9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char char0 = '';
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, (-1), 14, 14);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, Integer.MAX_VALUE, (int) (byte)88, 111);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_CHAR_ARRAY, (java.util.Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      ArrayUtils.swap(intArray0, (int) (short)0, (-84), (int) (short)0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'e';
      ArrayUtils.shift(charArray0, (-84), 2, (-2172));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'i', 'e'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', 'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'F';
      charArray0[2] = 'M';
      charArray0[3] = 'G';
      ArrayUtils.shift(charArray0, 1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'G', 'g', 'F', 'M'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[5] = (-3802.0F);
      floatArray0[6] = 1263.8828F;
      floatArray0[7] = 5353.11F;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, (-3802.0F), 1263.8828F, 5353.11F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'V';
      charArray0[2] = '/';
      charArray0[3] = '';
      charArray0[4] = '3';
      charArray0[5] = '<';
      charArray0[6] = 'F';
      charArray0[7] = 'b';
      charArray0[8] = 'r';
      ArrayUtils.shuffle(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'V', '/', '', '3', '<', 'F', 'b', 'r', 'o'}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (int) '3';
      intArray0[2] = (int) 'V';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1), 51, 86}, intArray0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      char[] charArray0 = ArrayUtils.add(arrayUtils0.EMPTY_CHAR_ARRAY, 'g');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      
      ArrayUtils.reverse((long[]) null, 65536, 426);
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (short)329, 2532, 2248.78326294627);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'A';
      charArray0[2] = '<';
      charArray0[3] = '$';
      charArray0[4] = 'S';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'A', '<', '$', 'S'}, charArray0);
      assertArrayEquals(new char[] {'V', 'V', 'A', '<', '$', 'S', 'A', '<', '$', 'S'}, charArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 3184);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3184, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (int) (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_DOUBLE_ARRAY, arrayUtils0.EMPTY_DOUBLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '');
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {''}, charArray0);
      assertArrayEquals(new char[] {'', ''}, charArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) arrayUtils0;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      char[] charArray0 = ArrayUtils.add((char[]) null, 'z');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-130L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-130L), (long)long1);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, 1290L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-130L), 1.5);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) long1, 580);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(long1.equals((Object)long0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = ArrayUtils.insert((-1), arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (byte)52);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)52);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-3381);
      longArray0[2] = (long) (short) (-3381);
      longArray0[3] = (long) (short) (-3381);
      longArray0[4] = (long) (short) (-3381);
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short)0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-3381L), (-3381L), (-3381L), (-3381L), 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-3381L), (-3381L), (-3381L), (-3381L), 1L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1110);
      intArray0[1] = (-1110);
      intArray0[2] = (-1110);
      intArray0[3] = (-1110);
      intArray0[4] = (-1110);
      intArray0[5] = (-1110);
      intArray0[6] = (-1110);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1110), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1110, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.shift(booleanArray1, 1, (-1), 1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-12);
      intArray0[1] = (-1702);
      intArray0[2] = 5218;
      intArray0[3] = (-3696);
      intArray0[4] = 1;
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-12), 5218, (-3696), 1}, intArray1);
      assertArrayEquals(new int[] {(-12), (-1702), 5218, (-3696), 1}, intArray0);
      
      ArrayUtils.reverse(intArray1, (-3696), (-2778));
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-12), 5218, (-3696), 1}, intArray1);
      assertArrayEquals(new int[] {(-12), (-1702), 5218, (-3696), 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 260.1F;
      floatArray0[1] = (-1513.4F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1513.4F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (double) 260.1F);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1513.4000244140625)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      ArrayUtils.shift(byteArray0, (int) (byte) (-99));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-48)}, byteArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-487.2718F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-487.2718F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'h';
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1156.866F));
      assertNull(floatArray0);
      
      Random.setNextRandom(4);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1421.4858F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3237.6548F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2616.0F));
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1421.4858F), 0.0F, 3237.6548F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1421.4858F), 0.0F, 3237.6548F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(arrayUtils0.EMPTY_THROWABLE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Class<Boolean[]> class0 = Boolean[].class;
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY, class0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-2322), 37);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 0, 0, (-2473));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (-2473));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1092;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)1092, (short)0, (short)0, (short)0}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(floatArray0, 2259.5767F);
      assertEquals(0, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertTrue(int1 == int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 91.0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (int) (byte) (-15), (byte) (-57));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -15, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)4;
      doubleArray0[1] = 124.0;
      doubleArray0[2] = (double) (byte)115;
      doubleArray0[3] = (-2227.4);
      ArrayUtils.shift(doubleArray0, 1136);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4.0, 124.0, 115.0, (-2227.4)}, doubleArray0, 0.01);
      
      Double double0 = new Double(66.0);
      assertNotNull(double0);
      assertEquals(66.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[3];
      Double double1 = new Double((-4116.873980506728));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-4116.873980506728), (double)double1, 0.01);
      
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 124.0;
      doubleArray1[2] = (Double) 115.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)74;
      doubleArray0[1] = (double) (byte)74;
      doubleArray0[2] = (double) (byte)74;
      ArrayUtils.shift(doubleArray0, (int) (byte)74);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 74.0, 74.0, 74.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Double double0 = new Double((-3505.18));
      assertNotNull(double0);
      assertEquals((-3505.18), (double)double0, 0.01);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) 74.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2583.8563261449;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-1);
      ArrayUtils.shift(doubleArray0, (-1470));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), 2583.8563261449, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(longArray0, 0, 2070787803);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-160L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, 212.149841, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Character[] characterArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 117, 3);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.contains(arrayUtils0.EMPTY_CHAR_ARRAY, '}');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      Float float0 = new Float((-294.1F));
      assertNotNull(float0);
      assertEquals((-294.1F), (float)float0, 0.01F);
      
      Float float1 = new Float((-1961.732780111439));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1961.7328F), (float)float1, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'L');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (int) (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2993), 2, (-2993));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 3143, 2, (-3574));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-2993), (-2993), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, (-3990));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_LONG_ARRAY, 1, (-3990));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_DOUBLE_ARRAY, 466.0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_SHORT_ARRAY, (short)34);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_LONG_ARRAY, (-230));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (int) (short) (-1885));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-775);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-775));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-775)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-775), (short) (-775)}, shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-775);
      doubleArray0[1] = (double) (short) (-775);
      doubleArray0[2] = (double) (short) (-775);
      doubleArray0[4] = (double) (short) (-775);
      ArrayUtils.shift(doubleArray0, (int) (short) (-775));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-775.0), (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-775);
      floatArray0[1] = (float) (short) (-775);
      ArrayUtils.swap(floatArray0, 0, 3226, 3226);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-775.0F), (-775.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 3226);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-775.0), (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-775.0), (-775.0), (-775.0), 0.0, (-775.0)}, doubleArray1, 0.01);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-3574));
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-775)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-775)}, shortArray2);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 3226;
      ArrayUtils.swap(doubleArray2, (int) (short) (-775), Integer.MAX_VALUE, 0);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3226.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      
      double[] doubleArray0 = new double[9];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)74);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3385;
      intArray0[1] = 690;
      intArray0[2] = (-1888);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 53;
      int[] intArray1 = ArrayUtils.add(intArray0, 2, 0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3385, 690, (-1888), 0, 0, 53}, intArray0);
      assertArrayEquals(new int[] {3385, 690, 0, (-1888), 0, 0, 53}, intArray1);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 53;
      intArray2[1] = 3385;
      intArray2[2] = 690;
      intArray2[3] = 690;
      intArray2[4] = 53;
      intArray2[5] = 0;
      intArray2[6] = 690;
      intArray2[7] = (-1888);
      int[] intArray3 = ArrayUtils.removeElements(intArray0, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray3.length);
      assertEquals(8, intArray2.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotNull(intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {3385, 690, (-1888), 0, 0, 53}, intArray0);
      assertArrayEquals(new int[] {0}, intArray3);
      assertArrayEquals(new int[] {53, 3385, 690, 690, 53, 0, 690, (-1888)}, intArray2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1971.5978);
      doubleArray0[1] = (double) 690;
      doubleArray0[2] = (double) 53;
      doubleArray0[3] = (double) 690;
      doubleArray0[4] = (double) 690;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(53, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 3385;
      intArray0[1] = 690;
      intArray0[2] = (-1888);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 53;
      int[] intArray1 = ArrayUtils.add(intArray0, 2, 0);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3385, 690, (-1888), 0, 0, 53}, intArray0);
      assertArrayEquals(new int[] {3385, 690, 0, (-1888), 0, 0, 53}, intArray1);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 53;
      intArray2[1] = 3385;
      intArray2[2] = 690;
      intArray2[3] = 690;
      intArray2[4] = 53;
      intArray2[5] = 0;
      intArray2[6] = 690;
      intArray2[7] = (-1888);
      int[] intArray3 = ArrayUtils.removeElements(intArray0, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray3.length);
      assertEquals(8, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {3385, 690, (-1888), 0, 0, 53}, intArray0);
      assertArrayEquals(new int[] {0}, intArray3);
      assertArrayEquals(new int[] {53, 3385, 690, 690, 53, 0, 690, (-1888)}, intArray2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)1762;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1822);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-321);
      shortArray0[8] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1822));
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)3, (short)1762, (short)0, (short) (-1822), (short)0, (short) (-321), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)3, (short)1762, (short)0, (short)0, (short) (-321), (short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 1.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-17);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 772);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-562);
      shortArray0[9] = (short) (-2877);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(10, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-562), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short) (-2877)}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short) (-153));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 63);
      assertEquals(7, booleanArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-1), 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 34;
      intArray0[1] = 34;
      intArray0[2] = 34;
      intArray0[3] = 34;
      intArray0[4] = 34;
      intArray0[5] = 34;
      intArray0[6] = 34;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(34, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte)2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      ArrayUtils.swap(byteArray0, 2, (int) (byte) (-55), (int) (byte)2);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte) (-55);
      floatArray0[7] = (float) (byte) (-55);
      int int0 = ArrayUtils.indexOf(floatArray0, (-4342.7856F));
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2.0F, (-1.0F), 2.0F, 2.0F, 2.0F, 0.0F, (-55.0F), (-55.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)2, (int) (byte) (-102), (int) (byte)2);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 5218);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5218, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = ';';
      charArray0[2] = ' ';
      int int0 = (-1209);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, (-1209));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1209, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)2, (int) (byte)0, (int) (byte)2);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-102);
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)2, (int) (byte) (-102), 192);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)2}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-102);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 5218);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5218, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      int int0 = 1407;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 1407);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1407, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {466}, intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-3171.42F));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3171.42F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3171.42F)}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      Integer integer0 = new Integer(466);
      assertNotNull(integer0);
      assertEquals(466, (int)integer0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-3171.42F));
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3171.42F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3171.42F)}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-5);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 260.1F;
      floatArray0[1] = (-1513.4F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 66.0F;
      floatArray0[5] = (-1422.4692F);
      floatArray0[6] = 1614.9445F;
      floatArray0[7] = Float.NaN;
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, 1614.9445F, (-1422.4692F), 66.0F, (-1.0F), 0.0F, (-1513.4F), 260.1F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-160L);
      int int0 = ArrayUtils.indexOf(longArray0, (-160L));
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-160L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 1);
      assertEquals(5, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1722;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1722}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 116, 116);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 116);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'Q';
      charArray0[2] = '^';
      charArray0[3] = '@';
      charArray0[4] = 'M';
      charArray0[5] = 'z';
      charArray0[6] = 'G';
      charArray0[7] = '7';
      boolean boolean0 = ArrayUtils.contains(charArray0, '@');
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {',', 'Q', '^', '@', 'M', 'z', 'G', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 59);
      assertEquals(0, integerArray0.length);
      assertNull(integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) 59;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) 59;
      doubleArray0[4] = (double) 59;
      doubleArray0[5] = (double) 59;
      doubleArray0[6] = (double) 59;
      doubleArray0[7] = (double) 59;
      int[] intArray0 = new int[8];
      intArray0[0] = 59;
      intArray0[1] = 89;
      intArray0[2] = 59;
      intArray0[3] = 59;
      intArray0[4] = 59;
      intArray0[5] = 59;
      intArray0[6] = 59;
      intArray0[7] = 59;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.subarray(characterArray0, (-1478), (-1478));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '3');
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(2, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-160L);
      doubleArray0[2] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-737.2736498169), (double) 0);
      assertEquals(3, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, (-160.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (int) (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-21);
      Double double0 = new Double((byte) (-21));
      assertNotNull(double0);
      assertEquals((-21.0), (double)double0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) double0, "]m#<z");
      assertNotNull(string0);
      assertEquals("-21.0", string0);
      
      Long[] longArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'P';
      longArray0[1] = (long) 'P';
      longArray0[2] = (long) ';';
      longArray0[3] = (long) 'P';
      longArray0[4] = (long) ';';
      longArray0[5] = (long) 'P';
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-476);
      intArray0[1] = (int) 'P';
      intArray0[2] = (int) 'P';
      intArray0[3] = (int) ';';
      intArray0[4] = (int) 'P';
      intArray0[5] = (int) 'P';
      intArray0[6] = (int) 'P';
      intArray0[7] = (int) 'P';
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {80, 80, 80, 80, 59, 80, 80, (-476)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'P';
      doubleArray0[1] = (double) 'P';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 2886);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2886, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2657L;
      longArray0[1] = 2514L;
      longArray0[2] = (-4755L);
      ArrayUtils.reverse(longArray0, (-2146715872), (-2144842708));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {2657L, 2514L, (-4755L)}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-4755L);
      doubleArray0[1] = (double) (-2144842708);
      doubleArray0[2] = (double) (-2144842708);
      doubleArray0[3] = (double) (-4755L);
      doubleArray0[4] = (double) (-4755L);
      doubleArray0[5] = (double) 2657L;
      doubleArray0[6] = (double) (-2146715872);
      doubleArray0[7] = (double) 2514L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-2146715872), (-2.144842708E9));
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-4755.0), (-2.144842708E9), (-2.144842708E9), (-4755.0), (-4755.0), 2657.0, (-2.146715872E9), 2514.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)5, floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1856.525F), 103);
      assertEquals(6, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      Float[] floatArray2 = new Float[1];
      Float float0 = new Float((-3381.0F));
      assertNotNull(float0);
      assertEquals((-3381.0F), (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals((-3381.0F), object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray2, "");
      assertEquals(1, floatArray2.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Float float1 = new Float(1316.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)object0, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1316.0F, (float)float1, 0.01F);
      
      Object object1 = ArrayUtils.toPrimitive((Object) float1);
      assertNotNull(object1);
      assertNotEquals((float)float1, (float)object0, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)float0));
      assertEquals(1316.0F, object1);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 117L;
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, (-1L));
      assertNull(longArray1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 3889);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      long[] longArray0 = new long[2];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 746L, (-797));
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'b';
      charArray0[2] = '';
      charArray0[3] = '>';
      charArray0[4] = 'y';
      charArray0[5] = 'n';
      charArray0[6] = 'X';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2520, (-1));
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'o', 'b', '', '>', 'y', 'n', 'X'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'y';
      doubleArray0[1] = (double) 'X';
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) '';
      doubleArray0[4] = (double) 'o';
      doubleArray0[5] = (double) 'y';
      doubleArray0[6] = (double) 'X';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.5);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, 121.0, 88.0, 121.0, 127.0, 111.0, 121.0, 88.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {121.0, 88.0, 121.0, 127.0, 111.0, 121.0, 88.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)92;
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)88, (byte)44, (byte)92, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, 4264, 4);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, 1.0);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.hashCode((Object) boolean0);
      assertFalse(int1 == int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = (Object) boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) ",dT{ik7W32B[~", (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3981;
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 3981}, intArray0);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (double) (byte)91);
      assertEquals(3, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Short short0 = new Short((short)34);
      assertNotNull(short0);
      assertEquals((short)34, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)34, object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "m9\"s");
      assertNull(stringArray0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object1);
      assertEquals((short)34, object1);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1016L, (int) (short)34);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2431.5662F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 54;
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 't';
      Character character1 = Character.valueOf('t');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('t', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertEquals('t', (char)character2);
      
      characterArray0[3] = character2;
      Character character3 = new Character('C');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertEquals('C', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('t');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertEquals('t', (char)character4);
      
      characterArray0[4] = character4;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.5, 1.5);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'Q';
      charArray0[2] = 'E';
      charArray0[3] = '#';
      charArray0[4] = '';
      charArray0[5] = '\"';
      charArray0[6] = 'k';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-492), 98);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'0', 'Q', 'E', '#', '', '\"', 'k'}, charArray0);
      assertArrayEquals(new char[] {'0', 'Q', 'E', '#', '', '\"', 'k'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte) (-96);
      shortArray0[3] = (short) (byte) (-96);
      shortArray0[4] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[6] = (short) (byte) (-96);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-96), (short) (-96), (short)2, (short)0, (short) (-96)}, shortArray0);
      
      Float float0 = new Float((float) 0L);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      ArrayUtils.shift(shortArray0, (int) (short) (-1191));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-96), (short) (-96), (short)2, (short)0, (short) (-96), (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2025);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-2025)}, shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, 0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray2));
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BitSet bitSet0 = new BitSet(8);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.flip((int) (short) (-2025), (int) (short) (-2025));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -2025
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96)}, byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-96);
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short) (byte) (-96);
      shortArray0[3] = (short) (byte) (-96);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-96), (short) (-96), (short) (-96), (short) (-96)}, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-96);
      floatArray0[1] = (float) (short) (-96);
      floatArray0[2] = (float) (short) (-96);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 115, 2);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-96.0F), (-96.0F), (-96.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_LONG_ARRAY, 2354L);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSorted(arrayUtils0.EMPTY_SHORT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float float0 = new Float((-1266.4756F));
      assertNotNull(float0);
      assertEquals((-1266.4756F), (float)float0, 0.01F);
      
      int[] intArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_INT_ARRAY, (-98), (int) (short) (-15));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte) (-102);
      shortArray0[3] = (short) (byte) (-102);
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte) (-102);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-102), (short) (-102), (short)2, (short)2, (short) (-102)}, shortArray0);
      
      Float float0 = new Float((float) 0L);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BitSet bitSet0 = new BitSet(0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.flip(74, (int) (short)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 74 > toIndex: 2
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-997);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-2241);
      shortArray0[4] = (short)1344;
      shortArray0[5] = (short) (-647);
      shortArray0[6] = (short)2522;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-47), (short) (-997), (short) (-1), (short) (-2241), (short)1344, (short) (-647), (short)2522}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertEquals(9, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-18);
      shortArray0[1] = (short) (-2177);
      shortArray0[0] = (short)443;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short) (-1);
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)96;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)96}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)99;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)104, (byte)0, (byte)0, (byte) (-1), (byte)0, (byte)0, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)0, (byte)104, (byte)0, (byte)0, (byte) (-1), (byte)0, (byte)0, (byte)99}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      int int0 = 1418;
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 1418, 1418);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1418, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 1316, 2002);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1316, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-498), (-498));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)940;
      shortArray0[1] = (short)940;
      shortArray0[2] = (short)940;
      shortArray0[3] = (short)940;
      shortArray0[4] = (short)940;
      shortArray0[5] = (short)940;
      shortArray0[6] = (short)940;
      shortArray0[7] = (short) (-1303);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1933), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1933, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      intArray0[4] = (-2778);
      Byte byte0 = new Byte((byte) (-48));
      assertNotNull(byte0);
      assertEquals((byte) (-48), (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0, (int) (byte)2, 2);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1556.6381F));
      assertEquals(1, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)940;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1933), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1933, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      short short0 = (short)182;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)13;
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)182;
      shortArray0[5] = (short)182;
      shortArray0[6] = (short)3;
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)182;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)182, shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 34;
      intArray0[1] = 34;
      intArray0[2] = 34;
      intArray0[3] = 34;
      intArray0[4] = 34;
      short[] shortArray0 = ArrayUtils.insert((int) (short)182, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-2790);
      longArray0[1] = (long) (short)0;
      ArrayUtils.shift(longArray0, 34, (int) (short)0, 2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2790L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)52;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-89));
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-74), (byte)52}, byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)52;
      doubleArray0[1] = (double) (byte) (-74);
      doubleArray0[2] = (double) (byte)52;
      doubleArray0[3] = (double) (byte) (-74);
      doubleArray0[4] = (double) (byte) (-89);
      doubleArray0[5] = (double) (byte)52;
      doubleArray0[6] = (double) (byte) (-74);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {52.0, (-74.0), 52.0, (-74.0), (-89.0), 52.0, (-74.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray2 = ArrayUtils.insert((-919), intArray0, intArray1);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      MutableInt mutableInt0 = new MutableInt((int) (byte)52);
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(52, mutableInt0.intValue());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(52L, mutableInt0.longValue());
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals("52", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      int int1 = ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals(52.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(52, mutableInt0.intValue());
      assertEquals(52.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(52L, mutableInt0.longValue());
      assertEquals((byte)52, mutableInt0.byteValue());
      assertEquals(52, (int)mutableInt0.toInteger());
      assertEquals((short)52, mutableInt0.shortValue());
      assertEquals(52, (int)mutableInt0.getValue());
      assertEquals("52", mutableInt0.toString());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 371;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 371}, intArray0);
      assertArrayEquals(new int[] {0, 0, 371}, intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1935;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1935}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)1935}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)1935, (int) (short)1935);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)1935}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)1935}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 54;
      int int1 = 358;
      intArray0[2] = 358;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 54, 358}, intArray0);
      assertArrayEquals(new int[] {0, 54, 358}, intArray1);
      
      short[] shortArray0 = new short[7];
      short short0 = (short)0;
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2313);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)13;
      short short1 = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2711;
      short short2 = (short)182;
      shortArray0[6] = (short)182;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(54, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (-4529);
      longArray0[5] = (-1160L);
      longArray0[6] = (long) (byte)2;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1935;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1935, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1935, (short)2, (short)2, (short)2}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)2, (int) (short)2);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)1935, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1935, (short)2, (short)2, (short)2}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)329;
      shortArray0[1] = (short)282;
      double[] doubleArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-688.0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)282);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)329, (short)282, (short)1, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)329, (short)282, (short)1, (short)0, (short)282}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)282);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)282}, shortArray2);
      
      short[] shortArray3 = new short[1];
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      shortArray3[0] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray3, (short) (-3484), 47);
      assertEquals(1, shortArray3.length);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray3);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-1993L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, Integer.MAX_VALUE);
      assertEquals(2, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, (-1993L)}, longArray0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1935;
      shortArray0[1] = (short)1935;
      shortArray0[2] = (short)1935;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1935);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1935, (short)1935, (short)1935}, shortArray0);
      assertArrayEquals(new short[] {(short)1935, (short)1935, (short)1935, (short)1935}, shortArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1935, (int) (short)1935);
      assertEquals(3, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)1935, (short)1935, (short)1935}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      byte[] byteArray1 = null;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)38}, byteArray0);
      assertArrayEquals(new byte[] {(byte)38}, byteArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte)38;
      intArray0[2] = (int) (byte)38;
      int int0 = 2145867783;
      ArrayUtils.swap(intArray0, 38, 2145867783, 1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1, 38, 38}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)38, (int) (byte)38);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)80, (int) (byte) (-16));
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.shift((float[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)5, (byte) (-72), (byte) (-33), (byte) (-1), (byte)0, (byte)0}, byteArray0);
      
      Character character0 = Character.valueOf('n');
      assertNotNull(character0);
      assertEquals('n', (char)character0);
      
      String string0 = ArrayUtils.toString((Object) character0);
      assertNotNull(string0);
      assertEquals("n", string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (byte) (-33);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-72);
      shortArray0[6] = (short) (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)51);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-33), (short) (-1), (short)0, (short)0, (short) (-72), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 1742;
      intArray0[0] = 1742;
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 64;
      intArray0[3] = 48;
      intArray0[4] = 4463;
      intArray0[5] = 0;
      int int2 = (-1160);
      intArray0[6] = (-1160);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4463, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Object object0 = ArrayUtils.get((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (-884));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_STRING_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = ArrayUtils.get(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, 2792);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNull(integer0);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'm';
      charArray0[2] = '#';
      charArray0[3] = 'A';
      charArray0[4] = 'T';
      charArray0[5] = ')';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'?', 'm', '#', 'A', 'T', ')'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = ';';
      charArray0[2] = ' ';
      charArray0[3] = 'i';
      charArray0[4] = 'a';
      charArray0[5] = 'e';
      charArray0[6] = '\\';
      charArray0[7] = ':';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'P', ';', ' ', 'i', 'a', 'e', '\\', ':'}, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 68.69F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {68.69F}, floatArray1, 0.01F);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-138);
      shortArray0[4] = (short) (-1117);
      shortArray0[5] = (short) (-1013);
      shortArray0[6] = (short)0;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-138), (short) (-1117), (short) (-1013), (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      Object[] objectArray0 = new Object[0];
      Long long0 = new Long((-1160L));
      assertNotNull(long0);
      assertEquals((-1160L), (long)long0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-4529), (Object) long0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-1160L), object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object2);
      assertEquals((-1160L), object2);
      
      Object object3 = ArrayUtils.get(objectArray0, (int) 2);
      assertEquals(0, objectArray0.length);
      assertNull(object3);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1160L), (-2322));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-2322);
      ArrayUtils.swap(longArray0, (-1), (-4529), (-1937));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-2322L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'k');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'k', 'k'}, charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short) (-153);
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (byte)98;
      longArray0[4] = (-2147483648L);
      longArray0[5] = (long) 1;
      longArray0[6] = 1999L;
      longArray0[7] = (long) (short) (-153);
      ArrayUtils.swap(longArray0, 2679, (int) character0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, (-153L), 1L, 98L, (-2147483648L), 1L, 1999L, (-153L)}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-153);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-3381);
      shortArray0[5] = (short)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-153), (short)0, (short)0, (short)0, (short) (-3381), (short)1}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-228));
      assertNotNull(integer0);
      assertEquals((-228), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger((String) null);
      assertNull(integer1);
      
      integerArray0[1] = integerArray0[0];
      Integer integer2 = new Integer((-697));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-697), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((short) (-153));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-153), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(96);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(96, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = ArrayUtils.get(integerArray0, (int)  (-153));
      assertEquals(5, integerArray0.length);
      assertNull(integer5);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2778);
      intArray0[1] = (-2778);
      intArray0[3] = (-2778);
      intArray0[4] = (-2778);
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, (-2778));
      assertEquals(0, integerArray0.length);
      assertNull(integer0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'T';
      charArray0[2] = 'X';
      ArrayUtils.reverse(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'X', 'T', 'e'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'X', 'T', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte)5);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)97}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)0, (byte)97}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      Integer integer0 = new Integer((-1556));
      assertNotNull(integer0);
      assertEquals((-1556), (int)integer0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1556);
      intArray0[1] = (-1556);
      intArray0[2] = 8;
      intArray0[3] = (-3179);
      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1556), 8, 8);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)5;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-112), (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-112), (byte)5}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      Boolean boolean0 = new Boolean("java.lang.Float");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3970.6255382822);
      doubleArray0[1] = (-3970.6255382822);
      doubleArray0[2] = (-3970.6255382822);
      int int0 = 142;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 142, (double) 142);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 142, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-18);
      shortArray0[1] = (short) (-2177);
      shortArray0[0] = (short)443;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short) (-1);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short) (-18));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)443, (short) (-2177), (short)0, (short)3, (short) (-1), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurrences((Object[]) arrayUtils0.EMPTY_METHOD_ARRAY, (Object) null);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1195));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_FLOAT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Integer[] integerArray0 = new Integer[0];
      Integer integer0 = ArrayUtils.get(integerArray0, 59);
      assertEquals(0, integerArray0.length);
      assertNull(integer0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 11, (-3096), (int) (short)0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse(charArray0, (-1967), (int) (short)0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-731.865264660511);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-576.1132860912273);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, 3711.04407815969);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 1.0, 0.0, 0.0, (-731.865264660511), 0.0, (-576.1132860912273), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3711.04407815969, (-1.0), 1.0, 0.0, 0.0, (-731.865264660511), 0.0, (-576.1132860912273), 0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 0, 2248, 0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 0);
      assertEquals(0, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = '\"';
      charArray0[2] = '!';
      charArray0[3] = '?';
      charArray0[4] = 's';
      charArray0[5] = '@';
      charArray0[6] = 'H';
      ArrayUtils.reverse(charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'H', '@', 's', '?', '!', '\"', ';'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 0, (Object) null);
      assertEquals(5, objectArray0.length);
      assertNull(object1);
      
      objectArray0[1] = null;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 1390, 51, 2402);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 5218;
      intArray0[1] = 0;
      intArray0[2] = 2402;
      intArray0[3] = 1390;
      intArray0[4] = 2402;
      intArray0[5] = 2402;
      intArray0[6] = 1390;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1185));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1185, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      int int0 = 471;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 471);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 471, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      Short[] shortArray0 = ArrayUtils.insert(1741, arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_SHORT_ARRAY, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_DOUBLE_ARRAY, 244);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 244, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-4529);
      longArray0[1] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1919);
      shortArray0[1] = (short) (-1919);
      shortArray0[2] = (short) (-1919);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) " gI30)?G");
      assertNotNull(object0);
      assertEquals(" gI30)?G", object0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, 59);
      assertEquals(0, objectArray0.length);
      assertNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1514));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("0");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R', (-968));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = ArrayUtils.add(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-110));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray0);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-2288), (-1), (-979));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean3 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-21844);
      shortArray0[1] = (short) (-21844);
      shortArray0[2] = (short) (-21844);
      shortArray0[3] = (short) (-21844);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-21844), (short) (-21844), (short) (-21844), (short) (-21844)}, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'f';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'f');
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f', 'f'}, charArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      ArrayUtils.reverse((Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1514));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R');
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("0");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'R', (-968));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_BYTE_ARRAY, arrayUtils0.EMPTY_BYTE_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(arrayUtils0.EMPTY_BOOLEAN_ARRAY, (-1470));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1470, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("bfn3FgK(0gCmf!");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)90;
      ArrayUtils.shift(shortArray0, 469);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)90}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-12));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'R');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, 1927, 1927);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1927;
      floatArray0[1] = (float) 1927;
      floatArray0[2] = (float) 1927;
      floatArray0[3] = (float) 1927;
      floatArray0[4] = (float) 1927;
      floatArray0[5] = (float) 1927;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = "u*r";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "java.lang.Float");
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      ArrayUtils.shift((char[]) null, 915);
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 98, (byte)48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_FLOAT_ARRAY, 812, (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), 24, 407);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 47, (short) (-4650));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 59);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 59, (short) (-4650));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 59);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 59, (short) (-4650));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-809));
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
      
      short[] shortArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1514));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)13);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1511L);
      longArray0[1] = 417L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = (-394L);
      longArray0[5] = (-4142L);
      longArray0[6] = 3310L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1511L), 417L, 1L, 0L, (-394L), (-4142L), 3310L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1511L), 417L, 1L, 0L, (-394L), (-4142L), 3310L}, longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)466;
      shortArray0[2] = (short)64;
      shortArray0[3] = (short)1931;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2407);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)466, (short)64, (short)1931, (short)0, (short)0, (short)1, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)466, (short)64, (short)1931, (short)0, (short)0, (short)1, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 59);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Class<MutableInt>[] classArray0 = (Class<MutableInt>[]) Array.newInstance(Class.class, 3);
      Class<MutableInt> class0 = MutableInt.class;
      classArray0[0] = class0;
      Class<MutableInt> class1 = MutableInt.class;
      classArray0[1] = class1;
      Class<MutableInt> class2 = MutableInt.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 6);
      Class<Character> class0 = Character.class;
      classArray0[0] = class0;
      Class<Character> class1 = Character.class;
      classArray0[1] = class1;
      Class<Character> class2 = Character.class;
      classArray0[2] = class2;
      Class<Character> class3 = Character.class;
      classArray0[3] = class3;
      Class<Character> class4 = Character.class;
      classArray0[4] = class4;
      Class<Character> class5 = Character.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)8);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Byte byte0 = new Byte((byte) (-73));
      assertNotNull(byte0);
      assertEquals((byte) (-73), (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("-73", string0);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      short short0 = (short)36;
      Short short1 = new Short((short)36);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)36, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)36);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)36, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-1217));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-1217), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short) (-1217));
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-1217), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short(short0);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short1));
      assertEquals((short)36, (short)short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short)128);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)128, (short)short6);
      
      shortArray0[5] = short6;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      Character character0 = new Character('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      String string0 = ArrayUtils.toString((Object) character0, "^<3Z@K9Zfu");
      assertNotNull(string0);
      assertEquals(".", string0);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short) (-2341));
      assertNotNull(short0);
      assertEquals((short) (-2341), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2341));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-2341), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals(4, shortArray0.length);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-2341), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[1]);
      assertEquals(4, shortArray0.length);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertEquals((short) (-2341), (short)short3);
      
      shortArray0[3] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)shortArray0[0];
      longArray0[1] = (long) (short) (-2341);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-2341);
      intArray0[1] = (int) (short) (-2341);
      intArray0[2] = (int) '.';
      intArray0[3] = (int) (short)shortArray0[3];
      intArray0[4] = (int) '.';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }
}
